/* Capstone Disassembly Engine, https://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2024 */
/* Automatically generated file by Capstone's LLVM TableGen Disassembler Backend. */

/* LLVM-commit: <commit> */
/* LLVM-tag: <tag> */

/* Do not edit. */

/* Capstone's LLVM TableGen Backends: */
/* https://github.com/capstone-engine/llvm-capstone */

#include <capstone/platform.h>
#include "../../cs_priv.h"

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
static MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
#ifndef CAPSTONE_DIET
  static const char AsmStrs[] = {
  /* 0 */ "ftoq31 \0"
  /* 8 */ "rem64 \0"
  /* 15 */ "div64 \0"
  /* 22 */ "csub.a \0"
  /* 30 */ "subsc.a \0"
  /* 39 */ "addsc.a \0"
  /* 48 */ "difsc.a \0"
  /* 57 */ "cadd.a \0"
  /* 65 */ "ld.a \0"
  /* 71 */ "tlbprobe.a \0"
  /* 83 */ "ge.a \0"
  /* 89 */ "jne.a \0"
  /* 96 */ "addih.a \0"
  /* 105 */ "movh.a \0"
  /* 113 */ "sel.a \0"
  /* 120 */ "csubn.a \0"
  /* 129 */ "caddn.a \0"
  /* 138 */ "seln.a \0"
  /* 146 */ "swap.a \0"
  /* 154 */ "jeq.a \0"
  /* 161 */ "lt.a \0"
  /* 167 */ "st.a \0"
  /* 173 */ "mov.a \0"
  /* 180 */ "nez.a \0"
  /* 187 */ "jz.a \0"
  /* 193 */ "jnz.a \0"
  /* 200 */ "eqz.a \0"
  /* 207 */ "movz.a \0"
  /* 215 */ "mov.aa \0"
  /* 223 */ "ld.da \0"
  /* 230 */ "st.da \0"
  /* 237 */ "lea \0"
  /* 242 */ "lha \0"
  /* 247 */ "sha \0"
  /* 252 */ "ja \0"
  /* 256 */ "jla \0"
  /* 261 */ "fcalla \0"
  /* 269 */ "crc32.b \0"
  /* 278 */ "sha.b \0"
  /* 285 */ "sub.b \0"
  /* 292 */ "add.b \0"
  /* 299 */ "ld.b \0"
  /* 305 */ "absdif.b \0"
  /* 315 */ "sh.b \0"
  /* 321 */ "min.b \0"
  /* 328 */ "clo.b \0"
  /* 335 */ "eq.b \0"
  /* 341 */ "abs.b \0"
  /* 348 */ "subs.b \0"
  /* 356 */ "adds.b \0"
  /* 364 */ "absdifs.b \0"
  /* 375 */ "cls.b \0"
  /* 382 */ "abss.b \0"
  /* 390 */ "sat.b \0"
  /* 397 */ "dvinit.b \0"
  /* 407 */ "lt.b \0"
  /* 413 */ "st.b \0"
  /* 419 */ "max.b \0"
  /* 426 */ "eqany.b \0"
  /* 435 */ "clz.b \0"
  /* 442 */ "csub \0"
  /* 448 */ "msub \0"
  /* 454 */ "rsub \0"
  /* 460 */ "subc \0"
  /* 466 */ "addc \0"
  /* 472 */ "ld.d \0"
  /* 478 */ "st.d \0"
  /* 484 */ "mov.d \0"
  /* 491 */ "cadd \0"
  /* 497 */ "madd \0"
  /* 503 */ "jned \0"
  /* 509 */ "nand \0"
  /* 515 */ "and.ge \0"
  /* 523 */ "sh.ge \0"
  /* 530 */ "xor.ge \0"
  /* 538 */ "jge \0"
  /* 543 */ "bmerge \0"
  /* 551 */ "disable \0"
  /* 560 */ "shuffle \0"
  /* 569 */ "and.ne \0"
  /* 577 */ "sh.ne \0"
  /* 584 */ "xor.ne \0"
  /* 592 */ "jne \0"
  /* 597 */ "restore \0"
  /* 606 */ "msub.f \0"
  /* 614 */ "madd.f \0"
  /* 622 */ "qseed.f \0"
  /* 631 */ "neg.f \0"
  /* 638 */ "mul.f \0"
  /* 645 */ "min.f \0"
  /* 652 */ "cmp.f \0"
  /* 659 */ "abs.f \0"
  /* 666 */ "div.f \0"
  /* 673 */ "max.f \0"
  /* 680 */ "msub.df \0"
  /* 689 */ "madd.df \0"
  /* 698 */ "qseed.df \0"
  /* 708 */ "neg.df \0"
  /* 716 */ "mul.df \0"
  /* 724 */ "min.df \0"
  /* 732 */ "cmp.df \0"
  /* 740 */ "abs.df \0"
  /* 748 */ "div.df \0"
  /* 756 */ "max.df \0"
  /* 764 */ "ftodf \0"
  /* 771 */ "itodf \0"
  /* 778 */ "ultodf \0"
  /* 786 */ "utodf \0"
  /* 793 */ "absdif \0"
  /* 801 */ "q31tof \0"
  /* 809 */ "dftof \0"
  /* 816 */ "itof \0"
  /* 822 */ "hptof \0"
  /* 829 */ "utof \0"
  /* 835 */ "sha.h \0"
  /* 842 */ "msub.h \0"
  /* 850 */ "msubad.h \0"
  /* 860 */ "madd.h \0"
  /* 868 */ "ld.h \0"
  /* 874 */ "absdif.h \0"
  /* 884 */ "sh.h \0"
  /* 890 */ "mul.h \0"
  /* 897 */ "msubm.h \0"
  /* 906 */ "msubadm.h \0"
  /* 917 */ "maddm.h \0"
  /* 926 */ "mulm.h \0"
  /* 934 */ "maddsum.h \0"
  /* 945 */ "min.h \0"
  /* 952 */ "clo.h \0"
  /* 959 */ "eq.h \0"
  /* 965 */ "msubr.h \0"
  /* 974 */ "msubadr.h \0"
  /* 985 */ "maddr.h \0"
  /* 994 */ "mulr.h \0"
  /* 1002 */ "maddsur.h \0"
  /* 1013 */ "abs.h \0"
  /* 1020 */ "msubs.h \0"
  /* 1029 */ "msubads.h \0"
  /* 1040 */ "madds.h \0"
  /* 1049 */ "absdifs.h \0"
  /* 1060 */ "cls.h \0"
  /* 1067 */ "msubms.h \0"
  /* 1077 */ "msubadms.h \0"
  /* 1089 */ "maddms.h \0"
  /* 1099 */ "mulms.h \0"
  /* 1108 */ "maddsums.h \0"
  /* 1120 */ "msubrs.h \0"
  /* 1130 */ "msubadrs.h \0"
  /* 1142 */ "maddrs.h \0"
  /* 1152 */ "maddsurs.h \0"
  /* 1164 */ "abss.h \0"
  /* 1172 */ "maddsus.h \0"
  /* 1183 */ "sat.h \0"
  /* 1190 */ "dvinit.h \0"
  /* 1200 */ "lt.h \0"
  /* 1206 */ "st.h \0"
  /* 1212 */ "maddsu.h \0"
  /* 1222 */ "max.h \0"
  /* 1229 */ "eqany.h \0"
  /* 1238 */ "clz.h \0"
  /* 1245 */ "addih \0"
  /* 1252 */ "sh \0"
  /* 1256 */ "movh \0"
  /* 1262 */ "tlbprobe.i \0"
  /* 1274 */ "addi \0"
  /* 1280 */ "jnei \0"
  /* 1286 */ "ji \0"
  /* 1290 */ "jli \0"
  /* 1295 */ "fcalli \0"
  /* 1303 */ "dftoi \0"
  /* 1310 */ "dvadj \0"
  /* 1317 */ "unpack \0"
  /* 1325 */ "imask \0"
  /* 1332 */ "sel \0"
  /* 1337 */ "updfl \0"
  /* 1344 */ "jl \0"
  /* 1348 */ "fcall \0"
  /* 1355 */ "syscall \0"
  /* 1364 */ "dftol \0"
  /* 1371 */ "mul \0"
  /* 1376 */ "dftoul \0"
  /* 1384 */ "msubm \0"
  /* 1391 */ "maddm \0"
  /* 1398 */ "mulm \0"
  /* 1404 */ "csubn \0"
  /* 1411 */ "crcn \0"
  /* 1417 */ "caddn \0"
  /* 1424 */ "andn \0"
  /* 1430 */ "ixmin \0"
  /* 1437 */ "dftoin \0"
  /* 1445 */ "seln \0"
  /* 1451 */ "orn \0"
  /* 1456 */ "cmovn \0"
  /* 1463 */ "clo \0"
  /* 1468 */ "tlbmap \0"
  /* 1476 */ "tlbdemap \0"
  /* 1486 */ "dvstep \0"
  /* 1494 */ "ftohp \0"
  /* 1501 */ "loop \0"
  /* 1507 */ "msub.q \0"
  /* 1515 */ "madd.q \0"
  /* 1523 */ "ld.q \0"
  /* 1529 */ "mul.q \0"
  /* 1536 */ "msubm.q \0"
  /* 1545 */ "maddm.q \0"
  /* 1554 */ "msubr.q \0"
  /* 1563 */ "maddr.q \0"
  /* 1572 */ "mulr.q \0"
  /* 1580 */ "msubs.q \0"
  /* 1589 */ "madds.q \0"
  /* 1598 */ "msubrs.q \0"
  /* 1608 */ "maddrs.q \0"
  /* 1618 */ "st.q \0"
  /* 1624 */ "and.eq \0"
  /* 1632 */ "sh.eq \0"
  /* 1639 */ "xor.eq \0"
  /* 1647 */ "jeq \0"
  /* 1652 */ "mfcr \0"
  /* 1658 */ "mtcr \0"
  /* 1664 */ "xnor \0"
  /* 1670 */ "xor \0"
  /* 1675 */ "bisr \0"
  /* 1681 */ "dextr \0"
  /* 1688 */ "shas \0"
  /* 1694 */ "abs \0"
  /* 1699 */ "msubs \0"
  /* 1706 */ "rsubs \0"
  /* 1713 */ "madds \0"
  /* 1720 */ "absdifs \0"
  /* 1729 */ "cls \0"
  /* 1734 */ "muls \0"
  /* 1740 */ "msubms \0"
  /* 1748 */ "maddms \0"
  /* 1756 */ "abss \0"
  /* 1762 */ "and.and.t \0"
  /* 1773 */ "sh.and.t \0"
  /* 1783 */ "or.and.t \0"
  /* 1793 */ "sh.nand.t \0"
  /* 1804 */ "and.andn.t \0"
  /* 1816 */ "sh.andn.t \0"
  /* 1827 */ "or.andn.t \0"
  /* 1838 */ "sh.orn.t \0"
  /* 1848 */ "insn.t \0"
  /* 1856 */ "and.or.t \0"
  /* 1866 */ "sh.or.t \0"
  /* 1875 */ "or.or.t \0"
  /* 1884 */ "and.nor.t \0"
  /* 1895 */ "sh.nor.t \0"
  /* 1905 */ "or.nor.t \0"
  /* 1915 */ "sh.xnor.t \0"
  /* 1926 */ "sh.xor.t \0"
  /* 1936 */ "ins.t \0"
  /* 1943 */ "st.t \0"
  /* 1949 */ "jz.t \0"
  /* 1955 */ "jnz.t \0"
  /* 1962 */ "addsc.at \0"
  /* 1972 */ "bsplit \0"
  /* 1980 */ "dvinit \0"
  /* 1988 */ "and.lt \0"
  /* 1996 */ "sh.lt \0"
  /* 2003 */ "xor.lt \0"
  /* 2011 */ "jlt \0"
  /* 2016 */ "not \0"
  /* 2021 */ "insert \0"
  /* 2029 */ "ldmst \0"
  /* 2036 */ "rem64.u \0"
  /* 2045 */ "div64.u \0"
  /* 2054 */ "msub.u \0"
  /* 2062 */ "madd.u \0"
  /* 2070 */ "and.ge.u \0"
  /* 2080 */ "sh.ge.u \0"
  /* 2089 */ "xor.ge.u \0"
  /* 2099 */ "jge.u \0"
  /* 2106 */ "mul.u \0"
  /* 2113 */ "msubm.u \0"
  /* 2122 */ "maddm.u \0"
  /* 2131 */ "mulm.u \0"
  /* 2139 */ "ixmin.u \0"
  /* 2148 */ "dvstep.u \0"
  /* 2158 */ "extr.u \0"
  /* 2166 */ "msubs.u \0"
  /* 2175 */ "rsubs.u \0"
  /* 2184 */ "madds.u \0"
  /* 2193 */ "muls.u \0"
  /* 2201 */ "msubms.u \0"
  /* 2211 */ "maddms.u \0"
  /* 2221 */ "dvinit.u \0"
  /* 2231 */ "and.lt.u \0"
  /* 2241 */ "sh.lt.u \0"
  /* 2250 */ "xor.lt.u \0"
  /* 2260 */ "jlt.u \0"
  /* 2267 */ "div.u \0"
  /* 2274 */ "mov.u \0"
  /* 2281 */ "ixmax.u \0"
  /* 2290 */ "ld.bu \0"
  /* 2297 */ "min.bu \0"
  /* 2305 */ "subs.bu \0"
  /* 2314 */ "adds.bu \0"
  /* 2323 */ "sat.bu \0"
  /* 2331 */ "dvinit.bu \0"
  /* 2342 */ "lt.bu \0"
  /* 2349 */ "max.bu \0"
  /* 2357 */ "ld.hu \0"
  /* 2364 */ "min.hu \0"
  /* 2372 */ "subs.hu \0"
  /* 2381 */ "adds.hu \0"
  /* 2390 */ "sat.hu \0"
  /* 2398 */ "dvinit.hu \0"
  /* 2409 */ "lt.hu \0"
  /* 2416 */ "max.hu \0"
  /* 2424 */ "dftou \0"
  /* 2431 */ "loopu \0"
  /* 2438 */ "lt.wu \0"
  /* 2445 */ "div \0"
  /* 2450 */ "cmov \0"
  /* 2456 */ "crc32b.w \0"
  /* 2466 */ "ld.w \0"
  /* 2472 */ "crc32l.w \0"
  /* 2482 */ "swap.w \0"
  /* 2490 */ "eq.w \0"
  /* 2496 */ "lt.w \0"
  /* 2502 */ "popcnt.w \0"
  /* 2512 */ "st.w \0"
  /* 2518 */ "ixmax \0"
  /* 2525 */ "subx \0"
  /* 2531 */ "ldlcx \0"
  /* 2538 */ "stlcx \0"
  /* 2545 */ "lducx \0"
  /* 2552 */ "stucx \0"
  /* 2559 */ "addx \0"
  /* 2565 */ "parity \0"
  /* 2573 */ "ftoq31z \0"
  /* 2582 */ "jgez \0"
  /* 2588 */ "jlez \0"
  /* 2594 */ "dftoiz \0"
  /* 2602 */ "jz \0"
  /* 2606 */ "clz \0"
  /* 2611 */ "dftolz \0"
  /* 2619 */ "dftoulz \0"
  /* 2628 */ "jnz \0"
  /* 2633 */ "jgtz \0"
  /* 2639 */ "jltz \0"
  /* 2645 */ "dftouz \0"
  /* 2653 */ "swap.a [+\0"
  /* 2663 */ "st.a [+\0"
  /* 2671 */ "st.da [+\0"
  /* 2680 */ "st.b [+\0"
  /* 2688 */ "st.d [+\0"
  /* 2696 */ "st.h [+\0"
  /* 2704 */ "cachea.i [+\0"
  /* 2716 */ "cachei.i [+\0"
  /* 2728 */ "cachea.wi [+\0"
  /* 2741 */ "cachei.wi [+\0"
  /* 2754 */ "st.q [+\0"
  /* 2762 */ "ldmst [+\0"
  /* 2771 */ "cachea.w [+\0"
  /* 2783 */ "cachei.w [+\0"
  /* 2795 */ "swapmsk.w [+\0"
  /* 2808 */ "cmpswap.w [+\0"
  /* 2821 */ "st.w [+\0"
  /* 2829 */ "# XRay Function Patchable RET.\0"
  /* 2860 */ "# XRay Typed Event Log.\0"
  /* 2884 */ "# XRay Custom Event Log.\0"
  /* 2909 */ "# XRay Function Enter.\0"
  /* 2932 */ "# XRay Tail Call Exit.\0"
  /* 2955 */ "# XRay Function Exit.\0"
  /* 2977 */ "LIFETIME_END\0"
  /* 2990 */ "PSEUDO_PROBE\0"
  /* 3003 */ "BUNDLE\0"
  /* 3010 */ "DBG_VALUE\0"
  /* 3020 */ "DBG_INSTR_REF\0"
  /* 3034 */ "DBG_PHI\0"
  /* 3042 */ "DBG_LABEL\0"
  /* 3052 */ "LIFETIME_START\0"
  /* 3067 */ "DBG_VALUE_LIST\0"
  /* 3082 */ "swap.a [\0"
  /* 3091 */ "st.a [\0"
  /* 3098 */ "st.da [\0"
  /* 3106 */ "st.b [\0"
  /* 3113 */ "st.d [\0"
  /* 3120 */ "st.h [\0"
  /* 3127 */ "cachea.i [\0"
  /* 3138 */ "cachei.i [\0"
  /* 3149 */ "cachea.wi [\0"
  /* 3161 */ "cachei.wi [\0"
  /* 3173 */ "st.q [\0"
  /* 3180 */ "ldmst [\0"
  /* 3188 */ "cachea.w [\0"
  /* 3199 */ "cachei.w [\0"
  /* 3210 */ "swapmsk.w [\0"
  /* 3222 */ "cmpswap.w [\0"
  /* 3234 */ "st.w [\0"
  /* 3241 */ "ldlcx [\0"
  /* 3249 */ "stlcx [\0"
  /* 3257 */ "lducx [\0"
  /* 3265 */ "stucx [\0"
  /* 3273 */ "tlbflush.a\0"
  /* 3284 */ "tlbflush.b\0"
  /* 3295 */ "dsync\0"
  /* 3301 */ "isync\0"
  /* 3307 */ "rfe\0"
  /* 3311 */ "enable\0"
  /* 3318 */ "disable\0"
  /* 3326 */ "debug\0"
  /* 3332 */ "# FEntry call\0"
  /* 3346 */ "rfm\0"
  /* 3350 */ "nop\0"
  /* 3354 */ "fret\0"
  /* 3359 */ "wait\0"
  /* 3364 */ "trapv\0"
  /* 3370 */ "trapsv\0"
  /* 3377 */ "rstv\0"
  /* 3382 */ "rslcx\0"
  /* 3388 */ "svlcx\0"
};
#endif // CAPSTONE_DIET

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    3011U,	// DBG_VALUE
    3068U,	// DBG_VALUE_LIST
    3021U,	// DBG_INSTR_REF
    3035U,	// DBG_PHI
    3043U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    3004U,	// BUNDLE
    3053U,	// LIFETIME_START
    2978U,	// LIFETIME_END
    2991U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    3333U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2910U,	// PATCHABLE_FUNCTION_ENTER
    2830U,	// PATCHABLE_RET
    2956U,	// PATCHABLE_FUNCTION_EXIT
    2933U,	// PATCHABLE_TAIL_CALL
    2885U,	// PATCHABLE_EVENT_CALL
    2861U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// MEMBARRIER
    0U,	// JUMP_TABLE_DEBUG_INFO
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_CONSTANT_POOL
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_CONSTANT_FOLD_BARRIER
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_ATOMICRMW_UINC_WRAP
    0U,	// G_ATOMICRMW_UDEC_WRAP
    0U,	// G_FENCE
    0U,	// G_PREFETCH
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_INTRINSIC_CONVERGENT
    0U,	// G_INTRINSIC_CONVERGENT_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FEXP10
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FLDEXP
    0U,	// G_FFREXP
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_GET_FPENV
    0U,	// G_SET_FPENV
    0U,	// G_RESET_FPENV
    0U,	// G_GET_FPMODE
    0U,	// G_SET_FPMODE
    0U,	// G_RESET_FPMODE
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STACKSAVE
    0U,	// G_STACKRESTORE
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_STRICT_FLDEXP
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_FMAXIMUM
    0U,	// G_VECREDUCE_FMINIMUM
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    4461U,	// ABSDIFS_B_rr_v110
    5146U,	// ABSDIFS_H_rr
    5817U,	// ABSDIFS_rc
    5817U,	// ABSDIFS_rr
    4402U,	// ABSDIF_B_rr
    4971U,	// ABSDIF_H_rr
    536875802U,	// ABSDIF_rc
    4890U,	// ABSDIF_rr
    34607487U,	// ABSS_B_rr_v110
    34608269U,	// ABSS_H_rr
    34608861U,	// ABSS_rr
    33558870U,	// ABS_B_rr
    33559269U,	// ABS_DF_rr
    33559188U,	// ABS_F_rr
    33559542U,	// ABS_H_rr
    33560223U,	// ABS_rr
    536875475U,	// ADDC_rc
    4563U,	// ADDC_rr
    1073746017U,	// ADDIH_A_rlc
    1073747166U,	// ADDIH_rlc
    1610618107U,	// ADDI_rlc
    2148538283U,	// ADDSC_AT_rr
    6059U,	// ADDSC_AT_rr_v110
    2148536360U,	// ADDSC_A_rr
    4136U,	// ADDSC_A_rr_v110
    4136U,	// ADDSC_A_srrs
    2684358696U,	// ADDSC_A_srrs_v110
    6411U,	// ADDS_BU_rr_v110
    4453U,	// ADDS_B_rr
    5138U,	// ADDS_H
    6478U,	// ADDS_HU
    6282U,	// ADDS_U
    536877194U,	// ADDS_U_rc
    536876723U,	// ADDS_rc
    5811U,	// ADDS_rr
    33560243U,	// ADDS_srr
    536877568U,	// ADDX_rc
    6656U,	// ADDX_rr
    4155U,	// ADD_A_rr
    35655739U,	// ADD_A_src
    33558587U,	// ADD_A_srr
    4389U,	// ADD_B_rr
    3291484851U,	// ADD_DF_rrr
    3291484776U,	// ADD_F_rrr
    4958U,	// ADD_H_rr
    536875501U,	// ADD_rc
    4589U,	// ADD_rr
    35656173U,	// ADD_src
    3758100973U,	// ADD_src_15a
    3758100973U,	// ADD_src_a15
    33559021U,	// ADD_srr
    4589U,	// ADD_srr_15a
    4589U,	// ADD_srr_a15
    5905U,	// ANDN_T
    536876433U,	// ANDN_rc
    5521U,	// ANDN_rr
    5901U,	// AND_ANDN_T
    5859U,	// AND_AND_T
    536876633U,	// AND_EQ_rc
    5721U,	// AND_EQ_rr
    536877079U,	// AND_GE_U_rc
    6167U,	// AND_GE_U_rr
    536875524U,	// AND_GE_rc
    4612U,	// AND_GE_rr
    536877240U,	// AND_LT_U_rc
    6328U,	// AND_LT_U_rr
    536876997U,	// AND_LT_rc
    6085U,	// AND_LT_rr
    536875578U,	// AND_NE_rc
    4666U,	// AND_NE_rr
    5981U,	// AND_NOR_T
    5953U,	// AND_OR_T
    5863U,	// AND_T
    536875519U,	// AND_rc
    4607U,	// AND_rr
    37753343U,	// AND_sc
    37753343U,	// AND_sc_v110
    33559039U,	// AND_srr
    33559039U,	// AND_srr_v110
    9868U,	// BISR_rc
    13964U,	// BISR_sc
    13964U,	// BISR_sc_v110
    4640U,	// BMERGAE_rr_v110
    4640U,	// BMERGE_rr
    33560501U,	// BSPLIT_rr
    33560501U,	// BSPLIT_rr_v110
    5315640U,	// CACHEA_I_bo_bso
    5381176U,	// CACHEA_I_bo_c
    5446712U,	// CACHEA_I_bo_pos
    5315217U,	// CACHEA_I_bo_pre
    269368U,	// CACHEA_I_bo_r
    5315662U,	// CACHEA_WI_bo_bso
    5381198U,	// CACHEA_WI_bo_c
    5446734U,	// CACHEA_WI_bo_pos
    5315241U,	// CACHEA_WI_bo_pre
    269390U,	// CACHEA_WI_bo_r
    5315701U,	// CACHEA_W_bo_bso
    5381237U,	// CACHEA_W_bo_c
    5446773U,	// CACHEA_W_bo_pos
    5315284U,	// CACHEA_W_bo_pre
    269429U,	// CACHEA_W_bo_r
    5315651U,	// CACHEI_I_bo_bso
    5446723U,	// CACHEI_I_bo_pos
    5315229U,	// CACHEI_I_bo_pre
    5315674U,	// CACHEI_WI_bo_bso
    5446746U,	// CACHEI_WI_bo_pos
    5315254U,	// CACHEI_WI_bo_pre
    5315712U,	// CACHEI_W_bo_bso
    5446784U,	// CACHEI_W_bo_pos
    5315296U,	// CACHEI_W_bo_pre
    2148536450U,	// CADDN_A_rcr_v110
    607129730U,	// CADDN_A_rrr_v110
    2148537738U,	// CADDN_rcr
    607131018U,	// CADDN_rrr
    3758101898U,	// CADDN_src
    5514U,	// CADDN_srr_v110
    2148536378U,	// CADD_A_rcr_v110
    607129658U,	// CADD_A_rrr_v110
    2148536812U,	// CADD_rcr
    607130092U,	// CADD_rrr
    3758100972U,	// CADD_src
    4588U,	// CADD_srr_v110
    16647U,	// CALLA_b
    333073U,	// CALLI_rr
    333073U,	// CALLI_rr_v110
    17734U,	// CALL_b
    21830U,	// CALL_sb
    33558857U,	// CLO_B_rr_v110
    33559481U,	// CLO_H_rr
    33559992U,	// CLO_rr
    33558904U,	// CLS_B_rr_v110
    33559589U,	// CLS_H_rr
    33560258U,	// CLS_rr
    33558964U,	// CLZ_B_rr_v110
    33559767U,	// CLZ_H_rr
    33561135U,	// CLZ_rr
    3758101937U,	// CMOVN_src
    5553U,	// CMOVN_srr
    3758102931U,	// CMOV_src
    6547U,	// CMOV_srr
    107048087U,	// CMPSWAP_W_bo_bso
    107113623U,	// CMPSWAP_W_bo_c
    107179159U,	// CMPSWAP_W_bo_pos
    107047673U,	// CMPSWAP_W_bo_pre
    7761047U,	// CMPSWAP_W_bo_r
    4829U,	// CMP_DF_rr
    4749U,	// CMP_F_rr
    2148538777U,	// CRC32B_W_rr
    2148538793U,	// CRC32L_W_rr
    2148536590U,	// CRC32_B_rr
    607131012U,	// CRCN_rrr
    607129721U,	// CSUBN_A__rrr_v110
    607131005U,	// CSUBN_rrr
    607129623U,	// CSUB_A__rrr_v110
    607130043U,	// CSUB_rrr
    3327U,	// DEBUG_sr
    3327U,	// DEBUG_sys
    5778U,	// DEXTR_rrpw
    5778U,	// DEXTR_rrrr
    33559338U,	// DFTOF_rr
    33559966U,	// DFTOIN_rr
    33561123U,	// DFTOIZ_rr
    33559832U,	// DFTOI_rr
    33561140U,	// DFTOLZ_rr
    33559893U,	// DFTOL_rr
    33561148U,	// DFTOULZ_rr
    33559905U,	// DFTOUL_rr
    33561174U,	// DFTOUZ_rr
    33560953U,	// DFTOU_rr
    4145U,	// DIFSC_A_rr_v110
    3319U,	// DISABLE_sys
    332328U,	// DISABLE_sys_1
    6142U,	// DIV64_U_rr
    4112U,	// DIV64_rr
    4845U,	// DIV_DF_rr
    4763U,	// DIV_F_rr
    6364U,	// DIV_U_rr
    6542U,	// DIV_rr
    3296U,	// DSYNC_sys
    3358594335U,	// DVADJ_rrr
    3358594335U,	// DVADJ_rrr_v110
    33559839U,	// DVADJ_srr_v110
    6428U,	// DVINIT_BU_rr
    6428U,	// DVINIT_BU_rr_v110
    4494U,	// DVINIT_B_rr
    4494U,	// DVINIT_B_rr_v110
    6495U,	// DVINIT_HU_rr
    6495U,	// DVINIT_HU_rr_v110
    5287U,	// DVINIT_H_rr
    5287U,	// DVINIT_H_rr_v110
    6318U,	// DVINIT_U_rr
    6318U,	// DVINIT_U_rr_v110
    6077U,	// DVINIT_rr
    6077U,	// DVINIT_rr_v110
    3358595173U,	// DVSTEP_U_rrr
    3358595173U,	// DVSTEP_U_rrrv110
    33560677U,	// DVSTEP_Uv110
    3358594511U,	// DVSTEP_rrr
    3358594511U,	// DVSTEP_rrrv110
    33560015U,	// DVSTEPv110
    3312U,	// ENABLE_sys
    536875435U,	// EQANY_B_rc
    4523U,	// EQANY_B_rr
    536876238U,	// EQANY_H_rc
    5326U,	// EQANY_H_rr
    33558729U,	// EQZ_A_rr
    4252U,	// EQ_A_rr
    4432U,	// EQ_B_rr
    5056U,	// EQ_H_rr
    6587U,	// EQ_W_rr
    536876637U,	// EQ_rc
    5725U,	// EQ_rr
    3758102109U,	// EQ_src
    5725U,	// EQ_srr
    1073748079U,	// EXTR_U_rrpw
    6255U,	// EXTR_U_rrrr
    1073748079U,	// EXTR_U_rrrw
    1073747603U,	// EXTR_rrpw
    5779U,	// EXTR_rrrr
    1073747603U,	// EXTR_rrrw
    16646U,	// FCALLA_b
    333072U,	// FCALLA_i
    17733U,	// FCALL_b
    3355U,	// FRET_sr
    3355U,	// FRET_sys
    33559293U,	// FTODF_rr
    33560023U,	// FTOHP_rr
    33559967U,	// FTOIN_rr
    33561124U,	// FTOIZ_rr
    33559833U,	// FTOI_rr
    6670U,	// FTOQ31Z_rr
    4097U,	// FTOQ31_rr
    33561175U,	// FTOUZ_rr
    33560954U,	// FTOU_rr
    4180U,	// GE_A_rr
    536877083U,	// GE_U_rc
    6171U,	// GE_U_rr
    536875528U,	// GE_rc
    4616U,	// GE_rr
    33559351U,	// HPTOF_rr
    1074795822U,	// IMASK_rcpw
    674239790U,	// IMASK_rcrw
    1074795822U,	// IMASK_rrpw
    1074795822U,	// IMASK_rrrw
    6118U,	// INSERT_rcpw
    6118U,	// INSERT_rcrr
    1073747942U,	// INSERT_rcrw
    6118U,	// INSERT_rrpw
    6118U,	// INSERT_rrrr
    6118U,	// INSERT_rrrw
    5945U,	// INSN_T
    6033U,	// INS_T
    3302U,	// ISYNC_sys
    33559300U,	// ITODF_rr
    33559345U,	// ITOF_rr
    3358595306U,	// IXMAX_U_rrr
    3358595543U,	// IXMAX_rrr
    3358595164U,	// IXMIN_U_rrr
    3358594455U,	// IXMIN_rrr
    16637U,	// JA_b
    1610616987U,	// JEQ_A_brr
    1612715632U,	// JEQ_brc
    1610618480U,	// JEQ_brr
    8394352U,	// JEQ_sbc1
    8394352U,	// JEQ_sbc2
    8394352U,	// JEQ_sbc_v110
    2147489392U,	// JEQ_sbr1
    2147489392U,	// JEQ_sbr2
    2147489392U,	// JEQ_sbr_v110
    9443863U,	// JGEZ_sbr
    9443863U,	// JGEZ_sbr_v110
    1621104692U,	// JGE_U_brc
    1610618932U,	// JGE_U_brr
    1612714523U,	// JGE_brc
    1610617371U,	// JGE_brr
    9443914U,	// JGTZ_sbr
    9443914U,	// JGTZ_sbr_v110
    333063U,	// JI_rr
    333063U,	// JI_rr_v110
    333063U,	// JI_sbr_v110
    333063U,	// JI_sr
    16641U,	// JLA_b
    9443869U,	// JLEZ_sbr
    9443869U,	// JLEZ_sbr_v110
    333067U,	// JLI_rr
    333067U,	// JLI_rr_v110
    9443920U,	// JLTZ_sbr
    9443920U,	// JLTZ_sbr_v110
    1621104853U,	// JLT_U_brc
    1610619093U,	// JLT_U_brr
    1621104604U,	// JLT_brc
    1610618844U,	// JLT_brr
    17729U,	// JL_b
    1621103096U,	// JNED_brc
    1610617336U,	// JNED_brr
    1621103873U,	// JNEI_brc
    1610618113U,	// JNEI_brr
    1610616922U,	// JNE_A_brr
    1612714577U,	// JNE_brc
    1610617425U,	// JNE_brr
    8393297U,	// JNE_sbc1
    8393297U,	// JNE_sbc2
    8393297U,	// JNE_sbc_v110
    2147488337U,	// JNE_sbr1
    2147488337U,	// JNE_sbr2
    2147488337U,	// JNE_sbr_v110
    11538626U,	// JNZ_A_brr
    9441474U,	// JNZ_A_sbr
    1610618788U,	// JNZ_T_brn
    2147489700U,	// JNZ_T_sbrn
    2147489700U,	// JNZ_T_sbrn_v110
    12589637U,	// JNZ_sb
    12589637U,	// JNZ_sb_v110
    9443909U,	// JNZ_sbr
    9443909U,	// JNZ_sbr_v110
    11538620U,	// JZ_A_brr
    9441468U,	// JZ_A_sbr
    1610618782U,	// JZ_T_brn
    2147489694U,	// JZ_T_sbrn
    2147489694U,	// JZ_T_sbrn_v110
    12589611U,	// JZ_sb
    12589611U,	// JZ_sb_v110
    9443883U,	// JZ_sbr
    9443883U,	// JZ_sbr_v110
    17699U,	// J_b
    21795U,	// J_sb
    21795U,	// J_sb_v110
    358884U,	// LDLCX_abs
    5315754U,	// LDLCX_bo_bso
    34798U,	// LDMST_abs
    107048045U,	// LDMST_bo_bso
    107113581U,	// LDMST_bo_c
    107179117U,	// LDMST_bo_pos
    107047627U,	// LDMST_bo_pre
    7761005U,	// LDMST_bo_r
    358898U,	// LDUCX_abs
    5315770U,	// LDUCX_bo_bso
    13635650U,	// LD_A_abs
    182915138U,	// LD_A_bo_bso
    16191554U,	// LD_A_bo_c
    185012290U,	// LD_A_bo_pos
    528450U,	// LD_A_bo_pre
    18288706U,	// LD_A_bo_r
    216469570U,	// LD_A_bol
    250024002U,	// LD_A_sc
    48697410U,	// LD_A_slr
    50794562U,	// LD_A_slr_post
    50794562U,	// LD_A_slr_post_v110
    48697410U,	// LD_A_slr_v110
    283578434U,	// LD_A_slro
    283578434U,	// LD_A_slro_v110
    283578434U,	// LD_A_sro
    283578434U,	// LD_A_sro_v110
    13637875U,	// LD_BU_abs
    182917363U,	// LD_BU_bo_bso
    16193779U,	// LD_BU_bo_c
    185014515U,	// LD_BU_bo_pos
    530675U,	// LD_BU_bo_pre
    18290931U,	// LD_BU_bo_r
    216471795U,	// LD_BU_bol
    48699635U,	// LD_BU_slr
    50796787U,	// LD_BU_slr_post
    50796787U,	// LD_BU_slr_post_v110
    48699635U,	// LD_BU_slr_v110
    283580659U,	// LD_BU_slro
    283580659U,	// LD_BU_slro_v110
    283580659U,	// LD_BU_sro
    283580659U,	// LD_BU_sro_v110
    13635884U,	// LD_B_abs
    182915372U,	// LD_B_bo_bso
    16191788U,	// LD_B_bo_c
    185012524U,	// LD_B_bo_pos
    528684U,	// LD_B_bo_pre
    18288940U,	// LD_B_bo_r
    216469804U,	// LD_B_bol
    50794796U,	// LD_B_slr_post_v110
    48697644U,	// LD_B_slr_v110
    283578668U,	// LD_B_slro_v110
    283578668U,	// LD_B_sro_v110
    13635808U,	// LD_DA_abs
    182915296U,	// LD_DA_bo_bso
    16191712U,	// LD_DA_bo_c
    185012448U,	// LD_DA_bo_pos
    528608U,	// LD_DA_bo_pre
    18288864U,	// LD_DA_bo_r
    13636057U,	// LD_D_abs
    182915545U,	// LD_D_bo_bso
    16191961U,	// LD_D_bo_c
    185012697U,	// LD_D_bo_pos
    528857U,	// LD_D_bo_pre
    18289113U,	// LD_D_bo_r
    13637942U,	// LD_HU_abs
    182917430U,	// LD_HU_bo_bso
    16193846U,	// LD_HU_bo_c
    185014582U,	// LD_HU_bo_pos
    530742U,	// LD_HU_bo_pre
    18290998U,	// LD_HU_bo_r
    216471862U,	// LD_HU_bol
    13636453U,	// LD_H_abs
    182915941U,	// LD_H_bo_bso
    16192357U,	// LD_H_bo_c
    185013093U,	// LD_H_bo_pos
    529253U,	// LD_H_bo_pre
    18289509U,	// LD_H_bo_r
    216470373U,	// LD_H_bol
    48698213U,	// LD_H_slr
    50795365U,	// LD_H_slr_post
    50795365U,	// LD_H_slr_post_v110
    48698213U,	// LD_H_slr_v110
    283579237U,	// LD_H_slro
    283579237U,	// LD_H_slro_v110
    283579237U,	// LD_H_sro
    283579237U,	// LD_H_sro_v110
    13637108U,	// LD_Q_abs
    182916596U,	// LD_Q_bo_bso
    16193012U,	// LD_Q_bo_c
    185013748U,	// LD_Q_bo_pos
    529908U,	// LD_Q_bo_pre
    18290164U,	// LD_Q_bo_r
    13638051U,	// LD_W_abs
    182917539U,	// LD_W_bo_bso
    16193955U,	// LD_W_bo_c
    185014691U,	// LD_W_bo_pos
    530851U,	// LD_W_bo_pre
    18291107U,	// LD_W_bo_r
    216471971U,	// LD_W_bol
    250026403U,	// LD_W_sc
    48699811U,	// LD_W_slr
    50796963U,	// LD_W_slr_post
    50796963U,	// LD_W_slr_post_v110
    48699811U,	// LD_W_slr_v110
    283580835U,	// LD_W_slro
    283580835U,	// LD_W_slro_v110
    283580835U,	// LD_W_sro
    283580835U,	// LD_W_sro_v110
    13635822U,	// LEA_abs
    182915310U,	// LEA_bo_bso
    216469742U,	// LEA_bol
    13635827U,	// LHA_abs
    39296U,	// LOOPU_brr
    11539934U,	// LOOP_brr
    18879966U,	// LOOP_sbr
    33559308U,	// LTODF_rr
    4258U,	// LT_A_rr
    4504U,	// LT_B
    6439U,	// LT_BU
    5297U,	// LT_H
    6506U,	// LT_HU
    536877244U,	// LT_U_rc
    6332U,	// LT_U_rr
    2684360892U,	// LT_U_srcv110
    6332U,	// LT_U_srrv110
    6593U,	// LT_W
    6535U,	// LT_WU
    536877001U,	// LT_rc
    6089U,	// LT_rr
    3758102473U,	// LT_src
    6089U,	// LT_srr
    607130690U,	// MADDMS_H_rrr1_LL
    607130690U,	// MADDMS_H_rrr1_LU
    607130690U,	// MADDMS_H_rrr1_UL
    607130690U,	// MADDMS_H_rrr1_UU
    2148538532U,	// MADDMS_U_rcr_v110
    607131812U,	// MADDMS_U_rrr2_v110
    2148538069U,	// MADDMS_rcr_v110
    607131349U,	// MADDMS_rrr2_v110
    607130518U,	// MADDM_H_rrr1_LL
    607130518U,	// MADDM_H_rrr1_LU
    607130518U,	// MADDM_H_rrr1_UL
    607130518U,	// MADDM_H_rrr1_UU
    607130518U,	// MADDM_H_rrr1_v110
    607131146U,	// MADDM_Q_rrr1_v110
    2148538443U,	// MADDM_U_rcr_v110
    607131723U,	// MADDM_U_rrr2_v110
    2148537712U,	// MADDM_rcr_v110
    607130992U,	// MADDM_rrr2_v110
    607130743U,	// MADDRS_H_rrr1_LL
    607130743U,	// MADDRS_H_rrr1_LU
    607130743U,	// MADDRS_H_rrr1_UL
    607130743U,	// MADDRS_H_rrr1_UL_2
    607130743U,	// MADDRS_H_rrr1_UU
    607130743U,	// MADDRS_H_rrr1_v110
    3291485769U,	// MADDRS_Q_rrr1_L_L
    3828356681U,	// MADDRS_Q_rrr1_U_U
    607131209U,	// MADDRS_Q_rrr1_v110
    607130586U,	// MADDR_H_rrr1_LL
    607130586U,	// MADDR_H_rrr1_LU
    607130586U,	// MADDR_H_rrr1_UL
    607130586U,	// MADDR_H_rrr1_UL_2
    607130586U,	// MADDR_H_rrr1_UU
    607130586U,	// MADDR_H_rrr1_v110
    3291485724U,	// MADDR_Q_rrr1_L_L
    3828356636U,	// MADDR_Q_rrr1_U_U
    607131164U,	// MADDR_Q_rrr1_v110
    607130709U,	// MADDSUMS_H_rrr1_LL
    607130709U,	// MADDSUMS_H_rrr1_LU
    607130709U,	// MADDSUMS_H_rrr1_UL
    607130709U,	// MADDSUMS_H_rrr1_UU
    607130535U,	// MADDSUM_H_rrr1_LL
    607130535U,	// MADDSUM_H_rrr1_LU
    607130535U,	// MADDSUM_H_rrr1_UL
    607130535U,	// MADDSUM_H_rrr1_UU
    607130753U,	// MADDSURS_H_rrr1_LL
    607130753U,	// MADDSURS_H_rrr1_LU
    607130753U,	// MADDSURS_H_rrr1_UL
    607130753U,	// MADDSURS_H_rrr1_UU
    607130603U,	// MADDSUR_H_rrr1_LL
    607130603U,	// MADDSUR_H_rrr1_LU
    607130603U,	// MADDSUR_H_rrr1_UL
    607130603U,	// MADDSUR_H_rrr1_UU
    607130773U,	// MADDSUS_H_rrr1_LL
    607130773U,	// MADDSUS_H_rrr1_LU
    607130773U,	// MADDSUS_H_rrr1_UL
    607130773U,	// MADDSUS_H_rrr1_UU
    607130813U,	// MADDSU_H_rrr1_LL
    607130813U,	// MADDSU_H_rrr1_LU
    607130813U,	// MADDSU_H_rrr1_UL
    607130813U,	// MADDSU_H_rrr1_UU
    607130641U,	// MADDS_H_rrr1_LL
    607130641U,	// MADDS_H_rrr1_LU
    607130641U,	// MADDS_H_rrr1_UL
    607130641U,	// MADDS_H_rrr1_UU
    607130641U,	// MADDS_H_rrr1_v110
    607131190U,	// MADDS_Q_rrr1
    607131190U,	// MADDS_Q_rrr1_L
    3291485750U,	// MADDS_Q_rrr1_L_L
    607131190U,	// MADDS_Q_rrr1_U
    607131190U,	// MADDS_Q_rrr1_UU2_v110
    3828356662U,	// MADDS_Q_rrr1_U_U
    607131190U,	// MADDS_Q_rrr1_e
    607131190U,	// MADDS_Q_rrr1_e_L
    3291485750U,	// MADDS_Q_rrr1_e_L_L
    607131190U,	// MADDS_Q_rrr1_e_U
    3828356662U,	// MADDS_Q_rrr1_e_U_U
    2148538505U,	// MADDS_U_rcr
    2148538505U,	// MADDS_U_rcr_e
    607131785U,	// MADDS_U_rrr2
    607131785U,	// MADDS_U_rrr2_e
    2148538034U,	// MADDS_rcr
    2148538034U,	// MADDS_rcr_e
    607131314U,	// MADDS_rrr2
    607131314U,	// MADDS_rrr2_e
    607130290U,	// MADD_DF_rrr
    607130215U,	// MADD_F_rrr
    607130461U,	// MADD_H_rrr1_LL
    607130461U,	// MADD_H_rrr1_LU
    607130461U,	// MADD_H_rrr1_UL
    607130461U,	// MADD_H_rrr1_UU
    607130461U,	// MADD_H_rrr1_v110
    607131116U,	// MADD_Q_rrr1
    607131116U,	// MADD_Q_rrr1_L
    3291485676U,	// MADD_Q_rrr1_L_L
    607131116U,	// MADD_Q_rrr1_U
    607131116U,	// MADD_Q_rrr1_UU2_v110
    3828356588U,	// MADD_Q_rrr1_U_U
    607131116U,	// MADD_Q_rrr1_e
    607131116U,	// MADD_Q_rrr1_e_L
    3291485676U,	// MADD_Q_rrr1_e_L_L
    607131116U,	// MADD_Q_rrr1_e_U
    3828356588U,	// MADD_Q_rrr1_e_U_U
    2148538383U,	// MADD_U_rcr
    607131663U,	// MADD_U_rrr2
    2148536818U,	// MADD_rcr
    2148536818U,	// MADD_rcr_e
    607130098U,	// MADD_rrr2
    607130098U,	// MADD_rrr2_e
    4516U,	// MAX_B
    6446U,	// MAX_BU
    4853U,	// MAX_DF_rr
    4770U,	// MAX_F_rr
    5319U,	// MAX_H
    6513U,	// MAX_HU
    536877292U,	// MAX_U_rc
    6380U,	// MAX_U_rr
    536877529U,	// MAX_rc
    6617U,	// MAX_rr
    19928693U,	// MFCR_rlc
    4418U,	// MIN_B
    6394U,	// MIN_BU
    4821U,	// MIN_DF_rr
    4742U,	// MIN_F_rr
    5042U,	// MIN_H
    6461U,	// MIN_HU
    536877150U,	// MIN_U_rc
    6238U,	// MIN_U_rr
    536876441U,	// MIN_rc
    5529U,	// MIN_rr
    19927146U,	// MOVH_A_rlc
    19928297U,	// MOVH_rlc
    331984U,	// MOVZ_A_sr
    34607320U,	// MOV_AA_rr
    33558744U,	// MOV_AA_srr_srr
    33558744U,	// MOV_AA_srr_srr_v110
    34607278U,	// MOV_A_rr
    44044462U,	// MOV_A_src
    33558702U,	// MOV_A_srr
    33558702U,	// MOV_A_srr_v110
    34607589U,	// MOV_D_rr
    33559013U,	// MOV_D_srr_srr
    33559013U,	// MOV_D_srr_srr_v110
    19929315U,	// MOV_U_rlc
    20978068U,	// MOV_rlc
    19929492U,	// MOV_rlc_e
    34609556U,	// MOV_rr
    34609556U,	// MOV_rr_e
    6548U,	// MOV_rr_eab
    37755284U,	// MOV_sc
    37755284U,	// MOV_sc_v110
    35658132U,	// MOV_src
    35658132U,	// MOV_src_e
    33560980U,	// MOV_srr
    607130678U,	// MSUBADMS_H_rrr1_LL
    607130678U,	// MSUBADMS_H_rrr1_LU
    607130678U,	// MSUBADMS_H_rrr1_UL
    607130678U,	// MSUBADMS_H_rrr1_UU
    607130507U,	// MSUBADM_H_rrr1_LL
    607130507U,	// MSUBADM_H_rrr1_LU
    607130507U,	// MSUBADM_H_rrr1_UL
    607130507U,	// MSUBADM_H_rrr1_UU
    607130731U,	// MSUBADRS_H_rrr1_LL
    607130731U,	// MSUBADRS_H_rrr1_LU
    607130731U,	// MSUBADRS_H_rrr1_UL
    607130731U,	// MSUBADRS_H_rrr1_UU
    607130731U,	// MSUBADRS_H_rrr1_v110
    607130575U,	// MSUBADR_H_rrr1_LL
    607130575U,	// MSUBADR_H_rrr1_LU
    607130575U,	// MSUBADR_H_rrr1_UL
    607130575U,	// MSUBADR_H_rrr1_UU
    607130575U,	// MSUBADR_H_rrr1_v110
    607130630U,	// MSUBADS_H_rrr1_LL
    607130630U,	// MSUBADS_H_rrr1_LU
    607130630U,	// MSUBADS_H_rrr1_UL
    607130630U,	// MSUBADS_H_rrr1_UU
    607130451U,	// MSUBAD_H_rrr1_LL
    607130451U,	// MSUBAD_H_rrr1_LU
    607130451U,	// MSUBAD_H_rrr1_UL
    607130451U,	// MSUBAD_H_rrr1_UU
    607130668U,	// MSUBMS_H_rrr1_LL
    607130668U,	// MSUBMS_H_rrr1_LU
    607130668U,	// MSUBMS_H_rrr1_UL
    607130668U,	// MSUBMS_H_rrr1_UU
    2148538522U,	// MSUBMS_U_rcrv110
    607131802U,	// MSUBMS_U_rrr2v110
    2148538061U,	// MSUBMS_rcrv110
    607131341U,	// MSUBMS_rrr2v110
    607130498U,	// MSUBM_H_rrr1_LL
    607130498U,	// MSUBM_H_rrr1_LU
    607130498U,	// MSUBM_H_rrr1_UL
    607130498U,	// MSUBM_H_rrr1_UU
    607130498U,	// MSUBM_H_rrr1_v110
    607131137U,	// MSUBM_Q_rrr1_v110
    2148538434U,	// MSUBM_U_rcrv110
    607131714U,	// MSUBM_U_rrr2v110
    2148537705U,	// MSUBM_rcrv110
    607130985U,	// MSUBM_rrr2v110
    607130721U,	// MSUBRS_H_rrr1_LL
    607130721U,	// MSUBRS_H_rrr1_LU
    607130721U,	// MSUBRS_H_rrr1_UL
    607130721U,	// MSUBRS_H_rrr1_UL_2
    607130721U,	// MSUBRS_H_rrr1_UU
    607130721U,	// MSUBRS_H_rrr1_v110
    3291485759U,	// MSUBRS_Q_rrr1_L_L
    3828356671U,	// MSUBRS_Q_rrr1_U_U
    607131199U,	// MSUBRS_Q_rrr1_v110
    607130566U,	// MSUBR_H_rrr1_LL
    607130566U,	// MSUBR_H_rrr1_LU
    607130566U,	// MSUBR_H_rrr1_UL
    607130566U,	// MSUBR_H_rrr1_UL_2
    607130566U,	// MSUBR_H_rrr1_UU
    607130566U,	// MSUBR_H_rrr1_v110
    3291485715U,	// MSUBR_Q_rrr1_L_L
    3828356627U,	// MSUBR_Q_rrr1_U_U
    607131155U,	// MSUBR_Q_rrr1_v110
    607130621U,	// MSUBS_H_rrr1_LL
    607130621U,	// MSUBS_H_rrr1_LU
    607130621U,	// MSUBS_H_rrr1_UL
    607130621U,	// MSUBS_H_rrr1_UU
    607130621U,	// MSUBS_H_rrr1_v110
    607131181U,	// MSUBS_Q_rrr1
    607131181U,	// MSUBS_Q_rrr1_L
    3291485741U,	// MSUBS_Q_rrr1_L_L
    607131181U,	// MSUBS_Q_rrr1_U
    607131181U,	// MSUBS_Q_rrr1_UU2_v110
    3828356653U,	// MSUBS_Q_rrr1_U_U
    607131181U,	// MSUBS_Q_rrr1_e
    607131181U,	// MSUBS_Q_rrr1_e_L
    3291485741U,	// MSUBS_Q_rrr1_e_L_L
    607131181U,	// MSUBS_Q_rrr1_e_U
    3828356653U,	// MSUBS_Q_rrr1_e_U_U
    2148538487U,	// MSUBS_U_rcr
    2148538487U,	// MSUBS_U_rcr_e
    607131767U,	// MSUBS_U_rrr2
    607131767U,	// MSUBS_U_rrr2_e
    2148538020U,	// MSUBS_rcr
    2148538020U,	// MSUBS_rcr_e
    607131300U,	// MSUBS_rrr2
    607131300U,	// MSUBS_rrr2_e
    607130281U,	// MSUB_DF_rrr
    607130207U,	// MSUB_F_rrr
    607130443U,	// MSUB_H_rrr1_LL
    607130443U,	// MSUB_H_rrr1_LU
    607130443U,	// MSUB_H_rrr1_UL
    607130443U,	// MSUB_H_rrr1_UU
    607130443U,	// MSUB_H_rrr1_v110
    607131108U,	// MSUB_Q_rrr1
    607131108U,	// MSUB_Q_rrr1_L
    3291485668U,	// MSUB_Q_rrr1_L_L
    607131108U,	// MSUB_Q_rrr1_U
    607131108U,	// MSUB_Q_rrr1_UU2_v110
    3828356580U,	// MSUB_Q_rrr1_U_U
    607131108U,	// MSUB_Q_rrr1_e
    607131108U,	// MSUB_Q_rrr1_e_L
    3291485668U,	// MSUB_Q_rrr1_e_L_L
    607131108U,	// MSUB_Q_rrr1_e_U
    3828356580U,	// MSUB_Q_rrr1_e_U_U
    2148538375U,	// MSUB_U_rcr
    607131655U,	// MSUB_U_rrr2
    2148536769U,	// MSUB_rcr
    2148536769U,	// MSUB_rcr_e
    607130049U,	// MSUB_rrr2
    607130049U,	// MSUB_rrr2_e
    42619U,	// MTCR_rlc
    5196U,	// MULMS_H_rr1_LL2e
    5196U,	// MULMS_H_rr1_LU2e
    5196U,	// MULMS_H_rr1_UL2e
    5196U,	// MULMS_H_rr1_UU2e
    5023U,	// MULM_H_rr1_LL2e
    5023U,	// MULM_H_rr1_LU2e
    5023U,	// MULM_H_rr1_UL2e
    5023U,	// MULM_H_rr1_UU2e
    536877140U,	// MULM_U_rc
    6228U,	// MULM_U_rr
    536876407U,	// MULM_rc
    5495U,	// MULM_rr
    5091U,	// MULR_H_rr1_LL2e
    5091U,	// MULR_H_rr1_LU2e
    5091U,	// MULR_H_rr1_UL2e
    5091U,	// MULR_H_rr1_UU2e
    5091U,	// MULR_H_rr_v110
    301995557U,	// MULR_Q_rr1_2LL
    335549989U,	// MULR_Q_rr1_2UU
    5669U,	// MULR_Q_rr_v110
    536877202U,	// MULS_U_rc
    6290U,	// MULS_U_rr2
    6290U,	// MULS_U_rr_v110
    536876743U,	// MULS_rc
    5831U,	// MULS_rr2
    5831U,	// MULS_rr_v110
    4813U,	// MUL_DF_rrr
    4735U,	// MUL_F_rrr
    4987U,	// MUL_H_rr1_LL2e
    4987U,	// MUL_H_rr1_LU2e
    4987U,	// MUL_H_rr1_UL2e
    4987U,	// MUL_H_rr1_UU2e
    4987U,	// MUL_H_rr_v110
    5626U,	// MUL_Q_rr1_2
    301995514U,	// MUL_Q_rr1_2LL
    335549946U,	// MUL_Q_rr1_2UU
    5626U,	// MUL_Q_rr1_2_L
    5626U,	// MUL_Q_rr1_2_Le
    5626U,	// MUL_Q_rr1_2_U
    5626U,	// MUL_Q_rr1_2_Ue
    5626U,	// MUL_Q_rr1_2__e
    5626U,	// MUL_Q_rr_v110
    536877115U,	// MUL_U_rc
    6203U,	// MUL_U_rr2
    536876380U,	// MUL_rc
    536876380U,	// MUL_rc_e
    5468U,	// MUL_rr2
    5468U,	// MUL_rr2_e
    5468U,	// MUL_rr_v110
    33559900U,	// MUL_srr
    5893U,	// NAND_T
    536875518U,	// NAND_rc
    4606U,	// NAND_rr
    33559237U,	// NEG_DF_rr
    33559160U,	// NEG_F_rr
    33558709U,	// NEZ_A
    4187U,	// NE_A
    536875582U,	// NE_rc
    4670U,	// NE_rr
    3351U,	// NOP_sr
    3351U,	// NOP_sys
    5985U,	// NOR_T
    536876674U,	// NOR_rc
    5762U,	// NOR_rr
    333793U,	// NOT_sr
    5938U,	// ORN_T
    536876460U,	// ORN_rc
    5548U,	// ORN_rr
    5924U,	// OR_ANDN_T
    5880U,	// OR_AND_T
    536876649U,	// OR_EQ_rc
    5737U,	// OR_EQ_rr
    536877099U,	// OR_GE_U_rc
    6187U,	// OR_GE_U_rr
    536875540U,	// OR_GE_rc
    4628U,	// OR_GE_rr
    536877260U,	// OR_LT_U_rc
    6348U,	// OR_LT_U_rr
    536877013U,	// OR_LT_rc
    6101U,	// OR_LT_rr
    536875594U,	// OR_NE_rc
    4682U,	// OR_NE_rr
    6002U,	// OR_NOR_T
    5972U,	// OR_OR_T
    5957U,	// OR_T
    5763U,	// OR_rc
    5763U,	// OR_rr
    37754499U,	// OR_sc
    37754499U,	// OR_sc_v110
    33560195U,	// OR_srr
    33560195U,	// OR_srr_v110
    3291485480U,	// PACK_rrr
    33561094U,	// PARITY_rr
    33561094U,	// PARITY_rr_v110
    33561031U,	// POPCNT_W_rr
    4898U,	// Q31TOF_rr
    33559227U,	// QSEED_DF_rr
    33559151U,	// QSEED_F_rr
    6133U,	// REM64_U_rr
    4105U,	// REM64_rr
    332374U,	// RESTORE_sys
    3356U,	// RET_sr
    3356U,	// RET_sys
    3356U,	// RET_sys_v110
    3308U,	// RFE_sr
    3308U,	// RFE_sys_sys
    3308U,	// RFE_sys_sys_v110
    3347U,	// RFM_sys
    3383U,	// RSLCX_sys
    3378U,	// RSTV_sys
    536877184U,	// RSUBS_U_rc
    536876715U,	// RSUBS_rc
    536875463U,	// RSUB_rc
    332231U,	// RSUB_sr_sr
    332231U,	// RSUB_sr_sr_v110
    33560852U,	// SAT_BU_rr
    334100U,	// SAT_BU_sr
    334100U,	// SAT_BU_sr_v110
    33558919U,	// SAT_B_rr
    332167U,	// SAT_B_sr
    332167U,	// SAT_B_sr_v110
    33560919U,	// SAT_HU_rr
    334167U,	// SAT_HU_sr
    334167U,	// SAT_HU_sr_v110
    33559712U,	// SAT_H_rr
    332960U,	// SAT_H_sr
    332960U,	// SAT_H_sr_v110
    2148536459U,	// SELN_A_rcr_v110
    607129739U,	// SELN_A_rrr_v110
    2148537766U,	// SELN_rcr
    607131046U,	// SELN_rrr
    2148536434U,	// SEL_A_rcr_v110
    607129714U,	// SEL_A_rrr_v110
    2148537653U,	// SEL_rcr
    607130933U,	// SEL_rrr
    536876697U,	// SHAS_rc
    5785U,	// SHAS_rr
    536875287U,	// SHA_B_rc
    4375U,	// SHA_B_rr
    536875844U,	// SHA_H_rc
    4932U,	// SHA_H_rr
    536875256U,	// SHA_rc
    4344U,	// SHA_rr
    35655928U,	// SHA_src
    35655928U,	// SHA_src_v110
    536875569U,	// SHUFFLE_rc
    5913U,	// SH_ANDN_T
    5870U,	// SH_AND_T
    536875324U,	// SH_B_rc
    4412U,	// SH_B_rr
    536876641U,	// SH_EQ_rc
    5729U,	// SH_EQ_rr
    536877089U,	// SH_GE_U_rc
    6177U,	// SH_GE_U_rr
    536875532U,	// SH_GE_rc
    4620U,	// SH_GE_rr
    536875893U,	// SH_H_rc
    4981U,	// SH_H_rr
    536877250U,	// SH_LT_U_rc
    6338U,	// SH_LT_U_rr
    536877005U,	// SH_LT_rc
    6093U,	// SH_LT_rr
    5890U,	// SH_NAND_T
    536875586U,	// SH_NE_rc
    4674U,	// SH_NE_rr
    5992U,	// SH_NOR_T
    5935U,	// SH_ORN_T
    5963U,	// SH_OR_T
    6012U,	// SH_XNOR_T
    6023U,	// SH_XOR_T
    536876261U,	// SH_rc
    5349U,	// SH_rr
    35656933U,	// SH_src
    35656933U,	// SH_src_v110
    358891U,	// STLCX_abs
    5315762U,	// STLCX_bo_bso
    358905U,	// STUCX_abs
    5315778U,	// STUCX_bo_bso
    32936U,	// ST_A_abs
    107047956U,	// ST_A_bo_bso
    3294764052U,	// ST_A_bo_c
    107179028U,	// ST_A_bo_pos
    107047528U,	// ST_A_bo_pre
    33954836U,	// ST_A_bo_r
    22092820U,	// ST_A_bol
    4267028U,	// ST_A_sc
    10558484U,	// ST_A_sro
    10558484U,	// ST_A_sro_v110
    597012U,	// ST_A_ssr
    662548U,	// ST_A_ssr_pos
    662548U,	// ST_A_ssr_pos_v110
    597012U,	// ST_A_ssr_v110
    23141396U,	// ST_A_ssro
    23141396U,	// ST_A_ssro_v110
    33182U,	// ST_B_abs
    107047971U,	// ST_B_bo_bso
    3294764067U,	// ST_B_bo_c
    107179043U,	// ST_B_bo_pos
    107047545U,	// ST_B_bo_pre
    33954851U,	// ST_B_bo_r
    22092835U,	// ST_B_bol
    10558499U,	// ST_B_sro
    10558499U,	// ST_B_sro_v110
    597027U,	// ST_B_ssr
    662563U,	// ST_B_ssr_pos
    662563U,	// ST_B_ssr_pos_v110
    597027U,	// ST_B_ssr_v110
    23141411U,	// ST_B_ssro
    23141411U,	// ST_B_ssro_v110
    32999U,	// ST_DA_abs
    107047963U,	// ST_DA_bo_bso
    3294764059U,	// ST_DA_bo_c
    107179035U,	// ST_DA_bo_pos
    107047536U,	// ST_DA_bo_pre
    33954843U,	// ST_DA_bo_r
    33247U,	// ST_D_abs
    107047978U,	// ST_D_bo_bso
    3294764074U,	// ST_D_bo_c
    107179050U,	// ST_D_bo_pos
    107047553U,	// ST_D_bo_pre
    33954858U,	// ST_D_bo_r
    33975U,	// ST_H_abs
    107047985U,	// ST_H_bo_bso
    3294764081U,	// ST_H_bo_c
    107179057U,	// ST_H_bo_pos
    107047561U,	// ST_H_bo_pre
    33954865U,	// ST_H_bo_r
    22092849U,	// ST_H_bol
    10558513U,	// ST_H_sro
    10558513U,	// ST_H_sro_v110
    597041U,	// ST_H_ssr
    662577U,	// ST_H_ssr_pos
    662577U,	// ST_H_ssr_pos_v110
    597041U,	// ST_H_ssr_v110
    23141425U,	// ST_H_ssro
    23141425U,	// ST_H_ssro_v110
    34387U,	// ST_Q_abs
    107048038U,	// ST_Q_bo_bso
    3294764134U,	// ST_Q_bo_c
    107179110U,	// ST_Q_bo_pos
    107047619U,	// ST_Q_bo_pre
    33954918U,	// ST_Q_bo_r
    30616U,	// ST_T
    35281U,	// ST_W_abs
    107048099U,	// ST_W_bo_bso
    3294764195U,	// ST_W_bo_c
    107179171U,	// ST_W_bo_pos
    107047686U,	// ST_W_bo_pre
    33954979U,	// ST_W_bo_r
    22092963U,	// ST_W_bol
    4267171U,	// ST_W_sc
    10558627U,	// ST_W_sro
    10558627U,	// ST_W_sro_v110
    597155U,	// ST_W_ssr
    662691U,	// ST_W_ssr_pos
    662691U,	// ST_W_ssr_pos_v110
    597155U,	// ST_W_ssr_v110
    23141539U,	// ST_W_ssro
    23141539U,	// ST_W_ssro_v110
    4557U,	// SUBC_rr
    4127U,	// SUBSC_A_rr
    6402U,	// SUBS_BU_rr
    4445U,	// SUBS_B_rr
    6469U,	// SUBS_HU_rr
    5118U,	// SUBS_H_rr
    6264U,	// SUBS_U_rr
    5797U,	// SUBS_rr
    33560229U,	// SUBS_srr
    6622U,	// SUBX_rr
    4120U,	// SUB_A_rr
    37752856U,	// SUB_A_sc
    37752856U,	// SUB_A_sc_v110
    4382U,	// SUB_B_rr
    3291484842U,	// SUB_DF_rrr
    3291484768U,	// SUB_F_rrr
    4940U,	// SUB_H_rr
    4540U,	// SUB_rr
    33558972U,	// SUB_srr
    4540U,	// SUB_srr_15a
    4540U,	// SUB_srr_a15
    3389U,	// SVLCX_sys
    107048075U,	// SWAPMSK_W_bo_bso
    3294764171U,	// SWAPMSK_W_bo_c
    748683U,	// SWAPMSK_W_bo_i
    107179147U,	// SWAPMSK_W_bo_pos
    107047660U,	// SWAPMSK_W_bo_pre
    33954955U,	// SWAPMSK_W_bo_r
    32915U,	// SWAP_A_abs
    107047947U,	// SWAP_A_bo_bso
    3294764043U,	// SWAP_A_bo_c
    107179019U,	// SWAP_A_bo_pos
    107047518U,	// SWAP_A_bo_pre
    33954827U,	// SWAP_A_bo_r
    35251U,	// SWAP_W_abs
    107048090U,	// SWAP_W_bo_bso
    3294764186U,	// SWAP_W_bo_c
    748698U,	// SWAP_W_bo_i
    107179162U,	// SWAP_W_bo_pos
    107047676U,	// SWAP_W_bo_pre
    33954970U,	// SWAP_W_bo_r
    9548U,	// SYSCALL_rc
    333253U,	// TLBDEMAP_rr
    3274U,	// TLBFLUSH_A_rr
    3285U,	// TLBFLUSH_B_rr
    333245U,	// TLBMAP_rr
    331848U,	// TLBPROBE_A_rr
    333039U,	// TLBPROBE_I_rr
    3371U,	// TRAPSV_sys
    3365U,	// TRAPV_sys
    33559307U,	// ULTODF_rr
    33559846U,	// UNPACK_rr_rr
    33559846U,	// UNPACK_rr_rr_v110
    333114U,	// UPDFL_rr
    33559315U,	// UTODF_rr
    33559358U,	// UTOF_rr
    3360U,	// WAIT_sys
    6015U,	// XNOR_T
    536876673U,	// XNOR_rc
    5761U,	// XNOR_rr
    536876648U,	// XOR_EQ_rc
    5736U,	// XOR_EQ_rr
    536877098U,	// XOR_GE_U_rc
    6186U,	// XOR_GE_U_rr
    536875539U,	// XOR_GE_rc
    4627U,	// XOR_GE_rr
    536877259U,	// XOR_LT_U_rc
    6347U,	// XOR_LT_U_rr
    536877012U,	// XOR_LT_rc
    6100U,	// XOR_LT_rr
    536875593U,	// XOR_NE_rc
    4681U,	// XOR_NE_rr
    6026U,	// XOR_T
    536876679U,	// XOR_rc
    5767U,	// XOR_rr
    33560199U,	// XOR_srr
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// MEMBARRIER
    0U,	// JUMP_TABLE_DEBUG_INFO
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_CONSTANT_POOL
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_CONSTANT_FOLD_BARRIER
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_ATOMICRMW_UINC_WRAP
    0U,	// G_ATOMICRMW_UDEC_WRAP
    0U,	// G_FENCE
    0U,	// G_PREFETCH
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_INTRINSIC_CONVERGENT
    0U,	// G_INTRINSIC_CONVERGENT_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FEXP10
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FLDEXP
    0U,	// G_FFREXP
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_GET_FPENV
    0U,	// G_SET_FPENV
    0U,	// G_RESET_FPENV
    0U,	// G_GET_FPMODE
    0U,	// G_SET_FPMODE
    0U,	// G_RESET_FPMODE
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STACKSAVE
    0U,	// G_STACKRESTORE
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_STRICT_FLDEXP
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_FMAXIMUM
    0U,	// G_VECREDUCE_FMINIMUM
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSDIFS_B_rr_v110
    0U,	// ABSDIFS_H_rr
    0U,	// ABSDIFS_rc
    0U,	// ABSDIFS_rr
    0U,	// ABSDIF_B_rr
    0U,	// ABSDIF_H_rr
    0U,	// ABSDIF_rc
    0U,	// ABSDIF_rr
    0U,	// ABSS_B_rr_v110
    0U,	// ABSS_H_rr
    0U,	// ABSS_rr
    0U,	// ABS_B_rr
    0U,	// ABS_DF_rr
    0U,	// ABS_F_rr
    0U,	// ABS_H_rr
    0U,	// ABS_rr
    0U,	// ADDC_rc
    0U,	// ADDC_rr
    0U,	// ADDIH_A_rlc
    0U,	// ADDIH_rlc
    0U,	// ADDI_rlc
    0U,	// ADDSC_AT_rr
    0U,	// ADDSC_AT_rr_v110
    4U,	// ADDSC_A_rr
    4U,	// ADDSC_A_rr_v110
    4U,	// ADDSC_A_srrs
    0U,	// ADDSC_A_srrs_v110
    0U,	// ADDS_BU_rr_v110
    0U,	// ADDS_B_rr
    0U,	// ADDS_H
    0U,	// ADDS_HU
    0U,	// ADDS_U
    0U,	// ADDS_U_rc
    0U,	// ADDS_rc
    0U,	// ADDS_rr
    0U,	// ADDS_srr
    0U,	// ADDX_rc
    0U,	// ADDX_rr
    0U,	// ADD_A_rr
    0U,	// ADD_A_src
    0U,	// ADD_A_srr
    0U,	// ADD_B_rr
    0U,	// ADD_DF_rrr
    0U,	// ADD_F_rrr
    0U,	// ADD_H_rr
    0U,	// ADD_rc
    0U,	// ADD_rr
    0U,	// ADD_src
    0U,	// ADD_src_15a
    0U,	// ADD_src_a15
    0U,	// ADD_srr
    0U,	// ADD_srr_15a
    0U,	// ADD_srr_a15
    1U,	// ANDN_T
    0U,	// ANDN_rc
    0U,	// ANDN_rr
    1U,	// AND_ANDN_T
    1U,	// AND_AND_T
    0U,	// AND_EQ_rc
    0U,	// AND_EQ_rr
    0U,	// AND_GE_U_rc
    0U,	// AND_GE_U_rr
    0U,	// AND_GE_rc
    0U,	// AND_GE_rr
    0U,	// AND_LT_U_rc
    0U,	// AND_LT_U_rr
    0U,	// AND_LT_rc
    0U,	// AND_LT_rr
    0U,	// AND_NE_rc
    0U,	// AND_NE_rr
    1U,	// AND_NOR_T
    1U,	// AND_OR_T
    1U,	// AND_T
    0U,	// AND_rc
    0U,	// AND_rr
    0U,	// AND_sc
    0U,	// AND_sc_v110
    0U,	// AND_srr
    0U,	// AND_srr_v110
    0U,	// BISR_rc
    0U,	// BISR_sc
    0U,	// BISR_sc_v110
    0U,	// BMERGAE_rr_v110
    0U,	// BMERGE_rr
    0U,	// BSPLIT_rr
    0U,	// BSPLIT_rr_v110
    0U,	// CACHEA_I_bo_bso
    0U,	// CACHEA_I_bo_c
    0U,	// CACHEA_I_bo_pos
    0U,	// CACHEA_I_bo_pre
    0U,	// CACHEA_I_bo_r
    0U,	// CACHEA_WI_bo_bso
    0U,	// CACHEA_WI_bo_c
    0U,	// CACHEA_WI_bo_pos
    0U,	// CACHEA_WI_bo_pre
    0U,	// CACHEA_WI_bo_r
    0U,	// CACHEA_W_bo_bso
    0U,	// CACHEA_W_bo_c
    0U,	// CACHEA_W_bo_pos
    0U,	// CACHEA_W_bo_pre
    0U,	// CACHEA_W_bo_r
    0U,	// CACHEI_I_bo_bso
    0U,	// CACHEI_I_bo_pos
    0U,	// CACHEI_I_bo_pre
    0U,	// CACHEI_WI_bo_bso
    0U,	// CACHEI_WI_bo_pos
    0U,	// CACHEI_WI_bo_pre
    0U,	// CACHEI_W_bo_bso
    0U,	// CACHEI_W_bo_pos
    0U,	// CACHEI_W_bo_pre
    68U,	// CADDN_A_rcr_v110
    137U,	// CADDN_A_rrr_v110
    68U,	// CADDN_rcr
    137U,	// CADDN_rrr
    0U,	// CADDN_src
    0U,	// CADDN_srr_v110
    68U,	// CADD_A_rcr_v110
    137U,	// CADD_A_rrr_v110
    68U,	// CADD_rcr
    137U,	// CADD_rrr
    0U,	// CADD_src
    0U,	// CADD_srr_v110
    0U,	// CALLA_b
    0U,	// CALLI_rr
    0U,	// CALLI_rr_v110
    0U,	// CALL_b
    0U,	// CALL_sb
    0U,	// CLO_B_rr_v110
    0U,	// CLO_H_rr
    0U,	// CLO_rr
    0U,	// CLS_B_rr_v110
    0U,	// CLS_H_rr
    0U,	// CLS_rr
    0U,	// CLZ_B_rr_v110
    0U,	// CLZ_H_rr
    0U,	// CLZ_rr
    0U,	// CMOVN_src
    0U,	// CMOVN_srr
    0U,	// CMOV_src
    0U,	// CMOV_srr
    0U,	// CMPSWAP_W_bo_bso
    0U,	// CMPSWAP_W_bo_c
    0U,	// CMPSWAP_W_bo_pos
    0U,	// CMPSWAP_W_bo_pre
    0U,	// CMPSWAP_W_bo_r
    0U,	// CMP_DF_rr
    0U,	// CMP_F_rr
    0U,	// CRC32B_W_rr
    0U,	// CRC32L_W_rr
    0U,	// CRC32_B_rr
    137U,	// CRCN_rrr
    137U,	// CSUBN_A__rrr_v110
    137U,	// CSUBN_rrr
    137U,	// CSUB_A__rrr_v110
    137U,	// CSUB_rrr
    0U,	// DEBUG_sr
    0U,	// DEBUG_sys
    196U,	// DEXTR_rrpw
    196U,	// DEXTR_rrrr
    0U,	// DFTOF_rr
    0U,	// DFTOIN_rr
    0U,	// DFTOIZ_rr
    0U,	// DFTOI_rr
    0U,	// DFTOLZ_rr
    0U,	// DFTOL_rr
    0U,	// DFTOULZ_rr
    0U,	// DFTOUL_rr
    0U,	// DFTOUZ_rr
    0U,	// DFTOU_rr
    4U,	// DIFSC_A_rr_v110
    0U,	// DISABLE_sys
    0U,	// DISABLE_sys_1
    0U,	// DIV64_U_rr
    0U,	// DIV64_rr
    0U,	// DIV_DF_rr
    0U,	// DIV_F_rr
    0U,	// DIV_U_rr
    0U,	// DIV_rr
    0U,	// DSYNC_sys
    0U,	// DVADJ_rrr
    0U,	// DVADJ_rrr_v110
    0U,	// DVADJ_srr_v110
    0U,	// DVINIT_BU_rr
    0U,	// DVINIT_BU_rr_v110
    0U,	// DVINIT_B_rr
    0U,	// DVINIT_B_rr_v110
    0U,	// DVINIT_HU_rr
    0U,	// DVINIT_HU_rr_v110
    0U,	// DVINIT_H_rr
    0U,	// DVINIT_H_rr_v110
    0U,	// DVINIT_U_rr
    0U,	// DVINIT_U_rr_v110
    0U,	// DVINIT_rr
    0U,	// DVINIT_rr_v110
    0U,	// DVSTEP_U_rrr
    0U,	// DVSTEP_U_rrrv110
    0U,	// DVSTEP_Uv110
    0U,	// DVSTEP_rrr
    0U,	// DVSTEP_rrrv110
    0U,	// DVSTEPv110
    0U,	// ENABLE_sys
    0U,	// EQANY_B_rc
    0U,	// EQANY_B_rr
    0U,	// EQANY_H_rc
    0U,	// EQANY_H_rr
    0U,	// EQZ_A_rr
    0U,	// EQ_A_rr
    0U,	// EQ_B_rr
    0U,	// EQ_H_rr
    0U,	// EQ_W_rr
    0U,	// EQ_rc
    0U,	// EQ_rr
    0U,	// EQ_src
    0U,	// EQ_srr
    13U,	// EXTR_U_rrpw
    0U,	// EXTR_U_rrrr
    13U,	// EXTR_U_rrrw
    13U,	// EXTR_rrpw
    0U,	// EXTR_rrrr
    13U,	// EXTR_rrrw
    0U,	// FCALLA_b
    0U,	// FCALLA_i
    0U,	// FCALL_b
    0U,	// FRET_sr
    0U,	// FRET_sys
    0U,	// FTODF_rr
    0U,	// FTOHP_rr
    0U,	// FTOIN_rr
    0U,	// FTOIZ_rr
    0U,	// FTOI_rr
    0U,	// FTOQ31Z_rr
    0U,	// FTOQ31_rr
    0U,	// FTOUZ_rr
    0U,	// FTOU_rr
    0U,	// GE_A_rr
    0U,	// GE_U_rc
    0U,	// GE_U_rr
    0U,	// GE_rc
    0U,	// GE_rr
    0U,	// HPTOF_rr
    13U,	// IMASK_rcpw
    13U,	// IMASK_rcrw
    13U,	// IMASK_rrpw
    13U,	// IMASK_rrrw
    1220U,	// INSERT_rcpw
    196U,	// INSERT_rcrr
    2313U,	// INSERT_rcrw
    1220U,	// INSERT_rrpw
    196U,	// INSERT_rrrr
    1220U,	// INSERT_rrrw
    1U,	// INSN_T
    1U,	// INS_T
    0U,	// ISYNC_sys
    0U,	// ITODF_rr
    0U,	// ITOF_rr
    0U,	// IXMAX_U_rrr
    0U,	// IXMAX_rrr
    0U,	// IXMIN_U_rrr
    0U,	// IXMIN_rrr
    0U,	// JA_b
    1U,	// JEQ_A_brr
    1U,	// JEQ_brc
    1U,	// JEQ_brr
    0U,	// JEQ_sbc1
    0U,	// JEQ_sbc2
    0U,	// JEQ_sbc_v110
    1U,	// JEQ_sbr1
    1U,	// JEQ_sbr2
    1U,	// JEQ_sbr_v110
    0U,	// JGEZ_sbr
    0U,	// JGEZ_sbr_v110
    1U,	// JGE_U_brc
    1U,	// JGE_U_brr
    1U,	// JGE_brc
    1U,	// JGE_brr
    0U,	// JGTZ_sbr
    0U,	// JGTZ_sbr_v110
    0U,	// JI_rr
    0U,	// JI_rr_v110
    0U,	// JI_sbr_v110
    0U,	// JI_sr
    0U,	// JLA_b
    0U,	// JLEZ_sbr
    0U,	// JLEZ_sbr_v110
    0U,	// JLI_rr
    0U,	// JLI_rr_v110
    0U,	// JLTZ_sbr
    0U,	// JLTZ_sbr_v110
    1U,	// JLT_U_brc
    1U,	// JLT_U_brr
    1U,	// JLT_brc
    1U,	// JLT_brr
    0U,	// JL_b
    1U,	// JNED_brc
    1U,	// JNED_brr
    1U,	// JNEI_brc
    1U,	// JNEI_brr
    1U,	// JNE_A_brr
    1U,	// JNE_brc
    1U,	// JNE_brr
    0U,	// JNE_sbc1
    0U,	// JNE_sbc2
    0U,	// JNE_sbc_v110
    1U,	// JNE_sbr1
    1U,	// JNE_sbr2
    1U,	// JNE_sbr_v110
    0U,	// JNZ_A_brr
    0U,	// JNZ_A_sbr
    1U,	// JNZ_T_brn
    1U,	// JNZ_T_sbrn
    1U,	// JNZ_T_sbrn_v110
    0U,	// JNZ_sb
    0U,	// JNZ_sb_v110
    0U,	// JNZ_sbr
    0U,	// JNZ_sbr_v110
    0U,	// JZ_A_brr
    0U,	// JZ_A_sbr
    1U,	// JZ_T_brn
    1U,	// JZ_T_sbrn
    1U,	// JZ_T_sbrn_v110
    0U,	// JZ_sb
    0U,	// JZ_sb_v110
    0U,	// JZ_sbr
    0U,	// JZ_sbr_v110
    0U,	// J_b
    0U,	// J_sb
    0U,	// J_sb_v110
    0U,	// LDLCX_abs
    0U,	// LDLCX_bo_bso
    0U,	// LDMST_abs
    0U,	// LDMST_bo_bso
    0U,	// LDMST_bo_c
    0U,	// LDMST_bo_pos
    0U,	// LDMST_bo_pre
    0U,	// LDMST_bo_r
    0U,	// LDUCX_abs
    0U,	// LDUCX_bo_bso
    0U,	// LD_A_abs
    0U,	// LD_A_bo_bso
    0U,	// LD_A_bo_c
    0U,	// LD_A_bo_pos
    0U,	// LD_A_bo_pre
    0U,	// LD_A_bo_r
    0U,	// LD_A_bol
    0U,	// LD_A_sc
    0U,	// LD_A_slr
    0U,	// LD_A_slr_post
    0U,	// LD_A_slr_post_v110
    0U,	// LD_A_slr_v110
    0U,	// LD_A_slro
    0U,	// LD_A_slro_v110
    0U,	// LD_A_sro
    0U,	// LD_A_sro_v110
    0U,	// LD_BU_abs
    0U,	// LD_BU_bo_bso
    0U,	// LD_BU_bo_c
    0U,	// LD_BU_bo_pos
    0U,	// LD_BU_bo_pre
    0U,	// LD_BU_bo_r
    0U,	// LD_BU_bol
    0U,	// LD_BU_slr
    0U,	// LD_BU_slr_post
    0U,	// LD_BU_slr_post_v110
    0U,	// LD_BU_slr_v110
    0U,	// LD_BU_slro
    0U,	// LD_BU_slro_v110
    0U,	// LD_BU_sro
    0U,	// LD_BU_sro_v110
    0U,	// LD_B_abs
    0U,	// LD_B_bo_bso
    0U,	// LD_B_bo_c
    0U,	// LD_B_bo_pos
    0U,	// LD_B_bo_pre
    0U,	// LD_B_bo_r
    0U,	// LD_B_bol
    0U,	// LD_B_slr_post_v110
    0U,	// LD_B_slr_v110
    0U,	// LD_B_slro_v110
    0U,	// LD_B_sro_v110
    0U,	// LD_DA_abs
    0U,	// LD_DA_bo_bso
    0U,	// LD_DA_bo_c
    0U,	// LD_DA_bo_pos
    0U,	// LD_DA_bo_pre
    0U,	// LD_DA_bo_r
    0U,	// LD_D_abs
    0U,	// LD_D_bo_bso
    0U,	// LD_D_bo_c
    0U,	// LD_D_bo_pos
    0U,	// LD_D_bo_pre
    0U,	// LD_D_bo_r
    0U,	// LD_HU_abs
    0U,	// LD_HU_bo_bso
    0U,	// LD_HU_bo_c
    0U,	// LD_HU_bo_pos
    0U,	// LD_HU_bo_pre
    0U,	// LD_HU_bo_r
    0U,	// LD_HU_bol
    0U,	// LD_H_abs
    0U,	// LD_H_bo_bso
    0U,	// LD_H_bo_c
    0U,	// LD_H_bo_pos
    0U,	// LD_H_bo_pre
    0U,	// LD_H_bo_r
    0U,	// LD_H_bol
    0U,	// LD_H_slr
    0U,	// LD_H_slr_post
    0U,	// LD_H_slr_post_v110
    0U,	// LD_H_slr_v110
    0U,	// LD_H_slro
    0U,	// LD_H_slro_v110
    0U,	// LD_H_sro
    0U,	// LD_H_sro_v110
    0U,	// LD_Q_abs
    0U,	// LD_Q_bo_bso
    0U,	// LD_Q_bo_c
    0U,	// LD_Q_bo_pos
    0U,	// LD_Q_bo_pre
    0U,	// LD_Q_bo_r
    0U,	// LD_W_abs
    0U,	// LD_W_bo_bso
    0U,	// LD_W_bo_c
    0U,	// LD_W_bo_pos
    0U,	// LD_W_bo_pre
    0U,	// LD_W_bo_r
    0U,	// LD_W_bol
    0U,	// LD_W_sc
    0U,	// LD_W_slr
    0U,	// LD_W_slr_post
    0U,	// LD_W_slr_post_v110
    0U,	// LD_W_slr_v110
    0U,	// LD_W_slro
    0U,	// LD_W_slro_v110
    0U,	// LD_W_sro
    0U,	// LD_W_sro_v110
    0U,	// LEA_abs
    0U,	// LEA_bo_bso
    0U,	// LEA_bol
    0U,	// LHA_abs
    0U,	// LOOPU_brr
    0U,	// LOOP_brr
    0U,	// LOOP_sbr
    0U,	// LTODF_rr
    0U,	// LT_A_rr
    0U,	// LT_B
    0U,	// LT_BU
    0U,	// LT_H
    0U,	// LT_HU
    0U,	// LT_U_rc
    0U,	// LT_U_rr
    1U,	// LT_U_srcv110
    0U,	// LT_U_srrv110
    0U,	// LT_W
    0U,	// LT_WU
    0U,	// LT_rc
    0U,	// LT_rr
    0U,	// LT_src
    0U,	// LT_srr
    329U,	// MADDMS_H_rrr1_LL
    393U,	// MADDMS_H_rrr1_LU
    457U,	// MADDMS_H_rrr1_UL
    521U,	// MADDMS_H_rrr1_UU
    580U,	// MADDMS_U_rcr_v110
    137U,	// MADDMS_U_rrr2_v110
    68U,	// MADDMS_rcr_v110
    137U,	// MADDMS_rrr2_v110
    329U,	// MADDM_H_rrr1_LL
    393U,	// MADDM_H_rrr1_LU
    457U,	// MADDM_H_rrr1_UL
    521U,	// MADDM_H_rrr1_UU
    137U,	// MADDM_H_rrr1_v110
    137U,	// MADDM_Q_rrr1_v110
    580U,	// MADDM_U_rcr_v110
    137U,	// MADDM_U_rrr2_v110
    68U,	// MADDM_rcr_v110
    137U,	// MADDM_rrr2_v110
    329U,	// MADDRS_H_rrr1_LL
    393U,	// MADDRS_H_rrr1_LU
    457U,	// MADDRS_H_rrr1_UL
    457U,	// MADDRS_H_rrr1_UL_2
    521U,	// MADDRS_H_rrr1_UU
    3337U,	// MADDRS_H_rrr1_v110
    1U,	// MADDRS_Q_rrr1_L_L
    1U,	// MADDRS_Q_rrr1_U_U
    3337U,	// MADDRS_Q_rrr1_v110
    329U,	// MADDR_H_rrr1_LL
    393U,	// MADDR_H_rrr1_LU
    457U,	// MADDR_H_rrr1_UL
    457U,	// MADDR_H_rrr1_UL_2
    521U,	// MADDR_H_rrr1_UU
    3337U,	// MADDR_H_rrr1_v110
    1U,	// MADDR_Q_rrr1_L_L
    1U,	// MADDR_Q_rrr1_U_U
    3337U,	// MADDR_Q_rrr1_v110
    329U,	// MADDSUMS_H_rrr1_LL
    393U,	// MADDSUMS_H_rrr1_LU
    457U,	// MADDSUMS_H_rrr1_UL
    521U,	// MADDSUMS_H_rrr1_UU
    329U,	// MADDSUM_H_rrr1_LL
    393U,	// MADDSUM_H_rrr1_LU
    457U,	// MADDSUM_H_rrr1_UL
    521U,	// MADDSUM_H_rrr1_UU
    329U,	// MADDSURS_H_rrr1_LL
    393U,	// MADDSURS_H_rrr1_LU
    457U,	// MADDSURS_H_rrr1_UL
    521U,	// MADDSURS_H_rrr1_UU
    329U,	// MADDSUR_H_rrr1_LL
    393U,	// MADDSUR_H_rrr1_LU
    457U,	// MADDSUR_H_rrr1_UL
    521U,	// MADDSUR_H_rrr1_UU
    329U,	// MADDSUS_H_rrr1_LL
    393U,	// MADDSUS_H_rrr1_LU
    457U,	// MADDSUS_H_rrr1_UL
    521U,	// MADDSUS_H_rrr1_UU
    329U,	// MADDSU_H_rrr1_LL
    393U,	// MADDSU_H_rrr1_LU
    457U,	// MADDSU_H_rrr1_UL
    521U,	// MADDSU_H_rrr1_UU
    329U,	// MADDS_H_rrr1_LL
    393U,	// MADDS_H_rrr1_LU
    457U,	// MADDS_H_rrr1_UL
    521U,	// MADDS_H_rrr1_UU
    3337U,	// MADDS_H_rrr1_v110
    3337U,	// MADDS_Q_rrr1
    649U,	// MADDS_Q_rrr1_L
    1U,	// MADDS_Q_rrr1_L_L
    713U,	// MADDS_Q_rrr1_U
    3337U,	// MADDS_Q_rrr1_UU2_v110
    1U,	// MADDS_Q_rrr1_U_U
    3337U,	// MADDS_Q_rrr1_e
    649U,	// MADDS_Q_rrr1_e_L
    1U,	// MADDS_Q_rrr1_e_L_L
    713U,	// MADDS_Q_rrr1_e_U
    1U,	// MADDS_Q_rrr1_e_U_U
    68U,	// MADDS_U_rcr
    68U,	// MADDS_U_rcr_e
    137U,	// MADDS_U_rrr2
    137U,	// MADDS_U_rrr2_e
    68U,	// MADDS_rcr
    68U,	// MADDS_rcr_e
    137U,	// MADDS_rrr2
    137U,	// MADDS_rrr2_e
    137U,	// MADD_DF_rrr
    137U,	// MADD_F_rrr
    329U,	// MADD_H_rrr1_LL
    393U,	// MADD_H_rrr1_LU
    457U,	// MADD_H_rrr1_UL
    521U,	// MADD_H_rrr1_UU
    3337U,	// MADD_H_rrr1_v110
    3337U,	// MADD_Q_rrr1
    649U,	// MADD_Q_rrr1_L
    1U,	// MADD_Q_rrr1_L_L
    713U,	// MADD_Q_rrr1_U
    3337U,	// MADD_Q_rrr1_UU2_v110
    1U,	// MADD_Q_rrr1_U_U
    3337U,	// MADD_Q_rrr1_e
    649U,	// MADD_Q_rrr1_e_L
    1U,	// MADD_Q_rrr1_e_L_L
    713U,	// MADD_Q_rrr1_e_U
    1U,	// MADD_Q_rrr1_e_U_U
    580U,	// MADD_U_rcr
    137U,	// MADD_U_rrr2
    68U,	// MADD_rcr
    68U,	// MADD_rcr_e
    137U,	// MADD_rrr2
    137U,	// MADD_rrr2_e
    0U,	// MAX_B
    0U,	// MAX_BU
    0U,	// MAX_DF_rr
    0U,	// MAX_F_rr
    0U,	// MAX_H
    0U,	// MAX_HU
    0U,	// MAX_U_rc
    0U,	// MAX_U_rr
    0U,	// MAX_rc
    0U,	// MAX_rr
    0U,	// MFCR_rlc
    0U,	// MIN_B
    0U,	// MIN_BU
    0U,	// MIN_DF_rr
    0U,	// MIN_F_rr
    0U,	// MIN_H
    0U,	// MIN_HU
    0U,	// MIN_U_rc
    0U,	// MIN_U_rr
    0U,	// MIN_rc
    0U,	// MIN_rr
    0U,	// MOVH_A_rlc
    0U,	// MOVH_rlc
    0U,	// MOVZ_A_sr
    0U,	// MOV_AA_rr
    0U,	// MOV_AA_srr_srr
    0U,	// MOV_AA_srr_srr_v110
    0U,	// MOV_A_rr
    0U,	// MOV_A_src
    0U,	// MOV_A_srr
    0U,	// MOV_A_srr_v110
    0U,	// MOV_D_rr
    0U,	// MOV_D_srr_srr
    0U,	// MOV_D_srr_srr_v110
    0U,	// MOV_U_rlc
    0U,	// MOV_rlc
    0U,	// MOV_rlc_e
    0U,	// MOV_rr
    0U,	// MOV_rr_e
    0U,	// MOV_rr_eab
    0U,	// MOV_sc
    0U,	// MOV_sc_v110
    0U,	// MOV_src
    0U,	// MOV_src_e
    0U,	// MOV_srr
    329U,	// MSUBADMS_H_rrr1_LL
    393U,	// MSUBADMS_H_rrr1_LU
    457U,	// MSUBADMS_H_rrr1_UL
    521U,	// MSUBADMS_H_rrr1_UU
    329U,	// MSUBADM_H_rrr1_LL
    393U,	// MSUBADM_H_rrr1_LU
    457U,	// MSUBADM_H_rrr1_UL
    521U,	// MSUBADM_H_rrr1_UU
    329U,	// MSUBADRS_H_rrr1_LL
    393U,	// MSUBADRS_H_rrr1_LU
    457U,	// MSUBADRS_H_rrr1_UL
    521U,	// MSUBADRS_H_rrr1_UU
    3337U,	// MSUBADRS_H_rrr1_v110
    329U,	// MSUBADR_H_rrr1_LL
    393U,	// MSUBADR_H_rrr1_LU
    457U,	// MSUBADR_H_rrr1_UL
    521U,	// MSUBADR_H_rrr1_UU
    3337U,	// MSUBADR_H_rrr1_v110
    329U,	// MSUBADS_H_rrr1_LL
    393U,	// MSUBADS_H_rrr1_LU
    457U,	// MSUBADS_H_rrr1_UL
    521U,	// MSUBADS_H_rrr1_UU
    329U,	// MSUBAD_H_rrr1_LL
    393U,	// MSUBAD_H_rrr1_LU
    457U,	// MSUBAD_H_rrr1_UL
    521U,	// MSUBAD_H_rrr1_UU
    329U,	// MSUBMS_H_rrr1_LL
    393U,	// MSUBMS_H_rrr1_LU
    457U,	// MSUBMS_H_rrr1_UL
    521U,	// MSUBMS_H_rrr1_UU
    68U,	// MSUBMS_U_rcrv110
    137U,	// MSUBMS_U_rrr2v110
    68U,	// MSUBMS_rcrv110
    137U,	// MSUBMS_rrr2v110
    329U,	// MSUBM_H_rrr1_LL
    393U,	// MSUBM_H_rrr1_LU
    457U,	// MSUBM_H_rrr1_UL
    521U,	// MSUBM_H_rrr1_UU
    137U,	// MSUBM_H_rrr1_v110
    137U,	// MSUBM_Q_rrr1_v110
    68U,	// MSUBM_U_rcrv110
    137U,	// MSUBM_U_rrr2v110
    68U,	// MSUBM_rcrv110
    137U,	// MSUBM_rrr2v110
    329U,	// MSUBRS_H_rrr1_LL
    393U,	// MSUBRS_H_rrr1_LU
    457U,	// MSUBRS_H_rrr1_UL
    457U,	// MSUBRS_H_rrr1_UL_2
    521U,	// MSUBRS_H_rrr1_UU
    3337U,	// MSUBRS_H_rrr1_v110
    1U,	// MSUBRS_Q_rrr1_L_L
    1U,	// MSUBRS_Q_rrr1_U_U
    3337U,	// MSUBRS_Q_rrr1_v110
    329U,	// MSUBR_H_rrr1_LL
    393U,	// MSUBR_H_rrr1_LU
    457U,	// MSUBR_H_rrr1_UL
    457U,	// MSUBR_H_rrr1_UL_2
    521U,	// MSUBR_H_rrr1_UU
    3337U,	// MSUBR_H_rrr1_v110
    1U,	// MSUBR_Q_rrr1_L_L
    1U,	// MSUBR_Q_rrr1_U_U
    3337U,	// MSUBR_Q_rrr1_v110
    329U,	// MSUBS_H_rrr1_LL
    393U,	// MSUBS_H_rrr1_LU
    457U,	// MSUBS_H_rrr1_UL
    521U,	// MSUBS_H_rrr1_UU
    3337U,	// MSUBS_H_rrr1_v110
    3337U,	// MSUBS_Q_rrr1
    649U,	// MSUBS_Q_rrr1_L
    1U,	// MSUBS_Q_rrr1_L_L
    713U,	// MSUBS_Q_rrr1_U
    3337U,	// MSUBS_Q_rrr1_UU2_v110
    1U,	// MSUBS_Q_rrr1_U_U
    3337U,	// MSUBS_Q_rrr1_e
    649U,	// MSUBS_Q_rrr1_e_L
    1U,	// MSUBS_Q_rrr1_e_L_L
    713U,	// MSUBS_Q_rrr1_e_U
    1U,	// MSUBS_Q_rrr1_e_U_U
    68U,	// MSUBS_U_rcr
    68U,	// MSUBS_U_rcr_e
    137U,	// MSUBS_U_rrr2
    137U,	// MSUBS_U_rrr2_e
    68U,	// MSUBS_rcr
    68U,	// MSUBS_rcr_e
    137U,	// MSUBS_rrr2
    137U,	// MSUBS_rrr2_e
    137U,	// MSUB_DF_rrr
    137U,	// MSUB_F_rrr
    329U,	// MSUB_H_rrr1_LL
    393U,	// MSUB_H_rrr1_LU
    457U,	// MSUB_H_rrr1_UL
    521U,	// MSUB_H_rrr1_UU
    3337U,	// MSUB_H_rrr1_v110
    3337U,	// MSUB_Q_rrr1
    649U,	// MSUB_Q_rrr1_L
    1U,	// MSUB_Q_rrr1_L_L
    713U,	// MSUB_Q_rrr1_U
    3337U,	// MSUB_Q_rrr1_UU2_v110
    1U,	// MSUB_Q_rrr1_U_U
    3337U,	// MSUB_Q_rrr1_e
    649U,	// MSUB_Q_rrr1_e_L
    1U,	// MSUB_Q_rrr1_e_L_L
    713U,	// MSUB_Q_rrr1_e_U
    1U,	// MSUB_Q_rrr1_e_U_U
    580U,	// MSUB_U_rcr
    137U,	// MSUB_U_rrr2
    68U,	// MSUB_rcr
    68U,	// MSUB_rcr_e
    137U,	// MSUB_rrr2
    137U,	// MSUB_rrr2_e
    0U,	// MTCR_rlc
    16U,	// MULMS_H_rr1_LL2e
    20U,	// MULMS_H_rr1_LU2e
    24U,	// MULMS_H_rr1_UL2e
    28U,	// MULMS_H_rr1_UU2e
    16U,	// MULM_H_rr1_LL2e
    20U,	// MULM_H_rr1_LU2e
    24U,	// MULM_H_rr1_UL2e
    28U,	// MULM_H_rr1_UU2e
    0U,	// MULM_U_rc
    0U,	// MULM_U_rr
    0U,	// MULM_rc
    0U,	// MULM_rr
    16U,	// MULR_H_rr1_LL2e
    20U,	// MULR_H_rr1_LU2e
    24U,	// MULR_H_rr1_UL2e
    28U,	// MULR_H_rr1_UU2e
    4U,	// MULR_H_rr_v110
    0U,	// MULR_Q_rr1_2LL
    0U,	// MULR_Q_rr1_2UU
    4U,	// MULR_Q_rr_v110
    0U,	// MULS_U_rc
    0U,	// MULS_U_rr2
    0U,	// MULS_U_rr_v110
    0U,	// MULS_rc
    0U,	// MULS_rr2
    0U,	// MULS_rr_v110
    0U,	// MUL_DF_rrr
    0U,	// MUL_F_rrr
    16U,	// MUL_H_rr1_LL2e
    20U,	// MUL_H_rr1_LU2e
    24U,	// MUL_H_rr1_UL2e
    28U,	// MUL_H_rr1_UU2e
    4U,	// MUL_H_rr_v110
    4U,	// MUL_Q_rr1_2
    0U,	// MUL_Q_rr1_2LL
    0U,	// MUL_Q_rr1_2UU
    32U,	// MUL_Q_rr1_2_L
    32U,	// MUL_Q_rr1_2_Le
    36U,	// MUL_Q_rr1_2_U
    36U,	// MUL_Q_rr1_2_Ue
    4U,	// MUL_Q_rr1_2__e
    4U,	// MUL_Q_rr_v110
    0U,	// MUL_U_rc
    0U,	// MUL_U_rr2
    0U,	// MUL_rc
    0U,	// MUL_rc_e
    0U,	// MUL_rr2
    0U,	// MUL_rr2_e
    0U,	// MUL_rr_v110
    0U,	// MUL_srr
    1U,	// NAND_T
    0U,	// NAND_rc
    0U,	// NAND_rr
    0U,	// NEG_DF_rr
    0U,	// NEG_F_rr
    0U,	// NEZ_A
    0U,	// NE_A
    0U,	// NE_rc
    0U,	// NE_rr
    0U,	// NOP_sr
    0U,	// NOP_sys
    1U,	// NOR_T
    0U,	// NOR_rc
    0U,	// NOR_rr
    0U,	// NOT_sr
    1U,	// ORN_T
    0U,	// ORN_rc
    0U,	// ORN_rr
    1U,	// OR_ANDN_T
    1U,	// OR_AND_T
    0U,	// OR_EQ_rc
    0U,	// OR_EQ_rr
    0U,	// OR_GE_U_rc
    0U,	// OR_GE_U_rr
    0U,	// OR_GE_rc
    0U,	// OR_GE_rr
    0U,	// OR_LT_U_rc
    0U,	// OR_LT_U_rr
    0U,	// OR_LT_rc
    0U,	// OR_LT_rr
    0U,	// OR_NE_rc
    0U,	// OR_NE_rr
    1U,	// OR_NOR_T
    1U,	// OR_OR_T
    1U,	// OR_T
    2U,	// OR_rc
    0U,	// OR_rr
    0U,	// OR_sc
    0U,	// OR_sc_v110
    0U,	// OR_srr
    0U,	// OR_srr_v110
    0U,	// PACK_rrr
    0U,	// PARITY_rr
    0U,	// PARITY_rr_v110
    0U,	// POPCNT_W_rr
    0U,	// Q31TOF_rr
    0U,	// QSEED_DF_rr
    0U,	// QSEED_F_rr
    0U,	// REM64_U_rr
    0U,	// REM64_rr
    0U,	// RESTORE_sys
    0U,	// RET_sr
    0U,	// RET_sys
    0U,	// RET_sys_v110
    0U,	// RFE_sr
    0U,	// RFE_sys_sys
    0U,	// RFE_sys_sys_v110
    0U,	// RFM_sys
    0U,	// RSLCX_sys
    0U,	// RSTV_sys
    0U,	// RSUBS_U_rc
    0U,	// RSUBS_rc
    0U,	// RSUB_rc
    0U,	// RSUB_sr_sr
    0U,	// RSUB_sr_sr_v110
    0U,	// SAT_BU_rr
    0U,	// SAT_BU_sr
    0U,	// SAT_BU_sr_v110
    0U,	// SAT_B_rr
    0U,	// SAT_B_sr
    0U,	// SAT_B_sr_v110
    0U,	// SAT_HU_rr
    0U,	// SAT_HU_sr
    0U,	// SAT_HU_sr_v110
    0U,	// SAT_H_rr
    0U,	// SAT_H_sr
    0U,	// SAT_H_sr_v110
    68U,	// SELN_A_rcr_v110
    137U,	// SELN_A_rrr_v110
    68U,	// SELN_rcr
    137U,	// SELN_rrr
    68U,	// SEL_A_rcr_v110
    137U,	// SEL_A_rrr_v110
    68U,	// SEL_rcr
    137U,	// SEL_rrr
    0U,	// SHAS_rc
    0U,	// SHAS_rr
    0U,	// SHA_B_rc
    0U,	// SHA_B_rr
    0U,	// SHA_H_rc
    0U,	// SHA_H_rr
    0U,	// SHA_rc
    0U,	// SHA_rr
    0U,	// SHA_src
    0U,	// SHA_src_v110
    0U,	// SHUFFLE_rc
    1U,	// SH_ANDN_T
    1U,	// SH_AND_T
    0U,	// SH_B_rc
    0U,	// SH_B_rr
    0U,	// SH_EQ_rc
    0U,	// SH_EQ_rr
    0U,	// SH_GE_U_rc
    0U,	// SH_GE_U_rr
    0U,	// SH_GE_rc
    0U,	// SH_GE_rr
    0U,	// SH_H_rc
    0U,	// SH_H_rr
    0U,	// SH_LT_U_rc
    0U,	// SH_LT_U_rr
    0U,	// SH_LT_rc
    0U,	// SH_LT_rr
    1U,	// SH_NAND_T
    0U,	// SH_NE_rc
    0U,	// SH_NE_rr
    1U,	// SH_NOR_T
    1U,	// SH_ORN_T
    1U,	// SH_OR_T
    1U,	// SH_XNOR_T
    1U,	// SH_XOR_T
    0U,	// SH_rc
    0U,	// SH_rr
    0U,	// SH_src
    0U,	// SH_src_v110
    0U,	// STLCX_abs
    0U,	// STLCX_bo_bso
    0U,	// STUCX_abs
    0U,	// STUCX_bo_bso
    0U,	// ST_A_abs
    0U,	// ST_A_bo_bso
    0U,	// ST_A_bo_c
    0U,	// ST_A_bo_pos
    0U,	// ST_A_bo_pre
    0U,	// ST_A_bo_r
    0U,	// ST_A_bol
    0U,	// ST_A_sc
    0U,	// ST_A_sro
    0U,	// ST_A_sro_v110
    0U,	// ST_A_ssr
    0U,	// ST_A_ssr_pos
    0U,	// ST_A_ssr_pos_v110
    0U,	// ST_A_ssr_v110
    0U,	// ST_A_ssro
    0U,	// ST_A_ssro_v110
    0U,	// ST_B_abs
    0U,	// ST_B_bo_bso
    0U,	// ST_B_bo_c
    0U,	// ST_B_bo_pos
    0U,	// ST_B_bo_pre
    0U,	// ST_B_bo_r
    0U,	// ST_B_bol
    0U,	// ST_B_sro
    0U,	// ST_B_sro_v110
    0U,	// ST_B_ssr
    0U,	// ST_B_ssr_pos
    0U,	// ST_B_ssr_pos_v110
    0U,	// ST_B_ssr_v110
    0U,	// ST_B_ssro
    0U,	// ST_B_ssro_v110
    0U,	// ST_DA_abs
    0U,	// ST_DA_bo_bso
    0U,	// ST_DA_bo_c
    0U,	// ST_DA_bo_pos
    0U,	// ST_DA_bo_pre
    0U,	// ST_DA_bo_r
    0U,	// ST_D_abs
    0U,	// ST_D_bo_bso
    0U,	// ST_D_bo_c
    0U,	// ST_D_bo_pos
    0U,	// ST_D_bo_pre
    0U,	// ST_D_bo_r
    0U,	// ST_H_abs
    0U,	// ST_H_bo_bso
    0U,	// ST_H_bo_c
    0U,	// ST_H_bo_pos
    0U,	// ST_H_bo_pre
    0U,	// ST_H_bo_r
    0U,	// ST_H_bol
    0U,	// ST_H_sro
    0U,	// ST_H_sro_v110
    0U,	// ST_H_ssr
    0U,	// ST_H_ssr_pos
    0U,	// ST_H_ssr_pos_v110
    0U,	// ST_H_ssr_v110
    0U,	// ST_H_ssro
    0U,	// ST_H_ssro_v110
    0U,	// ST_Q_abs
    0U,	// ST_Q_bo_bso
    0U,	// ST_Q_bo_c
    0U,	// ST_Q_bo_pos
    0U,	// ST_Q_bo_pre
    0U,	// ST_Q_bo_r
    0U,	// ST_T
    0U,	// ST_W_abs
    0U,	// ST_W_bo_bso
    0U,	// ST_W_bo_c
    0U,	// ST_W_bo_pos
    0U,	// ST_W_bo_pre
    0U,	// ST_W_bo_r
    0U,	// ST_W_bol
    0U,	// ST_W_sc
    0U,	// ST_W_sro
    0U,	// ST_W_sro_v110
    0U,	// ST_W_ssr
    0U,	// ST_W_ssr_pos
    0U,	// ST_W_ssr_pos_v110
    0U,	// ST_W_ssr_v110
    0U,	// ST_W_ssro
    0U,	// ST_W_ssro_v110
    0U,	// SUBC_rr
    4U,	// SUBSC_A_rr
    0U,	// SUBS_BU_rr
    0U,	// SUBS_B_rr
    0U,	// SUBS_HU_rr
    0U,	// SUBS_H_rr
    0U,	// SUBS_U_rr
    0U,	// SUBS_rr
    0U,	// SUBS_srr
    0U,	// SUBX_rr
    0U,	// SUB_A_rr
    0U,	// SUB_A_sc
    0U,	// SUB_A_sc_v110
    0U,	// SUB_B_rr
    0U,	// SUB_DF_rrr
    0U,	// SUB_F_rrr
    0U,	// SUB_H_rr
    0U,	// SUB_rr
    0U,	// SUB_srr
    0U,	// SUB_srr_15a
    0U,	// SUB_srr_a15
    0U,	// SVLCX_sys
    0U,	// SWAPMSK_W_bo_bso
    0U,	// SWAPMSK_W_bo_c
    0U,	// SWAPMSK_W_bo_i
    0U,	// SWAPMSK_W_bo_pos
    0U,	// SWAPMSK_W_bo_pre
    0U,	// SWAPMSK_W_bo_r
    0U,	// SWAP_A_abs
    0U,	// SWAP_A_bo_bso
    0U,	// SWAP_A_bo_c
    0U,	// SWAP_A_bo_pos
    0U,	// SWAP_A_bo_pre
    0U,	// SWAP_A_bo_r
    0U,	// SWAP_W_abs
    0U,	// SWAP_W_bo_bso
    0U,	// SWAP_W_bo_c
    0U,	// SWAP_W_bo_i
    0U,	// SWAP_W_bo_pos
    0U,	// SWAP_W_bo_pre
    0U,	// SWAP_W_bo_r
    0U,	// SYSCALL_rc
    0U,	// TLBDEMAP_rr
    0U,	// TLBFLUSH_A_rr
    0U,	// TLBFLUSH_B_rr
    0U,	// TLBMAP_rr
    0U,	// TLBPROBE_A_rr
    0U,	// TLBPROBE_I_rr
    0U,	// TRAPSV_sys
    0U,	// TRAPV_sys
    0U,	// ULTODF_rr
    0U,	// UNPACK_rr_rr
    0U,	// UNPACK_rr_rr_v110
    0U,	// UPDFL_rr
    0U,	// UTODF_rr
    0U,	// UTOF_rr
    0U,	// WAIT_sys
    1U,	// XNOR_T
    0U,	// XNOR_rc
    0U,	// XNOR_rr
    0U,	// XOR_EQ_rc
    0U,	// XOR_EQ_rr
    0U,	// XOR_GE_U_rc
    0U,	// XOR_GE_U_rr
    0U,	// XOR_GE_rc
    0U,	// XOR_GE_rr
    0U,	// XOR_LT_U_rc
    0U,	// XOR_LT_U_rr
    0U,	// XOR_LT_rc
    0U,	// XOR_LT_rr
    0U,	// XOR_NE_rc
    0U,	// XOR_NE_rr
    1U,	// XOR_T
    0U,	// XOR_rc
    0U,	// XOR_rr
    0U,	// XOR_srr
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  MnemonicBitsInfo MBI = {
#ifndef CAPSTONE_DIET
    AsmStrs+(Bits & 4095)-1,
#else
    NULL,
#endif // CAPSTONE_DIET
    Bits
  };
  return MBI;
}

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
static void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint64_t Bits = MnemonicInfo.second;
  CS_ASSERT_RET(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 12) & 15) {
  default: CS_ASSERT_RET(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 0, O);
    break;
  case 2:
    // BISR_rc, SYSCALL_rc
    printSExtImm_9(MI, 0, O);
    return;
    break;
  case 3:
    // BISR_sc, BISR_sc_v110
    printZExtImm_8(MI, 0, O);
    return;
    break;
  case 4:
    // CALLA_b, CALL_b, FCALLA_b, FCALL_b, JA_b, JLA_b, JL_b, J_b
    printDisp24Imm(MI, 0, O);
    return;
    break;
  case 5:
    // CALL_sb, J_sb, J_sb_v110
    printDisp8Imm(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printOperand(MI, 1, O);
    break;
  case 7:
    // LDLCX_abs, LDUCX_abs, STLCX_abs, STUCX_abs, ST_T
    printOff18Imm(MI, 0, O);
    break;
  case 8:
    // LDMST_abs, ST_A_abs, ST_B_abs, ST_DA_abs, ST_D_abs, ST_H_abs, ST_Q_abs...
    printOff18Imm(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 9:
    // LOOPU_brr
    printDisp15Imm(MI, 0, O);
    return;
    break;
  case 10:
    // MTCR_rlc
    printSExtImm_16(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 16) & 15) {
  default: CS_ASSERT_RET(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // CACHEA_I_bo_bso, CACHEA_I_bo_pre, CACHEA_WI_bo_bso, CACHEA_WI_bo_pre, ...
    SStream_concat1(O, ']');
    break;
  case 2:
    // CACHEA_I_bo_c, CACHEA_WI_bo_c, CACHEA_W_bo_c, CMPSWAP_W_bo_c, LDMST_bo...
    SStream_concat0(O, "+c]");
    break;
  case 3:
    // CACHEA_I_bo_pos, CACHEA_WI_bo_pos, CACHEA_W_bo_pos, CACHEI_I_bo_pos, C...
    SStream_concat0(O, "+]");
    break;
  case 4:
    // CACHEA_I_bo_r, CACHEA_WI_bo_r, CACHEA_W_bo_r
    SStream_concat0(O, "+r]");
    return;
    break;
  case 5:
    // CALLI_rr, CALLI_rr_v110, DISABLE_sys_1, FCALLA_i, JI_rr, JI_rr_v110, J...
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_r, LDMST_bo_r, ST_A_bo_r, ST_B_bo_r, ST_DA_bo_r, ST_D_bo_...
    SStream_concat0(O, "+r], ");
    break;
  case 7:
    // LD_A_bo_bso, LD_A_bo_c, LD_A_bo_pos, LD_A_bo_r, LD_A_bol, LD_A_sc, LD_...
    SStream_concat0(O, ", [");
    printOperand(MI, 1, O);
    break;
  case 8:
    // LD_A_bo_pre, LD_BU_bo_pre, LD_B_bo_pre, LD_DA_bo_pre, LD_D_bo_pre, LD_...
    SStream_concat0(O, ", [+");
    printOperand(MI, 1, O);
    SStream_concat1(O, ']');
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 9:
    // ST_A_ssr, ST_A_ssr_v110, ST_B_ssr, ST_B_ssr_v110, ST_H_ssr, ST_H_ssr_v...
    SStream_concat0(O, "], ");
    printOperand(MI, 1, O);
    return;
    break;
  case 10:
    // ST_A_ssr_pos, ST_A_ssr_pos_v110, ST_B_ssr_pos, ST_B_ssr_pos_v110, ST_H...
    SStream_concat0(O, "+], ");
    printOperand(MI, 1, O);
    return;
    break;
  case 11:
    // SWAPMSK_W_bo_i, SWAP_W_bo_i
    SStream_concat0(O, "+i], ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 23 unique commands.
  switch ((Bits >> 20) & 31) {
  default: CS_ASSERT_RET(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ABSS_B_rr_v110, ABSS_H_rr, ABSS_rr, ADDSC_AT_rr, ADDSC_A_rr, CADDN_A_r...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADD_A_src, ADD_src, JEQ_brc, JGE_brc, JNE_brc, MOV_src, MOV_src_e, SHA...
    printSExtImm_4(MI, 1, O);
    break;
  case 3:
    // ADD_DF_rrr, ADD_F_rrr, CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, C...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    break;
  case 4:
    // AND_sc, AND_sc_v110, MOV_sc, MOV_sc_v110, OR_sc, OR_sc_v110, ST_A_sc, ...
    printZExtImm_8(MI, 1, O);
    break;
  case 5:
    // CACHEA_I_bo_bso, CACHEA_I_bo_c, CACHEA_I_bo_pos, CACHEA_I_bo_pre, CACH...
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printSExtImm_10(MI, 2, O);
    SStream_concat0(O, ", ");
    break;
  case 7:
    // CMPSWAP_W_bo_r, LDMST_bo_r
    printOperand(MI, 0, O);
    return;
    break;
  case 8:
    // JEQ_sbc1, JEQ_sbc2, JEQ_sbc_v110, JNE_sbc1, JNE_sbc2, JNE_sbc_v110
    printSExtImm_4(MI, 2, O);
    SStream_concat0(O, ", ");
    printDisp4Imm(MI, 1, O);
    return;
    break;
  case 9:
    // JGEZ_sbr, JGEZ_sbr_v110, JGTZ_sbr, JGTZ_sbr_v110, JLEZ_sbr, JLEZ_sbr_v...
    printDisp4Imm(MI, 1, O);
    return;
    break;
  case 10:
    // JGE_U_brc, JLT_U_brc, JLT_brc, JNED_brc, JNEI_brc, MOV_A_src, ST_A_sro...
    printZExtImm_4(MI, 1, O);
    break;
  case 11:
    // JNZ_A_brr, JZ_A_brr, LOOP_brr
    printDisp15Imm(MI, 1, O);
    return;
    break;
  case 12:
    // JNZ_sb, JNZ_sb_v110, JZ_sb, JZ_sb_v110
    printDisp8Imm(MI, 1, O);
    return;
    break;
  case 13:
    // LD_A_abs, LD_BU_abs, LD_B_abs, LD_DA_abs, LD_D_abs, LD_HU_abs, LD_H_ab...
    printOff18Imm(MI, 1, O);
    return;
    break;
  case 14:
    // LD_A_bo_bso, LD_A_bol, LD_A_sc, LD_A_slr, LD_A_slr_v110, LD_A_slro, LD...
    SStream_concat1(O, ']');
    break;
  case 15:
    // LD_A_bo_c, LD_BU_bo_c, LD_B_bo_c, LD_DA_bo_c, LD_D_bo_c, LD_HU_bo_c, L...
    SStream_concat0(O, "+c]");
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 16:
    // LD_A_bo_pos, LD_A_slr_post, LD_A_slr_post_v110, LD_BU_bo_pos, LD_BU_sl...
    SStream_concat0(O, "+]");
    break;
  case 17:
    // LD_A_bo_r, LD_BU_bo_r, LD_B_bo_r, LD_DA_bo_r, LD_D_bo_r, LD_HU_bo_r, L...
    SStream_concat0(O, "+r]");
    return;
    break;
  case 18:
    // LOOP_sbr
    printOExtImm_4(MI, 1, O);
    return;
    break;
  case 19:
    // MFCR_rlc, MOVH_A_rlc, MOVH_rlc, MOV_U_rlc, MOV_rlc_e
    printZExtImm_16(MI, 1, O);
    return;
    break;
  case 20:
    // MOV_rlc
    printSExtImm_16(MI, 1, O);
    return;
    break;
  case 21:
    // ST_A_bol, ST_B_bol, ST_H_bol, ST_W_bol
    printSExtImm_16(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 22:
    // ST_A_ssro, ST_A_ssro_v110, ST_B_ssro, ST_B_ssro_v110, ST_H_ssro, ST_H_...
    printZExtImm_4(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 25) & 15) {
  default: CS_ASSERT_RET(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ABSS_B_rr_v110, ABSS_H_rr, ABSS_rr, ABS_B_rr, ABS_DF_rr, ABS_F_rr, ABS...
    return;
    break;
  case 2:
    // ADD_DF_rrr, ADD_F_rrr, CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, C...
    printOperand(MI, 1, O);
    break;
  case 3:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printOperand(MI, 0, O);
    return;
    break;
  case 4:
    // DVADJ_rrr, DVADJ_rrr_v110, DVSTEP_U_rrr, DVSTEP_U_rrrv110, DVSTEP_rrr,...
    printOperand(MI, 2, O);
    break;
  case 5:
    // LD_A_bo_bso, LD_A_bo_pos, LD_BU_bo_bso, LD_BU_bo_pos, LD_B_bo_bso, LD_...
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 6:
    // LD_A_bol, LD_BU_bol, LD_B_bol, LD_HU_bol, LD_H_bol, LD_W_bol, LEA_bol
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 7:
    // LD_A_sc, LD_W_sc
    printZExtImm_8(MI, 2, O);
    return;
    break;
  case 8:
    // LD_A_slro, LD_A_slro_v110, LD_A_sro, LD_A_sro_v110, LD_BU_slro, LD_BU_...
    printZExtImm_4(MI, 2, O);
    return;
    break;
  case 9:
    // MULR_Q_rr1_2LL, MUL_Q_rr1_2LL
    SStream_concat0(O, "l, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 10:
    // MULR_Q_rr1_2UU, MUL_Q_rr1_2UU
    SStream_concat0(O, "u, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 4 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 29) & 31) {
  default: CS_ASSERT_RET(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ABSDIF_rc, ADDC_rc, ADDS_U_rc, ADDS_rc, ADDX_rc, ADD_rc, ANDN_rc, AND_...
    printSExtImm_9(MI, 2, O);
    return;
    break;
  case 2:
    // ADDIH_A_rlc, ADDIH_rlc
    printZExtImm_16(MI, 2, O);
    return;
    break;
  case 3:
    // ADDI_rlc
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 4:
    // ADDSC_AT_rr, ADDSC_A_rr, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110,...
    printOperand(MI, 1, O);
    break;
  case 5:
    // ADDSC_A_srrs_v110
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 6:
    // ADD_DF_rrr, ADD_F_rrr, DVADJ_rrr, DVADJ_rrr_v110, DVSTEP_U_rrr, DVSTEP...
    return;
    break;
  case 7:
    // ADD_src_15a, ADD_src_a15, CADDN_src, CADD_src, CMOVN_src, CMOV_src, EQ...
    printSExtImm_4(MI, 2, O);
    return;
    break;
  case 8:
    // ANDN_T, AND_ANDN_T, AND_AND_T, AND_NOR_T, AND_OR_T, AND_T, INSN_T, INS...
    printZExtImm_4(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printZExtImm_4(MI, 4, O);
    return;
    break;
  case 9:
    // CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRCN_rrr, CSUB...
    SStream_concat0(O, ", ");
    break;
  case 10:
    // EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrpw, EXTR_rrrw, IMASK_rcpw, IMASK_rrpw...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    break;
  case 11:
    // JEQ_A_brr, JEQ_brc, JEQ_brr, JGE_U_brc, JGE_U_brr, JGE_brc, JGE_brr, J...
    printDisp15Imm(MI, 2, O);
    return;
    break;
  case 12:
    // JEQ_sbr1, JEQ_sbr2, JEQ_sbr_v110, JNE_sbr1, JNE_sbr2, JNE_sbr_v110, JN...
    printDisp4Imm(MI, 2, O);
    return;
    break;
  case 13:
    // LT_U_srcv110
    printZExtImm_4(MI, 2, O);
    return;
    break;
  case 14:
    // MADDRS_Q_rrr1_L_L, MADDR_Q_rrr1_L_L, MADDS_Q_rrr1_L_L, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "l, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 15:
    // MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_U_U, MADDS_Q_rrr1_U_U, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "u, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 16:
    // OR_rc
    printZExtImm_9(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 34) & 15) {
  default: CS_ASSERT_RET(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    return;
    break;
  case 1:
    // ADDSC_A_rr, ADDSC_A_rr_v110, ADDSC_A_srrs, CADDN_A_rcr_v110, CADDN_rcr...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRCN_rrr, CSUB...
    printOperand(MI, 2, O);
    break;
  case 3:
    // EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrpw, EXTR_rrrw, IMASK_rcpw, IMASK_rcrw...
    printOperand(MI, 4, O);
    return;
    break;
  case 4:
    // MULMS_H_rr1_LL2e, MULM_H_rr1_LL2e, MULR_H_rr1_LL2e, MUL_H_rr1_LL2e
    SStream_concat0(O, "ll, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 5:
    // MULMS_H_rr1_LU2e, MULM_H_rr1_LU2e, MULR_H_rr1_LU2e, MUL_H_rr1_LU2e
    SStream_concat0(O, "lu, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 6:
    // MULMS_H_rr1_UL2e, MULM_H_rr1_UL2e, MULR_H_rr1_UL2e, MUL_H_rr1_UL2e
    SStream_concat0(O, "ul, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 7:
    // MULMS_H_rr1_UU2e, MULM_H_rr1_UU2e, MULR_H_rr1_UU2e, MUL_H_rr1_UU2e
    SStream_concat0(O, "uu, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 8:
    // MUL_Q_rr1_2_L, MUL_Q_rr1_2_Le
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 9:
    // MUL_Q_rr1_2_U, MUL_Q_rr1_2_Ue
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 38) & 15) {
  default: CS_ASSERT_RET(0 && "Invalid command number.");
  case 0:
    // ADDSC_A_rr, ADDSC_A_rr_v110, ADDSC_A_srrs, DIFSC_A_rr_v110, MULR_H_rr_...
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 1:
    // CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, CADD_rcr, MADDMS_rcr_v11...
    printSExtImm_9(MI, 3, O);
    return;
    break;
  case 2:
    // CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRCN_rrr, CSUB...
    return;
    break;
  case 3:
    // DEXTR_rrpw, DEXTR_rrrr, INSERT_rcpw, INSERT_rcrr, INSERT_rrpw, INSERT_...
    printOperand(MI, 3, O);
    break;
  case 4:
    // INSERT_rcrw, MADDRS_H_rrr1_v110, MADDRS_Q_rrr1_v110, MADDR_H_rrr1_v110...
    SStream_concat0(O, ", ");
    break;
  case 5:
    // MADDMS_H_rrr1_LL, MADDM_H_rrr1_LL, MADDRS_H_rrr1_LL, MADDR_H_rrr1_LL, ...
    SStream_concat0(O, "ll, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 6:
    // MADDMS_H_rrr1_LU, MADDM_H_rrr1_LU, MADDRS_H_rrr1_LU, MADDR_H_rrr1_LU, ...
    SStream_concat0(O, "lu, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MADDMS_H_rrr1_UL, MADDM_H_rrr1_UL, MADDRS_H_rrr1_UL, MADDRS_H_rrr1_UL_...
    SStream_concat0(O, "ul, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 8:
    // MADDMS_H_rrr1_UU, MADDM_H_rrr1_UU, MADDRS_H_rrr1_UU, MADDR_H_rrr1_UU, ...
    SStream_concat0(O, "uu, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 9:
    // MADDMS_U_rcr_v110, MADDM_U_rcr_v110, MADD_U_rcr, MSUB_U_rcr
    printZExtImm_9(MI, 3, O);
    return;
    break;
  case 10:
    // MADDS_Q_rrr1_L, MADDS_Q_rrr1_e_L, MADD_Q_rrr1_L, MADD_Q_rrr1_e_L, MSUB...
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 11:
    // MADDS_Q_rrr1_U, MADDS_Q_rrr1_e_U, MADD_Q_rrr1_U, MADD_Q_rrr1_e_U, MSUB...
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  }


  // Fragment 7 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 42) & 3) {
  default: CS_ASSERT_RET(0 && "Invalid command number.");
  case 0:
    // DEXTR_rrpw, DEXTR_rrrr, INSERT_rcrr, INSERT_rrrr
    return;
    break;
  case 1:
    // INSERT_rcpw, INSERT_rrpw, INSERT_rrrw
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
    break;
  case 2:
    // INSERT_rcrw
    printOperand(MI, 4, O);
    return;
    break;
  case 3:
    // MADDRS_H_rrr1_v110, MADDRS_Q_rrr1_v110, MADDR_H_rrr1_v110, MADDR_Q_rrr...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
static const char *getRegisterName(unsigned RegNo) {
#ifndef CAPSTONE_DIET
  CS_ASSERT_RET_VAL(RegNo && RegNo < 61 && "Invalid register number!", NULL);

  static const char AsmStrs[] = {
  /* 0 */ "d10\0"
  /* 4 */ "e10\0"
  /* 8 */ "p10\0"
  /* 12 */ "a0\0"
  /* 15 */ "d0\0"
  /* 18 */ "e0\0"
  /* 21 */ "p0\0"
  /* 24 */ "A10_A11\0"
  /* 32 */ "a11\0"
  /* 36 */ "d11\0"
  /* 40 */ "A0_A1\0"
  /* 46 */ "a1\0"
  /* 49 */ "d1\0"
  /* 52 */ "a12\0"
  /* 56 */ "d12\0"
  /* 60 */ "e12\0"
  /* 64 */ "p12\0"
  /* 68 */ "a2\0"
  /* 71 */ "d2\0"
  /* 74 */ "e2\0"
  /* 77 */ "p2\0"
  /* 80 */ "A12_A13\0"
  /* 88 */ "a13\0"
  /* 92 */ "d13\0"
  /* 96 */ "A2_A3\0"
  /* 102 */ "a3\0"
  /* 105 */ "d3\0"
  /* 108 */ "a14\0"
  /* 112 */ "d14\0"
  /* 116 */ "e14\0"
  /* 120 */ "p14\0"
  /* 124 */ "a4\0"
  /* 127 */ "d4\0"
  /* 130 */ "e4\0"
  /* 133 */ "p4\0"
  /* 136 */ "A14_A15\0"
  /* 144 */ "a15\0"
  /* 148 */ "d15\0"
  /* 152 */ "A4_A5\0"
  /* 158 */ "a5\0"
  /* 161 */ "d5\0"
  /* 164 */ "a6\0"
  /* 167 */ "d6\0"
  /* 170 */ "e6\0"
  /* 173 */ "p6\0"
  /* 176 */ "A6_A7\0"
  /* 182 */ "a7\0"
  /* 185 */ "d7\0"
  /* 188 */ "a8\0"
  /* 191 */ "d8\0"
  /* 194 */ "e8\0"
  /* 197 */ "p8\0"
  /* 200 */ "A8_A9\0"
  /* 206 */ "a9\0"
  /* 209 */ "d9\0"
  /* 212 */ "pc\0"
  /* 215 */ "pcxi\0"
  /* 220 */ "sp\0"
  /* 223 */ "psw\0"
  /* 227 */ "fcx\0"
};
  static const uint8_t RegAsmOffset[] = {
    227, 212, 215, 223, 12, 46, 68, 102, 124, 158, 164, 182, 188, 206, 
    220, 32, 52, 88, 108, 144, 15, 49, 71, 105, 127, 161, 167, 185, 
    191, 209, 0, 36, 56, 92, 112, 148, 18, 74, 130, 170, 194, 4, 
    60, 116, 21, 77, 133, 173, 197, 8, 64, 120, 40, 96, 152, 176, 
    200, 24, 80, 136, 
  };

  CS_ASSERT_RET_VAL(*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!", NULL);
  return AsmStrs+RegAsmOffset[RegNo-1];
#else
  return NULL;
#endif // CAPSTONE_DIET
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
#ifndef CAPSTONE_DIET
  return false;
#endif // CAPSTONE_DIET
}

#endif // PRINT_ALIAS_INSTR
