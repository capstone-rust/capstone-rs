test_cases:
  -
    input:
      bytes: [ 0x04, 0xb4, 0x97, 0xa8, 0xe8, 0x60, 0x56, 0xe1 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "add r4, 0xe15660e8"
  -
    input:
      bytes: [ 0x05, 0xc7, 0x71, 0xb0, 0x43, 0x1f, 0xb9, 0xf5 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ja -0x4f8f"
  -
    input:
      bytes: [ 0x07, 0x76, 0x01, 0x28, 0xc4, 0x09, 0xfe, 0x8b ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "add64 r6, 0x8bfe09c4"
  -
    input:
      bytes: [ 0x0c, 0x42, 0x0a, 0x48, 0x58, 0xc4, 0xef, 0x37 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "add r2, r4"
  -
    input:
      bytes: [ 0x0f, 0x09, 0x40, 0x54, 0x67, 0x24, 0x2f, 0x88 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "add64 r9, r0"
  -
    input:
      bytes: [ 0x14, 0xd9, 0xba, 0xb8, 0x6f, 0x07, 0x93, 0x2a ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "sub r9, 0x2a93076f"
  -
    input:
      bytes: [ 0x15, 0x6a, 0x9f, 0x38, 0x1a, 0x9d, 0xb7, 0x4d ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jeq r10, 0x4db79d1a, +0x389f"
  -
    input:
      bytes: [ 0x17, 0xc5, 0x60, 0xed, 0x0b, 0xdc, 0xe6, 0x22 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "sub64 r5, 0x22e6dc0b"
  -
    input:
      bytes: [ 0x18, 0xa3, 0x5c, 0x14, 0xde, 0xf0, 0xa5, 0xff, 0x9a, 0x7e, 0x10, 0xee, 0xd8, 0xa4, 0x2b, 0x2f ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "lddw r3, 0x2f2ba4d8ffa5f0de"
  -
    input:
      bytes: [ 0x1c, 0x73, 0x68, 0xa4, 0x8b, 0x5b, 0x93, 0x1f ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "sub r3, r7"
  -
    input:
      bytes: [ 0x1d, 0x21, 0x20, 0x4d, 0xe3, 0x47, 0xaf, 0x1b ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jeq r1, r2, +0x4d20"
  -
    input:
      bytes: [ 0x1f, 0x06, 0x51, 0x5a, 0x39, 0xb2, 0x10, 0x10 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "sub64 r6, r0"
  -
    input:
      bytes: [ 0x20, 0xc7, 0x0c, 0x70, 0xda, 0x41, 0x1a, 0xca ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldabsw [skb-0x35e5be26]"
  -
    input:
      bytes: [ 0x24, 0xb6, 0x69, 0x66, 0xe3, 0xef, 0xec, 0x25 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mul r6, 0x25ecefe3"
  -
    input:
      bytes: [ 0x25, 0x89, 0xda, 0x53, 0x19, 0x73, 0x8a, 0xc0 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jgt r9, 0xc08a7319, +0x53da"
  -
    input:
      bytes: [ 0x27, 0xb1, 0x96, 0x1d, 0xd4, 0xab, 0x2c, 0x8c ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mul64 r1, 0x8c2cabd4"
  -
    input:
      bytes: [ 0x28, 0x4e, 0xb0, 0x62, 0xe8, 0x48, 0x0b, 0x0d ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldabsh [skb+0xd0b48e8]"
  -
    input:
      bytes: [ 0x2c, 0x78, 0x03, 0xf6, 0x29, 0x29, 0x15, 0xfc ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mul r8, r7"
  -
    input:
      bytes: [ 0x2d, 0x18, 0x5b, 0xfd, 0x8f, 0x53, 0x3b, 0xf0 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jgt r8, r1, -0x2a5"
  -
    input:
      bytes: [ 0x2f, 0x77, 0xc7, 0xa4, 0x4c, 0x32, 0x73, 0x2a ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mul64 r7, r7"
  -
    input:
      bytes: [ 0x30, 0x5f, 0xfe, 0xfc, 0x85, 0x66, 0x7c, 0x4b ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldabsb [skb+0x4b7c6685]"
  -
    input:
      bytes: [ 0x34, 0x46, 0x00, 0x00, 0xe1, 0x72, 0xd4, 0xcb ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "div r6, 0xcbd472e1"
  -
    input:
      bytes: [ 0x35, 0xa5, 0x42, 0xb9, 0x5b, 0x37, 0xa1, 0x3d ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jge r5, 0x3da1375b, -0x46be"
  -
    input:
      bytes: [ 0x37, 0x84, 0x00, 0x00, 0x3b, 0x84, 0x55, 0x1f ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "div64 r4, 0x1f55843b"
  -
    input:
      bytes: [ 0x3f, 0x36, 0x00, 0x00, 0x7e, 0x07, 0x59, 0x7a ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "div64 r6, r3"
  -
    input:
      bytes: [ 0x40, 0x95, 0xc2, 0x39, 0x6b, 0xe7, 0xd7, 0xc4 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldindw [skb+r9]"
  -
    input:
      bytes: [ 0x44, 0x16, 0xf7, 0x98, 0xf7, 0x02, 0x92, 0x94 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "or r6, 0x949202f7"
  -
    input:
      bytes: [ 0x45, 0x12, 0xa2, 0xf2, 0x14, 0xe7, 0x2d, 0x1e ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jset r2, 0x1e2de714, -0xd5e"
  -
    input:
      bytes: [ 0x47, 0x36, 0xf4, 0xd5, 0xbe, 0x04, 0x58, 0x4d ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "or64 r6, 0x4d5804be"
  -
    input:
      bytes: [ 0x48, 0x7e, 0xfb, 0x77, 0xeb, 0x0e, 0x5a, 0x0d ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldindh [skb+r7]"
  -
    input:
      bytes: [ 0x4c, 0x81, 0x0a, 0x66, 0xfc, 0x32, 0x61, 0xc4 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "or r1, r8"
  -
    input:
      bytes: [ 0x4d, 0x10, 0x67, 0x44, 0x4d, 0x3f, 0x4d, 0x8b ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jset r0, r1, +0x4467"
  -
    input:
      bytes: [ 0x4f, 0x81, 0xeb, 0x6b, 0xde, 0x98, 0x87, 0x64 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "or64 r1, r8"
  -
    input:
      bytes: [ 0x50, 0x38, 0x80, 0xf8, 0x04, 0x70, 0xd1, 0x6c ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldindb [skb+r3]"
  -
    input:
      bytes: [ 0x54, 0x40, 0x0a, 0x6a, 0x4a, 0xe8, 0xab, 0xfb ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "and r0, 0xfbabe84a"
  -
    input:
      bytes: [ 0x55, 0xb9, 0xa3, 0x80, 0x90, 0xbc, 0xc8, 0x96 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jne r9, 0x96c8bc90, -0x7f5d"
  -
    input:
      bytes: [ 0x57, 0x30, 0x12, 0xe9, 0x7c, 0x06, 0x82, 0x27 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "and64 r0, 0x2782067c"
  -
    input:
      bytes: [ 0x5c, 0x02, 0x95, 0xb2, 0xbd, 0x3f, 0x38, 0x37 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "and r2, r0"
  -
    input:
      bytes: [ 0x5d, 0x56, 0xa3, 0x4c, 0x2a, 0xc8, 0x4a, 0xc5 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jne r6, r5, +0x4ca3"
  -
    input:
      bytes: [ 0x5f, 0x59, 0xf6, 0xaa, 0x5d, 0xeb, 0x27, 0xdd ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "and64 r9, r5"
  -
    input:
      bytes: [ 0x61, 0x28, 0xb2, 0xed, 0xb8, 0xcf, 0xb5, 0xe4 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldxw r8, [r2-0x124e]"
  -
    input:
      bytes: [ 0x62, 0xa5, 0xdf, 0xe0, 0x14, 0x7d, 0x95, 0x78 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "stw [r5-0x1f21], 0x78957d14"
  -
    input:
      bytes: [ 0x63, 0x77, 0x2f, 0xcf, 0x76, 0xb7, 0xd3, 0xfa ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "stxw [r7-0x30d1], r7"
  -
    input:
      bytes: [ 0x64, 0x68, 0xc1, 0xf4, 0x88, 0x92, 0xd2, 0xeb ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "lsh r8, 0xebd29288"
  -
    input:
      bytes: [ 0x65, 0xe8, 0x97, 0xe1, 0x87, 0xbe, 0x8f, 0xf8 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jsgt r8, 0xf88fbe87, -0x1e69"
  -
    input:
      bytes: [ 0x67, 0x00, 0xd7, 0xc0, 0x05, 0xb0, 0xf6, 0x74 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "lsh64 r0, 0x74f6b005"
  -
    input:
      bytes: [ 0x69, 0x14, 0xc7, 0x8e, 0x0b, 0xc1, 0xad, 0x69 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldxh r4, [r1-0x7139]"
  -
    input:
      bytes: [ 0x6a, 0xb5, 0xbc, 0x8c, 0x4f, 0x5c, 0x94, 0x01 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "sth [r5-0x7344], 0x1945c4f"
  -
    input:
      bytes: [ 0x6b, 0x34, 0x58, 0xf5, 0xc8, 0x27, 0x9e, 0x14 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "stxh [r4-0xaa8], r3"
  -
    input:
      bytes: [ 0x6c, 0x21, 0x10, 0x48, 0x01, 0x3e, 0x6e, 0xf8 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "lsh r1, r2"
  -
    input:
      bytes: [ 0x6d, 0x38, 0x69, 0xe3, 0xc9, 0xac, 0x3c, 0xdb ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jsgt r8, r3, -0x1c97"
  -
    input:
      bytes: [ 0x6f, 0x64, 0x49, 0xd6, 0x07, 0xa9, 0x93, 0x13 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "lsh64 r4, r6"
  -
    input:
      bytes: [ 0x71, 0xa0, 0xeb, 0xfb, 0x3d, 0x6b, 0x58, 0x45 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldxb r0, [r10-0x415]"
  -
    input:
      bytes: [ 0x72, 0xe2, 0xc1, 0x1b, 0x25, 0x2f, 0x4a, 0xdc ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "stb [r2+0x1bc1], 0xdc4a2f25"
  -
    input:
      bytes: [ 0x73, 0x44, 0x09, 0x0f, 0xc1, 0x07, 0xa8, 0xf4 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "stxb [r4+0xf09], r4"
  -
    input:
      bytes: [ 0x74, 0xe0, 0x23, 0x23, 0x2f, 0x04, 0x15, 0x35 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "rsh r0, 0x3515042f"
  -
    input:
      bytes: [ 0x75, 0x04, 0x8e, 0x18, 0x6a, 0xcc, 0x3c, 0x09 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jsge r4, 0x93ccc6a, +0x188e"
  -
    input:
      bytes: [ 0x77, 0x09, 0x3a, 0xa7, 0x3c, 0x6e, 0xfa, 0x23 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "rsh64 r9, 0x23fa6e3c"
  -
    input:
      bytes: [ 0x79, 0xa9, 0x5c, 0x7b, 0x16, 0x1f, 0xfb, 0x01 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldxdw r9, [r10+0x7b5c]"
  -
    input:
      bytes: [ 0x7a, 0xd8, 0x6b, 0x04, 0x76, 0xf0, 0x51, 0x75 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "stdw [r8+0x46b], 0x7551f076"
  -
    input:
      bytes: [ 0x7b, 0x72, 0x0f, 0x30, 0x51, 0x78, 0xd2, 0x9a ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "stxdw [r2+0x300f], r7"
  -
    input:
      bytes: [ 0x7c, 0x13, 0x12, 0x73, 0x5a, 0x20, 0x65, 0xdb ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "rsh r3, r1"
  -
    input:
      bytes: [ 0x7d, 0x58, 0x52, 0x01, 0x90, 0xf9, 0x30, 0x9a ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jsge r8, r5, +0x152"
  -
    input:
      bytes: [ 0x7f, 0x98, 0xea, 0xff, 0xcf, 0x5d, 0x5f, 0xa3 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "rsh64 r8, r9"
  -
    input:
      bytes: [ 0x84, 0x14, 0xd4, 0xaf, 0x60, 0xe1, 0x41, 0x18 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "neg r4"
  -
    input:
      bytes: [ 0x85, 0xd3, 0xa5, 0xe2, 0x83, 0x3d, 0xbd, 0x5d ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "call 0x5dbd3d83"
  -
    input:
      bytes: [ 0x85, 0x00, 0x00, 0xe2, 0x83, 0x3d, 0xbd, 0xfd ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "call -0x242c27d"
  -
    input:
      bytes: [ 0x87, 0xf5, 0x2b, 0xbe, 0xa9, 0xc7, 0x31, 0xa3 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "neg64 r5"
  -
    input:
      bytes: [ 0x94, 0x39, 0x00, 0x00, 0x0b, 0xd2, 0xd1, 0xc9 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mod r9, 0xc9d1d20b"
  -
    input:
      bytes: [ 0x95, 0xf2, 0xd1, 0x83, 0x53, 0xa9, 0x09, 0x9f ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "exit"
  -
    input:
      bytes: [ 0x97, 0xc8, 0x00, 0x00, 0xd2, 0x09, 0x98, 0x09 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mod64 r8, 0x99809d2"
  -
    input:
      bytes: [ 0x9c, 0x96, 0x00, 0x00, 0x0f, 0x69, 0x13, 0x90 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mod r6, r9"
  -
    input:
      bytes: [ 0x9f, 0x35, 0x00, 0x00, 0xd6, 0x70, 0xd9, 0x5e ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mod64 r5, r3"
  -
    input:
      bytes: [ 0xa4, 0x89, 0x6b, 0x5f, 0x0d, 0xbf, 0x90, 0xf7 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "xor r9, 0xf790bf0d"
  -
    input:
      bytes: [ 0xa5, 0xd4, 0xef, 0x79, 0xd3, 0xbb, 0xde, 0xfd ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jlt r4, 0xfddebbd3, +0x79ef"
  -
    input:
      bytes: [ 0xa7, 0x80, 0x8b, 0x18, 0xa9, 0x34, 0x74, 0x45 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "xor64 r0, 0x457434a9"
  -
    input:
      bytes: [ 0xac, 0x36, 0x16, 0xe0, 0x0f, 0x52, 0x30, 0x65 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "xor r6, r3"
  -
    input:
      bytes: [ 0xaf, 0x41, 0x04, 0xc2, 0x2e, 0xc9, 0xf7, 0x84 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "xor64 r1, r4"
  -
    input:
      bytes: [ 0xb4, 0xa1, 0x00, 0x00, 0xf9, 0x3f, 0x77, 0x1f ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mov r1, 0x1f773ff9"
  -
    input:
      bytes: [ 0xb5, 0x92, 0x5d, 0x5a, 0x49, 0x33, 0xfc, 0x33 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jle r2, 0x33fc3349, +0x5a5d"
  -
    input:
      bytes: [ 0xb7, 0x70, 0x00, 0x00, 0x5b, 0x52, 0x2a, 0x99 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mov64 r0, 0x992a525b"
  -
    input:
      bytes: [ 0xbc, 0x72, 0x00, 0x00, 0xc9, 0x8a, 0x56, 0xd6 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mov r2, r7"
  -
    input:
      bytes: [ 0xbd, 0x19, 0x80, 0xe8, 0x29, 0x85, 0xcf, 0x51 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jle r9, r1, -0x1780"
  -
    input:
      bytes: [ 0xbf, 0x86, 0x00, 0x00, 0xb2, 0x6d, 0x14, 0x03 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mov64 r6, r8"
  -
    input:
      bytes: [ 0xc4, 0xb6, 0xe2, 0xe0, 0x7c, 0x68, 0xc5, 0x2b ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "arsh r6, 0x2bc5687c"
  -
    input:
      bytes: [ 0xc5, 0xf2, 0xeb, 0xe4, 0xba, 0xc0, 0xce, 0x4f ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jslt r2, 0x4fcec0ba, -0x1b15"
  -
    input:
      bytes: [ 0xc7, 0xe8, 0xba, 0xff, 0x1f, 0xef, 0xc0, 0x88 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "arsh64 r8, 0x88c0ef1f"
  -
    input:
      bytes: [ 0xcc, 0x38, 0xc5, 0x37, 0x13, 0xc0, 0xe7, 0x27 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "arsh r8, r3"
  -
    input:
      bytes: [ 0xcd, 0x90, 0x67, 0x88, 0x6b, 0xd0, 0x27, 0xf4 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jslt r0, r9, -0x7799"
  -
    input:
      bytes: [ 0xcf, 0x82, 0xe1, 0xcd, 0xbe, 0xc3, 0x2d, 0x7c ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "arsh64 r2, r8"
  -
    input:
      bytes: [ 0xd4, 0x53, 0x3f, 0x0c, 0x40, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "le64 r3"
  -
    input:
      bytes: [ 0xd5, 0xe9, 0xf6, 0xb2, 0x50, 0xfd, 0xb0, 0xe5 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jsle r9, 0xe5b0fd50, -0x4d0a"
  -
    input:
      bytes: [ 0xdc, 0xb2, 0xa3, 0x50, 0x20, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "be32 r2"
  -
    input:
      bytes: [ 0xdd, 0x95, 0xbf, 0xb1, 0xf2, 0x5f, 0x7b, 0xc4 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jsle r5, r9, -0x4e41"
  -
    input:
      bytes: [ 0x2d, 0x18, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jgt r8, r1, +0x7"
  -
    input:
      bytes: [ 0x8d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "callx r2"

  - input:
      bytes: [ 0x06, 0xc7, 0x0f, 0xcc, 0x43, 0x1f, 0xb9, 0xf5 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jal -0xa46e0bd"

  - input:
      bytes: [ 0x16, 0xc7, 0x0f, 0xcc, 0x43, 0x1f, 0xb9, 0xf5 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jeq32 r7, -0xa46e0bd, -0x33f1"

  - input:
      bytes: [ 0x26, 0xc7, 0x0f, 0xcc, 0x43, 0x1f, 0xb9, 0xf5 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jgt32 r7, -0xa46e0bd, -0x33f1"

  - input:
      bytes: [ 0x36, 0xc7, 0x0f, 0xcc, 0x43, 0x1f, 0xb9, 0xf5 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jge32 r7, -0xa46e0bd, -0x33f1"

  - input:
      bytes: [ 0x46, 0xc7, 0x0f, 0xcc, 0x43, 0x1f, 0xb9, 0xf5 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jset32 r7, -0xa46e0bd, -0x33f1"

  - input:
      bytes: [ 0x56, 0xc7, 0x0f, 0xcc, 0x43, 0x1f, 0xb9, 0xf5 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jne32 r7, -0xa46e0bd, -0x33f1"

  - input:
      bytes: [ 0x66, 0xc7, 0x0f, 0xcc, 0x43, 0x1f, 0xb9, 0xf5 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jsgt32 r7, -0xa46e0bd, -0x33f1"

  - input:
      bytes: [ 0x76, 0xc7, 0x0f, 0xcc, 0x43, 0x1f, 0xb9, 0xf5 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jsge32 r7, -0xa46e0bd, -0x33f1"

  - input:
      bytes: [ 0xa6, 0xc7, 0x0f, 0xcc, 0x43, 0x1f, 0xb9, 0xf5 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jlt32 r7, -0xa46e0bd, -0x33f1"

  - input:
      bytes: [ 0xb6, 0xc7, 0x0f, 0xcc, 0x43, 0x1f, 0xb9, 0xf5 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jle32 r7, -0xa46e0bd, -0x33f1"

  - input:
      bytes: [ 0xc6, 0xc7, 0x0f, 0xcc, 0x43, 0x1f, 0xb9, 0xf5 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jslt32 r7, -0xa46e0bd, -0x33f1"

  - input:
      bytes: [ 0xd6, 0xc7, 0x0f, 0xcc, 0x43, 0x1f, 0xb9, 0xf5 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jsle32 r7, -0xa46e0bd, -0x33f1"
  -
    input:
      bytes: [ 0x37, 0x84, 0x01, 0x00, 0x3b, 0x84, 0x55, 0x1f ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "sdiv64 r4, 0x1f55843b"
  -
    input:
      bytes: [ 0x34, 0x46, 0x01, 0x00, 0xe1, 0x72, 0xd4, 0xcb ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "sdiv r6, 0xcbd472e1"
  -
    input:
      bytes: [ 0x94, 0x39, 0x01, 0x00, 0x0b, 0xd2, 0xd1, 0xc9 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "smod r9, 0xc9d1d20b"

  -
    input:
      bytes: [ 0x9f, 0x35, 0x01, 0x00, 0xd6, 0x70, 0xd9, 0x5e ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "smod64 r5, r3"

  - input:
      bytes: [ 0xbf, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "movsb64 r1, r3"

  - input:
      bytes: [ 0xbf, 0x31, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "movsh64 r1, r3"

  - input:
      bytes: [ 0xbf, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "movsw64 r1, r3"

  - input:
      bytes: [ 0xbc, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "movsb r1, r3"

  - input:
      bytes: [ 0xbc, 0x31, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "movsh r1, r3"

  - input:
      bytes: [ 0xdb, 0x1a, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "aadd64 [r10-0x4], r1"

  - input:
      bytes: [ 0xdb, 0x1a, 0xfc, 0xff, 0x01, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "afadd64 [r10-0x4], r1"

  - input:
      bytes: [ 0xdb, 0x1a, 0xfc, 0xff, 0x40, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "aor64 [r10-0x4], r1"

  - input:
      bytes: [ 0xdb, 0x1a, 0xfc, 0xff, 0x41, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "afor64 [r10-0x4], r1"

  - input:
      bytes: [ 0xdb, 0x1a, 0xfc, 0xff, 0x50, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "aand64 [r10-0x4], r1"

  - input:
      bytes: [ 0xdb, 0x1a, 0xfc, 0xff, 0x51, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "afand64 [r10-0x4], r1"

  - input:
      bytes: [ 0xdb, 0x1a, 0xfc, 0xff, 0xa0, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "axor64 [r10-0x4], r1"

  - input:
      bytes: [ 0xdb, 0x1a, 0xfc, 0xff, 0xa1, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "afxor64 [r10-0x4], r1"

  - input:
      bytes: [ 0xdb, 0x1a, 0xfc, 0xff, 0xe1, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "axchg64 [r10-0x4], r1"

  - input:
      bytes: [ 0xdb, 0x1a, 0xfc, 0xff, 0xf1, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "acmpxchg64 [r10-0x4], r1"

  - input:
      bytes: [ 0xc3, 0x1a, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "aadd [r10-0x4], r1"

  - input:
      bytes: [ 0xc3, 0x1a, 0xfc, 0xff, 0x01, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "afadd [r10-0x4], r1"

  - input:
      bytes: [ 0xc3, 0x1a, 0xfc, 0xff, 0x40, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "aor [r10-0x4], r1"

  - input:
      bytes: [ 0xc3, 0x1a, 0xfc, 0xff, 0x41, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "afor [r10-0x4], r1"

  - input:
      bytes: [ 0xc3, 0x1a, 0xfc, 0xff, 0x50, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "aand [r10-0x4], r1"

  - input:
      bytes: [ 0xc3, 0x1a, 0xfc, 0xff, 0x51, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "afand [r10-0x4], r1"

  - input:
      bytes: [ 0xc3, 0x1a, 0xfc, 0xff, 0xa0, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "axor [r10-0x4], r1"

  - input:
      bytes: [ 0xc3, 0x1a, 0xfc, 0xff, 0xa1, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_BPF"
      options: [ "CS_MODE_BPF_EXTENDED", "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "afxor [r10-0x4], r1"
