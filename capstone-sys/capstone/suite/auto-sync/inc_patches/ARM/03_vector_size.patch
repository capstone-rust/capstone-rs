diff --git a/arch/ARM/ARMGenAsmWriter.inc b/arch/ARM/ARMGenAsmWriter.inc
index 33fa7815..b8b7182d 100644
--- a/arch/ARM/ARMGenAsmWriter.inc
+++ b/arch/ARM/ARMGenAsmWriter.inc
@@ -9939,28 +9939,31 @@ static void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
   // Fragment 1 encoded into 7 bits for 89 unique commands.
   switch ((Bits >> 19) & 127) {
   default: CS_ASSERT_RET(0 && "Invalid command number.");
   case 0:
     // ASRi, ASRr, ITasm, LDRBT_POST, LDRConstPool, LDRHTii, LDRSBTii, LDRSHT...
     SStream_concat1(O, ' ');
     break;
   case 1:
     // VLD1LNdAsm_16, VLD1LNdWB_fixed_Asm_16, VLD1LNdWB_register_Asm_16, VLD2...
     SStream_concat0(O, ".16\t");
+    ARM_add_vector_size(MI, 16);
     break;
   case 2:
     // VLD1LNdAsm_32, VLD1LNdWB_fixed_Asm_32, VLD1LNdWB_register_Asm_32, VLD2...
     SStream_concat0(O, ".32\t");
+    ARM_add_vector_size(MI, 32);
     break;
   case 3:
     // VLD1LNdAsm_8, VLD1LNdWB_fixed_Asm_8, VLD1LNdWB_register_Asm_8, VLD2LNd...
     SStream_concat0(O, ".8\t");
+    ARM_add_vector_size(MI, 8);
     break;
   case 4:
     // t2LDRB_OFFSET_imm, t2LDRB_POST_imm, t2LDRB_PRE_imm, t2LDRH_OFFSET_imm,...
     SStream_concat0(O, ".w ");
     printOperand(MI, 0, O);
     SStream_concat0(O, ", ");
     break;
   case 5:
     // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ADR, ANDri, ANDrr, ANDrsi,...
     SStream_concat0(O, "\t");
@@ -10082,20 +10085,21 @@ static void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
     ARM_add_vector_data(MI, ARM_VECTORDATA_I16);
     break;
   case 29:
     // MVE_VADD_qr_i8, MVE_VADDi8, MVE_VCADDi8, MVE_VCLZs8, MVE_VCMPi8, MVE_V...
     SStream_concat0(O, ".i8\t");
     ARM_add_vector_data(MI, ARM_VECTORDATA_I8);
     break;
   case 30:
     // MVE_VCTP64, MVE_VSTRD64_qi, MVE_VSTRD64_qi_pre, MVE_VSTRD64_rq, MVE_VS...
     SStream_concat0(O, ".64\t");
+    ARM_add_vector_size(MI, 64);
     break;
   case 31:
     // MVE_VCVTf16f32bh, MVE_VCVTf16f32th, VCVTBSH, VCVTTSH, VCVTf2h
     SStream_concat0(O, ".f16.f32\t");
     ARM_add_vector_data(MI, ARM_VECTORDATA_F16F32);
     printOperand(MI, 0, O);
     SStream_concat0(O, ", ");
     break;
   case 32:
     // MVE_VCVTf16s16_fix, MVE_VCVTf16s16n, VCVTs2hd, VCVTs2hq, VCVTxs2hd, VC...
@@ -10265,28 +10269,31 @@ static void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
     // VJCVT, VTOSIRD, VTOSIZD, VTOSLD
     SStream_concat0(O, ".s32.f64\t");
     ARM_add_vector_data(MI, ARM_VECTORDATA_S32F64);
     printOperand(MI, 0, O);
     SStream_concat0(O, ", ");
     printOperand(MI, 1, O);
     break;
   case 54:
     // VLD1LNd16, VLD1LNd16_UPD, VLD2LNd16, VLD2LNd16_UPD, VLD2LNq16, VLD2LNq...
     SStream_concat0(O, ".16\t{");
+    ARM_add_vector_size(MI, 16);
     break;
   case 55:
     // VLD1LNd32, VLD1LNd32_UPD, VLD2LNd32, VLD2LNd32_UPD, VLD2LNq32, VLD2LNq...
     SStream_concat0(O, ".32\t{");
+    ARM_add_vector_size(MI, 32);
     break;
   case 56:
     // VLD1LNd8, VLD1LNd8_UPD, VLD2LNd8, VLD2LNd8_UPD, VLD3DUPd8, VLD3DUPd8_U...
     SStream_concat0(O, ".8\t{");
+    ARM_add_vector_size(MI, 8);
     break;
   case 57:
     // VLDR_FPCXTNS_off, VLDR_FPCXTNS_post, VLDR_FPCXTNS_pre, VMSR_FPCXTNS, V...
     SStream_concat0(O, "\tfpcxtns, ");
     break;
   case 58:
     // VLDR_FPCXTS_off, VLDR_FPCXTS_post, VLDR_FPCXTS_pre, VMSR_FPCXTS, VSTR_...
     SStream_concat0(O, "\tfpcxts, ");
     break;
   case 59:
