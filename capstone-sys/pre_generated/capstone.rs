/* automatically generated by rust-bindgen 0.69.4 */

pub type va_list = __builtin_va_list;
#[repr(u32)]
#[doc = " Common instruction operand types - to be consistent across all architectures."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cs_op_type {
    #[doc = "< uninitialized/invalid operand."]
    CS_OP_INVALID = 0,
    #[doc = "< Register operand."]
    CS_OP_REG = 1,
    #[doc = "< Immediate operand."]
    CS_OP_IMM = 2,
    #[doc = "< Floating-Point operand."]
    CS_OP_FP = 3,
    #[doc = "< Predicate operand."]
    CS_OP_PRED = 4,
    CS_OP_RESERVED_5 = 5,
    CS_OP_RESERVED_6 = 6,
    CS_OP_RESERVED_7 = 7,
    CS_OP_RESERVED_8 = 8,
    CS_OP_RESERVED_9 = 9,
    CS_OP_RESERVED_10 = 10,
    CS_OP_RESERVED_11 = 11,
    CS_OP_RESERVED_12 = 12,
    CS_OP_RESERVED_13 = 13,
    CS_OP_RESERVED_14 = 14,
    CS_OP_RESERVED_15 = 15,
    #[doc = "< Special operands from archs"]
    CS_OP_SPECIAL = 16,
    #[doc = "< Operand is associated with a previous operand. Used by AArch64 for SME operands."]
    CS_OP_BOUND = 64,
    #[doc = "< Memory operand. Can be ORed with another operand type."]
    CS_OP_MEM = 128,
    #[doc = "< Memory referencing register operand."]
    CS_OP_MEM_REG = 129,
    #[doc = "< Memory referencing immediate operand."]
    CS_OP_MEM_IMM = 130,
}
impl cs_ac_type {
    #[doc = "< Uninitialized/invalid access type."]
    pub const CS_AC_INVALID: cs_ac_type = cs_ac_type(0);
}
impl cs_ac_type {
    #[doc = "< Operand read from memory or register."]
    pub const CS_AC_READ: cs_ac_type = cs_ac_type(1);
}
impl cs_ac_type {
    #[doc = "< Operand write to memory or register."]
    pub const CS_AC_WRITE: cs_ac_type = cs_ac_type(2);
}
impl cs_ac_type {
    pub const CS_AC_READ_WRITE: cs_ac_type = cs_ac_type(3);
}
impl ::core::ops::BitOr<cs_ac_type> for cs_ac_type {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        cs_ac_type(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for cs_ac_type {
    #[inline]
    fn bitor_assign(&mut self, rhs: cs_ac_type) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<cs_ac_type> for cs_ac_type {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        cs_ac_type(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for cs_ac_type {
    #[inline]
    fn bitand_assign(&mut self, rhs: cs_ac_type) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[doc = " Common instruction operand access types - to be consistent across all architectures.\n It is possible to combine access types, for example: CS_AC_READ | CS_AC_WRITE"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct cs_ac_type(pub libc::c_uint);
pub type csh = usize;
#[repr(u32)]
#[doc = " Architecture type"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cs_arch {
    #[doc = "< ARM architecture (including Thumb, Thumb-2)"]
    CS_ARCH_ARM = 0,
    #[doc = "< AArch64"]
    CS_ARCH_AARCH64 = 1,
    #[doc = "< SystemZ architecture"]
    CS_ARCH_SYSTEMZ = 2,
    #[doc = "< Mips architecture"]
    CS_ARCH_MIPS = 3,
    #[doc = "< X86 architecture (including x86 & x86-64)"]
    CS_ARCH_X86 = 4,
    #[doc = "< PowerPC architecture"]
    CS_ARCH_PPC = 5,
    #[doc = "< Sparc architecture"]
    CS_ARCH_SPARC = 6,
    #[doc = "< XCore architecture"]
    CS_ARCH_XCORE = 7,
    #[doc = "< 68K architecture"]
    CS_ARCH_M68K = 8,
    #[doc = "< TMS320C64x architecture"]
    CS_ARCH_TMS320C64X = 9,
    #[doc = "< 680X architecture"]
    CS_ARCH_M680X = 10,
    #[doc = "< Ethereum architecture"]
    CS_ARCH_EVM = 11,
    #[doc = "< MOS65XX architecture (including MOS6502)"]
    CS_ARCH_MOS65XX = 12,
    #[doc = "< WebAssembly architecture"]
    CS_ARCH_WASM = 13,
    #[doc = "< Berkeley Packet Filter architecture (including eBPF)"]
    CS_ARCH_BPF = 14,
    #[doc = "< RISCV architecture"]
    CS_ARCH_RISCV = 15,
    #[doc = "< SH architecture"]
    CS_ARCH_SH = 16,
    #[doc = "< TriCore architecture"]
    CS_ARCH_TRICORE = 17,
    #[doc = "< Alpha architecture"]
    CS_ARCH_ALPHA = 18,
    #[doc = "< HPPA architecture"]
    CS_ARCH_HPPA = 19,
    #[doc = "< LoongArch architecture"]
    CS_ARCH_LOONGARCH = 20,
    #[doc = "< Xtensa architecture"]
    CS_ARCH_XTENSA = 21,
    #[doc = "< ARC architecture"]
    CS_ARCH_ARC = 22,
    CS_ARCH_MAX = 23,
    CS_ARCH_ALL = 65535,
}
impl cs_mode {
    #[doc = "< little-endian mode (default mode)"]
    pub const CS_MODE_LITTLE_ENDIAN: cs_mode = cs_mode(0);
}
impl cs_mode {
    #[doc = "< 32-bit ARM"]
    pub const CS_MODE_ARM: cs_mode = cs_mode(0);
}
impl cs_mode {
    #[doc = "< 16-bit mode (X86)"]
    pub const CS_MODE_16: cs_mode = cs_mode(2);
}
impl cs_mode {
    #[doc = "< 32-bit mode (X86)"]
    pub const CS_MODE_32: cs_mode = cs_mode(4);
}
impl cs_mode {
    #[doc = "< 64-bit mode (X86, PPC)"]
    pub const CS_MODE_64: cs_mode = cs_mode(8);
}
impl cs_mode {
    #[doc = "< ARM's Thumb mode, including Thumb-2"]
    pub const CS_MODE_THUMB: cs_mode = cs_mode(16);
}
impl cs_mode {
    #[doc = "< ARM's Cortex-M series"]
    pub const CS_MODE_MCLASS: cs_mode = cs_mode(32);
}
impl cs_mode {
    #[doc = "< ARMv8 A32 encodings for ARM"]
    pub const CS_MODE_V8: cs_mode = cs_mode(64);
}
impl cs_mode {
    #[doc = "< SparcV9 mode (Sparc)"]
    pub const CS_MODE_V9: cs_mode = cs_mode(16);
}
impl cs_mode {
    #[doc = "< Quad Processing eXtensions mode (PPC)"]
    pub const CS_MODE_QPX: cs_mode = cs_mode(16);
}
impl cs_mode {
    #[doc = "< Signal Processing Engine mode (PPC)"]
    pub const CS_MODE_SPE: cs_mode = cs_mode(32);
}
impl cs_mode {
    #[doc = "< Book-E mode (PPC)"]
    pub const CS_MODE_BOOKE: cs_mode = cs_mode(64);
}
impl cs_mode {
    #[doc = "< Paired-singles mode (PPC)"]
    pub const CS_MODE_PS: cs_mode = cs_mode(128);
}
impl cs_mode {
    #[doc = "< PowerPC AIX-OS"]
    pub const CS_MODE_AIX_OS: cs_mode = cs_mode(256);
}
impl cs_mode {
    #[doc = "< Power 7"]
    pub const CS_MODE_PWR7: cs_mode = cs_mode(512);
}
impl cs_mode {
    #[doc = "< Power 8"]
    pub const CS_MODE_PWR8: cs_mode = cs_mode(1024);
}
impl cs_mode {
    #[doc = "< Power 9"]
    pub const CS_MODE_PWR9: cs_mode = cs_mode(2048);
}
impl cs_mode {
    #[doc = "< Power 10"]
    pub const CS_MODE_PWR10: cs_mode = cs_mode(4096);
}
impl cs_mode {
    #[doc = "< Power ISA Future"]
    pub const CS_MODE_PPC_ISA_FUTURE: cs_mode = cs_mode(8192);
}
impl cs_mode {
    #[doc = "< PowerPC AIX-OS with modern assembly"]
    pub const CS_MODE_MODERN_AIX_AS: cs_mode = cs_mode(16384);
}
impl cs_mode {
    #[doc = "< PowerPC Has only the msync instruction instead of sync. Implies BOOKE"]
    pub const CS_MODE_MSYNC: cs_mode = cs_mode(32768);
}
impl cs_mode {
    #[doc = "< M68K 68000 mode"]
    pub const CS_MODE_M68K_000: cs_mode = cs_mode(2);
}
impl cs_mode {
    #[doc = "< M68K 68010 mode"]
    pub const CS_MODE_M68K_010: cs_mode = cs_mode(4);
}
impl cs_mode {
    #[doc = "< M68K 68020 mode"]
    pub const CS_MODE_M68K_020: cs_mode = cs_mode(8);
}
impl cs_mode {
    #[doc = "< M68K 68030 mode"]
    pub const CS_MODE_M68K_030: cs_mode = cs_mode(16);
}
impl cs_mode {
    #[doc = "< M68K 68040 mode"]
    pub const CS_MODE_M68K_040: cs_mode = cs_mode(32);
}
impl cs_mode {
    #[doc = "< M68K 68060 mode"]
    pub const CS_MODE_M68K_060: cs_mode = cs_mode(64);
}
impl cs_mode {
    #[doc = "< big-endian mode"]
    pub const CS_MODE_BIG_ENDIAN: cs_mode = cs_mode(2147483648);
}
impl cs_mode {
    #[doc = "< Generic mips16"]
    pub const CS_MODE_MIPS16: cs_mode = cs_mode(2);
}
impl cs_mode {
    #[doc = "< Generic mips32"]
    pub const CS_MODE_MIPS32: cs_mode = cs_mode(4);
}
impl cs_mode {
    #[doc = "< Generic mips64"]
    pub const CS_MODE_MIPS64: cs_mode = cs_mode(8);
}
impl cs_mode {
    #[doc = "< microMips"]
    pub const CS_MODE_MICRO: cs_mode = cs_mode(16);
}
impl cs_mode {
    #[doc = "< Mips I ISA Support"]
    pub const CS_MODE_MIPS1: cs_mode = cs_mode(32);
}
impl cs_mode {
    #[doc = "< Mips II ISA Support"]
    pub const CS_MODE_MIPS2: cs_mode = cs_mode(64);
}
impl cs_mode {
    #[doc = "< Mips32r2 ISA Support"]
    pub const CS_MODE_MIPS32R2: cs_mode = cs_mode(128);
}
impl cs_mode {
    #[doc = "< Mips32r3 ISA Support"]
    pub const CS_MODE_MIPS32R3: cs_mode = cs_mode(256);
}
impl cs_mode {
    #[doc = "< Mips32r5 ISA Support"]
    pub const CS_MODE_MIPS32R5: cs_mode = cs_mode(512);
}
impl cs_mode {
    #[doc = "< Mips32r6 ISA Support"]
    pub const CS_MODE_MIPS32R6: cs_mode = cs_mode(1024);
}
impl cs_mode {
    #[doc = "< MIPS III ISA Support"]
    pub const CS_MODE_MIPS3: cs_mode = cs_mode(2048);
}
impl cs_mode {
    #[doc = "< MIPS IV ISA Support"]
    pub const CS_MODE_MIPS4: cs_mode = cs_mode(4096);
}
impl cs_mode {
    #[doc = "< MIPS V ISA Support"]
    pub const CS_MODE_MIPS5: cs_mode = cs_mode(8192);
}
impl cs_mode {
    #[doc = "< Mips64r2 ISA Support"]
    pub const CS_MODE_MIPS64R2: cs_mode = cs_mode(16384);
}
impl cs_mode {
    #[doc = "< Mips64r3 ISA Support"]
    pub const CS_MODE_MIPS64R3: cs_mode = cs_mode(32768);
}
impl cs_mode {
    #[doc = "< Mips64r5 ISA Support"]
    pub const CS_MODE_MIPS64R5: cs_mode = cs_mode(65536);
}
impl cs_mode {
    #[doc = "< Mips64r6 ISA Support"]
    pub const CS_MODE_MIPS64R6: cs_mode = cs_mode(131072);
}
impl cs_mode {
    #[doc = "< Octeon cnMIPS Support"]
    pub const CS_MODE_OCTEON: cs_mode = cs_mode(262144);
}
impl cs_mode {
    #[doc = "< Octeon+ cnMIPS Support"]
    pub const CS_MODE_OCTEONP: cs_mode = cs_mode(524288);
}
impl cs_mode {
    #[doc = "< Generic nanomips"]
    pub const CS_MODE_NANOMIPS: cs_mode = cs_mode(1048576);
}
impl cs_mode {
    #[doc = "< nanoMips NMS1"]
    pub const CS_MODE_NMS1: cs_mode = cs_mode(3145728);
}
impl cs_mode {
    #[doc = "< nanoMips I7200"]
    pub const CS_MODE_I7200: cs_mode = cs_mode(5242880);
}
impl cs_mode {
    #[doc = "< Disable floating points ops"]
    pub const CS_MODE_MIPS_NOFLOAT: cs_mode = cs_mode(8388608);
}
impl cs_mode {
    #[doc = "< Mips pointers are 64-bit"]
    pub const CS_MODE_MIPS_PTR64: cs_mode = cs_mode(16777216);
}
impl cs_mode {
    #[doc = "< microMips32r3"]
    pub const CS_MODE_MICRO32R3: cs_mode = cs_mode(272);
}
impl cs_mode {
    #[doc = "< microMips32r6"]
    pub const CS_MODE_MICRO32R6: cs_mode = cs_mode(1040);
}
impl cs_mode {
    #[doc = "< M680X Hitachi 6301,6303 mode"]
    pub const CS_MODE_M680X_6301: cs_mode = cs_mode(2);
}
impl cs_mode {
    #[doc = "< M680X Hitachi 6309 mode"]
    pub const CS_MODE_M680X_6309: cs_mode = cs_mode(4);
}
impl cs_mode {
    #[doc = "< M680X Motorola 6800,6802 mode"]
    pub const CS_MODE_M680X_6800: cs_mode = cs_mode(8);
}
impl cs_mode {
    #[doc = "< M680X Motorola 6801,6803 mode"]
    pub const CS_MODE_M680X_6801: cs_mode = cs_mode(16);
}
impl cs_mode {
    #[doc = "< M680X Motorola/Freescale 6805 mode"]
    pub const CS_MODE_M680X_6805: cs_mode = cs_mode(32);
}
impl cs_mode {
    #[doc = "< M680X Motorola/Freescale/NXP 68HC08 mode"]
    pub const CS_MODE_M680X_6808: cs_mode = cs_mode(64);
}
impl cs_mode {
    #[doc = "< M680X Motorola 6809 mode"]
    pub const CS_MODE_M680X_6809: cs_mode = cs_mode(128);
}
impl cs_mode {
    #[doc = "< M680X Motorola/Freescale/NXP 68HC11 mode"]
    pub const CS_MODE_M680X_6811: cs_mode = cs_mode(256);
}
impl cs_mode {
    #[doc = "< M680X Motorola/Freescale/NXP CPU12\n< used on M68HC12/HCS12"]
    pub const CS_MODE_M680X_CPU12: cs_mode = cs_mode(512);
}
impl cs_mode {
    #[doc = "< M680X Freescale/NXP HCS08 mode"]
    pub const CS_MODE_M680X_HCS08: cs_mode = cs_mode(1024);
}
impl cs_mode {
    #[doc = "< Classic BPF mode (default)"]
    pub const CS_MODE_BPF_CLASSIC: cs_mode = cs_mode(0);
}
impl cs_mode {
    #[doc = "< Extended BPF mode"]
    pub const CS_MODE_BPF_EXTENDED: cs_mode = cs_mode(1);
}
impl cs_mode {
    #[doc = "< RISCV RV32G"]
    pub const CS_MODE_RISCV32: cs_mode = cs_mode(1);
}
impl cs_mode {
    #[doc = "< RISCV RV64G"]
    pub const CS_MODE_RISCV64: cs_mode = cs_mode(2);
}
impl cs_mode {
    #[doc = "< RISCV compressed instructure mode"]
    pub const CS_MODE_RISCVC: cs_mode = cs_mode(4);
}
impl cs_mode {
    #[doc = "< MOS65XXX MOS 6502"]
    pub const CS_MODE_MOS65XX_6502: cs_mode = cs_mode(2);
}
impl cs_mode {
    #[doc = "< MOS65XXX WDC 65c02"]
    pub const CS_MODE_MOS65XX_65C02: cs_mode = cs_mode(4);
}
impl cs_mode {
    #[doc = "< MOS65XXX WDC W65c02"]
    pub const CS_MODE_MOS65XX_W65C02: cs_mode = cs_mode(8);
}
impl cs_mode {
    #[doc = "< MOS65XXX WDC 65816, 8-bit m/x"]
    pub const CS_MODE_MOS65XX_65816: cs_mode = cs_mode(16);
}
impl cs_mode {
    #[doc = "< MOS65XXX WDC 65816, 16-bit m, 8-bit x"]
    pub const CS_MODE_MOS65XX_65816_LONG_M: cs_mode = cs_mode(32);
}
impl cs_mode {
    #[doc = "< MOS65XXX WDC 65816, 8-bit m, 16-bit x"]
    pub const CS_MODE_MOS65XX_65816_LONG_X: cs_mode = cs_mode(64);
}
impl cs_mode {
    pub const CS_MODE_MOS65XX_65816_LONG_MX: cs_mode = cs_mode(96);
}
impl cs_mode {
    #[doc = "< SH2"]
    pub const CS_MODE_SH2: cs_mode = cs_mode(2);
}
impl cs_mode {
    #[doc = "< SH2A"]
    pub const CS_MODE_SH2A: cs_mode = cs_mode(4);
}
impl cs_mode {
    #[doc = "< SH3"]
    pub const CS_MODE_SH3: cs_mode = cs_mode(8);
}
impl cs_mode {
    #[doc = "< SH4"]
    pub const CS_MODE_SH4: cs_mode = cs_mode(16);
}
impl cs_mode {
    #[doc = "< SH4A"]
    pub const CS_MODE_SH4A: cs_mode = cs_mode(32);
}
impl cs_mode {
    #[doc = "< w/ FPU"]
    pub const CS_MODE_SHFPU: cs_mode = cs_mode(64);
}
impl cs_mode {
    #[doc = "< w/ DSP"]
    pub const CS_MODE_SHDSP: cs_mode = cs_mode(128);
}
impl cs_mode {
    #[doc = "< Tricore 1.1"]
    pub const CS_MODE_TRICORE_110: cs_mode = cs_mode(2);
}
impl cs_mode {
    #[doc = "< Tricore 1.2"]
    pub const CS_MODE_TRICORE_120: cs_mode = cs_mode(4);
}
impl cs_mode {
    #[doc = "< Tricore 1.3"]
    pub const CS_MODE_TRICORE_130: cs_mode = cs_mode(8);
}
impl cs_mode {
    #[doc = "< Tricore 1.3.1"]
    pub const CS_MODE_TRICORE_131: cs_mode = cs_mode(16);
}
impl cs_mode {
    #[doc = "< Tricore 1.6"]
    pub const CS_MODE_TRICORE_160: cs_mode = cs_mode(32);
}
impl cs_mode {
    #[doc = "< Tricore 1.6.1"]
    pub const CS_MODE_TRICORE_161: cs_mode = cs_mode(64);
}
impl cs_mode {
    #[doc = "< Tricore 1.6.2"]
    pub const CS_MODE_TRICORE_162: cs_mode = cs_mode(128);
}
impl cs_mode {
    #[doc = "< Tricore 1.8.0"]
    pub const CS_MODE_TRICORE_180: cs_mode = cs_mode(256);
}
impl cs_mode {
    #[doc = "< HPPA 1.1"]
    pub const CS_MODE_HPPA_11: cs_mode = cs_mode(2);
}
impl cs_mode {
    #[doc = "< HPPA 2.0"]
    pub const CS_MODE_HPPA_20: cs_mode = cs_mode(4);
}
impl cs_mode {
    #[doc = "< HPPA 2.0 wide"]
    pub const CS_MODE_HPPA_20W: cs_mode = cs_mode(12);
}
impl cs_mode {
    #[doc = "< LoongArch32"]
    pub const CS_MODE_LOONGARCH32: cs_mode = cs_mode(1);
}
impl cs_mode {
    #[doc = "< LoongArch64"]
    pub const CS_MODE_LOONGARCH64: cs_mode = cs_mode(2);
}
impl cs_mode {
    #[doc = "< Enables features of the ARCH8 processor"]
    pub const CS_MODE_SYSTEMZ_ARCH8: cs_mode = cs_mode(2);
}
impl cs_mode {
    #[doc = "< Enables features of the ARCH9 processor"]
    pub const CS_MODE_SYSTEMZ_ARCH9: cs_mode = cs_mode(4);
}
impl cs_mode {
    #[doc = "< Enables features of the ARCH10 processor"]
    pub const CS_MODE_SYSTEMZ_ARCH10: cs_mode = cs_mode(8);
}
impl cs_mode {
    #[doc = "< Enables features of the ARCH11 processor"]
    pub const CS_MODE_SYSTEMZ_ARCH11: cs_mode = cs_mode(16);
}
impl cs_mode {
    #[doc = "< Enables features of the ARCH12 processor"]
    pub const CS_MODE_SYSTEMZ_ARCH12: cs_mode = cs_mode(32);
}
impl cs_mode {
    #[doc = "< Enables features of the ARCH13 processor"]
    pub const CS_MODE_SYSTEMZ_ARCH13: cs_mode = cs_mode(64);
}
impl cs_mode {
    #[doc = "< Enables features of the ARCH14 processor"]
    pub const CS_MODE_SYSTEMZ_ARCH14: cs_mode = cs_mode(128);
}
impl cs_mode {
    #[doc = "< Enables features of the Z10 processor"]
    pub const CS_MODE_SYSTEMZ_Z10: cs_mode = cs_mode(256);
}
impl cs_mode {
    #[doc = "< Enables features of the Z196 processor"]
    pub const CS_MODE_SYSTEMZ_Z196: cs_mode = cs_mode(512);
}
impl cs_mode {
    #[doc = "< Enables features of the ZEC12 processor"]
    pub const CS_MODE_SYSTEMZ_ZEC12: cs_mode = cs_mode(1024);
}
impl cs_mode {
    #[doc = "< Enables features of the Z13 processor"]
    pub const CS_MODE_SYSTEMZ_Z13: cs_mode = cs_mode(2048);
}
impl cs_mode {
    #[doc = "< Enables features of the Z14 processor"]
    pub const CS_MODE_SYSTEMZ_Z14: cs_mode = cs_mode(4096);
}
impl cs_mode {
    #[doc = "< Enables features of the Z15 processor"]
    pub const CS_MODE_SYSTEMZ_Z15: cs_mode = cs_mode(8192);
}
impl cs_mode {
    #[doc = "< Enables features of the Z16 processor"]
    pub const CS_MODE_SYSTEMZ_Z16: cs_mode = cs_mode(16384);
}
impl cs_mode {
    #[doc = "< Enables features of the generic processor"]
    pub const CS_MODE_SYSTEMZ_GENERIC: cs_mode = cs_mode(32768);
}
impl cs_mode {
    #[doc = "< Xtensa ESP32"]
    pub const CS_MODE_XTENSA_ESP32: cs_mode = cs_mode(2);
}
impl cs_mode {
    #[doc = "< Xtensa ESP32S2"]
    pub const CS_MODE_XTENSA_ESP32S2: cs_mode = cs_mode(4);
}
impl cs_mode {
    #[doc = "< Xtensa ESP328266"]
    pub const CS_MODE_XTENSA_ESP8266: cs_mode = cs_mode(8);
}
impl ::core::ops::BitOr<cs_mode> for cs_mode {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        cs_mode(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for cs_mode {
    #[inline]
    fn bitor_assign(&mut self, rhs: cs_mode) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<cs_mode> for cs_mode {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        cs_mode(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for cs_mode {
    #[inline]
    fn bitand_assign(&mut self, rhs: cs_mode) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[doc = " Mode type"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct cs_mode(pub libc::c_uint);
pub type cs_malloc_t =
    ::core::option::Option<unsafe extern "C" fn(size: usize) -> *mut libc::c_void>;
pub type cs_calloc_t =
    ::core::option::Option<unsafe extern "C" fn(nmemb: usize, size: usize) -> *mut libc::c_void>;
pub type cs_realloc_t = ::core::option::Option<
    unsafe extern "C" fn(ptr: *mut libc::c_void, size: usize) -> *mut libc::c_void,
>;
pub type cs_free_t = ::core::option::Option<unsafe extern "C" fn(ptr: *mut libc::c_void)>;
pub type cs_vsnprintf_t = ::core::option::Option<
    unsafe extern "C" fn(
        str_: *mut libc::c_char,
        size: usize,
        format: *const libc::c_char,
        ap: *mut va_list,
    ) -> libc::c_int,
>;
#[doc = " User-defined dynamic memory related functions: malloc/calloc/realloc/free/vsnprintf()\n By default, Capstone uses system's malloc(), calloc(), realloc(), free() & vsnprintf()."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_opt_mem {
    pub malloc: cs_malloc_t,
    pub calloc: cs_calloc_t,
    pub realloc: cs_realloc_t,
    pub free: cs_free_t,
    pub vsnprintf: cs_vsnprintf_t,
}
#[doc = " Customize mnemonic for instructions with alternative name.\n To reset existing customized instruction to its default mnemonic,\n call cs_option(CS_OPT_MNEMONIC) again with the same @id and NULL value\n for @mnemonic."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_opt_mnem {
    #[doc = " ID of instruction to be customized."]
    pub id: libc::c_uint,
    #[doc = " Customized instruction mnemonic."]
    pub mnemonic: *const libc::c_char,
}
#[repr(u32)]
#[doc = " Runtime option for the disassembled engine"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cs_opt_type {
    #[doc = "< No option specified"]
    CS_OPT_INVALID = 0,
    #[doc = "< Assembly output syntax"]
    CS_OPT_SYNTAX = 1,
    #[doc = "< Break down instruction structure into details"]
    CS_OPT_DETAIL = 2,
    #[doc = "< Change engine's mode at run-time"]
    CS_OPT_MODE = 3,
    #[doc = "< User-defined dynamic memory related functions"]
    CS_OPT_MEM = 4,
    #[doc = "< Skip data when disassembling. Then engine is in SKIPDATA mode."]
    CS_OPT_SKIPDATA = 5,
    #[doc = "< Setup user-defined function for SKIPDATA option"]
    CS_OPT_SKIPDATA_SETUP = 6,
    #[doc = "< Customize instruction mnemonic"]
    CS_OPT_MNEMONIC = 7,
    #[doc = "< print immediate operands in unsigned form"]
    CS_OPT_UNSIGNED = 8,
    #[doc = "< ARM, PPC, AArch64: Don't add the branch immediate value to the PC."]
    CS_OPT_ONLY_OFFSET_BRANCH = 9,
    #[doc = "< Xtensa, set the LITBASE value. LITBASE is set to 0 by default."]
    CS_OPT_LITBASE = 10,
}
pub mod cs_opt_value {
    #[doc = " Runtime option value (associated with option type above)"]
    pub type Type = libc::c_uint;
    #[doc = "< Turn OFF an option - default for CS_OPT_DETAIL, CS_OPT_SKIPDATA, CS_OPT_UNSIGNED."]
    pub const CS_OPT_OFF: Type = 0;
    #[doc = "< Turn ON an option (CS_OPT_DETAIL, CS_OPT_SKIPDATA)."]
    pub const CS_OPT_ON: Type = 1;
    #[doc = "< Default asm syntax (CS_OPT_SYNTAX)."]
    pub const CS_OPT_SYNTAX_DEFAULT: Type = 2;
    #[doc = "< X86 Intel asm syntax - default on X86 (CS_OPT_SYNTAX)."]
    pub const CS_OPT_SYNTAX_INTEL: Type = 4;
    #[doc = "< X86 ATT asm syntax (CS_OPT_SYNTAX)."]
    pub const CS_OPT_SYNTAX_ATT: Type = 8;
    #[doc = "< Prints register name with only number (CS_OPT_SYNTAX)"]
    pub const CS_OPT_SYNTAX_NOREGNAME: Type = 16;
    #[doc = "< X86 Intel Masm syntax (CS_OPT_SYNTAX)."]
    pub const CS_OPT_SYNTAX_MASM: Type = 32;
    #[doc = "< MOS65XX use $ as hex prefix"]
    pub const CS_OPT_SYNTAX_MOTOROLA: Type = 64;
    #[doc = "< Prints common register alias which are not defined in LLVM (ARM: r9 = sb etc.)"]
    pub const CS_OPT_SYNTAX_CS_REG_ALIAS: Type = 128;
    #[doc = "< Prints the % in front of PPC registers."]
    pub const CS_OPT_SYNTAX_PERCENT: Type = 256;
    #[doc = "< Does not print the $ in front of Mips, LoongArch registers."]
    pub const CS_OPT_SYNTAX_NO_DOLLAR: Type = 512;
    #[doc = "< If enabled, always sets the real instruction detail. Even if the instruction is an alias."]
    pub const CS_OPT_DETAIL_REAL: Type = 2;
}
#[doc = " An option"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_opt {
    #[doc = "< The option type"]
    pub type_: cs_opt_type,
    #[doc = "< The option value to set."]
    pub val: cs_opt_value::Type,
}
pub mod cs_group_type {
    #[doc = " Common instruction groups - to be consistent across all architectures."]
    pub type Type = libc::c_uint;
    #[doc = "< uninitialized/invalid group."]
    pub const CS_GRP_INVALID: Type = 0;
    #[doc = "< all jump instructions (conditional+direct+indirect jumps)"]
    pub const CS_GRP_JUMP: Type = 1;
    #[doc = "< all call instructions"]
    pub const CS_GRP_CALL: Type = 2;
    #[doc = "< all return instructions"]
    pub const CS_GRP_RET: Type = 3;
    #[doc = "< all interrupt instructions (int+syscall)"]
    pub const CS_GRP_INT: Type = 4;
    #[doc = "< all interrupt return instructions"]
    pub const CS_GRP_IRET: Type = 5;
    #[doc = "< all privileged instructions"]
    pub const CS_GRP_PRIVILEGE: Type = 6;
    #[doc = "< all relative branching instructions"]
    pub const CS_GRP_BRANCH_RELATIVE: Type = 7;
}
#[doc = "User-defined callback function for SKIPDATA option.\nSee tests/test_skipdata.c for sample code demonstrating this API.\n\n@code: the input buffer containing code to be disassembled.\nThis is the same buffer passed to cs_disasm().\n@code_size: size (in bytes) of the above @code buffer.\n@offset: the position of the currently-examining byte in the input\nbuffer @code mentioned above.\n@user_data: user-data passed to cs_option() via @user_data field in\ncs_opt_skipdata struct below.\n\n@return: return number of bytes to skip, or 0 to immediately stop disassembling."]
pub type cs_skipdata_cb_t = ::core::option::Option<
    unsafe extern "C" fn(
        code: *const u8,
        code_size: usize,
        offset: usize,
        user_data: *mut libc::c_void,
    ) -> usize,
>;
#[doc = " User-customized setup for SKIPDATA option"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_opt_skipdata {
    #[doc = " Capstone considers data to skip as special \"instructions\".\n User can specify the string for this instruction's \"mnemonic\" here.\n By default (if @mnemonic is NULL), Capstone use \".byte\"."]
    pub mnemonic: *const libc::c_char,
    #[doc = " User-defined callback function to be called when Capstone hits data.\n If the returned value from this callback is positive (>0), Capstone\n will skip exactly that number of bytes & continue. Otherwise, if\n the callback returns 0, Capstone stops disassembling and returns\n immediately from cs_disasm()\n NOTE: if this callback pointer is NULL, Capstone would skip a number\n of bytes depending on architectures, as following:\n Arm:       2 bytes (Thumb mode) or 4 bytes.\n AArch64:   4 bytes.\n Mips:      4 bytes.\n M680x:     1 byte.\n PowerPC:   4 bytes.\n Sparc:     4 bytes.\n SystemZ:   2 bytes.\n X86:       1 bytes.\n XCore:     2 bytes.\n EVM:       1 bytes.\n RISCV:     4 bytes.\n WASM:      1 bytes.\n MOS65XX:   1 bytes.\n BPF:       8 bytes.\n TriCore:   2 bytes.\n LoongArch: 4 bytes.\n ARC: \t   2 bytes."]
    pub callback: cs_skipdata_cb_t,
    #[doc = " User-defined data to be passed to @callback function pointer."]
    pub user_data: *mut libc::c_void,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CondCodes {
    ARMCC_EQ = 0,
    ARMCC_NE = 1,
    ARMCC_HS = 2,
    ARMCC_LO = 3,
    ARMCC_MI = 4,
    ARMCC_PL = 5,
    ARMCC_VS = 6,
    ARMCC_VC = 7,
    ARMCC_HI = 8,
    ARMCC_LS = 9,
    ARMCC_GE = 10,
    ARMCC_LT = 11,
    ARMCC_GT = 12,
    ARMCC_LE = 13,
    ARMCC_AL = 14,
    ARMCC_UNDEF = 15,
    ARMCC_Invalid = 16,
}
pub use self::CondCodes as ARMCC_CondCodes;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum VPTCodes {
    ARMVCC_None = 0,
    ARMVCC_Then = 1,
    ARMVCC_Else = 2,
}
pub use self::VPTCodes as ARMVCC_VPTCodes;
#[repr(u32)]
#[doc = " ARM shift type"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum arm_shifter {
    ARM_SFT_INVALID = 0,
    ARM_SFT_ASR = 1,
    ARM_SFT_LSL = 2,
    ARM_SFT_LSR = 3,
    ARM_SFT_ROR = 4,
    ARM_SFT_RRX = 5,
    ARM_SFT_UXTW = 6,
    ARM_SFT_REG = 7,
    ARM_SFT_ASR_REG = 8,
    ARM_SFT_LSL_REG = 9,
    ARM_SFT_LSR_REG = 10,
    ARM_SFT_ROR_REG = 11,
}
#[repr(u32)]
#[doc = " The memory barrier constants map directly to the 4-bit encoding of\n the option field for Memory Barrier operations."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum MemBOpt {
    ARM_MB_RESERVED_0 = 0,
    ARM_MB_OSHLD = 1,
    ARM_MB_OSHST = 2,
    ARM_MB_OSH = 3,
    ARM_MB_RESERVED_4 = 4,
    ARM_MB_NSHLD = 5,
    ARM_MB_NSHST = 6,
    ARM_MB_NSH = 7,
    ARM_MB_RESERVED_8 = 8,
    ARM_MB_ISHLD = 9,
    ARM_MB_ISHST = 10,
    ARM_MB_ISH = 11,
    ARM_MB_RESERVED_12 = 12,
    ARM_MB_LD = 13,
    ARM_MB_ST = 14,
    ARM_MB_SY = 15,
}
#[doc = " The memory barrier constants map directly to the 4-bit encoding of\n the option field for Memory Barrier operations."]
pub use self::MemBOpt as arm_mem_bo_opt;
impl arm_spsr_cspr_bits {
    pub const ARM_FIELD_SPSR_C: arm_spsr_cspr_bits = arm_spsr_cspr_bits(1);
}
impl arm_spsr_cspr_bits {
    pub const ARM_FIELD_SPSR_X: arm_spsr_cspr_bits = arm_spsr_cspr_bits(2);
}
impl arm_spsr_cspr_bits {
    pub const ARM_FIELD_SPSR_S: arm_spsr_cspr_bits = arm_spsr_cspr_bits(4);
}
impl arm_spsr_cspr_bits {
    pub const ARM_FIELD_SPSR_F: arm_spsr_cspr_bits = arm_spsr_cspr_bits(8);
}
impl arm_spsr_cspr_bits {
    pub const ARM_FIELD_CPSR_C: arm_spsr_cspr_bits = arm_spsr_cspr_bits(16);
}
impl arm_spsr_cspr_bits {
    pub const ARM_FIELD_CPSR_X: arm_spsr_cspr_bits = arm_spsr_cspr_bits(32);
}
impl arm_spsr_cspr_bits {
    pub const ARM_FIELD_CPSR_S: arm_spsr_cspr_bits = arm_spsr_cspr_bits(64);
}
impl arm_spsr_cspr_bits {
    pub const ARM_FIELD_CPSR_F: arm_spsr_cspr_bits = arm_spsr_cspr_bits(128);
}
impl ::core::ops::BitOr<arm_spsr_cspr_bits> for arm_spsr_cspr_bits {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        arm_spsr_cspr_bits(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for arm_spsr_cspr_bits {
    #[inline]
    fn bitor_assign(&mut self, rhs: arm_spsr_cspr_bits) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<arm_spsr_cspr_bits> for arm_spsr_cspr_bits {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        arm_spsr_cspr_bits(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for arm_spsr_cspr_bits {
    #[inline]
    fn bitand_assign(&mut self, rhs: arm_spsr_cspr_bits) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct arm_spsr_cspr_bits(pub libc::c_uint);
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum arm_bankedreg {
    ARM_BANKEDREG_ELR_HYP = 30,
    ARM_BANKEDREG_LR_ABT = 20,
    ARM_BANKEDREG_LR_FIQ = 14,
    ARM_BANKEDREG_LR_IRQ = 16,
    ARM_BANKEDREG_LR_MON = 28,
    ARM_BANKEDREG_LR_SVC = 18,
    ARM_BANKEDREG_LR_UND = 22,
    ARM_BANKEDREG_LR_USR = 6,
    ARM_BANKEDREG_R10_FIQ = 10,
    ARM_BANKEDREG_R10_USR = 2,
    ARM_BANKEDREG_R11_FIQ = 11,
    ARM_BANKEDREG_R11_USR = 3,
    ARM_BANKEDREG_R12_FIQ = 12,
    ARM_BANKEDREG_R12_USR = 4,
    ARM_BANKEDREG_R8_FIQ = 8,
    ARM_BANKEDREG_R8_USR = 0,
    ARM_BANKEDREG_R9_FIQ = 9,
    ARM_BANKEDREG_R9_USR = 1,
    ARM_BANKEDREG_SPSR_ABT = 52,
    ARM_BANKEDREG_SPSR_FIQ = 46,
    ARM_BANKEDREG_SPSR_HYP = 62,
    ARM_BANKEDREG_SPSR_IRQ = 48,
    ARM_BANKEDREG_SPSR_MON = 60,
    ARM_BANKEDREG_SPSR_SVC = 50,
    ARM_BANKEDREG_SPSR_UND = 54,
    ARM_BANKEDREG_SP_ABT = 21,
    ARM_BANKEDREG_SP_FIQ = 13,
    ARM_BANKEDREG_SP_HYP = 31,
    ARM_BANKEDREG_SP_IRQ = 17,
    ARM_BANKEDREG_SP_MON = 29,
    ARM_BANKEDREG_SP_SVC = 19,
    ARM_BANKEDREG_SP_UND = 23,
    ARM_BANKEDREG_SP_USR = 5,
}
impl arm_sysreg {
    pub const ARM_MCLASSSYSREG_APSR_NZCVQ: arm_sysreg = arm_sysreg::ARM_MCLASSSYSREG_APSR;
}
impl arm_sysreg {
    pub const ARM_MCLASSSYSREG_EAPSR_NZCVQ: arm_sysreg = arm_sysreg::ARM_MCLASSSYSREG_EAPSR;
}
impl arm_sysreg {
    pub const ARM_MCLASSSYSREG_IAPSR_NZCVQ: arm_sysreg = arm_sysreg::ARM_MCLASSSYSREG_IAPSR;
}
impl arm_sysreg {
    pub const ARM_MCLASSSYSREG_XPSR_NZCVQ: arm_sysreg = arm_sysreg::ARM_MCLASSSYSREG_XPSR;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum arm_sysreg {
    ARM_MCLASSSYSREG_APSR = 2048,
    ARM_MCLASSSYSREG_APSR_G = 1024,
    ARM_MCLASSSYSREG_APSR_NZCVQG = 3072,
    ARM_MCLASSSYSREG_BASEPRI = 2065,
    ARM_MCLASSSYSREG_BASEPRI_MAX = 2066,
    ARM_MCLASSSYSREG_BASEPRI_NS = 2193,
    ARM_MCLASSSYSREG_CONTROL = 2068,
    ARM_MCLASSSYSREG_CONTROL_NS = 2196,
    ARM_MCLASSSYSREG_EAPSR = 2050,
    ARM_MCLASSSYSREG_EAPSR_G = 1026,
    ARM_MCLASSSYSREG_EAPSR_NZCVQG = 3074,
    ARM_MCLASSSYSREG_EPSR = 2054,
    ARM_MCLASSSYSREG_FAULTMASK = 2067,
    ARM_MCLASSSYSREG_FAULTMASK_NS = 2195,
    ARM_MCLASSSYSREG_IAPSR = 2049,
    ARM_MCLASSSYSREG_IAPSR_G = 1025,
    ARM_MCLASSSYSREG_IAPSR_NZCVQG = 3073,
    ARM_MCLASSSYSREG_IEPSR = 2055,
    ARM_MCLASSSYSREG_IPSR = 2053,
    ARM_MCLASSSYSREG_MSP = 2056,
    ARM_MCLASSSYSREG_MSPLIM = 2058,
    ARM_MCLASSSYSREG_MSPLIM_NS = 2186,
    ARM_MCLASSSYSREG_MSP_NS = 2184,
    ARM_MCLASSSYSREG_PAC_KEY_P_0 = 2080,
    ARM_MCLASSSYSREG_PAC_KEY_P_0_NS = 2208,
    ARM_MCLASSSYSREG_PAC_KEY_P_1 = 2081,
    ARM_MCLASSSYSREG_PAC_KEY_P_1_NS = 2209,
    ARM_MCLASSSYSREG_PAC_KEY_P_2 = 2082,
    ARM_MCLASSSYSREG_PAC_KEY_P_2_NS = 2210,
    ARM_MCLASSSYSREG_PAC_KEY_P_3 = 2083,
    ARM_MCLASSSYSREG_PAC_KEY_P_3_NS = 2211,
    ARM_MCLASSSYSREG_PAC_KEY_U_0 = 2084,
    ARM_MCLASSSYSREG_PAC_KEY_U_0_NS = 2212,
    ARM_MCLASSSYSREG_PAC_KEY_U_1 = 2085,
    ARM_MCLASSSYSREG_PAC_KEY_U_1_NS = 2213,
    ARM_MCLASSSYSREG_PAC_KEY_U_2 = 2086,
    ARM_MCLASSSYSREG_PAC_KEY_U_2_NS = 2214,
    ARM_MCLASSSYSREG_PAC_KEY_U_3 = 2087,
    ARM_MCLASSSYSREG_PAC_KEY_U_3_NS = 2215,
    ARM_MCLASSSYSREG_PRIMASK = 2064,
    ARM_MCLASSSYSREG_PRIMASK_NS = 2192,
    ARM_MCLASSSYSREG_PSP = 2057,
    ARM_MCLASSSYSREG_PSPLIM = 2059,
    ARM_MCLASSSYSREG_PSPLIM_NS = 2187,
    ARM_MCLASSSYSREG_PSP_NS = 2185,
    ARM_MCLASSSYSREG_SP_NS = 2200,
    ARM_MCLASSSYSREG_XPSR = 2051,
    ARM_MCLASSSYSREG_XPSR_G = 1027,
    ARM_MCLASSSYSREG_XPSR_NZCVQG = 3075,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union arm_sysop_reg {
    pub mclasssysreg: arm_sysreg,
    pub bankedreg: arm_bankedreg,
    #[doc = "< Raw value for assignment in generated files."]
    pub raw_val: libc::c_int,
}
impl ::core::fmt::Debug for arm_sysop_reg {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "arm_sysop_reg {{ union }}")
    }
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum arm_op_type {
    #[doc = "< Invalid"]
    ARM_OP_INVALID = 0,
    #[doc = "< Register operand"]
    ARM_OP_REG = 1,
    #[doc = "< Immediate operand"]
    ARM_OP_IMM = 2,
    #[doc = "< Floating-Point operand"]
    ARM_OP_FP = 3,
    #[doc = "< Predicate"]
    ARM_OP_PRED = 4,
    #[doc = "< C-Immediate (coprocessor registers)"]
    ARM_OP_CIMM = 16,
    #[doc = "< P-Immediate (coprocessor registers)"]
    ARM_OP_PIMM = 17,
    #[doc = "< operand for SETEND instruction"]
    ARM_OP_SETEND = 18,
    #[doc = "< MSR/MRS special register operand"]
    ARM_OP_SYSREG = 19,
    #[doc = "< Banked register operand"]
    ARM_OP_BANKEDREG = 20,
    #[doc = "< Collection of SPSR bits"]
    ARM_OP_SPSR = 21,
    #[doc = "< Collection of CPSR bits"]
    ARM_OP_CPSR = 22,
    #[doc = "< Raw SYSm field"]
    ARM_OP_SYSM = 23,
    #[doc = "< Vector predicate. Leaves inactive lanes of output vector register unchanged."]
    ARM_OP_VPRED_R = 24,
    #[doc = "< Vector predicate. Don't preserved inactive lanes of output register."]
    ARM_OP_VPRED_N = 25,
    #[doc = "< Memory operand"]
    ARM_OP_MEM = 128,
}
#[repr(u32)]
#[doc = " Operand type for SETEND instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum arm_setend_type {
    #[doc = "< Uninitialized."]
    ARM_SETEND_INVALID = 0,
    #[doc = "< BE operand."]
    ARM_SETEND_BE = 1,
    #[doc = "< LE operand"]
    ARM_SETEND_LE = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum arm_cpsmode_type {
    ARM_CPSMODE_INVALID = 0,
    ARM_CPSMODE_IE = 2,
    ARM_CPSMODE_ID = 3,
}
#[repr(u32)]
#[doc = " Operand type for SETEND instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum arm_cpsflag_type {
    ARM_CPSFLAG_INVALID = 0,
    ARM_CPSFLAG_F = 1,
    ARM_CPSFLAG_I = 2,
    ARM_CPSFLAG_A = 4,
    #[doc = "< no flag"]
    ARM_CPSFLAG_NONE = 16,
}
#[repr(u32)]
#[doc = " Data type for elements of vector instructions."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum arm_vectordata_type {
    ARM_VECTORDATA_INVALID = 0,
    ARM_VECTORDATA_I8 = 1,
    ARM_VECTORDATA_I16 = 2,
    ARM_VECTORDATA_I32 = 3,
    ARM_VECTORDATA_I64 = 4,
    ARM_VECTORDATA_S8 = 5,
    ARM_VECTORDATA_S16 = 6,
    ARM_VECTORDATA_S32 = 7,
    ARM_VECTORDATA_S64 = 8,
    ARM_VECTORDATA_U8 = 9,
    ARM_VECTORDATA_U16 = 10,
    ARM_VECTORDATA_U32 = 11,
    ARM_VECTORDATA_U64 = 12,
    ARM_VECTORDATA_P8 = 13,
    ARM_VECTORDATA_P16 = 14,
    ARM_VECTORDATA_F16 = 15,
    ARM_VECTORDATA_F32 = 16,
    ARM_VECTORDATA_F64 = 17,
    ARM_VECTORDATA_F16F64 = 18,
    ARM_VECTORDATA_F64F16 = 19,
    ARM_VECTORDATA_F32F16 = 20,
    ARM_VECTORDATA_F16F32 = 21,
    ARM_VECTORDATA_F64F32 = 22,
    ARM_VECTORDATA_F32F64 = 23,
    ARM_VECTORDATA_S32F32 = 24,
    ARM_VECTORDATA_U32F32 = 25,
    ARM_VECTORDATA_F32S32 = 26,
    ARM_VECTORDATA_F32U32 = 27,
    ARM_VECTORDATA_F64S16 = 28,
    ARM_VECTORDATA_F32S16 = 29,
    ARM_VECTORDATA_F64S32 = 30,
    ARM_VECTORDATA_S16F64 = 31,
    ARM_VECTORDATA_S16F32 = 32,
    ARM_VECTORDATA_S32F64 = 33,
    ARM_VECTORDATA_U16F64 = 34,
    ARM_VECTORDATA_U16F32 = 35,
    ARM_VECTORDATA_U32F64 = 36,
    ARM_VECTORDATA_F64U16 = 37,
    ARM_VECTORDATA_F32U16 = 38,
    ARM_VECTORDATA_F64U32 = 39,
    ARM_VECTORDATA_F16U16 = 40,
    ARM_VECTORDATA_U16F16 = 41,
    ARM_VECTORDATA_F16U32 = 42,
    ARM_VECTORDATA_U32F16 = 43,
    ARM_VECTORDATA_F16S16 = 44,
    ARM_VECTORDATA_S16F16 = 45,
    ARM_VECTORDATA_F16S32 = 46,
    ARM_VECTORDATA_S32F16 = 47,
}
pub mod arm_reg {
    #[doc = " ARM registers"]
    pub type Type = libc::c_uint;
    pub const ARM_REG_INVALID: Type = 0;
    pub const ARM_REG_APSR: Type = 1;
    pub const ARM_REG_APSR_NZCV: Type = 2;
    pub const ARM_REG_CPSR: Type = 3;
    pub const ARM_REG_FPCXTNS: Type = 4;
    pub const ARM_REG_FPCXTS: Type = 5;
    pub const ARM_REG_FPEXC: Type = 6;
    pub const ARM_REG_FPINST: Type = 7;
    pub const ARM_REG_FPSCR: Type = 8;
    pub const ARM_REG_FPSCR_NZCV: Type = 9;
    pub const ARM_REG_FPSCR_NZCVQC: Type = 10;
    pub const ARM_REG_FPSID: Type = 11;
    pub const ARM_REG_ITSTATE: Type = 12;
    pub const ARM_REG_LR: Type = 13;
    pub const ARM_REG_PC: Type = 14;
    pub const ARM_REG_RA_AUTH_CODE: Type = 15;
    pub const ARM_REG_SP: Type = 16;
    pub const ARM_REG_SPSR: Type = 17;
    pub const ARM_REG_VPR: Type = 18;
    pub const ARM_REG_ZR: Type = 19;
    pub const ARM_REG_D0: Type = 20;
    pub const ARM_REG_D1: Type = 21;
    pub const ARM_REG_D2: Type = 22;
    pub const ARM_REG_D3: Type = 23;
    pub const ARM_REG_D4: Type = 24;
    pub const ARM_REG_D5: Type = 25;
    pub const ARM_REG_D6: Type = 26;
    pub const ARM_REG_D7: Type = 27;
    pub const ARM_REG_D8: Type = 28;
    pub const ARM_REG_D9: Type = 29;
    pub const ARM_REG_D10: Type = 30;
    pub const ARM_REG_D11: Type = 31;
    pub const ARM_REG_D12: Type = 32;
    pub const ARM_REG_D13: Type = 33;
    pub const ARM_REG_D14: Type = 34;
    pub const ARM_REG_D15: Type = 35;
    pub const ARM_REG_D16: Type = 36;
    pub const ARM_REG_D17: Type = 37;
    pub const ARM_REG_D18: Type = 38;
    pub const ARM_REG_D19: Type = 39;
    pub const ARM_REG_D20: Type = 40;
    pub const ARM_REG_D21: Type = 41;
    pub const ARM_REG_D22: Type = 42;
    pub const ARM_REG_D23: Type = 43;
    pub const ARM_REG_D24: Type = 44;
    pub const ARM_REG_D25: Type = 45;
    pub const ARM_REG_D26: Type = 46;
    pub const ARM_REG_D27: Type = 47;
    pub const ARM_REG_D28: Type = 48;
    pub const ARM_REG_D29: Type = 49;
    pub const ARM_REG_D30: Type = 50;
    pub const ARM_REG_D31: Type = 51;
    pub const ARM_REG_FPINST2: Type = 52;
    pub const ARM_REG_MVFR0: Type = 53;
    pub const ARM_REG_MVFR1: Type = 54;
    pub const ARM_REG_MVFR2: Type = 55;
    pub const ARM_REG_P0: Type = 56;
    pub const ARM_REG_Q0: Type = 57;
    pub const ARM_REG_Q1: Type = 58;
    pub const ARM_REG_Q2: Type = 59;
    pub const ARM_REG_Q3: Type = 60;
    pub const ARM_REG_Q4: Type = 61;
    pub const ARM_REG_Q5: Type = 62;
    pub const ARM_REG_Q6: Type = 63;
    pub const ARM_REG_Q7: Type = 64;
    pub const ARM_REG_Q8: Type = 65;
    pub const ARM_REG_Q9: Type = 66;
    pub const ARM_REG_Q10: Type = 67;
    pub const ARM_REG_Q11: Type = 68;
    pub const ARM_REG_Q12: Type = 69;
    pub const ARM_REG_Q13: Type = 70;
    pub const ARM_REG_Q14: Type = 71;
    pub const ARM_REG_Q15: Type = 72;
    pub const ARM_REG_R0: Type = 73;
    pub const ARM_REG_R1: Type = 74;
    pub const ARM_REG_R2: Type = 75;
    pub const ARM_REG_R3: Type = 76;
    pub const ARM_REG_R4: Type = 77;
    pub const ARM_REG_R5: Type = 78;
    pub const ARM_REG_R6: Type = 79;
    pub const ARM_REG_R7: Type = 80;
    pub const ARM_REG_R8: Type = 81;
    pub const ARM_REG_R9: Type = 82;
    pub const ARM_REG_R10: Type = 83;
    pub const ARM_REG_R11: Type = 84;
    pub const ARM_REG_R12: Type = 85;
    pub const ARM_REG_S0: Type = 86;
    pub const ARM_REG_S1: Type = 87;
    pub const ARM_REG_S2: Type = 88;
    pub const ARM_REG_S3: Type = 89;
    pub const ARM_REG_S4: Type = 90;
    pub const ARM_REG_S5: Type = 91;
    pub const ARM_REG_S6: Type = 92;
    pub const ARM_REG_S7: Type = 93;
    pub const ARM_REG_S8: Type = 94;
    pub const ARM_REG_S9: Type = 95;
    pub const ARM_REG_S10: Type = 96;
    pub const ARM_REG_S11: Type = 97;
    pub const ARM_REG_S12: Type = 98;
    pub const ARM_REG_S13: Type = 99;
    pub const ARM_REG_S14: Type = 100;
    pub const ARM_REG_S15: Type = 101;
    pub const ARM_REG_S16: Type = 102;
    pub const ARM_REG_S17: Type = 103;
    pub const ARM_REG_S18: Type = 104;
    pub const ARM_REG_S19: Type = 105;
    pub const ARM_REG_S20: Type = 106;
    pub const ARM_REG_S21: Type = 107;
    pub const ARM_REG_S22: Type = 108;
    pub const ARM_REG_S23: Type = 109;
    pub const ARM_REG_S24: Type = 110;
    pub const ARM_REG_S25: Type = 111;
    pub const ARM_REG_S26: Type = 112;
    pub const ARM_REG_S27: Type = 113;
    pub const ARM_REG_S28: Type = 114;
    pub const ARM_REG_S29: Type = 115;
    pub const ARM_REG_S30: Type = 116;
    pub const ARM_REG_S31: Type = 117;
    pub const ARM_REG_D0_D2: Type = 118;
    pub const ARM_REG_D1_D3: Type = 119;
    pub const ARM_REG_D2_D4: Type = 120;
    pub const ARM_REG_D3_D5: Type = 121;
    pub const ARM_REG_D4_D6: Type = 122;
    pub const ARM_REG_D5_D7: Type = 123;
    pub const ARM_REG_D6_D8: Type = 124;
    pub const ARM_REG_D7_D9: Type = 125;
    pub const ARM_REG_D8_D10: Type = 126;
    pub const ARM_REG_D9_D11: Type = 127;
    pub const ARM_REG_D10_D12: Type = 128;
    pub const ARM_REG_D11_D13: Type = 129;
    pub const ARM_REG_D12_D14: Type = 130;
    pub const ARM_REG_D13_D15: Type = 131;
    pub const ARM_REG_D14_D16: Type = 132;
    pub const ARM_REG_D15_D17: Type = 133;
    pub const ARM_REG_D16_D18: Type = 134;
    pub const ARM_REG_D17_D19: Type = 135;
    pub const ARM_REG_D18_D20: Type = 136;
    pub const ARM_REG_D19_D21: Type = 137;
    pub const ARM_REG_D20_D22: Type = 138;
    pub const ARM_REG_D21_D23: Type = 139;
    pub const ARM_REG_D22_D24: Type = 140;
    pub const ARM_REG_D23_D25: Type = 141;
    pub const ARM_REG_D24_D26: Type = 142;
    pub const ARM_REG_D25_D27: Type = 143;
    pub const ARM_REG_D26_D28: Type = 144;
    pub const ARM_REG_D27_D29: Type = 145;
    pub const ARM_REG_D28_D30: Type = 146;
    pub const ARM_REG_D29_D31: Type = 147;
    pub const ARM_REG_Q0_Q1: Type = 148;
    pub const ARM_REG_Q1_Q2: Type = 149;
    pub const ARM_REG_Q2_Q3: Type = 150;
    pub const ARM_REG_Q3_Q4: Type = 151;
    pub const ARM_REG_Q4_Q5: Type = 152;
    pub const ARM_REG_Q5_Q6: Type = 153;
    pub const ARM_REG_Q6_Q7: Type = 154;
    pub const ARM_REG_Q7_Q8: Type = 155;
    pub const ARM_REG_Q8_Q9: Type = 156;
    pub const ARM_REG_Q9_Q10: Type = 157;
    pub const ARM_REG_Q10_Q11: Type = 158;
    pub const ARM_REG_Q11_Q12: Type = 159;
    pub const ARM_REG_Q12_Q13: Type = 160;
    pub const ARM_REG_Q13_Q14: Type = 161;
    pub const ARM_REG_Q14_Q15: Type = 162;
    pub const ARM_REG_Q0_Q1_Q2_Q3: Type = 163;
    pub const ARM_REG_Q1_Q2_Q3_Q4: Type = 164;
    pub const ARM_REG_Q2_Q3_Q4_Q5: Type = 165;
    pub const ARM_REG_Q3_Q4_Q5_Q6: Type = 166;
    pub const ARM_REG_Q4_Q5_Q6_Q7: Type = 167;
    pub const ARM_REG_Q5_Q6_Q7_Q8: Type = 168;
    pub const ARM_REG_Q6_Q7_Q8_Q9: Type = 169;
    pub const ARM_REG_Q7_Q8_Q9_Q10: Type = 170;
    pub const ARM_REG_Q8_Q9_Q10_Q11: Type = 171;
    pub const ARM_REG_Q9_Q10_Q11_Q12: Type = 172;
    pub const ARM_REG_Q10_Q11_Q12_Q13: Type = 173;
    pub const ARM_REG_Q11_Q12_Q13_Q14: Type = 174;
    pub const ARM_REG_Q12_Q13_Q14_Q15: Type = 175;
    pub const ARM_REG_R0_R1: Type = 176;
    pub const ARM_REG_R2_R3: Type = 177;
    pub const ARM_REG_R4_R5: Type = 178;
    pub const ARM_REG_R6_R7: Type = 179;
    pub const ARM_REG_R8_R9: Type = 180;
    pub const ARM_REG_R10_R11: Type = 181;
    pub const ARM_REG_R12_SP: Type = 182;
    pub const ARM_REG_D0_D1_D2: Type = 183;
    pub const ARM_REG_D1_D2_D3: Type = 184;
    pub const ARM_REG_D2_D3_D4: Type = 185;
    pub const ARM_REG_D3_D4_D5: Type = 186;
    pub const ARM_REG_D4_D5_D6: Type = 187;
    pub const ARM_REG_D5_D6_D7: Type = 188;
    pub const ARM_REG_D6_D7_D8: Type = 189;
    pub const ARM_REG_D7_D8_D9: Type = 190;
    pub const ARM_REG_D8_D9_D10: Type = 191;
    pub const ARM_REG_D9_D10_D11: Type = 192;
    pub const ARM_REG_D10_D11_D12: Type = 193;
    pub const ARM_REG_D11_D12_D13: Type = 194;
    pub const ARM_REG_D12_D13_D14: Type = 195;
    pub const ARM_REG_D13_D14_D15: Type = 196;
    pub const ARM_REG_D14_D15_D16: Type = 197;
    pub const ARM_REG_D15_D16_D17: Type = 198;
    pub const ARM_REG_D16_D17_D18: Type = 199;
    pub const ARM_REG_D17_D18_D19: Type = 200;
    pub const ARM_REG_D18_D19_D20: Type = 201;
    pub const ARM_REG_D19_D20_D21: Type = 202;
    pub const ARM_REG_D20_D21_D22: Type = 203;
    pub const ARM_REG_D21_D22_D23: Type = 204;
    pub const ARM_REG_D22_D23_D24: Type = 205;
    pub const ARM_REG_D23_D24_D25: Type = 206;
    pub const ARM_REG_D24_D25_D26: Type = 207;
    pub const ARM_REG_D25_D26_D27: Type = 208;
    pub const ARM_REG_D26_D27_D28: Type = 209;
    pub const ARM_REG_D27_D28_D29: Type = 210;
    pub const ARM_REG_D28_D29_D30: Type = 211;
    pub const ARM_REG_D29_D30_D31: Type = 212;
    pub const ARM_REG_D0_D2_D4: Type = 213;
    pub const ARM_REG_D1_D3_D5: Type = 214;
    pub const ARM_REG_D2_D4_D6: Type = 215;
    pub const ARM_REG_D3_D5_D7: Type = 216;
    pub const ARM_REG_D4_D6_D8: Type = 217;
    pub const ARM_REG_D5_D7_D9: Type = 218;
    pub const ARM_REG_D6_D8_D10: Type = 219;
    pub const ARM_REG_D7_D9_D11: Type = 220;
    pub const ARM_REG_D8_D10_D12: Type = 221;
    pub const ARM_REG_D9_D11_D13: Type = 222;
    pub const ARM_REG_D10_D12_D14: Type = 223;
    pub const ARM_REG_D11_D13_D15: Type = 224;
    pub const ARM_REG_D12_D14_D16: Type = 225;
    pub const ARM_REG_D13_D15_D17: Type = 226;
    pub const ARM_REG_D14_D16_D18: Type = 227;
    pub const ARM_REG_D15_D17_D19: Type = 228;
    pub const ARM_REG_D16_D18_D20: Type = 229;
    pub const ARM_REG_D17_D19_D21: Type = 230;
    pub const ARM_REG_D18_D20_D22: Type = 231;
    pub const ARM_REG_D19_D21_D23: Type = 232;
    pub const ARM_REG_D20_D22_D24: Type = 233;
    pub const ARM_REG_D21_D23_D25: Type = 234;
    pub const ARM_REG_D22_D24_D26: Type = 235;
    pub const ARM_REG_D23_D25_D27: Type = 236;
    pub const ARM_REG_D24_D26_D28: Type = 237;
    pub const ARM_REG_D25_D27_D29: Type = 238;
    pub const ARM_REG_D26_D28_D30: Type = 239;
    pub const ARM_REG_D27_D29_D31: Type = 240;
    pub const ARM_REG_D0_D2_D4_D6: Type = 241;
    pub const ARM_REG_D1_D3_D5_D7: Type = 242;
    pub const ARM_REG_D2_D4_D6_D8: Type = 243;
    pub const ARM_REG_D3_D5_D7_D9: Type = 244;
    pub const ARM_REG_D4_D6_D8_D10: Type = 245;
    pub const ARM_REG_D5_D7_D9_D11: Type = 246;
    pub const ARM_REG_D6_D8_D10_D12: Type = 247;
    pub const ARM_REG_D7_D9_D11_D13: Type = 248;
    pub const ARM_REG_D8_D10_D12_D14: Type = 249;
    pub const ARM_REG_D9_D11_D13_D15: Type = 250;
    pub const ARM_REG_D10_D12_D14_D16: Type = 251;
    pub const ARM_REG_D11_D13_D15_D17: Type = 252;
    pub const ARM_REG_D12_D14_D16_D18: Type = 253;
    pub const ARM_REG_D13_D15_D17_D19: Type = 254;
    pub const ARM_REG_D14_D16_D18_D20: Type = 255;
    pub const ARM_REG_D15_D17_D19_D21: Type = 256;
    pub const ARM_REG_D16_D18_D20_D22: Type = 257;
    pub const ARM_REG_D17_D19_D21_D23: Type = 258;
    pub const ARM_REG_D18_D20_D22_D24: Type = 259;
    pub const ARM_REG_D19_D21_D23_D25: Type = 260;
    pub const ARM_REG_D20_D22_D24_D26: Type = 261;
    pub const ARM_REG_D21_D23_D25_D27: Type = 262;
    pub const ARM_REG_D22_D24_D26_D28: Type = 263;
    pub const ARM_REG_D23_D25_D27_D29: Type = 264;
    pub const ARM_REG_D24_D26_D28_D30: Type = 265;
    pub const ARM_REG_D25_D27_D29_D31: Type = 266;
    pub const ARM_REG_D1_D2: Type = 267;
    pub const ARM_REG_D3_D4: Type = 268;
    pub const ARM_REG_D5_D6: Type = 269;
    pub const ARM_REG_D7_D8: Type = 270;
    pub const ARM_REG_D9_D10: Type = 271;
    pub const ARM_REG_D11_D12: Type = 272;
    pub const ARM_REG_D13_D14: Type = 273;
    pub const ARM_REG_D15_D16: Type = 274;
    pub const ARM_REG_D17_D18: Type = 275;
    pub const ARM_REG_D19_D20: Type = 276;
    pub const ARM_REG_D21_D22: Type = 277;
    pub const ARM_REG_D23_D24: Type = 278;
    pub const ARM_REG_D25_D26: Type = 279;
    pub const ARM_REG_D27_D28: Type = 280;
    pub const ARM_REG_D29_D30: Type = 281;
    pub const ARM_REG_D1_D2_D3_D4: Type = 282;
    pub const ARM_REG_D3_D4_D5_D6: Type = 283;
    pub const ARM_REG_D5_D6_D7_D8: Type = 284;
    pub const ARM_REG_D7_D8_D9_D10: Type = 285;
    pub const ARM_REG_D9_D10_D11_D12: Type = 286;
    pub const ARM_REG_D11_D12_D13_D14: Type = 287;
    pub const ARM_REG_D13_D14_D15_D16: Type = 288;
    pub const ARM_REG_D15_D16_D17_D18: Type = 289;
    pub const ARM_REG_D17_D18_D19_D20: Type = 290;
    pub const ARM_REG_D19_D20_D21_D22: Type = 291;
    pub const ARM_REG_D21_D22_D23_D24: Type = 292;
    pub const ARM_REG_D23_D24_D25_D26: Type = 293;
    pub const ARM_REG_D25_D26_D27_D28: Type = 294;
    pub const ARM_REG_D27_D28_D29_D30: Type = 295;
    pub const ARM_REG_ENDING: Type = 296;
    pub const ARM_REG_R13: Type = 16;
    pub const ARM_REG_R14: Type = 13;
    pub const ARM_REG_R15: Type = 14;
    pub const ARM_REG_SB: Type = 82;
    pub const ARM_REG_SL: Type = 83;
    pub const ARM_REG_FP: Type = 84;
    pub const ARM_REG_IP: Type = 85;
}
#[doc = " Instruction's operand referring to memory\n This is associated with ARM_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm_op_mem {
    #[doc = "< base register"]
    pub base: arm_reg::Type,
    #[doc = "< index register"]
    pub index: arm_reg::Type,
    #[doc = "< scale for index register. Can be 1 if index reg is added, -1 if it is subtracted or 0 if unset."]
    pub scale: libc::c_int,
    #[doc = "< displacement/offset value"]
    pub disp: libc::c_int,
    #[doc = "< Alignment of base register. 0 If not set."]
    pub align: libc::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct arm_sysop {
    #[doc = "< The system or banked register."]
    pub reg: arm_sysop_reg,
    #[doc = "< SPSR/CPSR bits."]
    pub psr_bits: arm_spsr_cspr_bits,
    #[doc = "< Raw SYSm field. UINT16_MAX if unset."]
    pub sysm: u16,
    #[doc = "< Mask of MSR instructions. UINT8_MAX if invalid."]
    pub msr_mask: u8,
}
impl ::core::fmt::Debug for arm_sysop {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "arm_sysop {{ reg: {:?}, psr_bits: {:?} }}",
            self.reg, self.psr_bits
        )
    }
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_arm_op {
    #[doc = "< Vector Index for some vector operands (or -1 if irrelevant)"]
    pub vector_index: libc::c_int,
    pub shift: cs_arm_op__bindgen_ty_1,
    #[doc = "< operand type"]
    pub type_: arm_op_type,
    pub __bindgen_anon_1: cs_arm_op__bindgen_ty_2,
    #[doc = " in some instructions, an operand can be subtracted or added to\n the base register,\n if TRUE, this operand is subtracted. otherwise, it is added."]
    pub subtracted: bool,
    #[doc = " How is this operand accessed? (READ, WRITE or READ|WRITE)\n This field is combined of cs_ac_type.\n NOTE: this field is irrelevant if engine is compiled in DIET mode."]
    pub access: u8,
    #[doc = " Neon lane index for NEON instructions (or -1 if irrelevant)"]
    pub neon_lane: i8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_arm_op__bindgen_ty_1 {
    #[doc = "< The shift type"]
    pub type_: arm_shifter,
    #[doc = "< The amount to shift. If shift.type > ARM_SFT_REG, the value must be interpreted as register id."]
    pub value: libc::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_arm_op__bindgen_ty_2 {
    #[doc = "< register value for REG"]
    pub reg: libc::c_int,
    #[doc = "< System operand."]
    pub sysop: arm_sysop,
    #[doc = "< immediate value for C-IMM, P-IMM or IMM operand"]
    pub imm: i64,
    #[doc = "< Predicate operand value."]
    pub pred: libc::c_int,
    #[doc = "< floating point value for FP operand"]
    pub fp: f64,
    #[doc = "< base/index/scale/disp value for MEM operand"]
    pub mem: arm_op_mem,
    #[doc = "< SETEND instruction's operand type"]
    pub setend: arm_setend_type,
}
impl ::core::fmt::Debug for cs_arm_op__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_arm_op__bindgen_ty_2 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_arm_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "cs_arm_op {{ vector_index: {:?}, shift: {:?}, type: {:?}, __bindgen_anon_1: {:?}, subtracted: {:?} }}" , self . vector_index , self . shift , self . type_ , self . __bindgen_anon_1 , self . subtracted)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm_suppl_info {
    #[doc = "< CGI memory access according to mayLoad and mayStore"]
    pub mem_acc: cs_ac_type,
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_arm {
    #[doc = "< User-mode registers to be loaded (for LDM/STM instructions)"]
    pub usermode: bool,
    #[doc = "< Scalar size for vector instructions"]
    pub vector_size: libc::c_int,
    #[doc = "< Data type for elements of vector instructions"]
    pub vector_data: arm_vectordata_type,
    #[doc = "< CPS mode for CPS instruction"]
    pub cps_mode: arm_cpsmode_type,
    #[doc = "< CPS mode for CPS instruction"]
    pub cps_flag: arm_cpsflag_type,
    #[doc = "< conditional code for this insn"]
    pub cc: ARMCC_CondCodes,
    #[doc = "< Vector conditional code for this instruction."]
    pub vcc: ARMVCC_VPTCodes,
    #[doc = "< does this insn update flags?"]
    pub update_flags: bool,
    #[doc = "< only set if writeback is 'True', if 'False' pre-index, otherwise post."]
    pub post_index: bool,
    #[doc = "< Option for some memory barrier instructions"]
    pub mem_barrier: arm_mem_bo_opt,
    #[doc = "< Used by IT/VPT block instructions."]
    pub pred_mask: u8,
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_arm_op; 36usize],
}
impl ::core::fmt::Debug for cs_arm {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "cs_arm {{ usermode: {:?}, vector_size: {:?}, vector_data: {:?}, cps_mode: {:?}, cps_flag: {:?}, cc: {:?}, vcc: {:?}, update_flags: {:?}, post_index: {:?}, mem_barrier: {:?}, operands: [...] }}" , self . usermode , self . vector_size , self . vector_data , self . cps_mode , self . cps_flag , self . cc , self . vcc , self . update_flags , self . post_index , self . mem_barrier)
    }
}
#[repr(u32)]
#[doc = " ARM instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum arm_insn {
    ARM_INS_INVALID = 0,
    ARM_INS_ASR = 1,
    ARM_INS_IT = 2,
    ARM_INS_LDRBT = 3,
    ARM_INS_LDR = 4,
    ARM_INS_LDRHT = 5,
    ARM_INS_LDRSBT = 6,
    ARM_INS_LDRSHT = 7,
    ARM_INS_LDRT = 8,
    ARM_INS_LSL = 9,
    ARM_INS_LSR = 10,
    ARM_INS_ROR = 11,
    ARM_INS_RRX = 12,
    ARM_INS_STRBT = 13,
    ARM_INS_STRT = 14,
    ARM_INS_VLD1 = 15,
    ARM_INS_VLD2 = 16,
    ARM_INS_VLD3 = 17,
    ARM_INS_VLD4 = 18,
    ARM_INS_VST1 = 19,
    ARM_INS_VST2 = 20,
    ARM_INS_VST3 = 21,
    ARM_INS_VST4 = 22,
    ARM_INS_LDRB = 23,
    ARM_INS_LDRH = 24,
    ARM_INS_LDRSB = 25,
    ARM_INS_LDRSH = 26,
    ARM_INS_MOVS = 27,
    ARM_INS_MOV = 28,
    ARM_INS_STRB = 29,
    ARM_INS_STRH = 30,
    ARM_INS_STR = 31,
    ARM_INS_ADC = 32,
    ARM_INS_ADD = 33,
    ARM_INS_ADR = 34,
    ARM_INS_AESD = 35,
    ARM_INS_AESE = 36,
    ARM_INS_AESIMC = 37,
    ARM_INS_AESMC = 38,
    ARM_INS_AND = 39,
    ARM_INS_VDOT = 40,
    ARM_INS_VCVT = 41,
    ARM_INS_VCVTB = 42,
    ARM_INS_VCVTT = 43,
    ARM_INS_BFC = 44,
    ARM_INS_BFI = 45,
    ARM_INS_BIC = 46,
    ARM_INS_BKPT = 47,
    ARM_INS_BL = 48,
    ARM_INS_BLX = 49,
    ARM_INS_BX = 50,
    ARM_INS_BXJ = 51,
    ARM_INS_B = 52,
    ARM_INS_CX1 = 53,
    ARM_INS_CX1A = 54,
    ARM_INS_CX1D = 55,
    ARM_INS_CX1DA = 56,
    ARM_INS_CX2 = 57,
    ARM_INS_CX2A = 58,
    ARM_INS_CX2D = 59,
    ARM_INS_CX2DA = 60,
    ARM_INS_CX3 = 61,
    ARM_INS_CX3A = 62,
    ARM_INS_CX3D = 63,
    ARM_INS_CX3DA = 64,
    ARM_INS_VCX1A = 65,
    ARM_INS_VCX1 = 66,
    ARM_INS_VCX2A = 67,
    ARM_INS_VCX2 = 68,
    ARM_INS_VCX3A = 69,
    ARM_INS_VCX3 = 70,
    ARM_INS_CDP = 71,
    ARM_INS_CDP2 = 72,
    ARM_INS_CLREX = 73,
    ARM_INS_CLZ = 74,
    ARM_INS_CMN = 75,
    ARM_INS_CMP = 76,
    ARM_INS_CPS = 77,
    ARM_INS_CRC32B = 78,
    ARM_INS_CRC32CB = 79,
    ARM_INS_CRC32CH = 80,
    ARM_INS_CRC32CW = 81,
    ARM_INS_CRC32H = 82,
    ARM_INS_CRC32W = 83,
    ARM_INS_DBG = 84,
    ARM_INS_DMB = 85,
    ARM_INS_DSB = 86,
    ARM_INS_EOR = 87,
    ARM_INS_ERET = 88,
    ARM_INS_VMOV = 89,
    ARM_INS_FLDMDBX = 90,
    ARM_INS_FLDMIAX = 91,
    ARM_INS_VMRS = 92,
    ARM_INS_FSTMDBX = 93,
    ARM_INS_FSTMIAX = 94,
    ARM_INS_HINT = 95,
    ARM_INS_HLT = 96,
    ARM_INS_HVC = 97,
    ARM_INS_ISB = 98,
    ARM_INS_LDA = 99,
    ARM_INS_LDAB = 100,
    ARM_INS_LDAEX = 101,
    ARM_INS_LDAEXB = 102,
    ARM_INS_LDAEXD = 103,
    ARM_INS_LDAEXH = 104,
    ARM_INS_LDAH = 105,
    ARM_INS_LDC2L = 106,
    ARM_INS_LDC2 = 107,
    ARM_INS_LDCL = 108,
    ARM_INS_LDC = 109,
    ARM_INS_LDMDA = 110,
    ARM_INS_LDMDB = 111,
    ARM_INS_LDM = 112,
    ARM_INS_LDMIB = 113,
    ARM_INS_LDRD = 114,
    ARM_INS_LDREX = 115,
    ARM_INS_LDREXB = 116,
    ARM_INS_LDREXD = 117,
    ARM_INS_LDREXH = 118,
    ARM_INS_MCR = 119,
    ARM_INS_MCR2 = 120,
    ARM_INS_MCRR = 121,
    ARM_INS_MCRR2 = 122,
    ARM_INS_MLA = 123,
    ARM_INS_MLS = 124,
    ARM_INS_MOVT = 125,
    ARM_INS_MOVW = 126,
    ARM_INS_MRC = 127,
    ARM_INS_MRC2 = 128,
    ARM_INS_MRRC = 129,
    ARM_INS_MRRC2 = 130,
    ARM_INS_MRS = 131,
    ARM_INS_MSR = 132,
    ARM_INS_MUL = 133,
    ARM_INS_ASRL = 134,
    ARM_INS_DLSTP = 135,
    ARM_INS_LCTP = 136,
    ARM_INS_LETP = 137,
    ARM_INS_LSLL = 138,
    ARM_INS_LSRL = 139,
    ARM_INS_SQRSHR = 140,
    ARM_INS_SQRSHRL = 141,
    ARM_INS_SQSHL = 142,
    ARM_INS_SQSHLL = 143,
    ARM_INS_SRSHR = 144,
    ARM_INS_SRSHRL = 145,
    ARM_INS_UQRSHL = 146,
    ARM_INS_UQRSHLL = 147,
    ARM_INS_UQSHL = 148,
    ARM_INS_UQSHLL = 149,
    ARM_INS_URSHR = 150,
    ARM_INS_URSHRL = 151,
    ARM_INS_VABAV = 152,
    ARM_INS_VABD = 153,
    ARM_INS_VABS = 154,
    ARM_INS_VADC = 155,
    ARM_INS_VADCI = 156,
    ARM_INS_VADDLVA = 157,
    ARM_INS_VADDLV = 158,
    ARM_INS_VADDVA = 159,
    ARM_INS_VADDV = 160,
    ARM_INS_VADD = 161,
    ARM_INS_VAND = 162,
    ARM_INS_VBIC = 163,
    ARM_INS_VBRSR = 164,
    ARM_INS_VCADD = 165,
    ARM_INS_VCLS = 166,
    ARM_INS_VCLZ = 167,
    ARM_INS_VCMLA = 168,
    ARM_INS_VCMP = 169,
    ARM_INS_VCMUL = 170,
    ARM_INS_VCTP = 171,
    ARM_INS_VCVTA = 172,
    ARM_INS_VCVTM = 173,
    ARM_INS_VCVTN = 174,
    ARM_INS_VCVTP = 175,
    ARM_INS_VDDUP = 176,
    ARM_INS_VDUP = 177,
    ARM_INS_VDWDUP = 178,
    ARM_INS_VEOR = 179,
    ARM_INS_VFMAS = 180,
    ARM_INS_VFMA = 181,
    ARM_INS_VFMS = 182,
    ARM_INS_VHADD = 183,
    ARM_INS_VHCADD = 184,
    ARM_INS_VHSUB = 185,
    ARM_INS_VIDUP = 186,
    ARM_INS_VIWDUP = 187,
    ARM_INS_VLD20 = 188,
    ARM_INS_VLD21 = 189,
    ARM_INS_VLD40 = 190,
    ARM_INS_VLD41 = 191,
    ARM_INS_VLD42 = 192,
    ARM_INS_VLD43 = 193,
    ARM_INS_VLDRB = 194,
    ARM_INS_VLDRD = 195,
    ARM_INS_VLDRH = 196,
    ARM_INS_VLDRW = 197,
    ARM_INS_VMAXAV = 198,
    ARM_INS_VMAXA = 199,
    ARM_INS_VMAXNMAV = 200,
    ARM_INS_VMAXNMA = 201,
    ARM_INS_VMAXNMV = 202,
    ARM_INS_VMAXNM = 203,
    ARM_INS_VMAXV = 204,
    ARM_INS_VMAX = 205,
    ARM_INS_VMINAV = 206,
    ARM_INS_VMINA = 207,
    ARM_INS_VMINNMAV = 208,
    ARM_INS_VMINNMA = 209,
    ARM_INS_VMINNMV = 210,
    ARM_INS_VMINNM = 211,
    ARM_INS_VMINV = 212,
    ARM_INS_VMIN = 213,
    ARM_INS_VMLADAVA = 214,
    ARM_INS_VMLADAVAX = 215,
    ARM_INS_VMLADAV = 216,
    ARM_INS_VMLADAVX = 217,
    ARM_INS_VMLALDAVA = 218,
    ARM_INS_VMLALDAVAX = 219,
    ARM_INS_VMLALDAV = 220,
    ARM_INS_VMLALDAVX = 221,
    ARM_INS_VMLAS = 222,
    ARM_INS_VMLA = 223,
    ARM_INS_VMLSDAVA = 224,
    ARM_INS_VMLSDAVAX = 225,
    ARM_INS_VMLSDAV = 226,
    ARM_INS_VMLSDAVX = 227,
    ARM_INS_VMLSLDAVA = 228,
    ARM_INS_VMLSLDAVAX = 229,
    ARM_INS_VMLSLDAV = 230,
    ARM_INS_VMLSLDAVX = 231,
    ARM_INS_VMOVLB = 232,
    ARM_INS_VMOVLT = 233,
    ARM_INS_VMOVNB = 234,
    ARM_INS_VMOVNT = 235,
    ARM_INS_VMULH = 236,
    ARM_INS_VMULLB = 237,
    ARM_INS_VMULLT = 238,
    ARM_INS_VMUL = 239,
    ARM_INS_VMVN = 240,
    ARM_INS_VNEG = 241,
    ARM_INS_VORN = 242,
    ARM_INS_VORR = 243,
    ARM_INS_VPNOT = 244,
    ARM_INS_VPSEL = 245,
    ARM_INS_VPST = 246,
    ARM_INS_VPT = 247,
    ARM_INS_VQABS = 248,
    ARM_INS_VQADD = 249,
    ARM_INS_VQDMLADHX = 250,
    ARM_INS_VQDMLADH = 251,
    ARM_INS_VQDMLAH = 252,
    ARM_INS_VQDMLASH = 253,
    ARM_INS_VQDMLSDHX = 254,
    ARM_INS_VQDMLSDH = 255,
    ARM_INS_VQDMULH = 256,
    ARM_INS_VQDMULLB = 257,
    ARM_INS_VQDMULLT = 258,
    ARM_INS_VQMOVNB = 259,
    ARM_INS_VQMOVNT = 260,
    ARM_INS_VQMOVUNB = 261,
    ARM_INS_VQMOVUNT = 262,
    ARM_INS_VQNEG = 263,
    ARM_INS_VQRDMLADHX = 264,
    ARM_INS_VQRDMLADH = 265,
    ARM_INS_VQRDMLAH = 266,
    ARM_INS_VQRDMLASH = 267,
    ARM_INS_VQRDMLSDHX = 268,
    ARM_INS_VQRDMLSDH = 269,
    ARM_INS_VQRDMULH = 270,
    ARM_INS_VQRSHL = 271,
    ARM_INS_VQRSHRNB = 272,
    ARM_INS_VQRSHRNT = 273,
    ARM_INS_VQRSHRUNB = 274,
    ARM_INS_VQRSHRUNT = 275,
    ARM_INS_VQSHLU = 276,
    ARM_INS_VQSHL = 277,
    ARM_INS_VQSHRNB = 278,
    ARM_INS_VQSHRNT = 279,
    ARM_INS_VQSHRUNB = 280,
    ARM_INS_VQSHRUNT = 281,
    ARM_INS_VQSUB = 282,
    ARM_INS_VREV16 = 283,
    ARM_INS_VREV32 = 284,
    ARM_INS_VREV64 = 285,
    ARM_INS_VRHADD = 286,
    ARM_INS_VRINTA = 287,
    ARM_INS_VRINTM = 288,
    ARM_INS_VRINTN = 289,
    ARM_INS_VRINTP = 290,
    ARM_INS_VRINTX = 291,
    ARM_INS_VRINTZ = 292,
    ARM_INS_VRMLALDAVHA = 293,
    ARM_INS_VRMLALDAVHAX = 294,
    ARM_INS_VRMLALDAVH = 295,
    ARM_INS_VRMLALDAVHX = 296,
    ARM_INS_VRMLSLDAVHA = 297,
    ARM_INS_VRMLSLDAVHAX = 298,
    ARM_INS_VRMLSLDAVH = 299,
    ARM_INS_VRMLSLDAVHX = 300,
    ARM_INS_VRMULH = 301,
    ARM_INS_VRSHL = 302,
    ARM_INS_VRSHRNB = 303,
    ARM_INS_VRSHRNT = 304,
    ARM_INS_VRSHR = 305,
    ARM_INS_VSBC = 306,
    ARM_INS_VSBCI = 307,
    ARM_INS_VSHLC = 308,
    ARM_INS_VSHLLB = 309,
    ARM_INS_VSHLLT = 310,
    ARM_INS_VSHL = 311,
    ARM_INS_VSHRNB = 312,
    ARM_INS_VSHRNT = 313,
    ARM_INS_VSHR = 314,
    ARM_INS_VSLI = 315,
    ARM_INS_VSRI = 316,
    ARM_INS_VST20 = 317,
    ARM_INS_VST21 = 318,
    ARM_INS_VST40 = 319,
    ARM_INS_VST41 = 320,
    ARM_INS_VST42 = 321,
    ARM_INS_VST43 = 322,
    ARM_INS_VSTRB = 323,
    ARM_INS_VSTRD = 324,
    ARM_INS_VSTRH = 325,
    ARM_INS_VSTRW = 326,
    ARM_INS_VSUB = 327,
    ARM_INS_WLSTP = 328,
    ARM_INS_MVN = 329,
    ARM_INS_ORR = 330,
    ARM_INS_PKHBT = 331,
    ARM_INS_PKHTB = 332,
    ARM_INS_PLDW = 333,
    ARM_INS_PLD = 334,
    ARM_INS_PLI = 335,
    ARM_INS_QADD = 336,
    ARM_INS_QADD16 = 337,
    ARM_INS_QADD8 = 338,
    ARM_INS_QASX = 339,
    ARM_INS_QDADD = 340,
    ARM_INS_QDSUB = 341,
    ARM_INS_QSAX = 342,
    ARM_INS_QSUB = 343,
    ARM_INS_QSUB16 = 344,
    ARM_INS_QSUB8 = 345,
    ARM_INS_RBIT = 346,
    ARM_INS_REV = 347,
    ARM_INS_REV16 = 348,
    ARM_INS_REVSH = 349,
    ARM_INS_RFEDA = 350,
    ARM_INS_RFEDB = 351,
    ARM_INS_RFEIA = 352,
    ARM_INS_RFEIB = 353,
    ARM_INS_RSB = 354,
    ARM_INS_RSC = 355,
    ARM_INS_SADD16 = 356,
    ARM_INS_SADD8 = 357,
    ARM_INS_SASX = 358,
    ARM_INS_SB = 359,
    ARM_INS_SBC = 360,
    ARM_INS_SBFX = 361,
    ARM_INS_SDIV = 362,
    ARM_INS_SEL = 363,
    ARM_INS_SETEND = 364,
    ARM_INS_SETPAN = 365,
    ARM_INS_SHA1C = 366,
    ARM_INS_SHA1H = 367,
    ARM_INS_SHA1M = 368,
    ARM_INS_SHA1P = 369,
    ARM_INS_SHA1SU0 = 370,
    ARM_INS_SHA1SU1 = 371,
    ARM_INS_SHA256H = 372,
    ARM_INS_SHA256H2 = 373,
    ARM_INS_SHA256SU0 = 374,
    ARM_INS_SHA256SU1 = 375,
    ARM_INS_SHADD16 = 376,
    ARM_INS_SHADD8 = 377,
    ARM_INS_SHASX = 378,
    ARM_INS_SHSAX = 379,
    ARM_INS_SHSUB16 = 380,
    ARM_INS_SHSUB8 = 381,
    ARM_INS_SMC = 382,
    ARM_INS_SMLABB = 383,
    ARM_INS_SMLABT = 384,
    ARM_INS_SMLAD = 385,
    ARM_INS_SMLADX = 386,
    ARM_INS_SMLAL = 387,
    ARM_INS_SMLALBB = 388,
    ARM_INS_SMLALBT = 389,
    ARM_INS_SMLALD = 390,
    ARM_INS_SMLALDX = 391,
    ARM_INS_SMLALTB = 392,
    ARM_INS_SMLALTT = 393,
    ARM_INS_SMLATB = 394,
    ARM_INS_SMLATT = 395,
    ARM_INS_SMLAWB = 396,
    ARM_INS_SMLAWT = 397,
    ARM_INS_SMLSD = 398,
    ARM_INS_SMLSDX = 399,
    ARM_INS_SMLSLD = 400,
    ARM_INS_SMLSLDX = 401,
    ARM_INS_SMMLA = 402,
    ARM_INS_SMMLAR = 403,
    ARM_INS_SMMLS = 404,
    ARM_INS_SMMLSR = 405,
    ARM_INS_SMMUL = 406,
    ARM_INS_SMMULR = 407,
    ARM_INS_SMUAD = 408,
    ARM_INS_SMUADX = 409,
    ARM_INS_SMULBB = 410,
    ARM_INS_SMULBT = 411,
    ARM_INS_SMULL = 412,
    ARM_INS_SMULTB = 413,
    ARM_INS_SMULTT = 414,
    ARM_INS_SMULWB = 415,
    ARM_INS_SMULWT = 416,
    ARM_INS_SMUSD = 417,
    ARM_INS_SMUSDX = 418,
    ARM_INS_SRSDA = 419,
    ARM_INS_SRSDB = 420,
    ARM_INS_SRSIA = 421,
    ARM_INS_SRSIB = 422,
    ARM_INS_SSAT = 423,
    ARM_INS_SSAT16 = 424,
    ARM_INS_SSAX = 425,
    ARM_INS_SSUB16 = 426,
    ARM_INS_SSUB8 = 427,
    ARM_INS_STC2L = 428,
    ARM_INS_STC2 = 429,
    ARM_INS_STCL = 430,
    ARM_INS_STC = 431,
    ARM_INS_STL = 432,
    ARM_INS_STLB = 433,
    ARM_INS_STLEX = 434,
    ARM_INS_STLEXB = 435,
    ARM_INS_STLEXD = 436,
    ARM_INS_STLEXH = 437,
    ARM_INS_STLH = 438,
    ARM_INS_STMDA = 439,
    ARM_INS_STMDB = 440,
    ARM_INS_STM = 441,
    ARM_INS_STMIB = 442,
    ARM_INS_STRD = 443,
    ARM_INS_STREX = 444,
    ARM_INS_STREXB = 445,
    ARM_INS_STREXD = 446,
    ARM_INS_STREXH = 447,
    ARM_INS_STRHT = 448,
    ARM_INS_SUB = 449,
    ARM_INS_SVC = 450,
    ARM_INS_SWP = 451,
    ARM_INS_SWPB = 452,
    ARM_INS_SXTAB = 453,
    ARM_INS_SXTAB16 = 454,
    ARM_INS_SXTAH = 455,
    ARM_INS_SXTB = 456,
    ARM_INS_SXTB16 = 457,
    ARM_INS_SXTH = 458,
    ARM_INS_TEQ = 459,
    ARM_INS_TRAP = 460,
    ARM_INS_TSB = 461,
    ARM_INS_TST = 462,
    ARM_INS_UADD16 = 463,
    ARM_INS_UADD8 = 464,
    ARM_INS_UASX = 465,
    ARM_INS_UBFX = 466,
    ARM_INS_UDF = 467,
    ARM_INS_UDIV = 468,
    ARM_INS_UHADD16 = 469,
    ARM_INS_UHADD8 = 470,
    ARM_INS_UHASX = 471,
    ARM_INS_UHSAX = 472,
    ARM_INS_UHSUB16 = 473,
    ARM_INS_UHSUB8 = 474,
    ARM_INS_UMAAL = 475,
    ARM_INS_UMLAL = 476,
    ARM_INS_UMULL = 477,
    ARM_INS_UQADD16 = 478,
    ARM_INS_UQADD8 = 479,
    ARM_INS_UQASX = 480,
    ARM_INS_UQSAX = 481,
    ARM_INS_UQSUB16 = 482,
    ARM_INS_UQSUB8 = 483,
    ARM_INS_USAD8 = 484,
    ARM_INS_USADA8 = 485,
    ARM_INS_USAT = 486,
    ARM_INS_USAT16 = 487,
    ARM_INS_USAX = 488,
    ARM_INS_USUB16 = 489,
    ARM_INS_USUB8 = 490,
    ARM_INS_UXTAB = 491,
    ARM_INS_UXTAB16 = 492,
    ARM_INS_UXTAH = 493,
    ARM_INS_UXTB = 494,
    ARM_INS_UXTB16 = 495,
    ARM_INS_UXTH = 496,
    ARM_INS_VABAL = 497,
    ARM_INS_VABA = 498,
    ARM_INS_VABDL = 499,
    ARM_INS_VACGE = 500,
    ARM_INS_VACGT = 501,
    ARM_INS_VADDHN = 502,
    ARM_INS_VADDL = 503,
    ARM_INS_VADDW = 504,
    ARM_INS_VFMAB = 505,
    ARM_INS_VFMAT = 506,
    ARM_INS_VBIF = 507,
    ARM_INS_VBIT = 508,
    ARM_INS_VBSL = 509,
    ARM_INS_VCEQ = 510,
    ARM_INS_VCGE = 511,
    ARM_INS_VCGT = 512,
    ARM_INS_VCLE = 513,
    ARM_INS_VCLT = 514,
    ARM_INS_VCMPE = 515,
    ARM_INS_VCNT = 516,
    ARM_INS_VDIV = 517,
    ARM_INS_VEXT = 518,
    ARM_INS_VFMAL = 519,
    ARM_INS_VFMSL = 520,
    ARM_INS_VFNMA = 521,
    ARM_INS_VFNMS = 522,
    ARM_INS_VINS = 523,
    ARM_INS_VJCVT = 524,
    ARM_INS_VLDMDB = 525,
    ARM_INS_VLDMIA = 526,
    ARM_INS_VLDR = 527,
    ARM_INS_VLLDM = 528,
    ARM_INS_VLSTM = 529,
    ARM_INS_VMLAL = 530,
    ARM_INS_VMLS = 531,
    ARM_INS_VMLSL = 532,
    ARM_INS_VMMLA = 533,
    ARM_INS_VMOVX = 534,
    ARM_INS_VMOVL = 535,
    ARM_INS_VMOVN = 536,
    ARM_INS_VMSR = 537,
    ARM_INS_VMULL = 538,
    ARM_INS_VNMLA = 539,
    ARM_INS_VNMLS = 540,
    ARM_INS_VNMUL = 541,
    ARM_INS_VPADAL = 542,
    ARM_INS_VPADDL = 543,
    ARM_INS_VPADD = 544,
    ARM_INS_VPMAX = 545,
    ARM_INS_VPMIN = 546,
    ARM_INS_VQDMLAL = 547,
    ARM_INS_VQDMLSL = 548,
    ARM_INS_VQDMULL = 549,
    ARM_INS_VQMOVUN = 550,
    ARM_INS_VQMOVN = 551,
    ARM_INS_VQRDMLSH = 552,
    ARM_INS_VQRSHRN = 553,
    ARM_INS_VQRSHRUN = 554,
    ARM_INS_VQSHRN = 555,
    ARM_INS_VQSHRUN = 556,
    ARM_INS_VRADDHN = 557,
    ARM_INS_VRECPE = 558,
    ARM_INS_VRECPS = 559,
    ARM_INS_VRINTR = 560,
    ARM_INS_VRSHRN = 561,
    ARM_INS_VRSQRTE = 562,
    ARM_INS_VRSQRTS = 563,
    ARM_INS_VRSRA = 564,
    ARM_INS_VRSUBHN = 565,
    ARM_INS_VSCCLRM = 566,
    ARM_INS_VSDOT = 567,
    ARM_INS_VSELEQ = 568,
    ARM_INS_VSELGE = 569,
    ARM_INS_VSELGT = 570,
    ARM_INS_VSELVS = 571,
    ARM_INS_VSHLL = 572,
    ARM_INS_VSHRN = 573,
    ARM_INS_VSMMLA = 574,
    ARM_INS_VSQRT = 575,
    ARM_INS_VSRA = 576,
    ARM_INS_VSTMDB = 577,
    ARM_INS_VSTMIA = 578,
    ARM_INS_VSTR = 579,
    ARM_INS_VSUBHN = 580,
    ARM_INS_VSUBL = 581,
    ARM_INS_VSUBW = 582,
    ARM_INS_VSUDOT = 583,
    ARM_INS_VSWP = 584,
    ARM_INS_VTBL = 585,
    ARM_INS_VTBX = 586,
    ARM_INS_VCVTR = 587,
    ARM_INS_VTRN = 588,
    ARM_INS_VTST = 589,
    ARM_INS_VUDOT = 590,
    ARM_INS_VUMMLA = 591,
    ARM_INS_VUSDOT = 592,
    ARM_INS_VUSMMLA = 593,
    ARM_INS_VUZP = 594,
    ARM_INS_VZIP = 595,
    ARM_INS_ADDW = 596,
    ARM_INS_AUT = 597,
    ARM_INS_AUTG = 598,
    ARM_INS_BFL = 599,
    ARM_INS_BFLX = 600,
    ARM_INS_BF = 601,
    ARM_INS_BFCSEL = 602,
    ARM_INS_BFX = 603,
    ARM_INS_BTI = 604,
    ARM_INS_BXAUT = 605,
    ARM_INS_CLRM = 606,
    ARM_INS_CSEL = 607,
    ARM_INS_CSINC = 608,
    ARM_INS_CSINV = 609,
    ARM_INS_CSNEG = 610,
    ARM_INS_DCPS1 = 611,
    ARM_INS_DCPS2 = 612,
    ARM_INS_DCPS3 = 613,
    ARM_INS_DLS = 614,
    ARM_INS_LE = 615,
    ARM_INS_ORN = 616,
    ARM_INS_PAC = 617,
    ARM_INS_PACBTI = 618,
    ARM_INS_PACG = 619,
    ARM_INS_SG = 620,
    ARM_INS_SUBS = 621,
    ARM_INS_SUBW = 622,
    ARM_INS_TBB = 623,
    ARM_INS_TBH = 624,
    ARM_INS_TT = 625,
    ARM_INS_TTA = 626,
    ARM_INS_TTAT = 627,
    ARM_INS_TTT = 628,
    ARM_INS_WLS = 629,
    ARM_INS_BLXNS = 630,
    ARM_INS_BXNS = 631,
    ARM_INS_CBNZ = 632,
    ARM_INS_CBZ = 633,
    ARM_INS_POP = 634,
    ARM_INS_PUSH = 635,
    ARM_INS___BRKDIV0 = 636,
    ARM_INS_ENDING = 637,
    ARM_INS_ALIAS_BEGIN = 638,
    ARM_INS_ALIAS_VMOV = 639,
    ARM_INS_ALIAS_NOP = 640,
    ARM_INS_ALIAS_YIELD = 641,
    ARM_INS_ALIAS_WFE = 642,
    ARM_INS_ALIAS_WFI = 643,
    ARM_INS_ALIAS_SEV = 644,
    ARM_INS_ALIAS_SEVL = 645,
    ARM_INS_ALIAS_ESB = 646,
    ARM_INS_ALIAS_CSDB = 647,
    ARM_INS_ALIAS_CLRBHB = 648,
    ARM_INS_ALIAS_PACBTI = 649,
    ARM_INS_ALIAS_BTI = 650,
    ARM_INS_ALIAS_PAC = 651,
    ARM_INS_ALIAS_AUT = 652,
    ARM_INS_ALIAS_SSBB = 653,
    ARM_INS_ALIAS_PSSBB = 654,
    ARM_INS_ALIAS_DFB = 655,
    ARM_INS_ALIAS_CSETM = 656,
    ARM_INS_ALIAS_CSET = 657,
    ARM_INS_ALIAS_CINC = 658,
    ARM_INS_ALIAS_CINV = 659,
    ARM_INS_ALIAS_CNEG = 660,
    ARM_INS_ALIAS_VMLAV = 661,
    ARM_INS_ALIAS_VMLAVA = 662,
    ARM_INS_ALIAS_VRMLALVH = 663,
    ARM_INS_ALIAS_VRMLALVHA = 664,
    ARM_INS_ALIAS_VMLALV = 665,
    ARM_INS_ALIAS_VMLALVA = 666,
    ARM_INS_ALIAS_VBIC = 667,
    ARM_INS_ALIAS_VEOR = 668,
    ARM_INS_ALIAS_VORN = 669,
    ARM_INS_ALIAS_VORR = 670,
    ARM_INS_ALIAS_VAND = 671,
    ARM_INS_ALIAS_VPSEL = 672,
    ARM_INS_ALIAS_ERET = 673,
    ARM_INS_ALIAS_ASR = 674,
    ARM_INS_ALIAS_LSL = 675,
    ARM_INS_ALIAS_LSR = 676,
    ARM_INS_ALIAS_ROR = 677,
    ARM_INS_ALIAS_RRX = 678,
    ARM_INS_ALIAS_UXTW = 679,
    ARM_INS_ALIAS_LDM = 680,
    ARM_INS_ALIAS_POP = 681,
    ARM_INS_ALIAS_PUSH = 682,
    ARM_INS_ALIAS_POPW = 683,
    ARM_INS_ALIAS_PUSHW = 684,
    ARM_INS_ALIAS_VPOP = 685,
    ARM_INS_ALIAS_VPUSH = 686,
    ARM_INS_ALIAS_END = 687,
}
pub mod arm_insn_group {
    #[doc = " Group of ARM instructions"]
    pub type Type = libc::c_uint;
    #[doc = "< = CS_GRP_INVALID"]
    pub const ARM_GRP_INVALID: Type = 0;
    #[doc = "< = CS_GRP_JUMP"]
    pub const ARM_GRP_JUMP: Type = 1;
    #[doc = "< = CS_GRP_CALL"]
    pub const ARM_GRP_CALL: Type = 2;
    #[doc = "<  = CS_GRP_RET"]
    pub const ARM_GRP_RET: Type = 3;
    #[doc = "< = CS_GRP_INT"]
    pub const ARM_GRP_INT: Type = 4;
    #[doc = "< = CS_GRP_PRIVILEGE"]
    pub const ARM_GRP_PRIVILEGE: Type = 6;
    #[doc = "< = CS_GRP_BRANCH_RELATIVE"]
    pub const ARM_GRP_BRANCH_RELATIVE: Type = 7;
    pub const ARM_FEATURE_HASV4T: Type = 128;
    pub const ARM_FEATURE_HASV5T: Type = 129;
    pub const ARM_FEATURE_HASV5TE: Type = 130;
    pub const ARM_FEATURE_HASV6: Type = 131;
    pub const ARM_FEATURE_HASV6M: Type = 132;
    pub const ARM_FEATURE_HASV8MBASELINE: Type = 133;
    pub const ARM_FEATURE_HASV8MMAINLINE: Type = 134;
    pub const ARM_FEATURE_HASV8_1MMAINLINE: Type = 135;
    pub const ARM_FEATURE_HASMVEINT: Type = 136;
    pub const ARM_FEATURE_HASMVEFLOAT: Type = 137;
    pub const ARM_FEATURE_HASCDE: Type = 138;
    pub const ARM_FEATURE_HASFPREGS: Type = 139;
    pub const ARM_FEATURE_HASFPREGS16: Type = 140;
    pub const ARM_FEATURE_HASNOFPREGS16: Type = 141;
    pub const ARM_FEATURE_HASFPREGS64: Type = 142;
    pub const ARM_FEATURE_HASFPREGSV8_1M: Type = 143;
    pub const ARM_FEATURE_HASV6T2: Type = 144;
    pub const ARM_FEATURE_HASV6K: Type = 145;
    pub const ARM_FEATURE_HASV7: Type = 146;
    pub const ARM_FEATURE_HASV8: Type = 147;
    pub const ARM_FEATURE_PREV8: Type = 148;
    pub const ARM_FEATURE_HASV8_1A: Type = 149;
    pub const ARM_FEATURE_HASV8_2A: Type = 150;
    pub const ARM_FEATURE_HASV8_3A: Type = 151;
    pub const ARM_FEATURE_HASV8_4A: Type = 152;
    pub const ARM_FEATURE_HASV8_5A: Type = 153;
    pub const ARM_FEATURE_HASV8_6A: Type = 154;
    pub const ARM_FEATURE_HASV8_7A: Type = 155;
    pub const ARM_FEATURE_HASVFP2: Type = 156;
    pub const ARM_FEATURE_HASVFP3: Type = 157;
    pub const ARM_FEATURE_HASVFP4: Type = 158;
    pub const ARM_FEATURE_HASDPVFP: Type = 159;
    pub const ARM_FEATURE_HASFPARMV8: Type = 160;
    pub const ARM_FEATURE_HASNEON: Type = 161;
    pub const ARM_FEATURE_HASSHA2: Type = 162;
    pub const ARM_FEATURE_HASAES: Type = 163;
    pub const ARM_FEATURE_HASCRYPTO: Type = 164;
    pub const ARM_FEATURE_HASDOTPROD: Type = 165;
    pub const ARM_FEATURE_HASCRC: Type = 166;
    pub const ARM_FEATURE_HASRAS: Type = 167;
    pub const ARM_FEATURE_HASLOB: Type = 168;
    pub const ARM_FEATURE_HASPACBTI: Type = 169;
    pub const ARM_FEATURE_HASFP16: Type = 170;
    pub const ARM_FEATURE_HASFULLFP16: Type = 171;
    pub const ARM_FEATURE_HASFP16FML: Type = 172;
    pub const ARM_FEATURE_HASBF16: Type = 173;
    pub const ARM_FEATURE_HASMATMULINT8: Type = 174;
    pub const ARM_FEATURE_HASDIVIDEINTHUMB: Type = 175;
    pub const ARM_FEATURE_HASDIVIDEINARM: Type = 176;
    pub const ARM_FEATURE_HASDSP: Type = 177;
    pub const ARM_FEATURE_HASDB: Type = 178;
    pub const ARM_FEATURE_HASDFB: Type = 179;
    pub const ARM_FEATURE_HASV7CLREX: Type = 180;
    pub const ARM_FEATURE_HASACQUIRERELEASE: Type = 181;
    pub const ARM_FEATURE_HASMP: Type = 182;
    pub const ARM_FEATURE_HASVIRTUALIZATION: Type = 183;
    pub const ARM_FEATURE_HASTRUSTZONE: Type = 184;
    pub const ARM_FEATURE_HAS8MSECEXT: Type = 185;
    pub const ARM_FEATURE_ISTHUMB: Type = 186;
    pub const ARM_FEATURE_ISTHUMB2: Type = 187;
    pub const ARM_FEATURE_ISMCLASS: Type = 188;
    pub const ARM_FEATURE_ISNOTMCLASS: Type = 189;
    pub const ARM_FEATURE_ISARM: Type = 190;
    pub const ARM_FEATURE_USENACLTRAP: Type = 191;
    pub const ARM_FEATURE_USENEGATIVEIMMEDIATES: Type = 192;
    pub const ARM_FEATURE_HASSB: Type = 193;
    pub const ARM_FEATURE_HASCLRBHB: Type = 194;
    pub const ARM_GRP_ENDING: Type = 195;
}
#[repr(u32)]
#[doc = " AArch64 shift type\n Those values do not correspond to the bit values encoded\n in the instruction."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_shifter {
    AARCH64_SFT_INVALID = 0,
    AARCH64_SFT_LSL = 1,
    AARCH64_SFT_MSL = 2,
    AARCH64_SFT_LSR = 3,
    AARCH64_SFT_ASR = 4,
    AARCH64_SFT_ROR = 5,
    AARCH64_SFT_LSL_REG = 6,
    AARCH64_SFT_MSL_REG = 7,
    AARCH64_SFT_LSR_REG = 8,
    AARCH64_SFT_ASR_REG = 9,
    AARCH64_SFT_ROR_REG = 10,
}
#[repr(u32)]
#[doc = " AArch64 extender type"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_extender {
    AARCH64_EXT_INVALID = 0,
    AARCH64_EXT_UXTB = 1,
    AARCH64_EXT_UXTH = 2,
    AARCH64_EXT_UXTW = 3,
    AARCH64_EXT_UXTX = 4,
    AARCH64_EXT_SXTB = 5,
    AARCH64_EXT_SXTH = 6,
    AARCH64_EXT_SXTW = 7,
    AARCH64_EXT_SXTX = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum VectorLayout {
    AARCH64LAYOUT_INVALID = 0,
    AARCH64LAYOUT_VL_B = 8,
    AARCH64LAYOUT_VL_H = 16,
    AARCH64LAYOUT_VL_S = 32,
    AARCH64LAYOUT_VL_D = 64,
    AARCH64LAYOUT_VL_Q = 128,
    AARCH64LAYOUT_VL_4B = 1032,
    AARCH64LAYOUT_VL_2H = 528,
    AARCH64LAYOUT_VL_1S = 288,
    AARCH64LAYOUT_VL_8B = 2056,
    AARCH64LAYOUT_VL_4H = 1040,
    AARCH64LAYOUT_VL_2S = 544,
    AARCH64LAYOUT_VL_1D = 320,
    AARCH64LAYOUT_VL_16B = 4104,
    AARCH64LAYOUT_VL_8H = 2064,
    AARCH64LAYOUT_VL_4S = 1056,
    AARCH64LAYOUT_VL_2D = 576,
    AARCH64LAYOUT_VL_1Q = 384,
    AARCH64LAYOUT_VL_64B = 16392,
    AARCH64LAYOUT_VL_32H = 8208,
    AARCH64LAYOUT_VL_16S = 4128,
    AARCH64LAYOUT_VL_8D = 2112,
    #[doc = "< Indicates that the complete matrix is used."]
    AARCH64LAYOUT_VL_COMPLETE = 2113,
}
pub use self::VectorLayout as AArch64Layout_VectorLayout;
impl AArch64CondCode {
    pub const AArch64CC_ANY_ACTIVE: AArch64CondCode = AArch64CondCode::AArch64CC_NE;
}
impl AArch64CondCode {
    pub const AArch64CC_FIRST_ACTIVE: AArch64CondCode = AArch64CondCode::AArch64CC_MI;
}
impl AArch64CondCode {
    pub const AArch64CC_LAST_ACTIVE: AArch64CondCode = AArch64CondCode::AArch64CC_LO;
}
impl AArch64CondCode {
    pub const AArch64CC_NONE_ACTIVE: AArch64CondCode = AArch64CondCode::AArch64CC_EQ;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum AArch64CondCode {
    AArch64CC_EQ = 0,
    AArch64CC_NE = 1,
    AArch64CC_HS = 2,
    AArch64CC_LO = 3,
    AArch64CC_MI = 4,
    AArch64CC_PL = 5,
    AArch64CC_VS = 6,
    AArch64CC_VC = 7,
    AArch64CC_HI = 8,
    AArch64CC_LS = 9,
    AArch64CC_GE = 10,
    AArch64CC_LT = 11,
    AArch64CC_GT = 12,
    AArch64CC_LE = 13,
    AArch64CC_AL = 14,
    AArch64CC_NV = 15,
    AArch64CC_Invalid = 16,
}
pub use self::AArch64CondCode as AArch64CC_CondCode;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_tlbi {
    AARCH64_TLBI_ALLE1 = 9276,
    AARCH64_TLBI_ALLE1IS = 9244,
    AARCH64_TLBI_ALLE1ISNXS = 9372,
    AARCH64_TLBI_ALLE1NXS = 9404,
    AARCH64_TLBI_ALLE1OS = 9228,
    AARCH64_TLBI_ALLE1OSNXS = 9356,
    AARCH64_TLBI_ALLE2 = 9272,
    AARCH64_TLBI_ALLE2IS = 9240,
    AARCH64_TLBI_ALLE2ISNXS = 9368,
    AARCH64_TLBI_ALLE2NXS = 9400,
    AARCH64_TLBI_ALLE2OS = 9224,
    AARCH64_TLBI_ALLE2OSNXS = 9352,
    AARCH64_TLBI_ALLE3 = 13368,
    AARCH64_TLBI_ALLE3IS = 13336,
    AARCH64_TLBI_ALLE3ISNXS = 13464,
    AARCH64_TLBI_ALLE3NXS = 13496,
    AARCH64_TLBI_ALLE3OS = 13320,
    AARCH64_TLBI_ALLE3OSNXS = 13448,
    AARCH64_TLBI_ASIDE1 = 1082,
    AARCH64_TLBI_ASIDE1IS = 1050,
    AARCH64_TLBI_ASIDE1ISNXS = 1178,
    AARCH64_TLBI_ASIDE1NXS = 1210,
    AARCH64_TLBI_ASIDE1OS = 1034,
    AARCH64_TLBI_ASIDE1OSNXS = 1162,
    AARCH64_TLBI_IPAS2E1 = 9249,
    AARCH64_TLBI_IPAS2E1IS = 9217,
    AARCH64_TLBI_IPAS2E1ISNXS = 9345,
    AARCH64_TLBI_IPAS2E1NXS = 9377,
    AARCH64_TLBI_IPAS2E1OS = 9248,
    AARCH64_TLBI_IPAS2E1OSNXS = 9376,
    AARCH64_TLBI_IPAS2LE1 = 9253,
    AARCH64_TLBI_IPAS2LE1IS = 9221,
    AARCH64_TLBI_IPAS2LE1ISNXS = 9349,
    AARCH64_TLBI_IPAS2LE1NXS = 9381,
    AARCH64_TLBI_IPAS2LE1OS = 9252,
    AARCH64_TLBI_IPAS2LE1OSNXS = 9380,
    AARCH64_TLBI_PAALL = 13372,
    AARCH64_TLBI_PAALLNXS = 13500,
    AARCH64_TLBI_PAALLOS = 13324,
    AARCH64_TLBI_PAALLOSNXS = 13452,
    AARCH64_TLBI_RIPAS2E1 = 9250,
    AARCH64_TLBI_RIPAS2E1IS = 9218,
    AARCH64_TLBI_RIPAS2E1ISNXS = 9346,
    AARCH64_TLBI_RIPAS2E1NXS = 9378,
    AARCH64_TLBI_RIPAS2E1OS = 9251,
    AARCH64_TLBI_RIPAS2E1OSNXS = 9379,
    AARCH64_TLBI_RIPAS2LE1 = 9254,
    AARCH64_TLBI_RIPAS2LE1IS = 9222,
    AARCH64_TLBI_RIPAS2LE1ISNXS = 9350,
    AARCH64_TLBI_RIPAS2LE1NXS = 9382,
    AARCH64_TLBI_RIPAS2LE1OS = 9255,
    AARCH64_TLBI_RIPAS2LE1OSNXS = 9383,
    AARCH64_TLBI_RPALOS = 13351,
    AARCH64_TLBI_RPALOSNXS = 13479,
    AARCH64_TLBI_RPAOS = 13347,
    AARCH64_TLBI_RPAOSNXS = 13475,
    AARCH64_TLBI_RVAAE1 = 1075,
    AARCH64_TLBI_RVAAE1IS = 1043,
    AARCH64_TLBI_RVAAE1ISNXS = 1171,
    AARCH64_TLBI_RVAAE1NXS = 1203,
    AARCH64_TLBI_RVAAE1OS = 1067,
    AARCH64_TLBI_RVAAE1OSNXS = 1195,
    AARCH64_TLBI_RVAALE1 = 1079,
    AARCH64_TLBI_RVAALE1IS = 1047,
    AARCH64_TLBI_RVAALE1ISNXS = 1175,
    AARCH64_TLBI_RVAALE1NXS = 1207,
    AARCH64_TLBI_RVAALE1OS = 1071,
    AARCH64_TLBI_RVAALE1OSNXS = 1199,
    AARCH64_TLBI_RVAE1 = 1073,
    AARCH64_TLBI_RVAE1IS = 1041,
    AARCH64_TLBI_RVAE1ISNXS = 1169,
    AARCH64_TLBI_RVAE1NXS = 1201,
    AARCH64_TLBI_RVAE1OS = 1065,
    AARCH64_TLBI_RVAE1OSNXS = 1193,
    AARCH64_TLBI_RVAE2 = 9265,
    AARCH64_TLBI_RVAE2IS = 9233,
    AARCH64_TLBI_RVAE2ISNXS = 9361,
    AARCH64_TLBI_RVAE2NXS = 9393,
    AARCH64_TLBI_RVAE2OS = 9257,
    AARCH64_TLBI_RVAE2OSNXS = 9385,
    AARCH64_TLBI_RVAE3 = 13361,
    AARCH64_TLBI_RVAE3IS = 13329,
    AARCH64_TLBI_RVAE3ISNXS = 13457,
    AARCH64_TLBI_RVAE3NXS = 13489,
    AARCH64_TLBI_RVAE3OS = 13353,
    AARCH64_TLBI_RVAE3OSNXS = 13481,
    AARCH64_TLBI_RVALE1 = 1077,
    AARCH64_TLBI_RVALE1IS = 1045,
    AARCH64_TLBI_RVALE1ISNXS = 1173,
    AARCH64_TLBI_RVALE1NXS = 1205,
    AARCH64_TLBI_RVALE1OS = 1069,
    AARCH64_TLBI_RVALE1OSNXS = 1197,
    AARCH64_TLBI_RVALE2 = 9269,
    AARCH64_TLBI_RVALE2IS = 9237,
    AARCH64_TLBI_RVALE2ISNXS = 9365,
    AARCH64_TLBI_RVALE2NXS = 9397,
    AARCH64_TLBI_RVALE2OS = 9261,
    AARCH64_TLBI_RVALE2OSNXS = 9389,
    AARCH64_TLBI_RVALE3 = 13365,
    AARCH64_TLBI_RVALE3IS = 13333,
    AARCH64_TLBI_RVALE3ISNXS = 13461,
    AARCH64_TLBI_RVALE3NXS = 13493,
    AARCH64_TLBI_RVALE3OS = 13357,
    AARCH64_TLBI_RVALE3OSNXS = 13485,
    AARCH64_TLBI_VAAE1 = 1083,
    AARCH64_TLBI_VAAE1IS = 1051,
    AARCH64_TLBI_VAAE1ISNXS = 1179,
    AARCH64_TLBI_VAAE1NXS = 1211,
    AARCH64_TLBI_VAAE1OS = 1035,
    AARCH64_TLBI_VAAE1OSNXS = 1163,
    AARCH64_TLBI_VAALE1 = 1087,
    AARCH64_TLBI_VAALE1IS = 1055,
    AARCH64_TLBI_VAALE1ISNXS = 1183,
    AARCH64_TLBI_VAALE1NXS = 1215,
    AARCH64_TLBI_VAALE1OS = 1039,
    AARCH64_TLBI_VAALE1OSNXS = 1167,
    AARCH64_TLBI_VAE1 = 1081,
    AARCH64_TLBI_VAE1IS = 1049,
    AARCH64_TLBI_VAE1ISNXS = 1177,
    AARCH64_TLBI_VAE1NXS = 1209,
    AARCH64_TLBI_VAE1OS = 1033,
    AARCH64_TLBI_VAE1OSNXS = 1161,
    AARCH64_TLBI_VAE2 = 9273,
    AARCH64_TLBI_VAE2IS = 9241,
    AARCH64_TLBI_VAE2ISNXS = 9369,
    AARCH64_TLBI_VAE2NXS = 9401,
    AARCH64_TLBI_VAE2OS = 9225,
    AARCH64_TLBI_VAE2OSNXS = 9353,
    AARCH64_TLBI_VAE3 = 13369,
    AARCH64_TLBI_VAE3IS = 13337,
    AARCH64_TLBI_VAE3ISNXS = 13465,
    AARCH64_TLBI_VAE3NXS = 13497,
    AARCH64_TLBI_VAE3OS = 13321,
    AARCH64_TLBI_VAE3OSNXS = 13449,
    AARCH64_TLBI_VALE1 = 1085,
    AARCH64_TLBI_VALE1IS = 1053,
    AARCH64_TLBI_VALE1ISNXS = 1181,
    AARCH64_TLBI_VALE1NXS = 1213,
    AARCH64_TLBI_VALE1OS = 1037,
    AARCH64_TLBI_VALE1OSNXS = 1165,
    AARCH64_TLBI_VALE2 = 9277,
    AARCH64_TLBI_VALE2IS = 9245,
    AARCH64_TLBI_VALE2ISNXS = 9373,
    AARCH64_TLBI_VALE2NXS = 9405,
    AARCH64_TLBI_VALE2OS = 9229,
    AARCH64_TLBI_VALE2OSNXS = 9357,
    AARCH64_TLBI_VALE3 = 13373,
    AARCH64_TLBI_VALE3IS = 13341,
    AARCH64_TLBI_VALE3ISNXS = 13469,
    AARCH64_TLBI_VALE3NXS = 13501,
    AARCH64_TLBI_VALE3OS = 13325,
    AARCH64_TLBI_VALE3OSNXS = 13453,
    AARCH64_TLBI_VMALLE1 = 1080,
    AARCH64_TLBI_VMALLE1IS = 1048,
    AARCH64_TLBI_VMALLE1ISNXS = 1176,
    AARCH64_TLBI_VMALLE1NXS = 1208,
    AARCH64_TLBI_VMALLE1OS = 1032,
    AARCH64_TLBI_VMALLE1OSNXS = 1160,
    AARCH64_TLBI_VMALLS12E1 = 9278,
    AARCH64_TLBI_VMALLS12E1IS = 9246,
    AARCH64_TLBI_VMALLS12E1ISNXS = 9374,
    AARCH64_TLBI_VMALLS12E1NXS = 9406,
    AARCH64_TLBI_VMALLS12E1OS = 9230,
    AARCH64_TLBI_VMALLS12E1OSNXS = 9358,
    AARCH64_TLBI_VMALLWS2E1 = 9266,
    AARCH64_TLBI_VMALLWS2E1IS = 9234,
    AARCH64_TLBI_VMALLWS2E1ISNXS = 9362,
    AARCH64_TLBI_VMALLWS2E1NXS = 9394,
    AARCH64_TLBI_VMALLWS2E1OS = 9258,
    AARCH64_TLBI_VMALLWS2E1OSNXS = 9386,
    AARCH64_TLBI_ENDING = 9387,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_at {
    AARCH64_AT_S12E0R = 9158,
    AARCH64_AT_S12E0W = 9159,
    AARCH64_AT_S12E1R = 9156,
    AARCH64_AT_S12E1W = 9157,
    AARCH64_AT_S1E0R = 962,
    AARCH64_AT_S1E0W = 963,
    AARCH64_AT_S1E1A = 970,
    AARCH64_AT_S1E1R = 960,
    AARCH64_AT_S1E1RP = 968,
    AARCH64_AT_S1E1W = 961,
    AARCH64_AT_S1E1WP = 969,
    AARCH64_AT_S1E2A = 9162,
    AARCH64_AT_S1E2R = 9152,
    AARCH64_AT_S1E2W = 9153,
    AARCH64_AT_S1E3A = 13258,
    AARCH64_AT_S1E3R = 13248,
    AARCH64_AT_S1E3W = 13249,
    AARCH64_AT_ENDING = 13250,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_bti {
    AARCH64_BTI_C = 2,
    AARCH64_BTI_J = 4,
    AARCH64_BTI_JC = 6,
    AARCH64_BTI_ENDING = 7,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_db {
    AARCH64_DB_ISH = 11,
    AARCH64_DB_ISHLD = 9,
    AARCH64_DB_ISHST = 10,
    AARCH64_DB_LD = 13,
    AARCH64_DB_NSH = 7,
    AARCH64_DB_NSHLD = 5,
    AARCH64_DB_NSHST = 6,
    AARCH64_DB_OSH = 3,
    AARCH64_DB_OSHLD = 1,
    AARCH64_DB_OSHST = 2,
    AARCH64_DB_ST = 14,
    AARCH64_DB_SY = 15,
    AARCH64_DB_ENDING = 16,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_dbnxs {
    AARCH64_DBNXS_ISHNXS = 11,
    AARCH64_DBNXS_NSHNXS = 7,
    AARCH64_DBNXS_OSHNXS = 3,
    AARCH64_DBNXS_SYNXS = 15,
    AARCH64_DBNXS_ENDING = 16,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_dc {
    AARCH64_DC_CGDSW = 982,
    AARCH64_DC_CGDVAC = 7125,
    AARCH64_DC_CGDVADP = 7149,
    AARCH64_DC_CGDVAP = 7141,
    AARCH64_DC_CGSW = 980,
    AARCH64_DC_CGVAC = 7123,
    AARCH64_DC_CGVADP = 7147,
    AARCH64_DC_CGVAP = 7139,
    AARCH64_DC_CIGDPAE = 9207,
    AARCH64_DC_CIGDSW = 1014,
    AARCH64_DC_CIGDVAC = 7157,
    AARCH64_DC_CIGSW = 1012,
    AARCH64_DC_CIGVAC = 7155,
    AARCH64_DC_CIPAE = 9200,
    AARCH64_DC_CISW = 1010,
    AARCH64_DC_CIVAC = 7153,
    AARCH64_DC_CSW = 978,
    AARCH64_DC_CVAC = 7121,
    AARCH64_DC_CVADP = 7145,
    AARCH64_DC_CVAP = 7137,
    AARCH64_DC_CVAU = 7129,
    AARCH64_DC_GVA = 7075,
    AARCH64_DC_GZVA = 7076,
    AARCH64_DC_IGDSW = 950,
    AARCH64_DC_IGDVAC = 949,
    AARCH64_DC_IGSW = 948,
    AARCH64_DC_IGVAC = 947,
    AARCH64_DC_ISW = 946,
    AARCH64_DC_IVAC = 945,
    AARCH64_DC_ZVA = 7073,
    AARCH64_DC_ENDING = 7074,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_exactfpimm {
    AARCH64_EXACTFPIMM_HALF = 1,
    AARCH64_EXACTFPIMM_ONE = 2,
    AARCH64_EXACTFPIMM_TWO = 3,
    AARCH64_EXACTFPIMM_ZERO = 0,
    AARCH64_EXACTFPIMM_INVALID = 4,
    AARCH64_EXACTFPIMM_ENDING = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_ic {
    AARCH64_IC_IALLU = 936,
    AARCH64_IC_IALLUIS = 904,
    AARCH64_IC_IVAU = 7081,
    AARCH64_IC_ENDING = 7082,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_isb {
    AARCH64_ISB_SY = 15,
    AARCH64_ISB_ENDING = 16,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_prfm {
    AARCH64_PRFM_PLDL1KEEP = 0,
    AARCH64_PRFM_PLDL1STRM = 1,
    AARCH64_PRFM_PLDL2KEEP = 2,
    AARCH64_PRFM_PLDL2STRM = 3,
    AARCH64_PRFM_PLDL3KEEP = 4,
    AARCH64_PRFM_PLDL3STRM = 5,
    AARCH64_PRFM_PLDSLCKEEP = 6,
    AARCH64_PRFM_PLDSLCSTRM = 7,
    AARCH64_PRFM_PLIL1KEEP = 8,
    AARCH64_PRFM_PLIL1STRM = 9,
    AARCH64_PRFM_PLIL2KEEP = 10,
    AARCH64_PRFM_PLIL2STRM = 11,
    AARCH64_PRFM_PLIL3KEEP = 12,
    AARCH64_PRFM_PLIL3STRM = 13,
    AARCH64_PRFM_PLISLCKEEP = 14,
    AARCH64_PRFM_PLISLCSTRM = 15,
    AARCH64_PRFM_PSTL1KEEP = 16,
    AARCH64_PRFM_PSTL1STRM = 17,
    AARCH64_PRFM_PSTL2KEEP = 18,
    AARCH64_PRFM_PSTL2STRM = 19,
    AARCH64_PRFM_PSTL3KEEP = 20,
    AARCH64_PRFM_PSTL3STRM = 21,
    AARCH64_PRFM_PSTSLCKEEP = 22,
    AARCH64_PRFM_PSTSLCSTRM = 23,
    AARCH64_PRFM_ENDING = 24,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_psb {
    AARCH64_PSB_CSYNC = 17,
    AARCH64_PSB_ENDING = 18,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_pstateimm0_1 {
    AARCH64_PSTATEIMM0_1_ALLINT = 8,
    AARCH64_PSTATEIMM0_1_PM = 72,
    AARCH64_PSTATEIMM0_1_ENDING = 73,
}
impl aarch64_pstateimm0_15 {
    pub const AARCH64_PSTATEIMM0_15_ENDING: aarch64_pstateimm0_15 =
        aarch64_pstateimm0_15::AARCH64_PSTATEIMM0_15_PAN;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_pstateimm0_15 {
    AARCH64_PSTATEIMM0_15_DAIFCLR = 31,
    AARCH64_PSTATEIMM0_15_DAIFSET = 30,
    AARCH64_PSTATEIMM0_15_DIT = 26,
    AARCH64_PSTATEIMM0_15_PAN = 4,
    AARCH64_PSTATEIMM0_15_SPSEL = 5,
    AARCH64_PSTATEIMM0_15_SSBS = 25,
    AARCH64_PSTATEIMM0_15_TCO = 28,
    AARCH64_PSTATEIMM0_15_UAO = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_rprfm {
    AARCH64_RPRFM_PLDKEEP = 0,
    AARCH64_RPRFM_PLDSTRM = 4,
    AARCH64_RPRFM_PSTKEEP = 1,
    AARCH64_RPRFM_PSTSTRM = 5,
    AARCH64_RPRFM_ENDING = 6,
}
impl aarch64_svcr {
    pub const AARCH64_SVCR_ENDING: aarch64_svcr = aarch64_svcr::AARCH64_SVCR_SVCRSMZA;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_svcr {
    AARCH64_SVCR_SVCRSM = 1,
    AARCH64_SVCR_SVCRSMZA = 3,
    AARCH64_SVCR_SVCRZA = 2,
}
impl aarch64_svepredpat {
    pub const AARCH64_SVEPREDPAT_ENDING: aarch64_svepredpat =
        aarch64_svepredpat::AARCH64_SVEPREDPAT_VL16;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_svepredpat {
    AARCH64_SVEPREDPAT_ALL = 31,
    AARCH64_SVEPREDPAT_MUL3 = 30,
    AARCH64_SVEPREDPAT_MUL4 = 29,
    AARCH64_SVEPREDPAT_POW2 = 0,
    AARCH64_SVEPREDPAT_VL1 = 1,
    AARCH64_SVEPREDPAT_VL128 = 12,
    AARCH64_SVEPREDPAT_VL16 = 9,
    AARCH64_SVEPREDPAT_VL2 = 2,
    AARCH64_SVEPREDPAT_VL256 = 13,
    AARCH64_SVEPREDPAT_VL3 = 3,
    AARCH64_SVEPREDPAT_VL32 = 10,
    AARCH64_SVEPREDPAT_VL4 = 4,
    AARCH64_SVEPREDPAT_VL5 = 5,
    AARCH64_SVEPREDPAT_VL6 = 6,
    AARCH64_SVEPREDPAT_VL64 = 11,
    AARCH64_SVEPREDPAT_VL7 = 7,
    AARCH64_SVEPREDPAT_VL8 = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_sveprfm {
    AARCH64_SVEPRFM_PLDL1KEEP = 0,
    AARCH64_SVEPRFM_PLDL1STRM = 1,
    AARCH64_SVEPRFM_PLDL2KEEP = 2,
    AARCH64_SVEPRFM_PLDL2STRM = 3,
    AARCH64_SVEPRFM_PLDL3KEEP = 4,
    AARCH64_SVEPRFM_PLDL3STRM = 5,
    AARCH64_SVEPRFM_PSTL1KEEP = 8,
    AARCH64_SVEPRFM_PSTL1STRM = 9,
    AARCH64_SVEPRFM_PSTL2KEEP = 10,
    AARCH64_SVEPRFM_PSTL2STRM = 11,
    AARCH64_SVEPRFM_PSTL3KEEP = 12,
    AARCH64_SVEPRFM_PSTL3STRM = 13,
    AARCH64_SVEPRFM_ENDING = 14,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_sveveclenspecifier {
    AARCH64_SVEVECLENSPECIFIER_VLX2 = 0,
    AARCH64_SVEVECLENSPECIFIER_VLX4 = 1,
    AARCH64_SVEVECLENSPECIFIER_ENDING = 2,
}
impl aarch64_sysreg {
    pub const AARCH64_SYSREG_DBGDTRTX_EL0: aarch64_sysreg =
        aarch64_sysreg::AARCH64_SYSREG_DBGDTRRX_EL0;
}
impl aarch64_sysreg {
    pub const AARCH64_SYSREG_TRCEXTINSELR0: aarch64_sysreg =
        aarch64_sysreg::AARCH64_SYSREG_TRCEXTINSELR;
}
impl aarch64_sysreg {
    pub const AARCH64_SYSREG_VSCTLR_EL2: aarch64_sysreg = aarch64_sysreg::AARCH64_SYSREG_TTBR0_EL2;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_sysreg {
    AARCH64_SYSREG_INVALID = 0,
    AARCH64_SYSREG_ACCDATA_EL1 = 50821,
    AARCH64_SYSREG_ACTLR_EL1 = 49281,
    AARCH64_SYSREG_ACTLR_EL2 = 57473,
    AARCH64_SYSREG_ACTLR_EL3 = 61569,
    AARCH64_SYSREG_AFSR0_EL1 = 49800,
    AARCH64_SYSREG_AFSR0_EL12 = 60040,
    AARCH64_SYSREG_AFSR0_EL2 = 57992,
    AARCH64_SYSREG_AFSR0_EL3 = 62088,
    AARCH64_SYSREG_AFSR1_EL1 = 49801,
    AARCH64_SYSREG_AFSR1_EL12 = 60041,
    AARCH64_SYSREG_AFSR1_EL2 = 57993,
    AARCH64_SYSREG_AFSR1_EL3 = 62089,
    AARCH64_SYSREG_AIDR_EL1 = 51207,
    AARCH64_SYSREG_ALLINT = 49688,
    AARCH64_SYSREG_AMAIR2_EL1 = 50457,
    AARCH64_SYSREG_AMAIR2_EL12 = 60697,
    AARCH64_SYSREG_AMAIR2_EL2 = 58649,
    AARCH64_SYSREG_AMAIR2_EL3 = 62745,
    AARCH64_SYSREG_AMAIR_EL1 = 50456,
    AARCH64_SYSREG_AMAIR_EL12 = 60696,
    AARCH64_SYSREG_AMAIR_EL2 = 58648,
    AARCH64_SYSREG_AMAIR_EL3 = 62744,
    AARCH64_SYSREG_AMCFGR_EL0 = 56977,
    AARCH64_SYSREG_AMCG1IDR_EL0 = 56982,
    AARCH64_SYSREG_AMCGCR_EL0 = 56978,
    AARCH64_SYSREG_AMCNTENCLR0_EL0 = 56980,
    AARCH64_SYSREG_AMCNTENCLR1_EL0 = 56984,
    AARCH64_SYSREG_AMCNTENSET0_EL0 = 56981,
    AARCH64_SYSREG_AMCNTENSET1_EL0 = 56985,
    AARCH64_SYSREG_AMCR_EL0 = 56976,
    AARCH64_SYSREG_AMEVCNTR00_EL0 = 56992,
    AARCH64_SYSREG_AMEVCNTR01_EL0 = 56993,
    AARCH64_SYSREG_AMEVCNTR02_EL0 = 56994,
    AARCH64_SYSREG_AMEVCNTR03_EL0 = 56995,
    AARCH64_SYSREG_AMEVCNTR10_EL0 = 57056,
    AARCH64_SYSREG_AMEVCNTR110_EL0 = 57066,
    AARCH64_SYSREG_AMEVCNTR111_EL0 = 57067,
    AARCH64_SYSREG_AMEVCNTR112_EL0 = 57068,
    AARCH64_SYSREG_AMEVCNTR113_EL0 = 57069,
    AARCH64_SYSREG_AMEVCNTR114_EL0 = 57070,
    AARCH64_SYSREG_AMEVCNTR115_EL0 = 57071,
    AARCH64_SYSREG_AMEVCNTR11_EL0 = 57057,
    AARCH64_SYSREG_AMEVCNTR12_EL0 = 57058,
    AARCH64_SYSREG_AMEVCNTR13_EL0 = 57059,
    AARCH64_SYSREG_AMEVCNTR14_EL0 = 57060,
    AARCH64_SYSREG_AMEVCNTR15_EL0 = 57061,
    AARCH64_SYSREG_AMEVCNTR16_EL0 = 57062,
    AARCH64_SYSREG_AMEVCNTR17_EL0 = 57063,
    AARCH64_SYSREG_AMEVCNTR18_EL0 = 57064,
    AARCH64_SYSREG_AMEVCNTR19_EL0 = 57065,
    AARCH64_SYSREG_AMEVCNTVOFF00_EL2 = 59072,
    AARCH64_SYSREG_AMEVCNTVOFF010_EL2 = 59082,
    AARCH64_SYSREG_AMEVCNTVOFF011_EL2 = 59083,
    AARCH64_SYSREG_AMEVCNTVOFF012_EL2 = 59084,
    AARCH64_SYSREG_AMEVCNTVOFF013_EL2 = 59085,
    AARCH64_SYSREG_AMEVCNTVOFF014_EL2 = 59086,
    AARCH64_SYSREG_AMEVCNTVOFF015_EL2 = 59087,
    AARCH64_SYSREG_AMEVCNTVOFF01_EL2 = 59073,
    AARCH64_SYSREG_AMEVCNTVOFF02_EL2 = 59074,
    AARCH64_SYSREG_AMEVCNTVOFF03_EL2 = 59075,
    AARCH64_SYSREG_AMEVCNTVOFF04_EL2 = 59076,
    AARCH64_SYSREG_AMEVCNTVOFF05_EL2 = 59077,
    AARCH64_SYSREG_AMEVCNTVOFF06_EL2 = 59078,
    AARCH64_SYSREG_AMEVCNTVOFF07_EL2 = 59079,
    AARCH64_SYSREG_AMEVCNTVOFF08_EL2 = 59080,
    AARCH64_SYSREG_AMEVCNTVOFF09_EL2 = 59081,
    AARCH64_SYSREG_AMEVCNTVOFF10_EL2 = 59088,
    AARCH64_SYSREG_AMEVCNTVOFF110_EL2 = 59098,
    AARCH64_SYSREG_AMEVCNTVOFF111_EL2 = 59099,
    AARCH64_SYSREG_AMEVCNTVOFF112_EL2 = 59100,
    AARCH64_SYSREG_AMEVCNTVOFF113_EL2 = 59101,
    AARCH64_SYSREG_AMEVCNTVOFF114_EL2 = 59102,
    AARCH64_SYSREG_AMEVCNTVOFF115_EL2 = 59103,
    AARCH64_SYSREG_AMEVCNTVOFF11_EL2 = 59089,
    AARCH64_SYSREG_AMEVCNTVOFF12_EL2 = 59090,
    AARCH64_SYSREG_AMEVCNTVOFF13_EL2 = 59091,
    AARCH64_SYSREG_AMEVCNTVOFF14_EL2 = 59092,
    AARCH64_SYSREG_AMEVCNTVOFF15_EL2 = 59093,
    AARCH64_SYSREG_AMEVCNTVOFF16_EL2 = 59094,
    AARCH64_SYSREG_AMEVCNTVOFF17_EL2 = 59095,
    AARCH64_SYSREG_AMEVCNTVOFF18_EL2 = 59096,
    AARCH64_SYSREG_AMEVCNTVOFF19_EL2 = 59097,
    AARCH64_SYSREG_AMEVTYPER00_EL0 = 57008,
    AARCH64_SYSREG_AMEVTYPER01_EL0 = 57009,
    AARCH64_SYSREG_AMEVTYPER02_EL0 = 57010,
    AARCH64_SYSREG_AMEVTYPER03_EL0 = 57011,
    AARCH64_SYSREG_AMEVTYPER10_EL0 = 57072,
    AARCH64_SYSREG_AMEVTYPER110_EL0 = 57082,
    AARCH64_SYSREG_AMEVTYPER111_EL0 = 57083,
    AARCH64_SYSREG_AMEVTYPER112_EL0 = 57084,
    AARCH64_SYSREG_AMEVTYPER113_EL0 = 57085,
    AARCH64_SYSREG_AMEVTYPER114_EL0 = 57086,
    AARCH64_SYSREG_AMEVTYPER115_EL0 = 57087,
    AARCH64_SYSREG_AMEVTYPER11_EL0 = 57073,
    AARCH64_SYSREG_AMEVTYPER12_EL0 = 57074,
    AARCH64_SYSREG_AMEVTYPER13_EL0 = 57075,
    AARCH64_SYSREG_AMEVTYPER14_EL0 = 57076,
    AARCH64_SYSREG_AMEVTYPER15_EL0 = 57077,
    AARCH64_SYSREG_AMEVTYPER16_EL0 = 57078,
    AARCH64_SYSREG_AMEVTYPER17_EL0 = 57079,
    AARCH64_SYSREG_AMEVTYPER18_EL0 = 57080,
    AARCH64_SYSREG_AMEVTYPER19_EL0 = 57081,
    AARCH64_SYSREG_AMUSERENR_EL0 = 56979,
    AARCH64_SYSREG_APDAKEYHI_EL1 = 49425,
    AARCH64_SYSREG_APDAKEYLO_EL1 = 49424,
    AARCH64_SYSREG_APDBKEYHI_EL1 = 49427,
    AARCH64_SYSREG_APDBKEYLO_EL1 = 49426,
    AARCH64_SYSREG_APGAKEYHI_EL1 = 49433,
    AARCH64_SYSREG_APGAKEYLO_EL1 = 49432,
    AARCH64_SYSREG_APIAKEYHI_EL1 = 49417,
    AARCH64_SYSREG_APIAKEYLO_EL1 = 49416,
    AARCH64_SYSREG_APIBKEYHI_EL1 = 49419,
    AARCH64_SYSREG_APIBKEYLO_EL1 = 49418,
    AARCH64_SYSREG_BRBCR_EL1 = 35968,
    AARCH64_SYSREG_BRBCR_EL12 = 44160,
    AARCH64_SYSREG_BRBCR_EL2 = 42112,
    AARCH64_SYSREG_BRBFCR_EL1 = 35969,
    AARCH64_SYSREG_BRBIDR0_EL1 = 35984,
    AARCH64_SYSREG_BRBINF0_EL1 = 35840,
    AARCH64_SYSREG_BRBINF10_EL1 = 35920,
    AARCH64_SYSREG_BRBINF11_EL1 = 35928,
    AARCH64_SYSREG_BRBINF12_EL1 = 35936,
    AARCH64_SYSREG_BRBINF13_EL1 = 35944,
    AARCH64_SYSREG_BRBINF14_EL1 = 35952,
    AARCH64_SYSREG_BRBINF15_EL1 = 35960,
    AARCH64_SYSREG_BRBINF16_EL1 = 35844,
    AARCH64_SYSREG_BRBINF17_EL1 = 35852,
    AARCH64_SYSREG_BRBINF18_EL1 = 35860,
    AARCH64_SYSREG_BRBINF19_EL1 = 35868,
    AARCH64_SYSREG_BRBINF1_EL1 = 35848,
    AARCH64_SYSREG_BRBINF20_EL1 = 35876,
    AARCH64_SYSREG_BRBINF21_EL1 = 35884,
    AARCH64_SYSREG_BRBINF22_EL1 = 35892,
    AARCH64_SYSREG_BRBINF23_EL1 = 35900,
    AARCH64_SYSREG_BRBINF24_EL1 = 35908,
    AARCH64_SYSREG_BRBINF25_EL1 = 35916,
    AARCH64_SYSREG_BRBINF26_EL1 = 35924,
    AARCH64_SYSREG_BRBINF27_EL1 = 35932,
    AARCH64_SYSREG_BRBINF28_EL1 = 35940,
    AARCH64_SYSREG_BRBINF29_EL1 = 35948,
    AARCH64_SYSREG_BRBINF2_EL1 = 35856,
    AARCH64_SYSREG_BRBINF30_EL1 = 35956,
    AARCH64_SYSREG_BRBINF31_EL1 = 35964,
    AARCH64_SYSREG_BRBINF3_EL1 = 35864,
    AARCH64_SYSREG_BRBINF4_EL1 = 35872,
    AARCH64_SYSREG_BRBINF5_EL1 = 35880,
    AARCH64_SYSREG_BRBINF6_EL1 = 35888,
    AARCH64_SYSREG_BRBINF7_EL1 = 35896,
    AARCH64_SYSREG_BRBINF8_EL1 = 35904,
    AARCH64_SYSREG_BRBINF9_EL1 = 35912,
    AARCH64_SYSREG_BRBINFINJ_EL1 = 35976,
    AARCH64_SYSREG_BRBSRC0_EL1 = 35841,
    AARCH64_SYSREG_BRBSRC10_EL1 = 35921,
    AARCH64_SYSREG_BRBSRC11_EL1 = 35929,
    AARCH64_SYSREG_BRBSRC12_EL1 = 35937,
    AARCH64_SYSREG_BRBSRC13_EL1 = 35945,
    AARCH64_SYSREG_BRBSRC14_EL1 = 35953,
    AARCH64_SYSREG_BRBSRC15_EL1 = 35961,
    AARCH64_SYSREG_BRBSRC16_EL1 = 35845,
    AARCH64_SYSREG_BRBSRC17_EL1 = 35853,
    AARCH64_SYSREG_BRBSRC18_EL1 = 35861,
    AARCH64_SYSREG_BRBSRC19_EL1 = 35869,
    AARCH64_SYSREG_BRBSRC1_EL1 = 35849,
    AARCH64_SYSREG_BRBSRC20_EL1 = 35877,
    AARCH64_SYSREG_BRBSRC21_EL1 = 35885,
    AARCH64_SYSREG_BRBSRC22_EL1 = 35893,
    AARCH64_SYSREG_BRBSRC23_EL1 = 35901,
    AARCH64_SYSREG_BRBSRC24_EL1 = 35909,
    AARCH64_SYSREG_BRBSRC25_EL1 = 35917,
    AARCH64_SYSREG_BRBSRC26_EL1 = 35925,
    AARCH64_SYSREG_BRBSRC27_EL1 = 35933,
    AARCH64_SYSREG_BRBSRC28_EL1 = 35941,
    AARCH64_SYSREG_BRBSRC29_EL1 = 35949,
    AARCH64_SYSREG_BRBSRC2_EL1 = 35857,
    AARCH64_SYSREG_BRBSRC30_EL1 = 35957,
    AARCH64_SYSREG_BRBSRC31_EL1 = 35965,
    AARCH64_SYSREG_BRBSRC3_EL1 = 35865,
    AARCH64_SYSREG_BRBSRC4_EL1 = 35873,
    AARCH64_SYSREG_BRBSRC5_EL1 = 35881,
    AARCH64_SYSREG_BRBSRC6_EL1 = 35889,
    AARCH64_SYSREG_BRBSRC7_EL1 = 35897,
    AARCH64_SYSREG_BRBSRC8_EL1 = 35905,
    AARCH64_SYSREG_BRBSRC9_EL1 = 35913,
    AARCH64_SYSREG_BRBSRCINJ_EL1 = 35977,
    AARCH64_SYSREG_BRBTGT0_EL1 = 35842,
    AARCH64_SYSREG_BRBTGT10_EL1 = 35922,
    AARCH64_SYSREG_BRBTGT11_EL1 = 35930,
    AARCH64_SYSREG_BRBTGT12_EL1 = 35938,
    AARCH64_SYSREG_BRBTGT13_EL1 = 35946,
    AARCH64_SYSREG_BRBTGT14_EL1 = 35954,
    AARCH64_SYSREG_BRBTGT15_EL1 = 35962,
    AARCH64_SYSREG_BRBTGT16_EL1 = 35846,
    AARCH64_SYSREG_BRBTGT17_EL1 = 35854,
    AARCH64_SYSREG_BRBTGT18_EL1 = 35862,
    AARCH64_SYSREG_BRBTGT19_EL1 = 35870,
    AARCH64_SYSREG_BRBTGT1_EL1 = 35850,
    AARCH64_SYSREG_BRBTGT20_EL1 = 35878,
    AARCH64_SYSREG_BRBTGT21_EL1 = 35886,
    AARCH64_SYSREG_BRBTGT22_EL1 = 35894,
    AARCH64_SYSREG_BRBTGT23_EL1 = 35902,
    AARCH64_SYSREG_BRBTGT24_EL1 = 35910,
    AARCH64_SYSREG_BRBTGT25_EL1 = 35918,
    AARCH64_SYSREG_BRBTGT26_EL1 = 35926,
    AARCH64_SYSREG_BRBTGT27_EL1 = 35934,
    AARCH64_SYSREG_BRBTGT28_EL1 = 35942,
    AARCH64_SYSREG_BRBTGT29_EL1 = 35950,
    AARCH64_SYSREG_BRBTGT2_EL1 = 35858,
    AARCH64_SYSREG_BRBTGT30_EL1 = 35958,
    AARCH64_SYSREG_BRBTGT31_EL1 = 35966,
    AARCH64_SYSREG_BRBTGT3_EL1 = 35866,
    AARCH64_SYSREG_BRBTGT4_EL1 = 35874,
    AARCH64_SYSREG_BRBTGT5_EL1 = 35882,
    AARCH64_SYSREG_BRBTGT6_EL1 = 35890,
    AARCH64_SYSREG_BRBTGT7_EL1 = 35898,
    AARCH64_SYSREG_BRBTGT8_EL1 = 35906,
    AARCH64_SYSREG_BRBTGT9_EL1 = 35914,
    AARCH64_SYSREG_BRBTGTINJ_EL1 = 35978,
    AARCH64_SYSREG_BRBTS_EL1 = 35970,
    AARCH64_SYSREG_CCSIDR2_EL1 = 51202,
    AARCH64_SYSREG_CCSIDR_EL1 = 51200,
    AARCH64_SYSREG_CLIDR_EL1 = 51201,
    AARCH64_SYSREG_CNTFRQ_EL0 = 57088,
    AARCH64_SYSREG_CNTHCTL_EL2 = 59144,
    AARCH64_SYSREG_CNTHPS_CTL_EL2 = 59177,
    AARCH64_SYSREG_CNTHPS_CVAL_EL2 = 59178,
    AARCH64_SYSREG_CNTHPS_TVAL_EL2 = 59176,
    AARCH64_SYSREG_CNTHP_CTL_EL2 = 59153,
    AARCH64_SYSREG_CNTHP_CVAL_EL2 = 59154,
    AARCH64_SYSREG_CNTHP_TVAL_EL2 = 59152,
    AARCH64_SYSREG_CNTHVS_CTL_EL2 = 59169,
    AARCH64_SYSREG_CNTHVS_CVAL_EL2 = 59170,
    AARCH64_SYSREG_CNTHVS_TVAL_EL2 = 59168,
    AARCH64_SYSREG_CNTHV_CTL_EL2 = 59161,
    AARCH64_SYSREG_CNTHV_CVAL_EL2 = 59162,
    AARCH64_SYSREG_CNTHV_TVAL_EL2 = 59160,
    AARCH64_SYSREG_CNTISCALE_EL2 = 59141,
    AARCH64_SYSREG_CNTKCTL_EL1 = 50952,
    AARCH64_SYSREG_CNTKCTL_EL12 = 61192,
    AARCH64_SYSREG_CNTPCTSS_EL0 = 57093,
    AARCH64_SYSREG_CNTPCT_EL0 = 57089,
    AARCH64_SYSREG_CNTPOFF_EL2 = 59142,
    AARCH64_SYSREG_CNTPS_CTL_EL1 = 65297,
    AARCH64_SYSREG_CNTPS_CVAL_EL1 = 65298,
    AARCH64_SYSREG_CNTPS_TVAL_EL1 = 65296,
    AARCH64_SYSREG_CNTP_CTL_EL0 = 57105,
    AARCH64_SYSREG_CNTP_CTL_EL02 = 61201,
    AARCH64_SYSREG_CNTP_CVAL_EL0 = 57106,
    AARCH64_SYSREG_CNTP_CVAL_EL02 = 61202,
    AARCH64_SYSREG_CNTP_TVAL_EL0 = 57104,
    AARCH64_SYSREG_CNTP_TVAL_EL02 = 61200,
    AARCH64_SYSREG_CNTSCALE_EL2 = 59140,
    AARCH64_SYSREG_CNTVCTSS_EL0 = 57094,
    AARCH64_SYSREG_CNTVCT_EL0 = 57090,
    AARCH64_SYSREG_CNTVFRQ_EL2 = 59143,
    AARCH64_SYSREG_CNTVOFF_EL2 = 59139,
    AARCH64_SYSREG_CNTV_CTL_EL0 = 57113,
    AARCH64_SYSREG_CNTV_CTL_EL02 = 61209,
    AARCH64_SYSREG_CNTV_CVAL_EL0 = 57114,
    AARCH64_SYSREG_CNTV_CVAL_EL02 = 61210,
    AARCH64_SYSREG_CNTV_TVAL_EL0 = 57112,
    AARCH64_SYSREG_CNTV_TVAL_EL02 = 61208,
    AARCH64_SYSREG_CONTEXTIDR_EL1 = 50817,
    AARCH64_SYSREG_CONTEXTIDR_EL12 = 61057,
    AARCH64_SYSREG_CONTEXTIDR_EL2 = 59009,
    AARCH64_SYSREG_CPACR_EL1 = 49282,
    AARCH64_SYSREG_CPACR_EL12 = 59522,
    AARCH64_SYSREG_CPM_IOACC_CTL_EL3 = 65424,
    AARCH64_SYSREG_CPTR_EL2 = 57482,
    AARCH64_SYSREG_CPTR_EL3 = 61578,
    AARCH64_SYSREG_CSSELR_EL1 = 53248,
    AARCH64_SYSREG_CTR_EL0 = 55297,
    AARCH64_SYSREG_CURRENTEL = 49682,
    AARCH64_SYSREG_DACR32_EL2 = 57728,
    AARCH64_SYSREG_DAIF = 55825,
    AARCH64_SYSREG_DBGAUTHSTATUS_EL1 = 33782,
    AARCH64_SYSREG_DBGBCR0_EL1 = 32773,
    AARCH64_SYSREG_DBGBCR10_EL1 = 32853,
    AARCH64_SYSREG_DBGBCR11_EL1 = 32861,
    AARCH64_SYSREG_DBGBCR12_EL1 = 32869,
    AARCH64_SYSREG_DBGBCR13_EL1 = 32877,
    AARCH64_SYSREG_DBGBCR14_EL1 = 32885,
    AARCH64_SYSREG_DBGBCR15_EL1 = 32893,
    AARCH64_SYSREG_DBGBCR1_EL1 = 32781,
    AARCH64_SYSREG_DBGBCR2_EL1 = 32789,
    AARCH64_SYSREG_DBGBCR3_EL1 = 32797,
    AARCH64_SYSREG_DBGBCR4_EL1 = 32805,
    AARCH64_SYSREG_DBGBCR5_EL1 = 32813,
    AARCH64_SYSREG_DBGBCR6_EL1 = 32821,
    AARCH64_SYSREG_DBGBCR7_EL1 = 32829,
    AARCH64_SYSREG_DBGBCR8_EL1 = 32837,
    AARCH64_SYSREG_DBGBCR9_EL1 = 32845,
    AARCH64_SYSREG_DBGBVR0_EL1 = 32772,
    AARCH64_SYSREG_DBGBVR10_EL1 = 32852,
    AARCH64_SYSREG_DBGBVR11_EL1 = 32860,
    AARCH64_SYSREG_DBGBVR12_EL1 = 32868,
    AARCH64_SYSREG_DBGBVR13_EL1 = 32876,
    AARCH64_SYSREG_DBGBVR14_EL1 = 32884,
    AARCH64_SYSREG_DBGBVR15_EL1 = 32892,
    AARCH64_SYSREG_DBGBVR1_EL1 = 32780,
    AARCH64_SYSREG_DBGBVR2_EL1 = 32788,
    AARCH64_SYSREG_DBGBVR3_EL1 = 32796,
    AARCH64_SYSREG_DBGBVR4_EL1 = 32804,
    AARCH64_SYSREG_DBGBVR5_EL1 = 32812,
    AARCH64_SYSREG_DBGBVR6_EL1 = 32820,
    AARCH64_SYSREG_DBGBVR7_EL1 = 32828,
    AARCH64_SYSREG_DBGBVR8_EL1 = 32836,
    AARCH64_SYSREG_DBGBVR9_EL1 = 32844,
    AARCH64_SYSREG_DBGCLAIMCLR_EL1 = 33742,
    AARCH64_SYSREG_DBGCLAIMSET_EL1 = 33734,
    AARCH64_SYSREG_DBGDTRRX_EL0 = 38952,
    AARCH64_SYSREG_DBGDTR_EL0 = 38944,
    AARCH64_SYSREG_DBGPRCR_EL1 = 32932,
    AARCH64_SYSREG_DBGVCR32_EL2 = 41016,
    AARCH64_SYSREG_DBGWCR0_EL1 = 32775,
    AARCH64_SYSREG_DBGWCR10_EL1 = 32855,
    AARCH64_SYSREG_DBGWCR11_EL1 = 32863,
    AARCH64_SYSREG_DBGWCR12_EL1 = 32871,
    AARCH64_SYSREG_DBGWCR13_EL1 = 32879,
    AARCH64_SYSREG_DBGWCR14_EL1 = 32887,
    AARCH64_SYSREG_DBGWCR15_EL1 = 32895,
    AARCH64_SYSREG_DBGWCR1_EL1 = 32783,
    AARCH64_SYSREG_DBGWCR2_EL1 = 32791,
    AARCH64_SYSREG_DBGWCR3_EL1 = 32799,
    AARCH64_SYSREG_DBGWCR4_EL1 = 32807,
    AARCH64_SYSREG_DBGWCR5_EL1 = 32815,
    AARCH64_SYSREG_DBGWCR6_EL1 = 32823,
    AARCH64_SYSREG_DBGWCR7_EL1 = 32831,
    AARCH64_SYSREG_DBGWCR8_EL1 = 32839,
    AARCH64_SYSREG_DBGWCR9_EL1 = 32847,
    AARCH64_SYSREG_DBGWVR0_EL1 = 32774,
    AARCH64_SYSREG_DBGWVR10_EL1 = 32854,
    AARCH64_SYSREG_DBGWVR11_EL1 = 32862,
    AARCH64_SYSREG_DBGWVR12_EL1 = 32870,
    AARCH64_SYSREG_DBGWVR13_EL1 = 32878,
    AARCH64_SYSREG_DBGWVR14_EL1 = 32886,
    AARCH64_SYSREG_DBGWVR15_EL1 = 32894,
    AARCH64_SYSREG_DBGWVR1_EL1 = 32782,
    AARCH64_SYSREG_DBGWVR2_EL1 = 32790,
    AARCH64_SYSREG_DBGWVR3_EL1 = 32798,
    AARCH64_SYSREG_DBGWVR4_EL1 = 32806,
    AARCH64_SYSREG_DBGWVR5_EL1 = 32814,
    AARCH64_SYSREG_DBGWVR6_EL1 = 32822,
    AARCH64_SYSREG_DBGWVR7_EL1 = 32830,
    AARCH64_SYSREG_DBGWVR8_EL1 = 32838,
    AARCH64_SYSREG_DBGWVR9_EL1 = 32846,
    AARCH64_SYSREG_DCZID_EL0 = 55303,
    AARCH64_SYSREG_DISR_EL1 = 50697,
    AARCH64_SYSREG_DIT = 55829,
    AARCH64_SYSREG_DLR_EL0 = 55849,
    AARCH64_SYSREG_DSPSR_EL0 = 55848,
    AARCH64_SYSREG_ELR_EL1 = 49665,
    AARCH64_SYSREG_ELR_EL12 = 59905,
    AARCH64_SYSREG_ELR_EL2 = 57857,
    AARCH64_SYSREG_ELR_EL3 = 61953,
    AARCH64_SYSREG_ERRIDR_EL1 = 49816,
    AARCH64_SYSREG_ERRSELR_EL1 = 49817,
    AARCH64_SYSREG_ERXADDR_EL1 = 49827,
    AARCH64_SYSREG_ERXCTLR_EL1 = 49825,
    AARCH64_SYSREG_ERXFR_EL1 = 49824,
    AARCH64_SYSREG_ERXGSR_EL1 = 49818,
    AARCH64_SYSREG_ERXMISC0_EL1 = 49832,
    AARCH64_SYSREG_ERXMISC1_EL1 = 49833,
    AARCH64_SYSREG_ERXMISC2_EL1 = 49834,
    AARCH64_SYSREG_ERXMISC3_EL1 = 49835,
    AARCH64_SYSREG_ERXPFGCDN_EL1 = 49830,
    AARCH64_SYSREG_ERXPFGCTL_EL1 = 49829,
    AARCH64_SYSREG_ERXPFGF_EL1 = 49828,
    AARCH64_SYSREG_ERXSTATUS_EL1 = 49826,
    AARCH64_SYSREG_ESR_EL1 = 49808,
    AARCH64_SYSREG_ESR_EL12 = 60048,
    AARCH64_SYSREG_ESR_EL2 = 58000,
    AARCH64_SYSREG_ESR_EL3 = 62096,
    AARCH64_SYSREG_FAR_EL1 = 49920,
    AARCH64_SYSREG_FAR_EL12 = 60160,
    AARCH64_SYSREG_FAR_EL2 = 58112,
    AARCH64_SYSREG_FAR_EL3 = 62208,
    AARCH64_SYSREG_FGWTE3_EL3 = 61581,
    AARCH64_SYSREG_FPCR = 55840,
    AARCH64_SYSREG_FPEXC32_EL2 = 58008,
    AARCH64_SYSREG_FPMR = 55842,
    AARCH64_SYSREG_FPSR = 55841,
    AARCH64_SYSREG_GCR_EL1 = 49286,
    AARCH64_SYSREG_GCSCRE0_EL1 = 49450,
    AARCH64_SYSREG_GCSCR_EL1 = 49448,
    AARCH64_SYSREG_GCSCR_EL12 = 59688,
    AARCH64_SYSREG_GCSCR_EL2 = 57640,
    AARCH64_SYSREG_GCSCR_EL3 = 61736,
    AARCH64_SYSREG_GCSPR_EL0 = 55593,
    AARCH64_SYSREG_GCSPR_EL1 = 49449,
    AARCH64_SYSREG_GCSPR_EL12 = 59689,
    AARCH64_SYSREG_GCSPR_EL2 = 57641,
    AARCH64_SYSREG_GCSPR_EL3 = 61737,
    AARCH64_SYSREG_GMID_EL1 = 51204,
    AARCH64_SYSREG_GPCCR_EL3 = 61710,
    AARCH64_SYSREG_GPTBR_EL3 = 61708,
    AARCH64_SYSREG_HACDBSBR_EL2 = 57628,
    AARCH64_SYSREG_HACDBSCONS_EL2 = 57629,
    AARCH64_SYSREG_HACR_EL2 = 57487,
    AARCH64_SYSREG_HAFGRTR_EL2 = 57742,
    AARCH64_SYSREG_HCRX_EL2 = 57490,
    AARCH64_SYSREG_HCR_EL2 = 57480,
    AARCH64_SYSREG_HDBSSBR_EL2 = 57626,
    AARCH64_SYSREG_HDBSSPROD_EL2 = 57627,
    AARCH64_SYSREG_HDFGRTR2_EL2 = 57736,
    AARCH64_SYSREG_HDFGRTR_EL2 = 57740,
    AARCH64_SYSREG_HDFGWTR2_EL2 = 57737,
    AARCH64_SYSREG_HDFGWTR_EL2 = 57741,
    AARCH64_SYSREG_HFGITR2_EL2 = 57743,
    AARCH64_SYSREG_HFGITR_EL2 = 57486,
    AARCH64_SYSREG_HFGRTR2_EL2 = 57738,
    AARCH64_SYSREG_HFGRTR_EL2 = 57484,
    AARCH64_SYSREG_HFGWTR2_EL2 = 57739,
    AARCH64_SYSREG_HFGWTR_EL2 = 57485,
    AARCH64_SYSREG_HPFAR_EL2 = 58116,
    AARCH64_SYSREG_HSTR_EL2 = 57483,
    AARCH64_SYSREG_ICC_AP0R0_EL1 = 50756,
    AARCH64_SYSREG_ICC_AP0R1_EL1 = 50757,
    AARCH64_SYSREG_ICC_AP0R2_EL1 = 50758,
    AARCH64_SYSREG_ICC_AP0R3_EL1 = 50759,
    AARCH64_SYSREG_ICC_AP1R0_EL1 = 50760,
    AARCH64_SYSREG_ICC_AP1R1_EL1 = 50761,
    AARCH64_SYSREG_ICC_AP1R2_EL1 = 50762,
    AARCH64_SYSREG_ICC_AP1R3_EL1 = 50763,
    AARCH64_SYSREG_ICC_ASGI1R_EL1 = 50782,
    AARCH64_SYSREG_ICC_BPR0_EL1 = 50755,
    AARCH64_SYSREG_ICC_BPR1_EL1 = 50787,
    AARCH64_SYSREG_ICC_CTLR_EL1 = 50788,
    AARCH64_SYSREG_ICC_CTLR_EL3 = 63076,
    AARCH64_SYSREG_ICC_DIR_EL1 = 50777,
    AARCH64_SYSREG_ICC_EOIR0_EL1 = 50753,
    AARCH64_SYSREG_ICC_EOIR1_EL1 = 50785,
    AARCH64_SYSREG_ICC_HPPIR0_EL1 = 50754,
    AARCH64_SYSREG_ICC_HPPIR1_EL1 = 50786,
    AARCH64_SYSREG_ICC_IAR0_EL1 = 50752,
    AARCH64_SYSREG_ICC_IAR1_EL1 = 50784,
    AARCH64_SYSREG_ICC_IGRPEN0_EL1 = 50790,
    AARCH64_SYSREG_ICC_IGRPEN1_EL1 = 50791,
    AARCH64_SYSREG_ICC_IGRPEN1_EL3 = 63079,
    AARCH64_SYSREG_ICC_NMIAR1_EL1 = 50765,
    AARCH64_SYSREG_ICC_PMR_EL1 = 49712,
    AARCH64_SYSREG_ICC_RPR_EL1 = 50779,
    AARCH64_SYSREG_ICC_SGI0R_EL1 = 50783,
    AARCH64_SYSREG_ICC_SGI1R_EL1 = 50781,
    AARCH64_SYSREG_ICC_SRE_EL1 = 50789,
    AARCH64_SYSREG_ICC_SRE_EL2 = 58957,
    AARCH64_SYSREG_ICC_SRE_EL3 = 63077,
    AARCH64_SYSREG_ICH_AP0R0_EL2 = 58944,
    AARCH64_SYSREG_ICH_AP0R1_EL2 = 58945,
    AARCH64_SYSREG_ICH_AP0R2_EL2 = 58946,
    AARCH64_SYSREG_ICH_AP0R3_EL2 = 58947,
    AARCH64_SYSREG_ICH_AP1R0_EL2 = 58952,
    AARCH64_SYSREG_ICH_AP1R1_EL2 = 58953,
    AARCH64_SYSREG_ICH_AP1R2_EL2 = 58954,
    AARCH64_SYSREG_ICH_AP1R3_EL2 = 58955,
    AARCH64_SYSREG_ICH_EISR_EL2 = 58971,
    AARCH64_SYSREG_ICH_ELRSR_EL2 = 58973,
    AARCH64_SYSREG_ICH_HCR_EL2 = 58968,
    AARCH64_SYSREG_ICH_LR0_EL2 = 58976,
    AARCH64_SYSREG_ICH_LR10_EL2 = 58986,
    AARCH64_SYSREG_ICH_LR11_EL2 = 58987,
    AARCH64_SYSREG_ICH_LR12_EL2 = 58988,
    AARCH64_SYSREG_ICH_LR13_EL2 = 58989,
    AARCH64_SYSREG_ICH_LR14_EL2 = 58990,
    AARCH64_SYSREG_ICH_LR15_EL2 = 58991,
    AARCH64_SYSREG_ICH_LR1_EL2 = 58977,
    AARCH64_SYSREG_ICH_LR2_EL2 = 58978,
    AARCH64_SYSREG_ICH_LR3_EL2 = 58979,
    AARCH64_SYSREG_ICH_LR4_EL2 = 58980,
    AARCH64_SYSREG_ICH_LR5_EL2 = 58981,
    AARCH64_SYSREG_ICH_LR6_EL2 = 58982,
    AARCH64_SYSREG_ICH_LR7_EL2 = 58983,
    AARCH64_SYSREG_ICH_LR8_EL2 = 58984,
    AARCH64_SYSREG_ICH_LR9_EL2 = 58985,
    AARCH64_SYSREG_ICH_MISR_EL2 = 58970,
    AARCH64_SYSREG_ICH_VMCR_EL2 = 58975,
    AARCH64_SYSREG_ICH_VTR_EL2 = 58969,
    AARCH64_SYSREG_ID_AA64AFR0_EL1 = 49196,
    AARCH64_SYSREG_ID_AA64AFR1_EL1 = 49197,
    AARCH64_SYSREG_ID_AA64DFR0_EL1 = 49192,
    AARCH64_SYSREG_ID_AA64DFR1_EL1 = 49193,
    AARCH64_SYSREG_ID_AA64DFR2_EL1 = 49194,
    AARCH64_SYSREG_ID_AA64FPFR0_EL1 = 49191,
    AARCH64_SYSREG_ID_AA64ISAR0_EL1 = 49200,
    AARCH64_SYSREG_ID_AA64ISAR1_EL1 = 49201,
    AARCH64_SYSREG_ID_AA64ISAR2_EL1 = 49202,
    AARCH64_SYSREG_ID_AA64ISAR3_EL1 = 49203,
    AARCH64_SYSREG_ID_AA64MMFR0_EL1 = 49208,
    AARCH64_SYSREG_ID_AA64MMFR1_EL1 = 49209,
    AARCH64_SYSREG_ID_AA64MMFR2_EL1 = 49210,
    AARCH64_SYSREG_ID_AA64MMFR3_EL1 = 49211,
    AARCH64_SYSREG_ID_AA64MMFR4_EL1 = 49212,
    AARCH64_SYSREG_ID_AA64PFR0_EL1 = 49184,
    AARCH64_SYSREG_ID_AA64PFR1_EL1 = 49185,
    AARCH64_SYSREG_ID_AA64PFR2_EL1 = 49186,
    AARCH64_SYSREG_ID_AA64SMFR0_EL1 = 49189,
    AARCH64_SYSREG_ID_AA64ZFR0_EL1 = 49188,
    AARCH64_SYSREG_ID_AFR0_EL1 = 49163,
    AARCH64_SYSREG_ID_DFR0_EL1 = 49162,
    AARCH64_SYSREG_ID_DFR1_EL1 = 49181,
    AARCH64_SYSREG_ID_ISAR0_EL1 = 49168,
    AARCH64_SYSREG_ID_ISAR1_EL1 = 49169,
    AARCH64_SYSREG_ID_ISAR2_EL1 = 49170,
    AARCH64_SYSREG_ID_ISAR3_EL1 = 49171,
    AARCH64_SYSREG_ID_ISAR4_EL1 = 49172,
    AARCH64_SYSREG_ID_ISAR5_EL1 = 49173,
    AARCH64_SYSREG_ID_ISAR6_EL1 = 49175,
    AARCH64_SYSREG_ID_MMFR0_EL1 = 49164,
    AARCH64_SYSREG_ID_MMFR1_EL1 = 49165,
    AARCH64_SYSREG_ID_MMFR2_EL1 = 49166,
    AARCH64_SYSREG_ID_MMFR3_EL1 = 49167,
    AARCH64_SYSREG_ID_MMFR4_EL1 = 49174,
    AARCH64_SYSREG_ID_MMFR5_EL1 = 49182,
    AARCH64_SYSREG_ID_PFR0_EL1 = 49160,
    AARCH64_SYSREG_ID_PFR1_EL1 = 49161,
    AARCH64_SYSREG_ID_PFR2_EL1 = 49180,
    AARCH64_SYSREG_IFSR32_EL2 = 57985,
    AARCH64_SYSREG_ISR_EL1 = 50696,
    AARCH64_SYSREG_LORC_EL1 = 50467,
    AARCH64_SYSREG_LOREA_EL1 = 50465,
    AARCH64_SYSREG_LORID_EL1 = 50471,
    AARCH64_SYSREG_LORN_EL1 = 50466,
    AARCH64_SYSREG_LORSA_EL1 = 50464,
    AARCH64_SYSREG_MAIR2_EL1 = 50449,
    AARCH64_SYSREG_MAIR2_EL12 = 60689,
    AARCH64_SYSREG_MAIR2_EL2 = 58633,
    AARCH64_SYSREG_MAIR2_EL3 = 62729,
    AARCH64_SYSREG_MAIR_EL1 = 50448,
    AARCH64_SYSREG_MAIR_EL12 = 60688,
    AARCH64_SYSREG_MAIR_EL2 = 58640,
    AARCH64_SYSREG_MAIR_EL3 = 62736,
    AARCH64_SYSREG_MDCCINT_EL1 = 32784,
    AARCH64_SYSREG_MDCCSR_EL0 = 38920,
    AARCH64_SYSREG_MDCR_EL2 = 57481,
    AARCH64_SYSREG_MDCR_EL3 = 61593,
    AARCH64_SYSREG_MDRAR_EL1 = 32896,
    AARCH64_SYSREG_MDSCR_EL1 = 32786,
    AARCH64_SYSREG_MDSELR_EL1 = 32802,
    AARCH64_SYSREG_MDSTEPOP_EL1 = 32810,
    AARCH64_SYSREG_MECIDR_EL2 = 58695,
    AARCH64_SYSREG_MECID_A0_EL2 = 58689,
    AARCH64_SYSREG_MECID_A1_EL2 = 58691,
    AARCH64_SYSREG_MECID_P0_EL2 = 58688,
    AARCH64_SYSREG_MECID_P1_EL2 = 58690,
    AARCH64_SYSREG_MECID_RL_A_EL3 = 62801,
    AARCH64_SYSREG_MFAR_EL3 = 62213,
    AARCH64_SYSREG_MIDR_EL1 = 49152,
    AARCH64_SYSREG_MPAM0_EL1 = 50473,
    AARCH64_SYSREG_MPAM1_EL1 = 50472,
    AARCH64_SYSREG_MPAM1_EL12 = 60712,
    AARCH64_SYSREG_MPAM2_EL2 = 58664,
    AARCH64_SYSREG_MPAM3_EL3 = 62760,
    AARCH64_SYSREG_MPAMHCR_EL2 = 58656,
    AARCH64_SYSREG_MPAMIDR_EL1 = 50468,
    AARCH64_SYSREG_MPAMSM_EL1 = 50475,
    AARCH64_SYSREG_MPAMVPM0_EL2 = 58672,
    AARCH64_SYSREG_MPAMVPM1_EL2 = 58673,
    AARCH64_SYSREG_MPAMVPM2_EL2 = 58674,
    AARCH64_SYSREG_MPAMVPM3_EL2 = 58675,
    AARCH64_SYSREG_MPAMVPM4_EL2 = 58676,
    AARCH64_SYSREG_MPAMVPM5_EL2 = 58677,
    AARCH64_SYSREG_MPAMVPM6_EL2 = 58678,
    AARCH64_SYSREG_MPAMVPM7_EL2 = 58679,
    AARCH64_SYSREG_MPAMVPMV_EL2 = 58657,
    AARCH64_SYSREG_MPIDR_EL1 = 49157,
    AARCH64_SYSREG_MPUIR_EL1 = 49156,
    AARCH64_SYSREG_MPUIR_EL2 = 57348,
    AARCH64_SYSREG_MVFR0_EL1 = 49176,
    AARCH64_SYSREG_MVFR1_EL1 = 49177,
    AARCH64_SYSREG_MVFR2_EL1 = 49178,
    AARCH64_SYSREG_NZCV = 55824,
    AARCH64_SYSREG_OSDLR_EL1 = 32924,
    AARCH64_SYSREG_OSDTRRX_EL1 = 32770,
    AARCH64_SYSREG_OSDTRTX_EL1 = 32794,
    AARCH64_SYSREG_OSECCR_EL1 = 32818,
    AARCH64_SYSREG_OSLAR_EL1 = 32900,
    AARCH64_SYSREG_OSLSR_EL1 = 32908,
    AARCH64_SYSREG_PAN = 49683,
    AARCH64_SYSREG_PAR_EL1 = 50080,
    AARCH64_SYSREG_PFAR_EL1 = 49925,
    AARCH64_SYSREG_PFAR_EL12 = 60165,
    AARCH64_SYSREG_PFAR_EL2 = 58117,
    AARCH64_SYSREG_PIRE0_EL1 = 50450,
    AARCH64_SYSREG_PIRE0_EL12 = 60690,
    AARCH64_SYSREG_PIRE0_EL2 = 58642,
    AARCH64_SYSREG_PIR_EL1 = 50451,
    AARCH64_SYSREG_PIR_EL12 = 60691,
    AARCH64_SYSREG_PIR_EL2 = 58643,
    AARCH64_SYSREG_PIR_EL3 = 62739,
    AARCH64_SYSREG_PM = 49689,
    AARCH64_SYSREG_PMBIDR_EL1 = 50391,
    AARCH64_SYSREG_PMBLIMITR_EL1 = 50384,
    AARCH64_SYSREG_PMBPTR_EL1 = 50385,
    AARCH64_SYSREG_PMBSR_EL1 = 50387,
    AARCH64_SYSREG_PMCCFILTR_EL0 = 57215,
    AARCH64_SYSREG_PMCCNTR_EL0 = 56552,
    AARCH64_SYSREG_PMCCNTSVR_EL1 = 34655,
    AARCH64_SYSREG_PMCEID0_EL0 = 56550,
    AARCH64_SYSREG_PMCEID1_EL0 = 56551,
    AARCH64_SYSREG_PMCNTENCLR_EL0 = 56546,
    AARCH64_SYSREG_PMCNTENSET_EL0 = 56545,
    AARCH64_SYSREG_PMCR_EL0 = 56544,
    AARCH64_SYSREG_PMECR_EL1 = 50421,
    AARCH64_SYSREG_PMEVCNTR0_EL0 = 57152,
    AARCH64_SYSREG_PMEVCNTR10_EL0 = 57162,
    AARCH64_SYSREG_PMEVCNTR11_EL0 = 57163,
    AARCH64_SYSREG_PMEVCNTR12_EL0 = 57164,
    AARCH64_SYSREG_PMEVCNTR13_EL0 = 57165,
    AARCH64_SYSREG_PMEVCNTR14_EL0 = 57166,
    AARCH64_SYSREG_PMEVCNTR15_EL0 = 57167,
    AARCH64_SYSREG_PMEVCNTR16_EL0 = 57168,
    AARCH64_SYSREG_PMEVCNTR17_EL0 = 57169,
    AARCH64_SYSREG_PMEVCNTR18_EL0 = 57170,
    AARCH64_SYSREG_PMEVCNTR19_EL0 = 57171,
    AARCH64_SYSREG_PMEVCNTR1_EL0 = 57153,
    AARCH64_SYSREG_PMEVCNTR20_EL0 = 57172,
    AARCH64_SYSREG_PMEVCNTR21_EL0 = 57173,
    AARCH64_SYSREG_PMEVCNTR22_EL0 = 57174,
    AARCH64_SYSREG_PMEVCNTR23_EL0 = 57175,
    AARCH64_SYSREG_PMEVCNTR24_EL0 = 57176,
    AARCH64_SYSREG_PMEVCNTR25_EL0 = 57177,
    AARCH64_SYSREG_PMEVCNTR26_EL0 = 57178,
    AARCH64_SYSREG_PMEVCNTR27_EL0 = 57179,
    AARCH64_SYSREG_PMEVCNTR28_EL0 = 57180,
    AARCH64_SYSREG_PMEVCNTR29_EL0 = 57181,
    AARCH64_SYSREG_PMEVCNTR2_EL0 = 57154,
    AARCH64_SYSREG_PMEVCNTR30_EL0 = 57182,
    AARCH64_SYSREG_PMEVCNTR3_EL0 = 57155,
    AARCH64_SYSREG_PMEVCNTR4_EL0 = 57156,
    AARCH64_SYSREG_PMEVCNTR5_EL0 = 57157,
    AARCH64_SYSREG_PMEVCNTR6_EL0 = 57158,
    AARCH64_SYSREG_PMEVCNTR7_EL0 = 57159,
    AARCH64_SYSREG_PMEVCNTR8_EL0 = 57160,
    AARCH64_SYSREG_PMEVCNTR9_EL0 = 57161,
    AARCH64_SYSREG_PMEVCNTSVR0_EL1 = 34624,
    AARCH64_SYSREG_PMEVCNTSVR10_EL1 = 34634,
    AARCH64_SYSREG_PMEVCNTSVR11_EL1 = 34635,
    AARCH64_SYSREG_PMEVCNTSVR12_EL1 = 34636,
    AARCH64_SYSREG_PMEVCNTSVR13_EL1 = 34637,
    AARCH64_SYSREG_PMEVCNTSVR14_EL1 = 34638,
    AARCH64_SYSREG_PMEVCNTSVR15_EL1 = 34639,
    AARCH64_SYSREG_PMEVCNTSVR16_EL1 = 34640,
    AARCH64_SYSREG_PMEVCNTSVR17_EL1 = 34641,
    AARCH64_SYSREG_PMEVCNTSVR18_EL1 = 34642,
    AARCH64_SYSREG_PMEVCNTSVR19_EL1 = 34643,
    AARCH64_SYSREG_PMEVCNTSVR1_EL1 = 34625,
    AARCH64_SYSREG_PMEVCNTSVR20_EL1 = 34644,
    AARCH64_SYSREG_PMEVCNTSVR21_EL1 = 34645,
    AARCH64_SYSREG_PMEVCNTSVR22_EL1 = 34646,
    AARCH64_SYSREG_PMEVCNTSVR23_EL1 = 34647,
    AARCH64_SYSREG_PMEVCNTSVR24_EL1 = 34648,
    AARCH64_SYSREG_PMEVCNTSVR25_EL1 = 34649,
    AARCH64_SYSREG_PMEVCNTSVR26_EL1 = 34650,
    AARCH64_SYSREG_PMEVCNTSVR27_EL1 = 34651,
    AARCH64_SYSREG_PMEVCNTSVR28_EL1 = 34652,
    AARCH64_SYSREG_PMEVCNTSVR29_EL1 = 34653,
    AARCH64_SYSREG_PMEVCNTSVR2_EL1 = 34626,
    AARCH64_SYSREG_PMEVCNTSVR30_EL1 = 34654,
    AARCH64_SYSREG_PMEVCNTSVR3_EL1 = 34627,
    AARCH64_SYSREG_PMEVCNTSVR4_EL1 = 34628,
    AARCH64_SYSREG_PMEVCNTSVR5_EL1 = 34629,
    AARCH64_SYSREG_PMEVCNTSVR6_EL1 = 34630,
    AARCH64_SYSREG_PMEVCNTSVR7_EL1 = 34631,
    AARCH64_SYSREG_PMEVCNTSVR8_EL1 = 34632,
    AARCH64_SYSREG_PMEVCNTSVR9_EL1 = 34633,
    AARCH64_SYSREG_PMEVTYPER0_EL0 = 57184,
    AARCH64_SYSREG_PMEVTYPER10_EL0 = 57194,
    AARCH64_SYSREG_PMEVTYPER11_EL0 = 57195,
    AARCH64_SYSREG_PMEVTYPER12_EL0 = 57196,
    AARCH64_SYSREG_PMEVTYPER13_EL0 = 57197,
    AARCH64_SYSREG_PMEVTYPER14_EL0 = 57198,
    AARCH64_SYSREG_PMEVTYPER15_EL0 = 57199,
    AARCH64_SYSREG_PMEVTYPER16_EL0 = 57200,
    AARCH64_SYSREG_PMEVTYPER17_EL0 = 57201,
    AARCH64_SYSREG_PMEVTYPER18_EL0 = 57202,
    AARCH64_SYSREG_PMEVTYPER19_EL0 = 57203,
    AARCH64_SYSREG_PMEVTYPER1_EL0 = 57185,
    AARCH64_SYSREG_PMEVTYPER20_EL0 = 57204,
    AARCH64_SYSREG_PMEVTYPER21_EL0 = 57205,
    AARCH64_SYSREG_PMEVTYPER22_EL0 = 57206,
    AARCH64_SYSREG_PMEVTYPER23_EL0 = 57207,
    AARCH64_SYSREG_PMEVTYPER24_EL0 = 57208,
    AARCH64_SYSREG_PMEVTYPER25_EL0 = 57209,
    AARCH64_SYSREG_PMEVTYPER26_EL0 = 57210,
    AARCH64_SYSREG_PMEVTYPER27_EL0 = 57211,
    AARCH64_SYSREG_PMEVTYPER28_EL0 = 57212,
    AARCH64_SYSREG_PMEVTYPER29_EL0 = 57213,
    AARCH64_SYSREG_PMEVTYPER2_EL0 = 57186,
    AARCH64_SYSREG_PMEVTYPER30_EL0 = 57214,
    AARCH64_SYSREG_PMEVTYPER3_EL0 = 57187,
    AARCH64_SYSREG_PMEVTYPER4_EL0 = 57188,
    AARCH64_SYSREG_PMEVTYPER5_EL0 = 57189,
    AARCH64_SYSREG_PMEVTYPER6_EL0 = 57190,
    AARCH64_SYSREG_PMEVTYPER7_EL0 = 57191,
    AARCH64_SYSREG_PMEVTYPER8_EL0 = 57192,
    AARCH64_SYSREG_PMEVTYPER9_EL0 = 57193,
    AARCH64_SYSREG_PMIAR_EL1 = 50423,
    AARCH64_SYSREG_PMICFILTR_EL0 = 56496,
    AARCH64_SYSREG_PMICNTR_EL0 = 56480,
    AARCH64_SYSREG_PMICNTSVR_EL1 = 34656,
    AARCH64_SYSREG_PMINTENCLR_EL1 = 50418,
    AARCH64_SYSREG_PMINTENSET_EL1 = 50417,
    AARCH64_SYSREG_PMMIR_EL1 = 50422,
    AARCH64_SYSREG_PMOVSCLR_EL0 = 56547,
    AARCH64_SYSREG_PMOVSSET_EL0 = 56563,
    AARCH64_SYSREG_PMSCR_EL1 = 50376,
    AARCH64_SYSREG_PMSCR_EL12 = 60616,
    AARCH64_SYSREG_PMSCR_EL2 = 58568,
    AARCH64_SYSREG_PMSDSFR_EL1 = 50388,
    AARCH64_SYSREG_PMSELR_EL0 = 56549,
    AARCH64_SYSREG_PMSEVFR_EL1 = 50381,
    AARCH64_SYSREG_PMSFCR_EL1 = 50380,
    AARCH64_SYSREG_PMSICR_EL1 = 50378,
    AARCH64_SYSREG_PMSIDR_EL1 = 50383,
    AARCH64_SYSREG_PMSIRR_EL1 = 50379,
    AARCH64_SYSREG_PMSLATFR_EL1 = 50382,
    AARCH64_SYSREG_PMSNEVFR_EL1 = 50377,
    AARCH64_SYSREG_PMSSCR_EL1 = 50411,
    AARCH64_SYSREG_PMSWINC_EL0 = 56548,
    AARCH64_SYSREG_PMUACR_EL1 = 50420,
    AARCH64_SYSREG_PMUSERENR_EL0 = 56560,
    AARCH64_SYSREG_PMXEVCNTR_EL0 = 56554,
    AARCH64_SYSREG_PMXEVTYPER_EL0 = 56553,
    AARCH64_SYSREG_PMZR_EL0 = 56556,
    AARCH64_SYSREG_POR_EL0 = 56596,
    AARCH64_SYSREG_POR_EL1 = 50452,
    AARCH64_SYSREG_POR_EL12 = 60692,
    AARCH64_SYSREG_POR_EL2 = 58644,
    AARCH64_SYSREG_POR_EL3 = 62740,
    AARCH64_SYSREG_PRBAR10_EL1 = 50024,
    AARCH64_SYSREG_PRBAR10_EL2 = 58216,
    AARCH64_SYSREG_PRBAR11_EL1 = 50028,
    AARCH64_SYSREG_PRBAR11_EL2 = 58220,
    AARCH64_SYSREG_PRBAR12_EL1 = 50032,
    AARCH64_SYSREG_PRBAR12_EL2 = 58224,
    AARCH64_SYSREG_PRBAR13_EL1 = 50036,
    AARCH64_SYSREG_PRBAR13_EL2 = 58228,
    AARCH64_SYSREG_PRBAR14_EL1 = 50040,
    AARCH64_SYSREG_PRBAR14_EL2 = 58232,
    AARCH64_SYSREG_PRBAR15_EL1 = 50044,
    AARCH64_SYSREG_PRBAR15_EL2 = 58236,
    AARCH64_SYSREG_PRBAR1_EL1 = 49988,
    AARCH64_SYSREG_PRBAR1_EL2 = 58180,
    AARCH64_SYSREG_PRBAR2_EL1 = 49992,
    AARCH64_SYSREG_PRBAR2_EL2 = 58184,
    AARCH64_SYSREG_PRBAR3_EL1 = 49996,
    AARCH64_SYSREG_PRBAR3_EL2 = 58188,
    AARCH64_SYSREG_PRBAR4_EL1 = 50000,
    AARCH64_SYSREG_PRBAR4_EL2 = 58192,
    AARCH64_SYSREG_PRBAR5_EL1 = 50004,
    AARCH64_SYSREG_PRBAR5_EL2 = 58196,
    AARCH64_SYSREG_PRBAR6_EL1 = 50008,
    AARCH64_SYSREG_PRBAR6_EL2 = 58200,
    AARCH64_SYSREG_PRBAR7_EL1 = 50012,
    AARCH64_SYSREG_PRBAR7_EL2 = 58204,
    AARCH64_SYSREG_PRBAR8_EL1 = 50016,
    AARCH64_SYSREG_PRBAR8_EL2 = 58208,
    AARCH64_SYSREG_PRBAR9_EL1 = 50020,
    AARCH64_SYSREG_PRBAR9_EL2 = 58212,
    AARCH64_SYSREG_PRBAR_EL1 = 49984,
    AARCH64_SYSREG_PRBAR_EL2 = 58176,
    AARCH64_SYSREG_PRENR_EL1 = 49929,
    AARCH64_SYSREG_PRENR_EL2 = 58121,
    AARCH64_SYSREG_PRLAR10_EL1 = 50025,
    AARCH64_SYSREG_PRLAR10_EL2 = 58217,
    AARCH64_SYSREG_PRLAR11_EL1 = 50029,
    AARCH64_SYSREG_PRLAR11_EL2 = 58221,
    AARCH64_SYSREG_PRLAR12_EL1 = 50033,
    AARCH64_SYSREG_PRLAR12_EL2 = 58225,
    AARCH64_SYSREG_PRLAR13_EL1 = 50037,
    AARCH64_SYSREG_PRLAR13_EL2 = 58229,
    AARCH64_SYSREG_PRLAR14_EL1 = 50041,
    AARCH64_SYSREG_PRLAR14_EL2 = 58233,
    AARCH64_SYSREG_PRLAR15_EL1 = 50045,
    AARCH64_SYSREG_PRLAR15_EL2 = 58237,
    AARCH64_SYSREG_PRLAR1_EL1 = 49989,
    AARCH64_SYSREG_PRLAR1_EL2 = 58181,
    AARCH64_SYSREG_PRLAR2_EL1 = 49993,
    AARCH64_SYSREG_PRLAR2_EL2 = 58185,
    AARCH64_SYSREG_PRLAR3_EL1 = 49997,
    AARCH64_SYSREG_PRLAR3_EL2 = 58189,
    AARCH64_SYSREG_PRLAR4_EL1 = 50001,
    AARCH64_SYSREG_PRLAR4_EL2 = 58193,
    AARCH64_SYSREG_PRLAR5_EL1 = 50005,
    AARCH64_SYSREG_PRLAR5_EL2 = 58197,
    AARCH64_SYSREG_PRLAR6_EL1 = 50009,
    AARCH64_SYSREG_PRLAR6_EL2 = 58201,
    AARCH64_SYSREG_PRLAR7_EL1 = 50013,
    AARCH64_SYSREG_PRLAR7_EL2 = 58205,
    AARCH64_SYSREG_PRLAR8_EL1 = 50017,
    AARCH64_SYSREG_PRLAR8_EL2 = 58209,
    AARCH64_SYSREG_PRLAR9_EL1 = 50021,
    AARCH64_SYSREG_PRLAR9_EL2 = 58213,
    AARCH64_SYSREG_PRLAR_EL1 = 49985,
    AARCH64_SYSREG_PRLAR_EL2 = 58177,
    AARCH64_SYSREG_PRSELR_EL1 = 49937,
    AARCH64_SYSREG_PRSELR_EL2 = 58129,
    AARCH64_SYSREG_RCWMASK_EL1 = 50822,
    AARCH64_SYSREG_RCWSMASK_EL1 = 50819,
    AARCH64_SYSREG_REVIDR_EL1 = 49158,
    AARCH64_SYSREG_RGSR_EL1 = 49285,
    AARCH64_SYSREG_RMR_EL1 = 50690,
    AARCH64_SYSREG_RMR_EL2 = 58882,
    AARCH64_SYSREG_RMR_EL3 = 62978,
    AARCH64_SYSREG_RNDR = 55584,
    AARCH64_SYSREG_RNDRRS = 55585,
    AARCH64_SYSREG_RVBAR_EL1 = 50689,
    AARCH64_SYSREG_RVBAR_EL2 = 58881,
    AARCH64_SYSREG_RVBAR_EL3 = 62977,
    AARCH64_SYSREG_S2PIR_EL2 = 58645,
    AARCH64_SYSREG_S2POR_EL1 = 50453,
    AARCH64_SYSREG_SCR_EL3 = 61576,
    AARCH64_SYSREG_SCTLR2_EL1 = 49283,
    AARCH64_SYSREG_SCTLR2_EL12 = 59523,
    AARCH64_SYSREG_SCTLR2_EL2 = 57475,
    AARCH64_SYSREG_SCTLR2_EL3 = 61571,
    AARCH64_SYSREG_SCTLR_EL1 = 49280,
    AARCH64_SYSREG_SCTLR_EL12 = 59520,
    AARCH64_SYSREG_SCTLR_EL2 = 57472,
    AARCH64_SYSREG_SCTLR_EL3 = 61568,
    AARCH64_SYSREG_SCXTNUM_EL0 = 56967,
    AARCH64_SYSREG_SCXTNUM_EL1 = 50823,
    AARCH64_SYSREG_SCXTNUM_EL12 = 61063,
    AARCH64_SYSREG_SCXTNUM_EL2 = 59015,
    AARCH64_SYSREG_SCXTNUM_EL3 = 63111,
    AARCH64_SYSREG_SDER32_EL2 = 57497,
    AARCH64_SYSREG_SDER32_EL3 = 61577,
    AARCH64_SYSREG_SMCR_EL1 = 49302,
    AARCH64_SYSREG_SMCR_EL12 = 59542,
    AARCH64_SYSREG_SMCR_EL2 = 57494,
    AARCH64_SYSREG_SMCR_EL3 = 61590,
    AARCH64_SYSREG_SMIDR_EL1 = 51206,
    AARCH64_SYSREG_SMPRIMAP_EL2 = 57493,
    AARCH64_SYSREG_SMPRI_EL1 = 49300,
    AARCH64_SYSREG_SPMACCESSR_EL1 = 34027,
    AARCH64_SYSREG_SPMACCESSR_EL12 = 44267,
    AARCH64_SYSREG_SPMACCESSR_EL2 = 42219,
    AARCH64_SYSREG_SPMACCESSR_EL3 = 46315,
    AARCH64_SYSREG_SPMCFGR_EL1 = 34031,
    AARCH64_SYSREG_SPMCGCR0_EL1 = 34024,
    AARCH64_SYSREG_SPMCGCR1_EL1 = 34025,
    AARCH64_SYSREG_SPMCNTENCLR_EL0 = 40162,
    AARCH64_SYSREG_SPMCNTENSET_EL0 = 40161,
    AARCH64_SYSREG_SPMCR_EL0 = 40160,
    AARCH64_SYSREG_SPMDEVAFF_EL1 = 34030,
    AARCH64_SYSREG_SPMDEVARCH_EL1 = 34029,
    AARCH64_SYSREG_SPMEVCNTR0_EL0 = 40704,
    AARCH64_SYSREG_SPMEVCNTR10_EL0 = 40714,
    AARCH64_SYSREG_SPMEVCNTR11_EL0 = 40715,
    AARCH64_SYSREG_SPMEVCNTR12_EL0 = 40716,
    AARCH64_SYSREG_SPMEVCNTR13_EL0 = 40717,
    AARCH64_SYSREG_SPMEVCNTR14_EL0 = 40718,
    AARCH64_SYSREG_SPMEVCNTR15_EL0 = 40719,
    AARCH64_SYSREG_SPMEVCNTR1_EL0 = 40705,
    AARCH64_SYSREG_SPMEVCNTR2_EL0 = 40706,
    AARCH64_SYSREG_SPMEVCNTR3_EL0 = 40707,
    AARCH64_SYSREG_SPMEVCNTR4_EL0 = 40708,
    AARCH64_SYSREG_SPMEVCNTR5_EL0 = 40709,
    AARCH64_SYSREG_SPMEVCNTR6_EL0 = 40710,
    AARCH64_SYSREG_SPMEVCNTR7_EL0 = 40711,
    AARCH64_SYSREG_SPMEVCNTR8_EL0 = 40712,
    AARCH64_SYSREG_SPMEVCNTR9_EL0 = 40713,
    AARCH64_SYSREG_SPMEVFILT2R0_EL0 = 40752,
    AARCH64_SYSREG_SPMEVFILT2R10_EL0 = 40762,
    AARCH64_SYSREG_SPMEVFILT2R11_EL0 = 40763,
    AARCH64_SYSREG_SPMEVFILT2R12_EL0 = 40764,
    AARCH64_SYSREG_SPMEVFILT2R13_EL0 = 40765,
    AARCH64_SYSREG_SPMEVFILT2R14_EL0 = 40766,
    AARCH64_SYSREG_SPMEVFILT2R15_EL0 = 40767,
    AARCH64_SYSREG_SPMEVFILT2R1_EL0 = 40753,
    AARCH64_SYSREG_SPMEVFILT2R2_EL0 = 40754,
    AARCH64_SYSREG_SPMEVFILT2R3_EL0 = 40755,
    AARCH64_SYSREG_SPMEVFILT2R4_EL0 = 40756,
    AARCH64_SYSREG_SPMEVFILT2R5_EL0 = 40757,
    AARCH64_SYSREG_SPMEVFILT2R6_EL0 = 40758,
    AARCH64_SYSREG_SPMEVFILT2R7_EL0 = 40759,
    AARCH64_SYSREG_SPMEVFILT2R8_EL0 = 40760,
    AARCH64_SYSREG_SPMEVFILT2R9_EL0 = 40761,
    AARCH64_SYSREG_SPMEVFILTR0_EL0 = 40736,
    AARCH64_SYSREG_SPMEVFILTR10_EL0 = 40746,
    AARCH64_SYSREG_SPMEVFILTR11_EL0 = 40747,
    AARCH64_SYSREG_SPMEVFILTR12_EL0 = 40748,
    AARCH64_SYSREG_SPMEVFILTR13_EL0 = 40749,
    AARCH64_SYSREG_SPMEVFILTR14_EL0 = 40750,
    AARCH64_SYSREG_SPMEVFILTR15_EL0 = 40751,
    AARCH64_SYSREG_SPMEVFILTR1_EL0 = 40737,
    AARCH64_SYSREG_SPMEVFILTR2_EL0 = 40738,
    AARCH64_SYSREG_SPMEVFILTR3_EL0 = 40739,
    AARCH64_SYSREG_SPMEVFILTR4_EL0 = 40740,
    AARCH64_SYSREG_SPMEVFILTR5_EL0 = 40741,
    AARCH64_SYSREG_SPMEVFILTR6_EL0 = 40742,
    AARCH64_SYSREG_SPMEVFILTR7_EL0 = 40743,
    AARCH64_SYSREG_SPMEVFILTR8_EL0 = 40744,
    AARCH64_SYSREG_SPMEVFILTR9_EL0 = 40745,
    AARCH64_SYSREG_SPMEVTYPER0_EL0 = 40720,
    AARCH64_SYSREG_SPMEVTYPER10_EL0 = 40730,
    AARCH64_SYSREG_SPMEVTYPER11_EL0 = 40731,
    AARCH64_SYSREG_SPMEVTYPER12_EL0 = 40732,
    AARCH64_SYSREG_SPMEVTYPER13_EL0 = 40733,
    AARCH64_SYSREG_SPMEVTYPER14_EL0 = 40734,
    AARCH64_SYSREG_SPMEVTYPER15_EL0 = 40735,
    AARCH64_SYSREG_SPMEVTYPER1_EL0 = 40721,
    AARCH64_SYSREG_SPMEVTYPER2_EL0 = 40722,
    AARCH64_SYSREG_SPMEVTYPER3_EL0 = 40723,
    AARCH64_SYSREG_SPMEVTYPER4_EL0 = 40724,
    AARCH64_SYSREG_SPMEVTYPER5_EL0 = 40725,
    AARCH64_SYSREG_SPMEVTYPER6_EL0 = 40726,
    AARCH64_SYSREG_SPMEVTYPER7_EL0 = 40727,
    AARCH64_SYSREG_SPMEVTYPER8_EL0 = 40728,
    AARCH64_SYSREG_SPMEVTYPER9_EL0 = 40729,
    AARCH64_SYSREG_SPMIIDR_EL1 = 34028,
    AARCH64_SYSREG_SPMINTENCLR_EL1 = 34034,
    AARCH64_SYSREG_SPMINTENSET_EL1 = 34033,
    AARCH64_SYSREG_SPMOVSCLR_EL0 = 40163,
    AARCH64_SYSREG_SPMOVSSET_EL0 = 40179,
    AARCH64_SYSREG_SPMROOTCR_EL3 = 46327,
    AARCH64_SYSREG_SPMSCR_EL1 = 48375,
    AARCH64_SYSREG_SPMSELR_EL0 = 40165,
    AARCH64_SYSREG_SPMZR_EL0 = 40164,
    AARCH64_SYSREG_SPSEL = 49680,
    AARCH64_SYSREG_SPSR_ABT = 57881,
    AARCH64_SYSREG_SPSR_EL1 = 49664,
    AARCH64_SYSREG_SPSR_EL12 = 59904,
    AARCH64_SYSREG_SPSR_EL2 = 57856,
    AARCH64_SYSREG_SPSR_EL3 = 61952,
    AARCH64_SYSREG_SPSR_FIQ = 57883,
    AARCH64_SYSREG_SPSR_IRQ = 57880,
    AARCH64_SYSREG_SPSR_UND = 57882,
    AARCH64_SYSREG_SP_EL0 = 49672,
    AARCH64_SYSREG_SP_EL1 = 57864,
    AARCH64_SYSREG_SP_EL2 = 61960,
    AARCH64_SYSREG_SSBS = 55830,
    AARCH64_SYSREG_SVCR = 55826,
    AARCH64_SYSREG_TCO = 55831,
    AARCH64_SYSREG_TCR2_EL1 = 49411,
    AARCH64_SYSREG_TCR2_EL12 = 59651,
    AARCH64_SYSREG_TCR2_EL2 = 57603,
    AARCH64_SYSREG_TCR_EL1 = 49410,
    AARCH64_SYSREG_TCR_EL12 = 59650,
    AARCH64_SYSREG_TCR_EL2 = 57602,
    AARCH64_SYSREG_TCR_EL3 = 61698,
    AARCH64_SYSREG_TEECR32_EL1 = 36864,
    AARCH64_SYSREG_TEEHBR32_EL1 = 36992,
    AARCH64_SYSREG_TFSRE0_EL1 = 49841,
    AARCH64_SYSREG_TFSR_EL1 = 49840,
    AARCH64_SYSREG_TFSR_EL12 = 60080,
    AARCH64_SYSREG_TFSR_EL2 = 58032,
    AARCH64_SYSREG_TFSR_EL3 = 62128,
    AARCH64_SYSREG_TPIDR2_EL0 = 56965,
    AARCH64_SYSREG_TPIDRRO_EL0 = 56963,
    AARCH64_SYSREG_TPIDR_EL0 = 56962,
    AARCH64_SYSREG_TPIDR_EL1 = 50820,
    AARCH64_SYSREG_TPIDR_EL2 = 59010,
    AARCH64_SYSREG_TPIDR_EL3 = 63106,
    AARCH64_SYSREG_TRBBASER_EL1 = 50394,
    AARCH64_SYSREG_TRBIDR_EL1 = 50399,
    AARCH64_SYSREG_TRBLIMITR_EL1 = 50392,
    AARCH64_SYSREG_TRBMAR_EL1 = 50396,
    AARCH64_SYSREG_TRBPTR_EL1 = 50393,
    AARCH64_SYSREG_TRBSR_EL1 = 50395,
    AARCH64_SYSREG_TRBTRG_EL1 = 50398,
    AARCH64_SYSREG_TRCACATR0 = 35074,
    AARCH64_SYSREG_TRCACATR1 = 35090,
    AARCH64_SYSREG_TRCACATR10 = 35107,
    AARCH64_SYSREG_TRCACATR11 = 35123,
    AARCH64_SYSREG_TRCACATR12 = 35139,
    AARCH64_SYSREG_TRCACATR13 = 35155,
    AARCH64_SYSREG_TRCACATR14 = 35171,
    AARCH64_SYSREG_TRCACATR15 = 35187,
    AARCH64_SYSREG_TRCACATR2 = 35106,
    AARCH64_SYSREG_TRCACATR3 = 35122,
    AARCH64_SYSREG_TRCACATR4 = 35138,
    AARCH64_SYSREG_TRCACATR5 = 35154,
    AARCH64_SYSREG_TRCACATR6 = 35170,
    AARCH64_SYSREG_TRCACATR7 = 35186,
    AARCH64_SYSREG_TRCACATR8 = 35075,
    AARCH64_SYSREG_TRCACATR9 = 35091,
    AARCH64_SYSREG_TRCACVR0 = 35072,
    AARCH64_SYSREG_TRCACVR1 = 35088,
    AARCH64_SYSREG_TRCACVR10 = 35105,
    AARCH64_SYSREG_TRCACVR11 = 35121,
    AARCH64_SYSREG_TRCACVR12 = 35137,
    AARCH64_SYSREG_TRCACVR13 = 35153,
    AARCH64_SYSREG_TRCACVR14 = 35169,
    AARCH64_SYSREG_TRCACVR15 = 35185,
    AARCH64_SYSREG_TRCACVR2 = 35104,
    AARCH64_SYSREG_TRCACVR3 = 35120,
    AARCH64_SYSREG_TRCACVR4 = 35136,
    AARCH64_SYSREG_TRCACVR5 = 35152,
    AARCH64_SYSREG_TRCACVR6 = 35168,
    AARCH64_SYSREG_TRCACVR7 = 35184,
    AARCH64_SYSREG_TRCACVR8 = 35073,
    AARCH64_SYSREG_TRCACVR9 = 35089,
    AARCH64_SYSREG_TRCAUTHSTATUS = 35830,
    AARCH64_SYSREG_TRCAUXCTLR = 34864,
    AARCH64_SYSREG_TRCBBCTLR = 34936,
    AARCH64_SYSREG_TRCCCCTLR = 34928,
    AARCH64_SYSREG_TRCCIDCCTLR0 = 35202,
    AARCH64_SYSREG_TRCCIDCCTLR1 = 35210,
    AARCH64_SYSREG_TRCCIDCVR0 = 35200,
    AARCH64_SYSREG_TRCCIDCVR1 = 35216,
    AARCH64_SYSREG_TRCCIDCVR2 = 35232,
    AARCH64_SYSREG_TRCCIDCVR3 = 35248,
    AARCH64_SYSREG_TRCCIDCVR4 = 35264,
    AARCH64_SYSREG_TRCCIDCVR5 = 35280,
    AARCH64_SYSREG_TRCCIDCVR6 = 35296,
    AARCH64_SYSREG_TRCCIDCVR7 = 35312,
    AARCH64_SYSREG_TRCCIDR0 = 35815,
    AARCH64_SYSREG_TRCCIDR1 = 35823,
    AARCH64_SYSREG_TRCCIDR2 = 35831,
    AARCH64_SYSREG_TRCCIDR3 = 35839,
    AARCH64_SYSREG_TRCCLAIMCLR = 35790,
    AARCH64_SYSREG_TRCCLAIMSET = 35782,
    AARCH64_SYSREG_TRCCNTCTLR0 = 34853,
    AARCH64_SYSREG_TRCCNTCTLR1 = 34861,
    AARCH64_SYSREG_TRCCNTCTLR2 = 34869,
    AARCH64_SYSREG_TRCCNTCTLR3 = 34877,
    AARCH64_SYSREG_TRCCNTRLDVR0 = 34821,
    AARCH64_SYSREG_TRCCNTRLDVR1 = 34829,
    AARCH64_SYSREG_TRCCNTRLDVR2 = 34837,
    AARCH64_SYSREG_TRCCNTRLDVR3 = 34845,
    AARCH64_SYSREG_TRCCNTVR0 = 34885,
    AARCH64_SYSREG_TRCCNTVR1 = 34893,
    AARCH64_SYSREG_TRCCNTVR2 = 34901,
    AARCH64_SYSREG_TRCCNTVR3 = 34909,
    AARCH64_SYSREG_TRCCONFIGR = 34848,
    AARCH64_SYSREG_TRCDEVAFF0 = 35798,
    AARCH64_SYSREG_TRCDEVAFF1 = 35806,
    AARCH64_SYSREG_TRCDEVARCH = 35838,
    AARCH64_SYSREG_TRCDEVID = 35735,
    AARCH64_SYSREG_TRCDEVTYPE = 35743,
    AARCH64_SYSREG_TRCDVCMR0 = 35078,
    AARCH64_SYSREG_TRCDVCMR1 = 35110,
    AARCH64_SYSREG_TRCDVCMR2 = 35142,
    AARCH64_SYSREG_TRCDVCMR3 = 35174,
    AARCH64_SYSREG_TRCDVCMR4 = 35079,
    AARCH64_SYSREG_TRCDVCMR5 = 35111,
    AARCH64_SYSREG_TRCDVCMR6 = 35143,
    AARCH64_SYSREG_TRCDVCMR7 = 35175,
    AARCH64_SYSREG_TRCDVCVR0 = 35076,
    AARCH64_SYSREG_TRCDVCVR1 = 35108,
    AARCH64_SYSREG_TRCDVCVR2 = 35140,
    AARCH64_SYSREG_TRCDVCVR3 = 35172,
    AARCH64_SYSREG_TRCDVCVR4 = 35077,
    AARCH64_SYSREG_TRCDVCVR5 = 35109,
    AARCH64_SYSREG_TRCDVCVR6 = 35141,
    AARCH64_SYSREG_TRCDVCVR7 = 35173,
    AARCH64_SYSREG_TRCEVENTCTL0R = 34880,
    AARCH64_SYSREG_TRCEVENTCTL1R = 34888,
    AARCH64_SYSREG_TRCEXTINSELR = 34884,
    AARCH64_SYSREG_TRCEXTINSELR1 = 34892,
    AARCH64_SYSREG_TRCEXTINSELR2 = 34900,
    AARCH64_SYSREG_TRCEXTINSELR3 = 34908,
    AARCH64_SYSREG_TRCIDR0 = 34887,
    AARCH64_SYSREG_TRCIDR1 = 34895,
    AARCH64_SYSREG_TRCIDR10 = 34838,
    AARCH64_SYSREG_TRCIDR11 = 34846,
    AARCH64_SYSREG_TRCIDR12 = 34854,
    AARCH64_SYSREG_TRCIDR13 = 34862,
    AARCH64_SYSREG_TRCIDR2 = 34903,
    AARCH64_SYSREG_TRCIDR3 = 34911,
    AARCH64_SYSREG_TRCIDR4 = 34919,
    AARCH64_SYSREG_TRCIDR5 = 34927,
    AARCH64_SYSREG_TRCIDR6 = 34935,
    AARCH64_SYSREG_TRCIDR7 = 34943,
    AARCH64_SYSREG_TRCIDR8 = 34822,
    AARCH64_SYSREG_TRCIDR9 = 34830,
    AARCH64_SYSREG_TRCIMSPEC0 = 34823,
    AARCH64_SYSREG_TRCIMSPEC1 = 34831,
    AARCH64_SYSREG_TRCIMSPEC2 = 34839,
    AARCH64_SYSREG_TRCIMSPEC3 = 34847,
    AARCH64_SYSREG_TRCIMSPEC4 = 34855,
    AARCH64_SYSREG_TRCIMSPEC5 = 34863,
    AARCH64_SYSREG_TRCIMSPEC6 = 34871,
    AARCH64_SYSREG_TRCIMSPEC7 = 34879,
    AARCH64_SYSREG_TRCITCTRL = 35716,
    AARCH64_SYSREG_TRCITECR_EL1 = 49299,
    AARCH64_SYSREG_TRCITECR_EL12 = 59539,
    AARCH64_SYSREG_TRCITECR_EL2 = 57491,
    AARCH64_SYSREG_TRCITEEDCR = 34833,
    AARCH64_SYSREG_TRCLAR = 35814,
    AARCH64_SYSREG_TRCLSR = 35822,
    AARCH64_SYSREG_TRCOSLAR = 34948,
    AARCH64_SYSREG_TRCOSLSR = 34956,
    AARCH64_SYSREG_TRCPDCR = 34980,
    AARCH64_SYSREG_TRCPDSR = 34988,
    AARCH64_SYSREG_TRCPIDR0 = 35783,
    AARCH64_SYSREG_TRCPIDR1 = 35791,
    AARCH64_SYSREG_TRCPIDR2 = 35799,
    AARCH64_SYSREG_TRCPIDR3 = 35807,
    AARCH64_SYSREG_TRCPIDR4 = 35751,
    AARCH64_SYSREG_TRCPIDR5 = 35759,
    AARCH64_SYSREG_TRCPIDR6 = 35767,
    AARCH64_SYSREG_TRCPIDR7 = 35775,
    AARCH64_SYSREG_TRCPRGCTLR = 34824,
    AARCH64_SYSREG_TRCPROCSELR = 34832,
    AARCH64_SYSREG_TRCQCTLR = 34825,
    AARCH64_SYSREG_TRCRSCTLR10 = 35024,
    AARCH64_SYSREG_TRCRSCTLR11 = 35032,
    AARCH64_SYSREG_TRCRSCTLR12 = 35040,
    AARCH64_SYSREG_TRCRSCTLR13 = 35048,
    AARCH64_SYSREG_TRCRSCTLR14 = 35056,
    AARCH64_SYSREG_TRCRSCTLR15 = 35064,
    AARCH64_SYSREG_TRCRSCTLR16 = 34945,
    AARCH64_SYSREG_TRCRSCTLR17 = 34953,
    AARCH64_SYSREG_TRCRSCTLR18 = 34961,
    AARCH64_SYSREG_TRCRSCTLR19 = 34969,
    AARCH64_SYSREG_TRCRSCTLR2 = 34960,
    AARCH64_SYSREG_TRCRSCTLR20 = 34977,
    AARCH64_SYSREG_TRCRSCTLR21 = 34985,
    AARCH64_SYSREG_TRCRSCTLR22 = 34993,
    AARCH64_SYSREG_TRCRSCTLR23 = 35001,
    AARCH64_SYSREG_TRCRSCTLR24 = 35009,
    AARCH64_SYSREG_TRCRSCTLR25 = 35017,
    AARCH64_SYSREG_TRCRSCTLR26 = 35025,
    AARCH64_SYSREG_TRCRSCTLR27 = 35033,
    AARCH64_SYSREG_TRCRSCTLR28 = 35041,
    AARCH64_SYSREG_TRCRSCTLR29 = 35049,
    AARCH64_SYSREG_TRCRSCTLR3 = 34968,
    AARCH64_SYSREG_TRCRSCTLR30 = 35057,
    AARCH64_SYSREG_TRCRSCTLR31 = 35065,
    AARCH64_SYSREG_TRCRSCTLR4 = 34976,
    AARCH64_SYSREG_TRCRSCTLR5 = 34984,
    AARCH64_SYSREG_TRCRSCTLR6 = 34992,
    AARCH64_SYSREG_TRCRSCTLR7 = 35000,
    AARCH64_SYSREG_TRCRSCTLR8 = 35008,
    AARCH64_SYSREG_TRCRSCTLR9 = 35016,
    AARCH64_SYSREG_TRCRSR = 34896,
    AARCH64_SYSREG_TRCSEQEVR0 = 34820,
    AARCH64_SYSREG_TRCSEQEVR1 = 34828,
    AARCH64_SYSREG_TRCSEQEVR2 = 34836,
    AARCH64_SYSREG_TRCSEQRSTEVR = 34868,
    AARCH64_SYSREG_TRCSEQSTR = 34876,
    AARCH64_SYSREG_TRCSSCCR0 = 34946,
    AARCH64_SYSREG_TRCSSCCR1 = 34954,
    AARCH64_SYSREG_TRCSSCCR2 = 34962,
    AARCH64_SYSREG_TRCSSCCR3 = 34970,
    AARCH64_SYSREG_TRCSSCCR4 = 34978,
    AARCH64_SYSREG_TRCSSCCR5 = 34986,
    AARCH64_SYSREG_TRCSSCCR6 = 34994,
    AARCH64_SYSREG_TRCSSCCR7 = 35002,
    AARCH64_SYSREG_TRCSSCSR0 = 35010,
    AARCH64_SYSREG_TRCSSCSR1 = 35018,
    AARCH64_SYSREG_TRCSSCSR2 = 35026,
    AARCH64_SYSREG_TRCSSCSR3 = 35034,
    AARCH64_SYSREG_TRCSSCSR4 = 35042,
    AARCH64_SYSREG_TRCSSCSR5 = 35050,
    AARCH64_SYSREG_TRCSSCSR6 = 35058,
    AARCH64_SYSREG_TRCSSCSR7 = 35066,
    AARCH64_SYSREG_TRCSSPCICR0 = 34947,
    AARCH64_SYSREG_TRCSSPCICR1 = 34955,
    AARCH64_SYSREG_TRCSSPCICR2 = 34963,
    AARCH64_SYSREG_TRCSSPCICR3 = 34971,
    AARCH64_SYSREG_TRCSSPCICR4 = 34979,
    AARCH64_SYSREG_TRCSSPCICR5 = 34987,
    AARCH64_SYSREG_TRCSSPCICR6 = 34995,
    AARCH64_SYSREG_TRCSSPCICR7 = 35003,
    AARCH64_SYSREG_TRCSTALLCTLR = 34904,
    AARCH64_SYSREG_TRCSTATR = 34840,
    AARCH64_SYSREG_TRCSYNCPR = 34920,
    AARCH64_SYSREG_TRCTRACEIDR = 34817,
    AARCH64_SYSREG_TRCTSCTLR = 34912,
    AARCH64_SYSREG_TRCVDARCCTLR = 34898,
    AARCH64_SYSREG_TRCVDCTLR = 34882,
    AARCH64_SYSREG_TRCVDSACCTLR = 34890,
    AARCH64_SYSREG_TRCVICTLR = 34818,
    AARCH64_SYSREG_TRCVIIECTLR = 34826,
    AARCH64_SYSREG_TRCVIPCSSCTLR = 34842,
    AARCH64_SYSREG_TRCVISSCTLR = 34834,
    AARCH64_SYSREG_TRCVMIDCCTLR0 = 35218,
    AARCH64_SYSREG_TRCVMIDCCTLR1 = 35226,
    AARCH64_SYSREG_TRCVMIDCVR0 = 35201,
    AARCH64_SYSREG_TRCVMIDCVR1 = 35217,
    AARCH64_SYSREG_TRCVMIDCVR2 = 35233,
    AARCH64_SYSREG_TRCVMIDCVR3 = 35249,
    AARCH64_SYSREG_TRCVMIDCVR4 = 35265,
    AARCH64_SYSREG_TRCVMIDCVR5 = 35281,
    AARCH64_SYSREG_TRCVMIDCVR6 = 35297,
    AARCH64_SYSREG_TRCVMIDCVR7 = 35313,
    AARCH64_SYSREG_TRFCR_EL1 = 49297,
    AARCH64_SYSREG_TRFCR_EL12 = 59537,
    AARCH64_SYSREG_TRFCR_EL2 = 57489,
    AARCH64_SYSREG_TTBR0_EL1 = 49408,
    AARCH64_SYSREG_TTBR0_EL12 = 59648,
    AARCH64_SYSREG_TTBR0_EL2 = 57600,
    AARCH64_SYSREG_TTBR0_EL3 = 61696,
    AARCH64_SYSREG_TTBR1_EL1 = 49409,
    AARCH64_SYSREG_TTBR1_EL12 = 59649,
    AARCH64_SYSREG_TTBR1_EL2 = 57601,
    AARCH64_SYSREG_UAO = 49684,
    AARCH64_SYSREG_VBAR_EL1 = 50688,
    AARCH64_SYSREG_VBAR_EL12 = 60928,
    AARCH64_SYSREG_VBAR_EL2 = 58880,
    AARCH64_SYSREG_VBAR_EL3 = 62976,
    AARCH64_SYSREG_VDISR_EL2 = 58889,
    AARCH64_SYSREG_VDISR_EL3 = 62985,
    AARCH64_SYSREG_VMECID_A_EL2 = 58697,
    AARCH64_SYSREG_VMECID_P_EL2 = 58696,
    AARCH64_SYSREG_VMPIDR_EL2 = 57349,
    AARCH64_SYSREG_VNCR_EL2 = 57616,
    AARCH64_SYSREG_VPIDR_EL2 = 57344,
    AARCH64_SYSREG_VSESR_EL2 = 58003,
    AARCH64_SYSREG_VSESR_EL3 = 62099,
    AARCH64_SYSREG_VSTCR_EL2 = 57650,
    AARCH64_SYSREG_VSTTBR_EL2 = 57648,
    AARCH64_SYSREG_VTCR_EL2 = 57610,
    AARCH64_SYSREG_VTTBR_EL2 = 57608,
    AARCH64_SYSREG_ZCR_EL1 = 49296,
    AARCH64_SYSREG_ZCR_EL12 = 59536,
    AARCH64_SYSREG_ZCR_EL2 = 57488,
    AARCH64_SYSREG_ZCR_EL3 = 61584,
    AARCH64_SYSREG_ENDING = 65535,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_tsb {
    AARCH64_TSB_CSYNC = 0,
    AARCH64_TSB_ENDING = 1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union aarch64_sysop_reg {
    pub sysreg: aarch64_sysreg,
    pub tlbi: aarch64_tlbi,
    pub ic: aarch64_ic,
    pub raw_val: libc::c_int,
}
impl ::core::fmt::Debug for aarch64_sysop_reg {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "aarch64_sysop_reg {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union aarch64_sysop_imm {
    pub dbnxs: aarch64_dbnxs,
    pub exactfpimm: aarch64_exactfpimm,
    pub raw_val: libc::c_int,
}
impl ::core::fmt::Debug for aarch64_sysop_imm {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "aarch64_sysop_imm {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union aarch64_sysop_alias {
    pub svcr: aarch64_svcr,
    pub at: aarch64_at,
    pub db: aarch64_db,
    pub dc: aarch64_dc,
    pub isb: aarch64_isb,
    pub tsb: aarch64_tsb,
    pub prfm: aarch64_prfm,
    pub sveprfm: aarch64_sveprfm,
    pub rprfm: aarch64_rprfm,
    pub pstateimm0_15: aarch64_pstateimm0_15,
    pub pstateimm0_1: aarch64_pstateimm0_1,
    pub psb: aarch64_psb,
    pub bti: aarch64_bti,
    pub svepredpat: aarch64_svepredpat,
    pub sveveclenspecifier: aarch64_sveveclenspecifier,
    pub raw_val: libc::c_int,
}
impl ::core::fmt::Debug for aarch64_sysop_alias {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "aarch64_sysop_alias {{ union }}")
    }
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_op_type {
    #[doc = "< = CS_OP_INVALID (Uninitialized)."]
    AARCH64_OP_INVALID = 0,
    #[doc = "< = CS_OP_REG (Register operand)."]
    AARCH64_OP_REG = 1,
    #[doc = "< = CS_OP_IMM (Immediate operand)."]
    AARCH64_OP_IMM = 2,
    #[doc = "< Register which references memory."]
    AARCH64_OP_MEM_REG = 129,
    #[doc = "< = Immediate value which references memory."]
    AARCH64_OP_MEM_IMM = 130,
    #[doc = "< = CS_OP_MEM (Memory operand)."]
    AARCH64_OP_MEM = 128,
    #[doc = "< = CS_OP_FP (Floating-Point operand)."]
    AARCH64_OP_FP = 3,
    #[doc = "< C-Immediate"]
    AARCH64_OP_CIMM = 16,
    #[doc = "< MRS register operand."]
    AARCH64_OP_REG_MRS = 17,
    #[doc = "< MSR register operand."]
    AARCH64_OP_REG_MSR = 18,
    #[doc = "< Implicit immediate operand 0"]
    AARCH64_OP_IMPLICIT_IMM_0 = 19,
    AARCH64_OP_SVCR = 20,
    AARCH64_OP_AT = 21,
    AARCH64_OP_DB = 22,
    AARCH64_OP_DC = 23,
    AARCH64_OP_ISB = 24,
    AARCH64_OP_TSB = 25,
    AARCH64_OP_PRFM = 26,
    AARCH64_OP_SVEPRFM = 27,
    AARCH64_OP_RPRFM = 28,
    AARCH64_OP_PSTATEIMM0_15 = 29,
    AARCH64_OP_PSTATEIMM0_1 = 30,
    AARCH64_OP_PSB = 31,
    AARCH64_OP_BTI = 32,
    AARCH64_OP_SVEPREDPAT = 33,
    AARCH64_OP_SVEVECLENSPECIFIER = 34,
    AARCH64_OP_SME = 35,
    AARCH64_OP_IMM_RANGE = 36,
    AARCH64_OP_TLBI = 37,
    AARCH64_OP_IC = 38,
    AARCH64_OP_DBNXS = 39,
    AARCH64_OP_EXACTFPIMM = 40,
    AARCH64_OP_SYSREG = 41,
    AARCH64_OP_SYSIMM = 42,
    AARCH64_OP_SYSALIAS = 43,
    AARCH64_OP_PRED = 44,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct aarch64_sysop {
    pub reg: aarch64_sysop_reg,
    pub imm: aarch64_sysop_imm,
    pub alias: aarch64_sysop_alias,
    #[doc = "< Specifies which field is set."]
    pub sub_type: aarch64_op_type,
}
impl ::core::fmt::Debug for aarch64_sysop {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "aarch64_sysop {{ reg: {:?}, imm: {:?}, alias: {:?}, sub_type: {:?} }}",
            self.reg, self.imm, self.alias, self.sub_type
        )
    }
}
pub mod aarch64_reg {
    #[doc = " AArch64 registers"]
    pub type Type = libc::c_uint;
    pub const AARCH64_REG_INVALID: Type = 0;
    pub const AARCH64_REG_FFR: Type = 1;
    pub const AARCH64_REG_FP: Type = 2;
    pub const AARCH64_REG_FPCR: Type = 3;
    pub const AARCH64_REG_LR: Type = 4;
    pub const AARCH64_REG_NZCV: Type = 5;
    pub const AARCH64_REG_SP: Type = 6;
    pub const AARCH64_REG_VG: Type = 7;
    pub const AARCH64_REG_WSP: Type = 8;
    pub const AARCH64_REG_WZR: Type = 9;
    pub const AARCH64_REG_XZR: Type = 10;
    pub const AARCH64_REG_ZA: Type = 11;
    pub const AARCH64_REG_B0: Type = 12;
    pub const AARCH64_REG_B1: Type = 13;
    pub const AARCH64_REG_B2: Type = 14;
    pub const AARCH64_REG_B3: Type = 15;
    pub const AARCH64_REG_B4: Type = 16;
    pub const AARCH64_REG_B5: Type = 17;
    pub const AARCH64_REG_B6: Type = 18;
    pub const AARCH64_REG_B7: Type = 19;
    pub const AARCH64_REG_B8: Type = 20;
    pub const AARCH64_REG_B9: Type = 21;
    pub const AARCH64_REG_B10: Type = 22;
    pub const AARCH64_REG_B11: Type = 23;
    pub const AARCH64_REG_B12: Type = 24;
    pub const AARCH64_REG_B13: Type = 25;
    pub const AARCH64_REG_B14: Type = 26;
    pub const AARCH64_REG_B15: Type = 27;
    pub const AARCH64_REG_B16: Type = 28;
    pub const AARCH64_REG_B17: Type = 29;
    pub const AARCH64_REG_B18: Type = 30;
    pub const AARCH64_REG_B19: Type = 31;
    pub const AARCH64_REG_B20: Type = 32;
    pub const AARCH64_REG_B21: Type = 33;
    pub const AARCH64_REG_B22: Type = 34;
    pub const AARCH64_REG_B23: Type = 35;
    pub const AARCH64_REG_B24: Type = 36;
    pub const AARCH64_REG_B25: Type = 37;
    pub const AARCH64_REG_B26: Type = 38;
    pub const AARCH64_REG_B27: Type = 39;
    pub const AARCH64_REG_B28: Type = 40;
    pub const AARCH64_REG_B29: Type = 41;
    pub const AARCH64_REG_B30: Type = 42;
    pub const AARCH64_REG_B31: Type = 43;
    pub const AARCH64_REG_D0: Type = 44;
    pub const AARCH64_REG_D1: Type = 45;
    pub const AARCH64_REG_D2: Type = 46;
    pub const AARCH64_REG_D3: Type = 47;
    pub const AARCH64_REG_D4: Type = 48;
    pub const AARCH64_REG_D5: Type = 49;
    pub const AARCH64_REG_D6: Type = 50;
    pub const AARCH64_REG_D7: Type = 51;
    pub const AARCH64_REG_D8: Type = 52;
    pub const AARCH64_REG_D9: Type = 53;
    pub const AARCH64_REG_D10: Type = 54;
    pub const AARCH64_REG_D11: Type = 55;
    pub const AARCH64_REG_D12: Type = 56;
    pub const AARCH64_REG_D13: Type = 57;
    pub const AARCH64_REG_D14: Type = 58;
    pub const AARCH64_REG_D15: Type = 59;
    pub const AARCH64_REG_D16: Type = 60;
    pub const AARCH64_REG_D17: Type = 61;
    pub const AARCH64_REG_D18: Type = 62;
    pub const AARCH64_REG_D19: Type = 63;
    pub const AARCH64_REG_D20: Type = 64;
    pub const AARCH64_REG_D21: Type = 65;
    pub const AARCH64_REG_D22: Type = 66;
    pub const AARCH64_REG_D23: Type = 67;
    pub const AARCH64_REG_D24: Type = 68;
    pub const AARCH64_REG_D25: Type = 69;
    pub const AARCH64_REG_D26: Type = 70;
    pub const AARCH64_REG_D27: Type = 71;
    pub const AARCH64_REG_D28: Type = 72;
    pub const AARCH64_REG_D29: Type = 73;
    pub const AARCH64_REG_D30: Type = 74;
    pub const AARCH64_REG_D31: Type = 75;
    pub const AARCH64_REG_H0: Type = 76;
    pub const AARCH64_REG_H1: Type = 77;
    pub const AARCH64_REG_H2: Type = 78;
    pub const AARCH64_REG_H3: Type = 79;
    pub const AARCH64_REG_H4: Type = 80;
    pub const AARCH64_REG_H5: Type = 81;
    pub const AARCH64_REG_H6: Type = 82;
    pub const AARCH64_REG_H7: Type = 83;
    pub const AARCH64_REG_H8: Type = 84;
    pub const AARCH64_REG_H9: Type = 85;
    pub const AARCH64_REG_H10: Type = 86;
    pub const AARCH64_REG_H11: Type = 87;
    pub const AARCH64_REG_H12: Type = 88;
    pub const AARCH64_REG_H13: Type = 89;
    pub const AARCH64_REG_H14: Type = 90;
    pub const AARCH64_REG_H15: Type = 91;
    pub const AARCH64_REG_H16: Type = 92;
    pub const AARCH64_REG_H17: Type = 93;
    pub const AARCH64_REG_H18: Type = 94;
    pub const AARCH64_REG_H19: Type = 95;
    pub const AARCH64_REG_H20: Type = 96;
    pub const AARCH64_REG_H21: Type = 97;
    pub const AARCH64_REG_H22: Type = 98;
    pub const AARCH64_REG_H23: Type = 99;
    pub const AARCH64_REG_H24: Type = 100;
    pub const AARCH64_REG_H25: Type = 101;
    pub const AARCH64_REG_H26: Type = 102;
    pub const AARCH64_REG_H27: Type = 103;
    pub const AARCH64_REG_H28: Type = 104;
    pub const AARCH64_REG_H29: Type = 105;
    pub const AARCH64_REG_H30: Type = 106;
    pub const AARCH64_REG_H31: Type = 107;
    pub const AARCH64_REG_P0: Type = 108;
    pub const AARCH64_REG_P1: Type = 109;
    pub const AARCH64_REG_P2: Type = 110;
    pub const AARCH64_REG_P3: Type = 111;
    pub const AARCH64_REG_P4: Type = 112;
    pub const AARCH64_REG_P5: Type = 113;
    pub const AARCH64_REG_P6: Type = 114;
    pub const AARCH64_REG_P7: Type = 115;
    pub const AARCH64_REG_P8: Type = 116;
    pub const AARCH64_REG_P9: Type = 117;
    pub const AARCH64_REG_P10: Type = 118;
    pub const AARCH64_REG_P11: Type = 119;
    pub const AARCH64_REG_P12: Type = 120;
    pub const AARCH64_REG_P13: Type = 121;
    pub const AARCH64_REG_P14: Type = 122;
    pub const AARCH64_REG_P15: Type = 123;
    pub const AARCH64_REG_PN0: Type = 124;
    pub const AARCH64_REG_PN1: Type = 125;
    pub const AARCH64_REG_PN2: Type = 126;
    pub const AARCH64_REG_PN3: Type = 127;
    pub const AARCH64_REG_PN4: Type = 128;
    pub const AARCH64_REG_PN5: Type = 129;
    pub const AARCH64_REG_PN6: Type = 130;
    pub const AARCH64_REG_PN7: Type = 131;
    pub const AARCH64_REG_PN8: Type = 132;
    pub const AARCH64_REG_PN9: Type = 133;
    pub const AARCH64_REG_PN10: Type = 134;
    pub const AARCH64_REG_PN11: Type = 135;
    pub const AARCH64_REG_PN12: Type = 136;
    pub const AARCH64_REG_PN13: Type = 137;
    pub const AARCH64_REG_PN14: Type = 138;
    pub const AARCH64_REG_PN15: Type = 139;
    pub const AARCH64_REG_Q0: Type = 140;
    pub const AARCH64_REG_Q1: Type = 141;
    pub const AARCH64_REG_Q2: Type = 142;
    pub const AARCH64_REG_Q3: Type = 143;
    pub const AARCH64_REG_Q4: Type = 144;
    pub const AARCH64_REG_Q5: Type = 145;
    pub const AARCH64_REG_Q6: Type = 146;
    pub const AARCH64_REG_Q7: Type = 147;
    pub const AARCH64_REG_Q8: Type = 148;
    pub const AARCH64_REG_Q9: Type = 149;
    pub const AARCH64_REG_Q10: Type = 150;
    pub const AARCH64_REG_Q11: Type = 151;
    pub const AARCH64_REG_Q12: Type = 152;
    pub const AARCH64_REG_Q13: Type = 153;
    pub const AARCH64_REG_Q14: Type = 154;
    pub const AARCH64_REG_Q15: Type = 155;
    pub const AARCH64_REG_Q16: Type = 156;
    pub const AARCH64_REG_Q17: Type = 157;
    pub const AARCH64_REG_Q18: Type = 158;
    pub const AARCH64_REG_Q19: Type = 159;
    pub const AARCH64_REG_Q20: Type = 160;
    pub const AARCH64_REG_Q21: Type = 161;
    pub const AARCH64_REG_Q22: Type = 162;
    pub const AARCH64_REG_Q23: Type = 163;
    pub const AARCH64_REG_Q24: Type = 164;
    pub const AARCH64_REG_Q25: Type = 165;
    pub const AARCH64_REG_Q26: Type = 166;
    pub const AARCH64_REG_Q27: Type = 167;
    pub const AARCH64_REG_Q28: Type = 168;
    pub const AARCH64_REG_Q29: Type = 169;
    pub const AARCH64_REG_Q30: Type = 170;
    pub const AARCH64_REG_Q31: Type = 171;
    pub const AARCH64_REG_S0: Type = 172;
    pub const AARCH64_REG_S1: Type = 173;
    pub const AARCH64_REG_S2: Type = 174;
    pub const AARCH64_REG_S3: Type = 175;
    pub const AARCH64_REG_S4: Type = 176;
    pub const AARCH64_REG_S5: Type = 177;
    pub const AARCH64_REG_S6: Type = 178;
    pub const AARCH64_REG_S7: Type = 179;
    pub const AARCH64_REG_S8: Type = 180;
    pub const AARCH64_REG_S9: Type = 181;
    pub const AARCH64_REG_S10: Type = 182;
    pub const AARCH64_REG_S11: Type = 183;
    pub const AARCH64_REG_S12: Type = 184;
    pub const AARCH64_REG_S13: Type = 185;
    pub const AARCH64_REG_S14: Type = 186;
    pub const AARCH64_REG_S15: Type = 187;
    pub const AARCH64_REG_S16: Type = 188;
    pub const AARCH64_REG_S17: Type = 189;
    pub const AARCH64_REG_S18: Type = 190;
    pub const AARCH64_REG_S19: Type = 191;
    pub const AARCH64_REG_S20: Type = 192;
    pub const AARCH64_REG_S21: Type = 193;
    pub const AARCH64_REG_S22: Type = 194;
    pub const AARCH64_REG_S23: Type = 195;
    pub const AARCH64_REG_S24: Type = 196;
    pub const AARCH64_REG_S25: Type = 197;
    pub const AARCH64_REG_S26: Type = 198;
    pub const AARCH64_REG_S27: Type = 199;
    pub const AARCH64_REG_S28: Type = 200;
    pub const AARCH64_REG_S29: Type = 201;
    pub const AARCH64_REG_S30: Type = 202;
    pub const AARCH64_REG_S31: Type = 203;
    pub const AARCH64_REG_W0: Type = 204;
    pub const AARCH64_REG_W1: Type = 205;
    pub const AARCH64_REG_W2: Type = 206;
    pub const AARCH64_REG_W3: Type = 207;
    pub const AARCH64_REG_W4: Type = 208;
    pub const AARCH64_REG_W5: Type = 209;
    pub const AARCH64_REG_W6: Type = 210;
    pub const AARCH64_REG_W7: Type = 211;
    pub const AARCH64_REG_W8: Type = 212;
    pub const AARCH64_REG_W9: Type = 213;
    pub const AARCH64_REG_W10: Type = 214;
    pub const AARCH64_REG_W11: Type = 215;
    pub const AARCH64_REG_W12: Type = 216;
    pub const AARCH64_REG_W13: Type = 217;
    pub const AARCH64_REG_W14: Type = 218;
    pub const AARCH64_REG_W15: Type = 219;
    pub const AARCH64_REG_W16: Type = 220;
    pub const AARCH64_REG_W17: Type = 221;
    pub const AARCH64_REG_W18: Type = 222;
    pub const AARCH64_REG_W19: Type = 223;
    pub const AARCH64_REG_W20: Type = 224;
    pub const AARCH64_REG_W21: Type = 225;
    pub const AARCH64_REG_W22: Type = 226;
    pub const AARCH64_REG_W23: Type = 227;
    pub const AARCH64_REG_W24: Type = 228;
    pub const AARCH64_REG_W25: Type = 229;
    pub const AARCH64_REG_W26: Type = 230;
    pub const AARCH64_REG_W27: Type = 231;
    pub const AARCH64_REG_W28: Type = 232;
    pub const AARCH64_REG_W29: Type = 233;
    pub const AARCH64_REG_W30: Type = 234;
    pub const AARCH64_REG_X0: Type = 235;
    pub const AARCH64_REG_X1: Type = 236;
    pub const AARCH64_REG_X2: Type = 237;
    pub const AARCH64_REG_X3: Type = 238;
    pub const AARCH64_REG_X4: Type = 239;
    pub const AARCH64_REG_X5: Type = 240;
    pub const AARCH64_REG_X6: Type = 241;
    pub const AARCH64_REG_X7: Type = 242;
    pub const AARCH64_REG_X8: Type = 243;
    pub const AARCH64_REG_X9: Type = 244;
    pub const AARCH64_REG_X10: Type = 245;
    pub const AARCH64_REG_X11: Type = 246;
    pub const AARCH64_REG_X12: Type = 247;
    pub const AARCH64_REG_X13: Type = 248;
    pub const AARCH64_REG_X14: Type = 249;
    pub const AARCH64_REG_X15: Type = 250;
    pub const AARCH64_REG_X16: Type = 251;
    pub const AARCH64_REG_X17: Type = 252;
    pub const AARCH64_REG_X18: Type = 253;
    pub const AARCH64_REG_X19: Type = 254;
    pub const AARCH64_REG_X20: Type = 255;
    pub const AARCH64_REG_X21: Type = 256;
    pub const AARCH64_REG_X22: Type = 257;
    pub const AARCH64_REG_X23: Type = 258;
    pub const AARCH64_REG_X24: Type = 259;
    pub const AARCH64_REG_X25: Type = 260;
    pub const AARCH64_REG_X26: Type = 261;
    pub const AARCH64_REG_X27: Type = 262;
    pub const AARCH64_REG_X28: Type = 263;
    pub const AARCH64_REG_Z0: Type = 264;
    pub const AARCH64_REG_Z1: Type = 265;
    pub const AARCH64_REG_Z2: Type = 266;
    pub const AARCH64_REG_Z3: Type = 267;
    pub const AARCH64_REG_Z4: Type = 268;
    pub const AARCH64_REG_Z5: Type = 269;
    pub const AARCH64_REG_Z6: Type = 270;
    pub const AARCH64_REG_Z7: Type = 271;
    pub const AARCH64_REG_Z8: Type = 272;
    pub const AARCH64_REG_Z9: Type = 273;
    pub const AARCH64_REG_Z10: Type = 274;
    pub const AARCH64_REG_Z11: Type = 275;
    pub const AARCH64_REG_Z12: Type = 276;
    pub const AARCH64_REG_Z13: Type = 277;
    pub const AARCH64_REG_Z14: Type = 278;
    pub const AARCH64_REG_Z15: Type = 279;
    pub const AARCH64_REG_Z16: Type = 280;
    pub const AARCH64_REG_Z17: Type = 281;
    pub const AARCH64_REG_Z18: Type = 282;
    pub const AARCH64_REG_Z19: Type = 283;
    pub const AARCH64_REG_Z20: Type = 284;
    pub const AARCH64_REG_Z21: Type = 285;
    pub const AARCH64_REG_Z22: Type = 286;
    pub const AARCH64_REG_Z23: Type = 287;
    pub const AARCH64_REG_Z24: Type = 288;
    pub const AARCH64_REG_Z25: Type = 289;
    pub const AARCH64_REG_Z26: Type = 290;
    pub const AARCH64_REG_Z27: Type = 291;
    pub const AARCH64_REG_Z28: Type = 292;
    pub const AARCH64_REG_Z29: Type = 293;
    pub const AARCH64_REG_Z30: Type = 294;
    pub const AARCH64_REG_Z31: Type = 295;
    pub const AARCH64_REG_ZAB0: Type = 296;
    pub const AARCH64_REG_ZAD0: Type = 297;
    pub const AARCH64_REG_ZAD1: Type = 298;
    pub const AARCH64_REG_ZAD2: Type = 299;
    pub const AARCH64_REG_ZAD3: Type = 300;
    pub const AARCH64_REG_ZAD4: Type = 301;
    pub const AARCH64_REG_ZAD5: Type = 302;
    pub const AARCH64_REG_ZAD6: Type = 303;
    pub const AARCH64_REG_ZAD7: Type = 304;
    pub const AARCH64_REG_ZAH0: Type = 305;
    pub const AARCH64_REG_ZAH1: Type = 306;
    pub const AARCH64_REG_ZAQ0: Type = 307;
    pub const AARCH64_REG_ZAQ1: Type = 308;
    pub const AARCH64_REG_ZAQ2: Type = 309;
    pub const AARCH64_REG_ZAQ3: Type = 310;
    pub const AARCH64_REG_ZAQ4: Type = 311;
    pub const AARCH64_REG_ZAQ5: Type = 312;
    pub const AARCH64_REG_ZAQ6: Type = 313;
    pub const AARCH64_REG_ZAQ7: Type = 314;
    pub const AARCH64_REG_ZAQ8: Type = 315;
    pub const AARCH64_REG_ZAQ9: Type = 316;
    pub const AARCH64_REG_ZAQ10: Type = 317;
    pub const AARCH64_REG_ZAQ11: Type = 318;
    pub const AARCH64_REG_ZAQ12: Type = 319;
    pub const AARCH64_REG_ZAQ13: Type = 320;
    pub const AARCH64_REG_ZAQ14: Type = 321;
    pub const AARCH64_REG_ZAQ15: Type = 322;
    pub const AARCH64_REG_ZAS0: Type = 323;
    pub const AARCH64_REG_ZAS1: Type = 324;
    pub const AARCH64_REG_ZAS2: Type = 325;
    pub const AARCH64_REG_ZAS3: Type = 326;
    pub const AARCH64_REG_ZT0: Type = 327;
    pub const AARCH64_REG_D0_D1: Type = 328;
    pub const AARCH64_REG_D1_D2: Type = 329;
    pub const AARCH64_REG_D2_D3: Type = 330;
    pub const AARCH64_REG_D3_D4: Type = 331;
    pub const AARCH64_REG_D4_D5: Type = 332;
    pub const AARCH64_REG_D5_D6: Type = 333;
    pub const AARCH64_REG_D6_D7: Type = 334;
    pub const AARCH64_REG_D7_D8: Type = 335;
    pub const AARCH64_REG_D8_D9: Type = 336;
    pub const AARCH64_REG_D9_D10: Type = 337;
    pub const AARCH64_REG_D10_D11: Type = 338;
    pub const AARCH64_REG_D11_D12: Type = 339;
    pub const AARCH64_REG_D12_D13: Type = 340;
    pub const AARCH64_REG_D13_D14: Type = 341;
    pub const AARCH64_REG_D14_D15: Type = 342;
    pub const AARCH64_REG_D15_D16: Type = 343;
    pub const AARCH64_REG_D16_D17: Type = 344;
    pub const AARCH64_REG_D17_D18: Type = 345;
    pub const AARCH64_REG_D18_D19: Type = 346;
    pub const AARCH64_REG_D19_D20: Type = 347;
    pub const AARCH64_REG_D20_D21: Type = 348;
    pub const AARCH64_REG_D21_D22: Type = 349;
    pub const AARCH64_REG_D22_D23: Type = 350;
    pub const AARCH64_REG_D23_D24: Type = 351;
    pub const AARCH64_REG_D24_D25: Type = 352;
    pub const AARCH64_REG_D25_D26: Type = 353;
    pub const AARCH64_REG_D26_D27: Type = 354;
    pub const AARCH64_REG_D27_D28: Type = 355;
    pub const AARCH64_REG_D28_D29: Type = 356;
    pub const AARCH64_REG_D29_D30: Type = 357;
    pub const AARCH64_REG_D30_D31: Type = 358;
    pub const AARCH64_REG_D31_D0: Type = 359;
    pub const AARCH64_REG_D0_D1_D2_D3: Type = 360;
    pub const AARCH64_REG_D1_D2_D3_D4: Type = 361;
    pub const AARCH64_REG_D2_D3_D4_D5: Type = 362;
    pub const AARCH64_REG_D3_D4_D5_D6: Type = 363;
    pub const AARCH64_REG_D4_D5_D6_D7: Type = 364;
    pub const AARCH64_REG_D5_D6_D7_D8: Type = 365;
    pub const AARCH64_REG_D6_D7_D8_D9: Type = 366;
    pub const AARCH64_REG_D7_D8_D9_D10: Type = 367;
    pub const AARCH64_REG_D8_D9_D10_D11: Type = 368;
    pub const AARCH64_REG_D9_D10_D11_D12: Type = 369;
    pub const AARCH64_REG_D10_D11_D12_D13: Type = 370;
    pub const AARCH64_REG_D11_D12_D13_D14: Type = 371;
    pub const AARCH64_REG_D12_D13_D14_D15: Type = 372;
    pub const AARCH64_REG_D13_D14_D15_D16: Type = 373;
    pub const AARCH64_REG_D14_D15_D16_D17: Type = 374;
    pub const AARCH64_REG_D15_D16_D17_D18: Type = 375;
    pub const AARCH64_REG_D16_D17_D18_D19: Type = 376;
    pub const AARCH64_REG_D17_D18_D19_D20: Type = 377;
    pub const AARCH64_REG_D18_D19_D20_D21: Type = 378;
    pub const AARCH64_REG_D19_D20_D21_D22: Type = 379;
    pub const AARCH64_REG_D20_D21_D22_D23: Type = 380;
    pub const AARCH64_REG_D21_D22_D23_D24: Type = 381;
    pub const AARCH64_REG_D22_D23_D24_D25: Type = 382;
    pub const AARCH64_REG_D23_D24_D25_D26: Type = 383;
    pub const AARCH64_REG_D24_D25_D26_D27: Type = 384;
    pub const AARCH64_REG_D25_D26_D27_D28: Type = 385;
    pub const AARCH64_REG_D26_D27_D28_D29: Type = 386;
    pub const AARCH64_REG_D27_D28_D29_D30: Type = 387;
    pub const AARCH64_REG_D28_D29_D30_D31: Type = 388;
    pub const AARCH64_REG_D29_D30_D31_D0: Type = 389;
    pub const AARCH64_REG_D30_D31_D0_D1: Type = 390;
    pub const AARCH64_REG_D31_D0_D1_D2: Type = 391;
    pub const AARCH64_REG_D0_D1_D2: Type = 392;
    pub const AARCH64_REG_D1_D2_D3: Type = 393;
    pub const AARCH64_REG_D2_D3_D4: Type = 394;
    pub const AARCH64_REG_D3_D4_D5: Type = 395;
    pub const AARCH64_REG_D4_D5_D6: Type = 396;
    pub const AARCH64_REG_D5_D6_D7: Type = 397;
    pub const AARCH64_REG_D6_D7_D8: Type = 398;
    pub const AARCH64_REG_D7_D8_D9: Type = 399;
    pub const AARCH64_REG_D8_D9_D10: Type = 400;
    pub const AARCH64_REG_D9_D10_D11: Type = 401;
    pub const AARCH64_REG_D10_D11_D12: Type = 402;
    pub const AARCH64_REG_D11_D12_D13: Type = 403;
    pub const AARCH64_REG_D12_D13_D14: Type = 404;
    pub const AARCH64_REG_D13_D14_D15: Type = 405;
    pub const AARCH64_REG_D14_D15_D16: Type = 406;
    pub const AARCH64_REG_D15_D16_D17: Type = 407;
    pub const AARCH64_REG_D16_D17_D18: Type = 408;
    pub const AARCH64_REG_D17_D18_D19: Type = 409;
    pub const AARCH64_REG_D18_D19_D20: Type = 410;
    pub const AARCH64_REG_D19_D20_D21: Type = 411;
    pub const AARCH64_REG_D20_D21_D22: Type = 412;
    pub const AARCH64_REG_D21_D22_D23: Type = 413;
    pub const AARCH64_REG_D22_D23_D24: Type = 414;
    pub const AARCH64_REG_D23_D24_D25: Type = 415;
    pub const AARCH64_REG_D24_D25_D26: Type = 416;
    pub const AARCH64_REG_D25_D26_D27: Type = 417;
    pub const AARCH64_REG_D26_D27_D28: Type = 418;
    pub const AARCH64_REG_D27_D28_D29: Type = 419;
    pub const AARCH64_REG_D28_D29_D30: Type = 420;
    pub const AARCH64_REG_D29_D30_D31: Type = 421;
    pub const AARCH64_REG_D30_D31_D0: Type = 422;
    pub const AARCH64_REG_D31_D0_D1: Type = 423;
    pub const AARCH64_REG_P0_P1: Type = 424;
    pub const AARCH64_REG_P1_P2: Type = 425;
    pub const AARCH64_REG_P2_P3: Type = 426;
    pub const AARCH64_REG_P3_P4: Type = 427;
    pub const AARCH64_REG_P4_P5: Type = 428;
    pub const AARCH64_REG_P5_P6: Type = 429;
    pub const AARCH64_REG_P6_P7: Type = 430;
    pub const AARCH64_REG_P7_P8: Type = 431;
    pub const AARCH64_REG_P8_P9: Type = 432;
    pub const AARCH64_REG_P9_P10: Type = 433;
    pub const AARCH64_REG_P10_P11: Type = 434;
    pub const AARCH64_REG_P11_P12: Type = 435;
    pub const AARCH64_REG_P12_P13: Type = 436;
    pub const AARCH64_REG_P13_P14: Type = 437;
    pub const AARCH64_REG_P14_P15: Type = 438;
    pub const AARCH64_REG_P15_P0: Type = 439;
    pub const AARCH64_REG_Q0_Q1: Type = 440;
    pub const AARCH64_REG_Q1_Q2: Type = 441;
    pub const AARCH64_REG_Q2_Q3: Type = 442;
    pub const AARCH64_REG_Q3_Q4: Type = 443;
    pub const AARCH64_REG_Q4_Q5: Type = 444;
    pub const AARCH64_REG_Q5_Q6: Type = 445;
    pub const AARCH64_REG_Q6_Q7: Type = 446;
    pub const AARCH64_REG_Q7_Q8: Type = 447;
    pub const AARCH64_REG_Q8_Q9: Type = 448;
    pub const AARCH64_REG_Q9_Q10: Type = 449;
    pub const AARCH64_REG_Q10_Q11: Type = 450;
    pub const AARCH64_REG_Q11_Q12: Type = 451;
    pub const AARCH64_REG_Q12_Q13: Type = 452;
    pub const AARCH64_REG_Q13_Q14: Type = 453;
    pub const AARCH64_REG_Q14_Q15: Type = 454;
    pub const AARCH64_REG_Q15_Q16: Type = 455;
    pub const AARCH64_REG_Q16_Q17: Type = 456;
    pub const AARCH64_REG_Q17_Q18: Type = 457;
    pub const AARCH64_REG_Q18_Q19: Type = 458;
    pub const AARCH64_REG_Q19_Q20: Type = 459;
    pub const AARCH64_REG_Q20_Q21: Type = 460;
    pub const AARCH64_REG_Q21_Q22: Type = 461;
    pub const AARCH64_REG_Q22_Q23: Type = 462;
    pub const AARCH64_REG_Q23_Q24: Type = 463;
    pub const AARCH64_REG_Q24_Q25: Type = 464;
    pub const AARCH64_REG_Q25_Q26: Type = 465;
    pub const AARCH64_REG_Q26_Q27: Type = 466;
    pub const AARCH64_REG_Q27_Q28: Type = 467;
    pub const AARCH64_REG_Q28_Q29: Type = 468;
    pub const AARCH64_REG_Q29_Q30: Type = 469;
    pub const AARCH64_REG_Q30_Q31: Type = 470;
    pub const AARCH64_REG_Q31_Q0: Type = 471;
    pub const AARCH64_REG_Q0_Q1_Q2_Q3: Type = 472;
    pub const AARCH64_REG_Q1_Q2_Q3_Q4: Type = 473;
    pub const AARCH64_REG_Q2_Q3_Q4_Q5: Type = 474;
    pub const AARCH64_REG_Q3_Q4_Q5_Q6: Type = 475;
    pub const AARCH64_REG_Q4_Q5_Q6_Q7: Type = 476;
    pub const AARCH64_REG_Q5_Q6_Q7_Q8: Type = 477;
    pub const AARCH64_REG_Q6_Q7_Q8_Q9: Type = 478;
    pub const AARCH64_REG_Q7_Q8_Q9_Q10: Type = 479;
    pub const AARCH64_REG_Q8_Q9_Q10_Q11: Type = 480;
    pub const AARCH64_REG_Q9_Q10_Q11_Q12: Type = 481;
    pub const AARCH64_REG_Q10_Q11_Q12_Q13: Type = 482;
    pub const AARCH64_REG_Q11_Q12_Q13_Q14: Type = 483;
    pub const AARCH64_REG_Q12_Q13_Q14_Q15: Type = 484;
    pub const AARCH64_REG_Q13_Q14_Q15_Q16: Type = 485;
    pub const AARCH64_REG_Q14_Q15_Q16_Q17: Type = 486;
    pub const AARCH64_REG_Q15_Q16_Q17_Q18: Type = 487;
    pub const AARCH64_REG_Q16_Q17_Q18_Q19: Type = 488;
    pub const AARCH64_REG_Q17_Q18_Q19_Q20: Type = 489;
    pub const AARCH64_REG_Q18_Q19_Q20_Q21: Type = 490;
    pub const AARCH64_REG_Q19_Q20_Q21_Q22: Type = 491;
    pub const AARCH64_REG_Q20_Q21_Q22_Q23: Type = 492;
    pub const AARCH64_REG_Q21_Q22_Q23_Q24: Type = 493;
    pub const AARCH64_REG_Q22_Q23_Q24_Q25: Type = 494;
    pub const AARCH64_REG_Q23_Q24_Q25_Q26: Type = 495;
    pub const AARCH64_REG_Q24_Q25_Q26_Q27: Type = 496;
    pub const AARCH64_REG_Q25_Q26_Q27_Q28: Type = 497;
    pub const AARCH64_REG_Q26_Q27_Q28_Q29: Type = 498;
    pub const AARCH64_REG_Q27_Q28_Q29_Q30: Type = 499;
    pub const AARCH64_REG_Q28_Q29_Q30_Q31: Type = 500;
    pub const AARCH64_REG_Q29_Q30_Q31_Q0: Type = 501;
    pub const AARCH64_REG_Q30_Q31_Q0_Q1: Type = 502;
    pub const AARCH64_REG_Q31_Q0_Q1_Q2: Type = 503;
    pub const AARCH64_REG_Q0_Q1_Q2: Type = 504;
    pub const AARCH64_REG_Q1_Q2_Q3: Type = 505;
    pub const AARCH64_REG_Q2_Q3_Q4: Type = 506;
    pub const AARCH64_REG_Q3_Q4_Q5: Type = 507;
    pub const AARCH64_REG_Q4_Q5_Q6: Type = 508;
    pub const AARCH64_REG_Q5_Q6_Q7: Type = 509;
    pub const AARCH64_REG_Q6_Q7_Q8: Type = 510;
    pub const AARCH64_REG_Q7_Q8_Q9: Type = 511;
    pub const AARCH64_REG_Q8_Q9_Q10: Type = 512;
    pub const AARCH64_REG_Q9_Q10_Q11: Type = 513;
    pub const AARCH64_REG_Q10_Q11_Q12: Type = 514;
    pub const AARCH64_REG_Q11_Q12_Q13: Type = 515;
    pub const AARCH64_REG_Q12_Q13_Q14: Type = 516;
    pub const AARCH64_REG_Q13_Q14_Q15: Type = 517;
    pub const AARCH64_REG_Q14_Q15_Q16: Type = 518;
    pub const AARCH64_REG_Q15_Q16_Q17: Type = 519;
    pub const AARCH64_REG_Q16_Q17_Q18: Type = 520;
    pub const AARCH64_REG_Q17_Q18_Q19: Type = 521;
    pub const AARCH64_REG_Q18_Q19_Q20: Type = 522;
    pub const AARCH64_REG_Q19_Q20_Q21: Type = 523;
    pub const AARCH64_REG_Q20_Q21_Q22: Type = 524;
    pub const AARCH64_REG_Q21_Q22_Q23: Type = 525;
    pub const AARCH64_REG_Q22_Q23_Q24: Type = 526;
    pub const AARCH64_REG_Q23_Q24_Q25: Type = 527;
    pub const AARCH64_REG_Q24_Q25_Q26: Type = 528;
    pub const AARCH64_REG_Q25_Q26_Q27: Type = 529;
    pub const AARCH64_REG_Q26_Q27_Q28: Type = 530;
    pub const AARCH64_REG_Q27_Q28_Q29: Type = 531;
    pub const AARCH64_REG_Q28_Q29_Q30: Type = 532;
    pub const AARCH64_REG_Q29_Q30_Q31: Type = 533;
    pub const AARCH64_REG_Q30_Q31_Q0: Type = 534;
    pub const AARCH64_REG_Q31_Q0_Q1: Type = 535;
    pub const AARCH64_REG_X22_X23_X24_X25_X26_X27_X28_FP: Type = 536;
    pub const AARCH64_REG_X0_X1_X2_X3_X4_X5_X6_X7: Type = 537;
    pub const AARCH64_REG_X2_X3_X4_X5_X6_X7_X8_X9: Type = 538;
    pub const AARCH64_REG_X4_X5_X6_X7_X8_X9_X10_X11: Type = 539;
    pub const AARCH64_REG_X6_X7_X8_X9_X10_X11_X12_X13: Type = 540;
    pub const AARCH64_REG_X8_X9_X10_X11_X12_X13_X14_X15: Type = 541;
    pub const AARCH64_REG_X10_X11_X12_X13_X14_X15_X16_X17: Type = 542;
    pub const AARCH64_REG_X12_X13_X14_X15_X16_X17_X18_X19: Type = 543;
    pub const AARCH64_REG_X14_X15_X16_X17_X18_X19_X20_X21: Type = 544;
    pub const AARCH64_REG_X16_X17_X18_X19_X20_X21_X22_X23: Type = 545;
    pub const AARCH64_REG_X18_X19_X20_X21_X22_X23_X24_X25: Type = 546;
    pub const AARCH64_REG_X20_X21_X22_X23_X24_X25_X26_X27: Type = 547;
    pub const AARCH64_REG_W30_WZR: Type = 548;
    pub const AARCH64_REG_W0_W1: Type = 549;
    pub const AARCH64_REG_W2_W3: Type = 550;
    pub const AARCH64_REG_W4_W5: Type = 551;
    pub const AARCH64_REG_W6_W7: Type = 552;
    pub const AARCH64_REG_W8_W9: Type = 553;
    pub const AARCH64_REG_W10_W11: Type = 554;
    pub const AARCH64_REG_W12_W13: Type = 555;
    pub const AARCH64_REG_W14_W15: Type = 556;
    pub const AARCH64_REG_W16_W17: Type = 557;
    pub const AARCH64_REG_W18_W19: Type = 558;
    pub const AARCH64_REG_W20_W21: Type = 559;
    pub const AARCH64_REG_W22_W23: Type = 560;
    pub const AARCH64_REG_W24_W25: Type = 561;
    pub const AARCH64_REG_W26_W27: Type = 562;
    pub const AARCH64_REG_W28_W29: Type = 563;
    pub const AARCH64_REG_LR_XZR: Type = 564;
    pub const AARCH64_REG_X28_FP: Type = 565;
    pub const AARCH64_REG_X0_X1: Type = 566;
    pub const AARCH64_REG_X2_X3: Type = 567;
    pub const AARCH64_REG_X4_X5: Type = 568;
    pub const AARCH64_REG_X6_X7: Type = 569;
    pub const AARCH64_REG_X8_X9: Type = 570;
    pub const AARCH64_REG_X10_X11: Type = 571;
    pub const AARCH64_REG_X12_X13: Type = 572;
    pub const AARCH64_REG_X14_X15: Type = 573;
    pub const AARCH64_REG_X16_X17: Type = 574;
    pub const AARCH64_REG_X18_X19: Type = 575;
    pub const AARCH64_REG_X20_X21: Type = 576;
    pub const AARCH64_REG_X22_X23: Type = 577;
    pub const AARCH64_REG_X24_X25: Type = 578;
    pub const AARCH64_REG_X26_X27: Type = 579;
    pub const AARCH64_REG_Z0_Z1: Type = 580;
    pub const AARCH64_REG_Z1_Z2: Type = 581;
    pub const AARCH64_REG_Z2_Z3: Type = 582;
    pub const AARCH64_REG_Z3_Z4: Type = 583;
    pub const AARCH64_REG_Z4_Z5: Type = 584;
    pub const AARCH64_REG_Z5_Z6: Type = 585;
    pub const AARCH64_REG_Z6_Z7: Type = 586;
    pub const AARCH64_REG_Z7_Z8: Type = 587;
    pub const AARCH64_REG_Z8_Z9: Type = 588;
    pub const AARCH64_REG_Z9_Z10: Type = 589;
    pub const AARCH64_REG_Z10_Z11: Type = 590;
    pub const AARCH64_REG_Z11_Z12: Type = 591;
    pub const AARCH64_REG_Z12_Z13: Type = 592;
    pub const AARCH64_REG_Z13_Z14: Type = 593;
    pub const AARCH64_REG_Z14_Z15: Type = 594;
    pub const AARCH64_REG_Z15_Z16: Type = 595;
    pub const AARCH64_REG_Z16_Z17: Type = 596;
    pub const AARCH64_REG_Z17_Z18: Type = 597;
    pub const AARCH64_REG_Z18_Z19: Type = 598;
    pub const AARCH64_REG_Z19_Z20: Type = 599;
    pub const AARCH64_REG_Z20_Z21: Type = 600;
    pub const AARCH64_REG_Z21_Z22: Type = 601;
    pub const AARCH64_REG_Z22_Z23: Type = 602;
    pub const AARCH64_REG_Z23_Z24: Type = 603;
    pub const AARCH64_REG_Z24_Z25: Type = 604;
    pub const AARCH64_REG_Z25_Z26: Type = 605;
    pub const AARCH64_REG_Z26_Z27: Type = 606;
    pub const AARCH64_REG_Z27_Z28: Type = 607;
    pub const AARCH64_REG_Z28_Z29: Type = 608;
    pub const AARCH64_REG_Z29_Z30: Type = 609;
    pub const AARCH64_REG_Z30_Z31: Type = 610;
    pub const AARCH64_REG_Z31_Z0: Type = 611;
    pub const AARCH64_REG_Z0_Z1_Z2_Z3: Type = 612;
    pub const AARCH64_REG_Z1_Z2_Z3_Z4: Type = 613;
    pub const AARCH64_REG_Z2_Z3_Z4_Z5: Type = 614;
    pub const AARCH64_REG_Z3_Z4_Z5_Z6: Type = 615;
    pub const AARCH64_REG_Z4_Z5_Z6_Z7: Type = 616;
    pub const AARCH64_REG_Z5_Z6_Z7_Z8: Type = 617;
    pub const AARCH64_REG_Z6_Z7_Z8_Z9: Type = 618;
    pub const AARCH64_REG_Z7_Z8_Z9_Z10: Type = 619;
    pub const AARCH64_REG_Z8_Z9_Z10_Z11: Type = 620;
    pub const AARCH64_REG_Z9_Z10_Z11_Z12: Type = 621;
    pub const AARCH64_REG_Z10_Z11_Z12_Z13: Type = 622;
    pub const AARCH64_REG_Z11_Z12_Z13_Z14: Type = 623;
    pub const AARCH64_REG_Z12_Z13_Z14_Z15: Type = 624;
    pub const AARCH64_REG_Z13_Z14_Z15_Z16: Type = 625;
    pub const AARCH64_REG_Z14_Z15_Z16_Z17: Type = 626;
    pub const AARCH64_REG_Z15_Z16_Z17_Z18: Type = 627;
    pub const AARCH64_REG_Z16_Z17_Z18_Z19: Type = 628;
    pub const AARCH64_REG_Z17_Z18_Z19_Z20: Type = 629;
    pub const AARCH64_REG_Z18_Z19_Z20_Z21: Type = 630;
    pub const AARCH64_REG_Z19_Z20_Z21_Z22: Type = 631;
    pub const AARCH64_REG_Z20_Z21_Z22_Z23: Type = 632;
    pub const AARCH64_REG_Z21_Z22_Z23_Z24: Type = 633;
    pub const AARCH64_REG_Z22_Z23_Z24_Z25: Type = 634;
    pub const AARCH64_REG_Z23_Z24_Z25_Z26: Type = 635;
    pub const AARCH64_REG_Z24_Z25_Z26_Z27: Type = 636;
    pub const AARCH64_REG_Z25_Z26_Z27_Z28: Type = 637;
    pub const AARCH64_REG_Z26_Z27_Z28_Z29: Type = 638;
    pub const AARCH64_REG_Z27_Z28_Z29_Z30: Type = 639;
    pub const AARCH64_REG_Z28_Z29_Z30_Z31: Type = 640;
    pub const AARCH64_REG_Z29_Z30_Z31_Z0: Type = 641;
    pub const AARCH64_REG_Z30_Z31_Z0_Z1: Type = 642;
    pub const AARCH64_REG_Z31_Z0_Z1_Z2: Type = 643;
    pub const AARCH64_REG_Z0_Z1_Z2: Type = 644;
    pub const AARCH64_REG_Z1_Z2_Z3: Type = 645;
    pub const AARCH64_REG_Z2_Z3_Z4: Type = 646;
    pub const AARCH64_REG_Z3_Z4_Z5: Type = 647;
    pub const AARCH64_REG_Z4_Z5_Z6: Type = 648;
    pub const AARCH64_REG_Z5_Z6_Z7: Type = 649;
    pub const AARCH64_REG_Z6_Z7_Z8: Type = 650;
    pub const AARCH64_REG_Z7_Z8_Z9: Type = 651;
    pub const AARCH64_REG_Z8_Z9_Z10: Type = 652;
    pub const AARCH64_REG_Z9_Z10_Z11: Type = 653;
    pub const AARCH64_REG_Z10_Z11_Z12: Type = 654;
    pub const AARCH64_REG_Z11_Z12_Z13: Type = 655;
    pub const AARCH64_REG_Z12_Z13_Z14: Type = 656;
    pub const AARCH64_REG_Z13_Z14_Z15: Type = 657;
    pub const AARCH64_REG_Z14_Z15_Z16: Type = 658;
    pub const AARCH64_REG_Z15_Z16_Z17: Type = 659;
    pub const AARCH64_REG_Z16_Z17_Z18: Type = 660;
    pub const AARCH64_REG_Z17_Z18_Z19: Type = 661;
    pub const AARCH64_REG_Z18_Z19_Z20: Type = 662;
    pub const AARCH64_REG_Z19_Z20_Z21: Type = 663;
    pub const AARCH64_REG_Z20_Z21_Z22: Type = 664;
    pub const AARCH64_REG_Z21_Z22_Z23: Type = 665;
    pub const AARCH64_REG_Z22_Z23_Z24: Type = 666;
    pub const AARCH64_REG_Z23_Z24_Z25: Type = 667;
    pub const AARCH64_REG_Z24_Z25_Z26: Type = 668;
    pub const AARCH64_REG_Z25_Z26_Z27: Type = 669;
    pub const AARCH64_REG_Z26_Z27_Z28: Type = 670;
    pub const AARCH64_REG_Z27_Z28_Z29: Type = 671;
    pub const AARCH64_REG_Z28_Z29_Z30: Type = 672;
    pub const AARCH64_REG_Z29_Z30_Z31: Type = 673;
    pub const AARCH64_REG_Z30_Z31_Z0: Type = 674;
    pub const AARCH64_REG_Z31_Z0_Z1: Type = 675;
    pub const AARCH64_REG_Z16_Z24: Type = 676;
    pub const AARCH64_REG_Z17_Z25: Type = 677;
    pub const AARCH64_REG_Z18_Z26: Type = 678;
    pub const AARCH64_REG_Z19_Z27: Type = 679;
    pub const AARCH64_REG_Z20_Z28: Type = 680;
    pub const AARCH64_REG_Z21_Z29: Type = 681;
    pub const AARCH64_REG_Z22_Z30: Type = 682;
    pub const AARCH64_REG_Z23_Z31: Type = 683;
    pub const AARCH64_REG_Z0_Z8: Type = 684;
    pub const AARCH64_REG_Z1_Z9: Type = 685;
    pub const AARCH64_REG_Z2_Z10: Type = 686;
    pub const AARCH64_REG_Z3_Z11: Type = 687;
    pub const AARCH64_REG_Z4_Z12: Type = 688;
    pub const AARCH64_REG_Z5_Z13: Type = 689;
    pub const AARCH64_REG_Z6_Z14: Type = 690;
    pub const AARCH64_REG_Z7_Z15: Type = 691;
    pub const AARCH64_REG_Z16_Z20_Z24_Z28: Type = 692;
    pub const AARCH64_REG_Z17_Z21_Z25_Z29: Type = 693;
    pub const AARCH64_REG_Z18_Z22_Z26_Z30: Type = 694;
    pub const AARCH64_REG_Z19_Z23_Z27_Z31: Type = 695;
    pub const AARCH64_REG_Z0_Z4_Z8_Z12: Type = 696;
    pub const AARCH64_REG_Z1_Z5_Z9_Z13: Type = 697;
    pub const AARCH64_REG_Z2_Z6_Z10_Z14: Type = 698;
    pub const AARCH64_REG_Z3_Z7_Z11_Z15: Type = 699;
    pub const AARCH64_REG_ENDING: Type = 700;
    pub const AARCH64_REG_IP0: Type = 251;
    pub const AARCH64_REG_IP1: Type = 252;
    pub const AARCH64_REG_X29: Type = 2;
    pub const AARCH64_REG_X30: Type = 4;
}
#[doc = " Instruction's operand referring to memory"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aarch64_op_mem {
    #[doc = "< base register"]
    pub base: aarch64_reg::Type,
    #[doc = "< index register"]
    pub index: aarch64_reg::Type,
    #[doc = "< displacement/offset value"]
    pub disp: i32,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_sme_op_type {
    AARCH64_SME_OP_INVALID = 0,
    #[doc = "< SME operand is a single tile."]
    AARCH64_SME_OP_TILE = 1,
    #[doc = "< SME operand is a tile indexed by a register and/or immediate"]
    AARCH64_SME_OP_TILE_VEC = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aarch64_imm_range {
    pub first: u8,
    pub offset: u8,
}
#[doc = " SME Instruction's matrix operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct aarch64_op_sme {
    #[doc = "< AArch64_SME_OP_TILE, AArch64_SME_OP_TILE_VEC"]
    pub type_: aarch64_sme_op_type,
    #[doc = "< Matrix tile register"]
    pub tile: aarch64_reg::Type,
    #[doc = "< slice index reg"]
    pub slice_reg: aarch64_reg::Type,
    #[doc = "< slice index offset."]
    pub slice_offset: aarch64_op_sme__bindgen_ty_1,
    #[doc = "< If true, the offset is a range."]
    pub has_range_offset: bool,
    #[doc = "< Flag if slice is vertical or horizontal"]
    pub is_vertical: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union aarch64_op_sme__bindgen_ty_1 {
    #[doc = "< Invalid if equal to AARCH64_SLICE_IMM_INVALID"]
    pub imm: u16,
    #[doc = "< Members are set to AARCH64_SLICE_IMM_RANGE_INVALID if invalid."]
    pub imm_range: aarch64_imm_range,
}
impl ::core::fmt::Debug for aarch64_op_sme__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "aarch64_op_sme__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for aarch64_op_sme {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "aarch64_op_sme {{ type: {:?}, tile: {:?}, slice_reg: {:?}, slice_offset: {:?}, has_range_offset: {:?}, is_vertical: {:?} }}" , self . type_ , self . tile , self . slice_reg , self . slice_offset , self . has_range_offset , self . is_vertical)
    }
}
#[doc = " SME Instruction's operand has index"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aarch64_op_pred {
    #[doc = "< Vector predicate register"]
    pub reg: aarch64_reg::Type,
    #[doc = "< Vector select register."]
    pub vec_select: aarch64_reg::Type,
    #[doc = "< Index in range 0 to one less of vector elements in a 128bit reg."]
    pub imm_index: i32,
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_aarch64_op {
    #[doc = "< Vector Index for some vector operands (or -1 if\n< irrelevant)"]
    pub vector_index: libc::c_int,
    #[doc = "< Vector Arrangement Specifier"]
    pub vas: AArch64Layout_VectorLayout,
    pub shift: cs_aarch64_op__bindgen_ty_1,
    #[doc = "< extender type of this operand"]
    pub ext: aarch64_extender,
    #[doc = "< operand type"]
    pub type_: aarch64_op_type,
    #[doc = " Q and V regs share the same identifiers (because they are the same registers).\n If this flag is set, the register operand is interpreted as a V-register."]
    pub is_vreg: bool,
    pub __bindgen_anon_1: cs_aarch64_op__bindgen_ty_2,
    #[doc = "< System operand"]
    pub sysop: aarch64_sysop,
    #[doc = " How is this operand accessed? (READ, WRITE or READ|WRITE)\n This field is combined of cs_ac_type.\n NOTE: this field is irrelevant if engine is compiled in DIET mode."]
    pub access: u8,
    #[doc = "< True if this operand is part of a register or vector list."]
    pub is_list_member: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_aarch64_op__bindgen_ty_1 {
    #[doc = "< shifter type of this operand"]
    pub type_: aarch64_shifter,
    #[doc = " Shift value of this operand.\n If the type indicates a shift with a register this value should be\n interpreted as aarch64_reg."]
    pub value: libc::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_aarch64_op__bindgen_ty_2 {
    #[doc = "< register value for REG operand"]
    pub reg: aarch64_reg::Type,
    #[doc = "< immediate value, or index for C-IMM or IMM operand"]
    pub imm: i64,
    #[doc = "< An immediate range"]
    pub imm_range: aarch64_imm_range,
    #[doc = "< floating point value for FP operand"]
    pub fp: f64,
    #[doc = "< base/index/scale/disp value for MEM operand"]
    pub mem: aarch64_op_mem,
    #[doc = "< SME matrix operand"]
    pub sme: aarch64_op_sme,
    #[doc = "< Predicate register"]
    pub pred: aarch64_op_pred,
}
impl ::core::fmt::Debug for cs_aarch64_op__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_aarch64_op__bindgen_ty_2 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_aarch64_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "cs_aarch64_op {{ vector_index: {:?}, vas: {:?}, shift: {:?}, ext: {:?}, type: {:?}, is_vreg: {:?}, __bindgen_anon_1: {:?}, sysop: {:?}, is_list_member: {:?} }}" , self . vector_index , self . vas , self . shift , self . ext , self . type_ , self . is_vreg , self . __bindgen_anon_1 , self . sysop , self . is_list_member)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aarch64_suppl_info {
    #[doc = "< CGI memory access according to mayLoad and mayStore"]
    pub mem_acc: cs_ac_type,
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_aarch64 {
    #[doc = "< conditional code for this insn"]
    pub cc: AArch64CC_CondCode,
    #[doc = "< does this insn update flags?"]
    pub update_flags: bool,
    #[doc = "< only set if writeback is 'True', if 'False' pre-index, otherwise post."]
    pub post_index: bool,
    #[doc = "< True if a SME or SVE operand is currently edited."]
    pub is_doing_sme: bool,
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_aarch64_op; 16usize],
}
impl ::core::fmt::Debug for cs_aarch64 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "cs_aarch64 {{ cc: {:?}, update_flags: {:?}, post_index: {:?}, is_doing_sme: {:?}, operands: {:?} }}" , self . cc , self . update_flags , self . post_index , self . is_doing_sme , self . operands)
    }
}
#[repr(u32)]
#[doc = " AArch64 instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum aarch64_insn {
    AARCH64_INS_INVALID = 0,
    AARCH64_INS_ABS = 1,
    AARCH64_INS_ADCLB = 2,
    AARCH64_INS_ADCLT = 3,
    AARCH64_INS_ADCS = 4,
    AARCH64_INS_ADC = 5,
    AARCH64_INS_ADDG = 6,
    AARCH64_INS_ADDHA = 7,
    AARCH64_INS_ADDHNB = 8,
    AARCH64_INS_ADDHNT = 9,
    AARCH64_INS_ADDHN = 10,
    AARCH64_INS_ADDHN2 = 11,
    AARCH64_INS_ADDPL = 12,
    AARCH64_INS_ADDPT = 13,
    AARCH64_INS_ADDP = 14,
    AARCH64_INS_ADDQV = 15,
    AARCH64_INS_ADDSPL = 16,
    AARCH64_INS_ADDSVL = 17,
    AARCH64_INS_ADDS = 18,
    AARCH64_INS_ADDVA = 19,
    AARCH64_INS_ADDVL = 20,
    AARCH64_INS_ADDV = 21,
    AARCH64_INS_ADD = 22,
    AARCH64_INS_ADR = 23,
    AARCH64_INS_ADRP = 24,
    AARCH64_INS_AESD = 25,
    AARCH64_INS_AESE = 26,
    AARCH64_INS_AESIMC = 27,
    AARCH64_INS_AESMC = 28,
    AARCH64_INS_ANDQV = 29,
    AARCH64_INS_ANDS = 30,
    AARCH64_INS_ANDV = 31,
    AARCH64_INS_AND = 32,
    AARCH64_INS_ASRD = 33,
    AARCH64_INS_ASRR = 34,
    AARCH64_INS_ASR = 35,
    AARCH64_INS_AUTDA = 36,
    AARCH64_INS_AUTDB = 37,
    AARCH64_INS_AUTDZA = 38,
    AARCH64_INS_AUTDZB = 39,
    AARCH64_INS_AUTIA = 40,
    AARCH64_INS_HINT = 41,
    AARCH64_INS_AUTIA171615 = 42,
    AARCH64_INS_AUTIASPPC = 43,
    AARCH64_INS_AUTIB = 44,
    AARCH64_INS_AUTIB171615 = 45,
    AARCH64_INS_AUTIBSPPC = 46,
    AARCH64_INS_AUTIZA = 47,
    AARCH64_INS_AUTIZB = 48,
    AARCH64_INS_AXFLAG = 49,
    AARCH64_INS_B = 50,
    AARCH64_INS_BCAX = 51,
    AARCH64_INS_BC = 52,
    AARCH64_INS_BDEP = 53,
    AARCH64_INS_BEXT = 54,
    AARCH64_INS_BFDOT = 55,
    AARCH64_INS_BF1CVTL2 = 56,
    AARCH64_INS_BF1CVTLT = 57,
    AARCH64_INS_BF1CVTL = 58,
    AARCH64_INS_BF1CVT = 59,
    AARCH64_INS_BF2CVTL2 = 60,
    AARCH64_INS_BF2CVTLT = 61,
    AARCH64_INS_BF2CVTL = 62,
    AARCH64_INS_BF2CVT = 63,
    AARCH64_INS_BFADD = 64,
    AARCH64_INS_BFCLAMP = 65,
    AARCH64_INS_BFCVT = 66,
    AARCH64_INS_BFCVTN = 67,
    AARCH64_INS_BFCVTN2 = 68,
    AARCH64_INS_BFCVTNT = 69,
    AARCH64_INS_BFMAXNM = 70,
    AARCH64_INS_BFMAX = 71,
    AARCH64_INS_BFMINNM = 72,
    AARCH64_INS_BFMIN = 73,
    AARCH64_INS_BFMLALB = 74,
    AARCH64_INS_BFMLALT = 75,
    AARCH64_INS_BFMLAL = 76,
    AARCH64_INS_BFMLA = 77,
    AARCH64_INS_BFMLSLB = 78,
    AARCH64_INS_BFMLSLT = 79,
    AARCH64_INS_BFMLSL = 80,
    AARCH64_INS_BFMLS = 81,
    AARCH64_INS_BFMMLA = 82,
    AARCH64_INS_BFMOPA = 83,
    AARCH64_INS_BFMOPS = 84,
    AARCH64_INS_BFMUL = 85,
    AARCH64_INS_BFM = 86,
    AARCH64_INS_BFSUB = 87,
    AARCH64_INS_BFVDOT = 88,
    AARCH64_INS_BGRP = 89,
    AARCH64_INS_BICS = 90,
    AARCH64_INS_BIC = 91,
    AARCH64_INS_BIF = 92,
    AARCH64_INS_BIT = 93,
    AARCH64_INS_BL = 94,
    AARCH64_INS_BLR = 95,
    AARCH64_INS_BLRAA = 96,
    AARCH64_INS_BLRAAZ = 97,
    AARCH64_INS_BLRAB = 98,
    AARCH64_INS_BLRABZ = 99,
    AARCH64_INS_BMOPA = 100,
    AARCH64_INS_BMOPS = 101,
    AARCH64_INS_BR = 102,
    AARCH64_INS_BRAA = 103,
    AARCH64_INS_BRAAZ = 104,
    AARCH64_INS_BRAB = 105,
    AARCH64_INS_BRABZ = 106,
    AARCH64_INS_BRB = 107,
    AARCH64_INS_BRK = 108,
    AARCH64_INS_BRKAS = 109,
    AARCH64_INS_BRKA = 110,
    AARCH64_INS_BRKBS = 111,
    AARCH64_INS_BRKB = 112,
    AARCH64_INS_BRKNS = 113,
    AARCH64_INS_BRKN = 114,
    AARCH64_INS_BRKPAS = 115,
    AARCH64_INS_BRKPA = 116,
    AARCH64_INS_BRKPBS = 117,
    AARCH64_INS_BRKPB = 118,
    AARCH64_INS_BSL1N = 119,
    AARCH64_INS_BSL2N = 120,
    AARCH64_INS_BSL = 121,
    AARCH64_INS_CADD = 122,
    AARCH64_INS_CASAB = 123,
    AARCH64_INS_CASAH = 124,
    AARCH64_INS_CASALB = 125,
    AARCH64_INS_CASALH = 126,
    AARCH64_INS_CASAL = 127,
    AARCH64_INS_CASA = 128,
    AARCH64_INS_CASB = 129,
    AARCH64_INS_CASH = 130,
    AARCH64_INS_CASLB = 131,
    AARCH64_INS_CASLH = 132,
    AARCH64_INS_CASL = 133,
    AARCH64_INS_CASPAL = 134,
    AARCH64_INS_CASPA = 135,
    AARCH64_INS_CASPL = 136,
    AARCH64_INS_CASP = 137,
    AARCH64_INS_CAS = 138,
    AARCH64_INS_CBNZ = 139,
    AARCH64_INS_CBZ = 140,
    AARCH64_INS_CCMN = 141,
    AARCH64_INS_CCMP = 142,
    AARCH64_INS_CDOT = 143,
    AARCH64_INS_CFINV = 144,
    AARCH64_INS_CLASTA = 145,
    AARCH64_INS_CLASTB = 146,
    AARCH64_INS_CLREX = 147,
    AARCH64_INS_CLS = 148,
    AARCH64_INS_CLZ = 149,
    AARCH64_INS_CMEQ = 150,
    AARCH64_INS_CMGE = 151,
    AARCH64_INS_CMGT = 152,
    AARCH64_INS_CMHI = 153,
    AARCH64_INS_CMHS = 154,
    AARCH64_INS_CMLA = 155,
    AARCH64_INS_CMLE = 156,
    AARCH64_INS_CMLT = 157,
    AARCH64_INS_CMPEQ = 158,
    AARCH64_INS_CMPGE = 159,
    AARCH64_INS_CMPGT = 160,
    AARCH64_INS_CMPHI = 161,
    AARCH64_INS_CMPHS = 162,
    AARCH64_INS_CMPLE = 163,
    AARCH64_INS_CMPLO = 164,
    AARCH64_INS_CMPLS = 165,
    AARCH64_INS_CMPLT = 166,
    AARCH64_INS_CMPNE = 167,
    AARCH64_INS_CMTST = 168,
    AARCH64_INS_CNOT = 169,
    AARCH64_INS_CNTB = 170,
    AARCH64_INS_CNTD = 171,
    AARCH64_INS_CNTH = 172,
    AARCH64_INS_CNTP = 173,
    AARCH64_INS_CNTW = 174,
    AARCH64_INS_CNT = 175,
    AARCH64_INS_COMPACT = 176,
    AARCH64_INS_CPYE = 177,
    AARCH64_INS_CPYEN = 178,
    AARCH64_INS_CPYERN = 179,
    AARCH64_INS_CPYERT = 180,
    AARCH64_INS_CPYERTN = 181,
    AARCH64_INS_CPYERTRN = 182,
    AARCH64_INS_CPYERTWN = 183,
    AARCH64_INS_CPYET = 184,
    AARCH64_INS_CPYETN = 185,
    AARCH64_INS_CPYETRN = 186,
    AARCH64_INS_CPYETWN = 187,
    AARCH64_INS_CPYEWN = 188,
    AARCH64_INS_CPYEWT = 189,
    AARCH64_INS_CPYEWTN = 190,
    AARCH64_INS_CPYEWTRN = 191,
    AARCH64_INS_CPYEWTWN = 192,
    AARCH64_INS_CPYFE = 193,
    AARCH64_INS_CPYFEN = 194,
    AARCH64_INS_CPYFERN = 195,
    AARCH64_INS_CPYFERT = 196,
    AARCH64_INS_CPYFERTN = 197,
    AARCH64_INS_CPYFERTRN = 198,
    AARCH64_INS_CPYFERTWN = 199,
    AARCH64_INS_CPYFET = 200,
    AARCH64_INS_CPYFETN = 201,
    AARCH64_INS_CPYFETRN = 202,
    AARCH64_INS_CPYFETWN = 203,
    AARCH64_INS_CPYFEWN = 204,
    AARCH64_INS_CPYFEWT = 205,
    AARCH64_INS_CPYFEWTN = 206,
    AARCH64_INS_CPYFEWTRN = 207,
    AARCH64_INS_CPYFEWTWN = 208,
    AARCH64_INS_CPYFM = 209,
    AARCH64_INS_CPYFMN = 210,
    AARCH64_INS_CPYFMRN = 211,
    AARCH64_INS_CPYFMRT = 212,
    AARCH64_INS_CPYFMRTN = 213,
    AARCH64_INS_CPYFMRTRN = 214,
    AARCH64_INS_CPYFMRTWN = 215,
    AARCH64_INS_CPYFMT = 216,
    AARCH64_INS_CPYFMTN = 217,
    AARCH64_INS_CPYFMTRN = 218,
    AARCH64_INS_CPYFMTWN = 219,
    AARCH64_INS_CPYFMWN = 220,
    AARCH64_INS_CPYFMWT = 221,
    AARCH64_INS_CPYFMWTN = 222,
    AARCH64_INS_CPYFMWTRN = 223,
    AARCH64_INS_CPYFMWTWN = 224,
    AARCH64_INS_CPYFP = 225,
    AARCH64_INS_CPYFPN = 226,
    AARCH64_INS_CPYFPRN = 227,
    AARCH64_INS_CPYFPRT = 228,
    AARCH64_INS_CPYFPRTN = 229,
    AARCH64_INS_CPYFPRTRN = 230,
    AARCH64_INS_CPYFPRTWN = 231,
    AARCH64_INS_CPYFPT = 232,
    AARCH64_INS_CPYFPTN = 233,
    AARCH64_INS_CPYFPTRN = 234,
    AARCH64_INS_CPYFPTWN = 235,
    AARCH64_INS_CPYFPWN = 236,
    AARCH64_INS_CPYFPWT = 237,
    AARCH64_INS_CPYFPWTN = 238,
    AARCH64_INS_CPYFPWTRN = 239,
    AARCH64_INS_CPYFPWTWN = 240,
    AARCH64_INS_CPYM = 241,
    AARCH64_INS_CPYMN = 242,
    AARCH64_INS_CPYMRN = 243,
    AARCH64_INS_CPYMRT = 244,
    AARCH64_INS_CPYMRTN = 245,
    AARCH64_INS_CPYMRTRN = 246,
    AARCH64_INS_CPYMRTWN = 247,
    AARCH64_INS_CPYMT = 248,
    AARCH64_INS_CPYMTN = 249,
    AARCH64_INS_CPYMTRN = 250,
    AARCH64_INS_CPYMTWN = 251,
    AARCH64_INS_CPYMWN = 252,
    AARCH64_INS_CPYMWT = 253,
    AARCH64_INS_CPYMWTN = 254,
    AARCH64_INS_CPYMWTRN = 255,
    AARCH64_INS_CPYMWTWN = 256,
    AARCH64_INS_CPYP = 257,
    AARCH64_INS_CPYPN = 258,
    AARCH64_INS_CPYPRN = 259,
    AARCH64_INS_CPYPRT = 260,
    AARCH64_INS_CPYPRTN = 261,
    AARCH64_INS_CPYPRTRN = 262,
    AARCH64_INS_CPYPRTWN = 263,
    AARCH64_INS_CPYPT = 264,
    AARCH64_INS_CPYPTN = 265,
    AARCH64_INS_CPYPTRN = 266,
    AARCH64_INS_CPYPTWN = 267,
    AARCH64_INS_CPYPWN = 268,
    AARCH64_INS_CPYPWT = 269,
    AARCH64_INS_CPYPWTN = 270,
    AARCH64_INS_CPYPWTRN = 271,
    AARCH64_INS_CPYPWTWN = 272,
    AARCH64_INS_CPY = 273,
    AARCH64_INS_CRC32B = 274,
    AARCH64_INS_CRC32CB = 275,
    AARCH64_INS_CRC32CH = 276,
    AARCH64_INS_CRC32CW = 277,
    AARCH64_INS_CRC32CX = 278,
    AARCH64_INS_CRC32H = 279,
    AARCH64_INS_CRC32W = 280,
    AARCH64_INS_CRC32X = 281,
    AARCH64_INS_CSEL = 282,
    AARCH64_INS_CSINC = 283,
    AARCH64_INS_CSINV = 284,
    AARCH64_INS_CSNEG = 285,
    AARCH64_INS_CTERMEQ = 286,
    AARCH64_INS_CTERMNE = 287,
    AARCH64_INS_CTZ = 288,
    AARCH64_INS_DCPS1 = 289,
    AARCH64_INS_DCPS2 = 290,
    AARCH64_INS_DCPS3 = 291,
    AARCH64_INS_DECB = 292,
    AARCH64_INS_DECD = 293,
    AARCH64_INS_DECH = 294,
    AARCH64_INS_DECP = 295,
    AARCH64_INS_DECW = 296,
    AARCH64_INS_DMB = 297,
    AARCH64_INS_DRPS = 298,
    AARCH64_INS_DSB = 299,
    AARCH64_INS_DUPM = 300,
    AARCH64_INS_DUPQ = 301,
    AARCH64_INS_DUP = 302,
    AARCH64_INS_MOV = 303,
    AARCH64_INS_EON = 304,
    AARCH64_INS_EOR3 = 305,
    AARCH64_INS_EORBT = 306,
    AARCH64_INS_EORQV = 307,
    AARCH64_INS_EORS = 308,
    AARCH64_INS_EORTB = 309,
    AARCH64_INS_EORV = 310,
    AARCH64_INS_EOR = 311,
    AARCH64_INS_ERET = 312,
    AARCH64_INS_ERETAA = 313,
    AARCH64_INS_ERETAB = 314,
    AARCH64_INS_EXTQ = 315,
    AARCH64_INS_MOVA = 316,
    AARCH64_INS_EXTR = 317,
    AARCH64_INS_EXT = 318,
    AARCH64_INS_F1CVTL2 = 319,
    AARCH64_INS_F1CVTLT = 320,
    AARCH64_INS_F1CVTL = 321,
    AARCH64_INS_F1CVT = 322,
    AARCH64_INS_F2CVTL2 = 323,
    AARCH64_INS_F2CVTLT = 324,
    AARCH64_INS_F2CVTL = 325,
    AARCH64_INS_F2CVT = 326,
    AARCH64_INS_FABD = 327,
    AARCH64_INS_FABS = 328,
    AARCH64_INS_FACGE = 329,
    AARCH64_INS_FACGT = 330,
    AARCH64_INS_FADDA = 331,
    AARCH64_INS_FADD = 332,
    AARCH64_INS_FADDP = 333,
    AARCH64_INS_FADDQV = 334,
    AARCH64_INS_FADDV = 335,
    AARCH64_INS_FAMAX = 336,
    AARCH64_INS_FAMIN = 337,
    AARCH64_INS_FCADD = 338,
    AARCH64_INS_FCCMP = 339,
    AARCH64_INS_FCCMPE = 340,
    AARCH64_INS_FCLAMP = 341,
    AARCH64_INS_FCMEQ = 342,
    AARCH64_INS_FCMGE = 343,
    AARCH64_INS_FCMGT = 344,
    AARCH64_INS_FCMLA = 345,
    AARCH64_INS_FCMLE = 346,
    AARCH64_INS_FCMLT = 347,
    AARCH64_INS_FCMNE = 348,
    AARCH64_INS_FCMP = 349,
    AARCH64_INS_FCMPE = 350,
    AARCH64_INS_FCMUO = 351,
    AARCH64_INS_FCPY = 352,
    AARCH64_INS_FCSEL = 353,
    AARCH64_INS_FCVTAS = 354,
    AARCH64_INS_FCVTAU = 355,
    AARCH64_INS_FCVT = 356,
    AARCH64_INS_FCVTLT = 357,
    AARCH64_INS_FCVTL = 358,
    AARCH64_INS_FCVTL2 = 359,
    AARCH64_INS_FCVTMS = 360,
    AARCH64_INS_FCVTMU = 361,
    AARCH64_INS_FCVTNB = 362,
    AARCH64_INS_FCVTNS = 363,
    AARCH64_INS_FCVTNT = 364,
    AARCH64_INS_FCVTNU = 365,
    AARCH64_INS_FCVTN = 366,
    AARCH64_INS_FCVTN2 = 367,
    AARCH64_INS_FCVTPS = 368,
    AARCH64_INS_FCVTPU = 369,
    AARCH64_INS_FCVTXNT = 370,
    AARCH64_INS_FCVTXN = 371,
    AARCH64_INS_FCVTXN2 = 372,
    AARCH64_INS_FCVTX = 373,
    AARCH64_INS_FCVTZS = 374,
    AARCH64_INS_FCVTZU = 375,
    AARCH64_INS_FDIV = 376,
    AARCH64_INS_FDIVR = 377,
    AARCH64_INS_FDOT = 378,
    AARCH64_INS_FDUP = 379,
    AARCH64_INS_FEXPA = 380,
    AARCH64_INS_FJCVTZS = 381,
    AARCH64_INS_FLOGB = 382,
    AARCH64_INS_FMADD = 383,
    AARCH64_INS_FMAD = 384,
    AARCH64_INS_FMAX = 385,
    AARCH64_INS_FMAXNM = 386,
    AARCH64_INS_FMAXNMP = 387,
    AARCH64_INS_FMAXNMQV = 388,
    AARCH64_INS_FMAXNMV = 389,
    AARCH64_INS_FMAXP = 390,
    AARCH64_INS_FMAXQV = 391,
    AARCH64_INS_FMAXV = 392,
    AARCH64_INS_FMIN = 393,
    AARCH64_INS_FMINNM = 394,
    AARCH64_INS_FMINNMP = 395,
    AARCH64_INS_FMINNMQV = 396,
    AARCH64_INS_FMINNMV = 397,
    AARCH64_INS_FMINP = 398,
    AARCH64_INS_FMINQV = 399,
    AARCH64_INS_FMINV = 400,
    AARCH64_INS_FMLAL2 = 401,
    AARCH64_INS_FMLALB = 402,
    AARCH64_INS_FMLALLBB = 403,
    AARCH64_INS_FMLALLBT = 404,
    AARCH64_INS_FMLALLTB = 405,
    AARCH64_INS_FMLALLTT = 406,
    AARCH64_INS_FMLALL = 407,
    AARCH64_INS_FMLALT = 408,
    AARCH64_INS_FMLAL = 409,
    AARCH64_INS_FMLA = 410,
    AARCH64_INS_FMLSL2 = 411,
    AARCH64_INS_FMLSLB = 412,
    AARCH64_INS_FMLSLT = 413,
    AARCH64_INS_FMLSL = 414,
    AARCH64_INS_FMLS = 415,
    AARCH64_INS_FMMLA = 416,
    AARCH64_INS_FMOPA = 417,
    AARCH64_INS_FMOPS = 418,
    AARCH64_INS_FMOV = 419,
    AARCH64_INS_FMSB = 420,
    AARCH64_INS_FMSUB = 421,
    AARCH64_INS_FMUL = 422,
    AARCH64_INS_FMULX = 423,
    AARCH64_INS_FNEG = 424,
    AARCH64_INS_FNMADD = 425,
    AARCH64_INS_FNMAD = 426,
    AARCH64_INS_FNMLA = 427,
    AARCH64_INS_FNMLS = 428,
    AARCH64_INS_FNMSB = 429,
    AARCH64_INS_FNMSUB = 430,
    AARCH64_INS_FNMUL = 431,
    AARCH64_INS_FRECPE = 432,
    AARCH64_INS_FRECPS = 433,
    AARCH64_INS_FRECPX = 434,
    AARCH64_INS_FRINT32X = 435,
    AARCH64_INS_FRINT32Z = 436,
    AARCH64_INS_FRINT64X = 437,
    AARCH64_INS_FRINT64Z = 438,
    AARCH64_INS_FRINTA = 439,
    AARCH64_INS_FRINTI = 440,
    AARCH64_INS_FRINTM = 441,
    AARCH64_INS_FRINTN = 442,
    AARCH64_INS_FRINTP = 443,
    AARCH64_INS_FRINTX = 444,
    AARCH64_INS_FRINTZ = 445,
    AARCH64_INS_FRSQRTE = 446,
    AARCH64_INS_FRSQRTS = 447,
    AARCH64_INS_FSCALE = 448,
    AARCH64_INS_FSQRT = 449,
    AARCH64_INS_FSUB = 450,
    AARCH64_INS_FSUBR = 451,
    AARCH64_INS_FTMAD = 452,
    AARCH64_INS_FTSMUL = 453,
    AARCH64_INS_FTSSEL = 454,
    AARCH64_INS_FVDOTB = 455,
    AARCH64_INS_FVDOTT = 456,
    AARCH64_INS_FVDOT = 457,
    AARCH64_INS_GCSPOPCX = 458,
    AARCH64_INS_GCSPOPM = 459,
    AARCH64_INS_GCSPOPX = 460,
    AARCH64_INS_GCSPUSHM = 461,
    AARCH64_INS_GCSPUSHX = 462,
    AARCH64_INS_GCSSS1 = 463,
    AARCH64_INS_GCSSS2 = 464,
    AARCH64_INS_GCSSTR = 465,
    AARCH64_INS_GCSSTTR = 466,
    AARCH64_INS_LD1B = 467,
    AARCH64_INS_LD1D = 468,
    AARCH64_INS_LD1H = 469,
    AARCH64_INS_LD1Q = 470,
    AARCH64_INS_LD1SB = 471,
    AARCH64_INS_LD1SH = 472,
    AARCH64_INS_LD1SW = 473,
    AARCH64_INS_LD1W = 474,
    AARCH64_INS_LDFF1B = 475,
    AARCH64_INS_LDFF1D = 476,
    AARCH64_INS_LDFF1H = 477,
    AARCH64_INS_LDFF1SB = 478,
    AARCH64_INS_LDFF1SH = 479,
    AARCH64_INS_LDFF1SW = 480,
    AARCH64_INS_LDFF1W = 481,
    AARCH64_INS_GMI = 482,
    AARCH64_INS_HISTCNT = 483,
    AARCH64_INS_HISTSEG = 484,
    AARCH64_INS_HLT = 485,
    AARCH64_INS_HVC = 486,
    AARCH64_INS_INCB = 487,
    AARCH64_INS_INCD = 488,
    AARCH64_INS_INCH = 489,
    AARCH64_INS_INCP = 490,
    AARCH64_INS_INCW = 491,
    AARCH64_INS_INDEX = 492,
    AARCH64_INS_INSR = 493,
    AARCH64_INS_INS = 494,
    AARCH64_INS_IRG = 495,
    AARCH64_INS_ISB = 496,
    AARCH64_INS_LASTA = 497,
    AARCH64_INS_LASTB = 498,
    AARCH64_INS_LD1 = 499,
    AARCH64_INS_LD1RB = 500,
    AARCH64_INS_LD1RD = 501,
    AARCH64_INS_LD1RH = 502,
    AARCH64_INS_LD1ROB = 503,
    AARCH64_INS_LD1ROD = 504,
    AARCH64_INS_LD1ROH = 505,
    AARCH64_INS_LD1ROW = 506,
    AARCH64_INS_LD1RQB = 507,
    AARCH64_INS_LD1RQD = 508,
    AARCH64_INS_LD1RQH = 509,
    AARCH64_INS_LD1RQW = 510,
    AARCH64_INS_LD1RSB = 511,
    AARCH64_INS_LD1RSH = 512,
    AARCH64_INS_LD1RSW = 513,
    AARCH64_INS_LD1RW = 514,
    AARCH64_INS_LD1R = 515,
    AARCH64_INS_LD2B = 516,
    AARCH64_INS_LD2D = 517,
    AARCH64_INS_LD2H = 518,
    AARCH64_INS_LD2Q = 519,
    AARCH64_INS_LD2R = 520,
    AARCH64_INS_LD2 = 521,
    AARCH64_INS_LD2W = 522,
    AARCH64_INS_LD3B = 523,
    AARCH64_INS_LD3D = 524,
    AARCH64_INS_LD3H = 525,
    AARCH64_INS_LD3Q = 526,
    AARCH64_INS_LD3R = 527,
    AARCH64_INS_LD3 = 528,
    AARCH64_INS_LD3W = 529,
    AARCH64_INS_LD4B = 530,
    AARCH64_INS_LD4D = 531,
    AARCH64_INS_LD4 = 532,
    AARCH64_INS_LD4H = 533,
    AARCH64_INS_LD4Q = 534,
    AARCH64_INS_LD4R = 535,
    AARCH64_INS_LD4W = 536,
    AARCH64_INS_LD64B = 537,
    AARCH64_INS_LDADDAB = 538,
    AARCH64_INS_LDADDAH = 539,
    AARCH64_INS_LDADDALB = 540,
    AARCH64_INS_LDADDALH = 541,
    AARCH64_INS_LDADDAL = 542,
    AARCH64_INS_LDADDA = 543,
    AARCH64_INS_LDADDB = 544,
    AARCH64_INS_LDADDH = 545,
    AARCH64_INS_LDADDLB = 546,
    AARCH64_INS_LDADDLH = 547,
    AARCH64_INS_LDADDL = 548,
    AARCH64_INS_LDADD = 549,
    AARCH64_INS_LDAP1 = 550,
    AARCH64_INS_LDAPRB = 551,
    AARCH64_INS_LDAPRH = 552,
    AARCH64_INS_LDAPR = 553,
    AARCH64_INS_LDAPURB = 554,
    AARCH64_INS_LDAPURH = 555,
    AARCH64_INS_LDAPURSB = 556,
    AARCH64_INS_LDAPURSH = 557,
    AARCH64_INS_LDAPURSW = 558,
    AARCH64_INS_LDAPUR = 559,
    AARCH64_INS_LDARB = 560,
    AARCH64_INS_LDARH = 561,
    AARCH64_INS_LDAR = 562,
    AARCH64_INS_LDAXP = 563,
    AARCH64_INS_LDAXRB = 564,
    AARCH64_INS_LDAXRH = 565,
    AARCH64_INS_LDAXR = 566,
    AARCH64_INS_LDCLRAB = 567,
    AARCH64_INS_LDCLRAH = 568,
    AARCH64_INS_LDCLRALB = 569,
    AARCH64_INS_LDCLRALH = 570,
    AARCH64_INS_LDCLRAL = 571,
    AARCH64_INS_LDCLRA = 572,
    AARCH64_INS_LDCLRB = 573,
    AARCH64_INS_LDCLRH = 574,
    AARCH64_INS_LDCLRLB = 575,
    AARCH64_INS_LDCLRLH = 576,
    AARCH64_INS_LDCLRL = 577,
    AARCH64_INS_LDCLRP = 578,
    AARCH64_INS_LDCLRPA = 579,
    AARCH64_INS_LDCLRPAL = 580,
    AARCH64_INS_LDCLRPL = 581,
    AARCH64_INS_LDCLR = 582,
    AARCH64_INS_LDEORAB = 583,
    AARCH64_INS_LDEORAH = 584,
    AARCH64_INS_LDEORALB = 585,
    AARCH64_INS_LDEORALH = 586,
    AARCH64_INS_LDEORAL = 587,
    AARCH64_INS_LDEORA = 588,
    AARCH64_INS_LDEORB = 589,
    AARCH64_INS_LDEORH = 590,
    AARCH64_INS_LDEORLB = 591,
    AARCH64_INS_LDEORLH = 592,
    AARCH64_INS_LDEORL = 593,
    AARCH64_INS_LDEOR = 594,
    AARCH64_INS_LDG = 595,
    AARCH64_INS_LDGM = 596,
    AARCH64_INS_LDIAPP = 597,
    AARCH64_INS_LDLARB = 598,
    AARCH64_INS_LDLARH = 599,
    AARCH64_INS_LDLAR = 600,
    AARCH64_INS_LDNF1B = 601,
    AARCH64_INS_LDNF1D = 602,
    AARCH64_INS_LDNF1H = 603,
    AARCH64_INS_LDNF1SB = 604,
    AARCH64_INS_LDNF1SH = 605,
    AARCH64_INS_LDNF1SW = 606,
    AARCH64_INS_LDNF1W = 607,
    AARCH64_INS_LDNP = 608,
    AARCH64_INS_LDNT1B = 609,
    AARCH64_INS_LDNT1D = 610,
    AARCH64_INS_LDNT1H = 611,
    AARCH64_INS_LDNT1SB = 612,
    AARCH64_INS_LDNT1SH = 613,
    AARCH64_INS_LDNT1SW = 614,
    AARCH64_INS_LDNT1W = 615,
    AARCH64_INS_LDP = 616,
    AARCH64_INS_LDPSW = 617,
    AARCH64_INS_LDRAA = 618,
    AARCH64_INS_LDRAB = 619,
    AARCH64_INS_LDRB = 620,
    AARCH64_INS_LDR = 621,
    AARCH64_INS_LDRH = 622,
    AARCH64_INS_LDRSB = 623,
    AARCH64_INS_LDRSH = 624,
    AARCH64_INS_LDRSW = 625,
    AARCH64_INS_LDSETAB = 626,
    AARCH64_INS_LDSETAH = 627,
    AARCH64_INS_LDSETALB = 628,
    AARCH64_INS_LDSETALH = 629,
    AARCH64_INS_LDSETAL = 630,
    AARCH64_INS_LDSETA = 631,
    AARCH64_INS_LDSETB = 632,
    AARCH64_INS_LDSETH = 633,
    AARCH64_INS_LDSETLB = 634,
    AARCH64_INS_LDSETLH = 635,
    AARCH64_INS_LDSETL = 636,
    AARCH64_INS_LDSETP = 637,
    AARCH64_INS_LDSETPA = 638,
    AARCH64_INS_LDSETPAL = 639,
    AARCH64_INS_LDSETPL = 640,
    AARCH64_INS_LDSET = 641,
    AARCH64_INS_LDSMAXAB = 642,
    AARCH64_INS_LDSMAXAH = 643,
    AARCH64_INS_LDSMAXALB = 644,
    AARCH64_INS_LDSMAXALH = 645,
    AARCH64_INS_LDSMAXAL = 646,
    AARCH64_INS_LDSMAXA = 647,
    AARCH64_INS_LDSMAXB = 648,
    AARCH64_INS_LDSMAXH = 649,
    AARCH64_INS_LDSMAXLB = 650,
    AARCH64_INS_LDSMAXLH = 651,
    AARCH64_INS_LDSMAXL = 652,
    AARCH64_INS_LDSMAX = 653,
    AARCH64_INS_LDSMINAB = 654,
    AARCH64_INS_LDSMINAH = 655,
    AARCH64_INS_LDSMINALB = 656,
    AARCH64_INS_LDSMINALH = 657,
    AARCH64_INS_LDSMINAL = 658,
    AARCH64_INS_LDSMINA = 659,
    AARCH64_INS_LDSMINB = 660,
    AARCH64_INS_LDSMINH = 661,
    AARCH64_INS_LDSMINLB = 662,
    AARCH64_INS_LDSMINLH = 663,
    AARCH64_INS_LDSMINL = 664,
    AARCH64_INS_LDSMIN = 665,
    AARCH64_INS_LDTRB = 666,
    AARCH64_INS_LDTRH = 667,
    AARCH64_INS_LDTRSB = 668,
    AARCH64_INS_LDTRSH = 669,
    AARCH64_INS_LDTRSW = 670,
    AARCH64_INS_LDTR = 671,
    AARCH64_INS_LDUMAXAB = 672,
    AARCH64_INS_LDUMAXAH = 673,
    AARCH64_INS_LDUMAXALB = 674,
    AARCH64_INS_LDUMAXALH = 675,
    AARCH64_INS_LDUMAXAL = 676,
    AARCH64_INS_LDUMAXA = 677,
    AARCH64_INS_LDUMAXB = 678,
    AARCH64_INS_LDUMAXH = 679,
    AARCH64_INS_LDUMAXLB = 680,
    AARCH64_INS_LDUMAXLH = 681,
    AARCH64_INS_LDUMAXL = 682,
    AARCH64_INS_LDUMAX = 683,
    AARCH64_INS_LDUMINAB = 684,
    AARCH64_INS_LDUMINAH = 685,
    AARCH64_INS_LDUMINALB = 686,
    AARCH64_INS_LDUMINALH = 687,
    AARCH64_INS_LDUMINAL = 688,
    AARCH64_INS_LDUMINA = 689,
    AARCH64_INS_LDUMINB = 690,
    AARCH64_INS_LDUMINH = 691,
    AARCH64_INS_LDUMINLB = 692,
    AARCH64_INS_LDUMINLH = 693,
    AARCH64_INS_LDUMINL = 694,
    AARCH64_INS_LDUMIN = 695,
    AARCH64_INS_LDURB = 696,
    AARCH64_INS_LDUR = 697,
    AARCH64_INS_LDURH = 698,
    AARCH64_INS_LDURSB = 699,
    AARCH64_INS_LDURSH = 700,
    AARCH64_INS_LDURSW = 701,
    AARCH64_INS_LDXP = 702,
    AARCH64_INS_LDXRB = 703,
    AARCH64_INS_LDXRH = 704,
    AARCH64_INS_LDXR = 705,
    AARCH64_INS_LSLR = 706,
    AARCH64_INS_LSL = 707,
    AARCH64_INS_LSRR = 708,
    AARCH64_INS_LSR = 709,
    AARCH64_INS_LUTI2 = 710,
    AARCH64_INS_LUTI4 = 711,
    AARCH64_INS_MADDPT = 712,
    AARCH64_INS_MADD = 713,
    AARCH64_INS_MADPT = 714,
    AARCH64_INS_MAD = 715,
    AARCH64_INS_MATCH = 716,
    AARCH64_INS_MLAPT = 717,
    AARCH64_INS_MLA = 718,
    AARCH64_INS_MLS = 719,
    AARCH64_INS_SETGE = 720,
    AARCH64_INS_SETGEN = 721,
    AARCH64_INS_SETGET = 722,
    AARCH64_INS_SETGETN = 723,
    AARCH64_INS_MOVAZ = 724,
    AARCH64_INS_MOVI = 725,
    AARCH64_INS_MOVK = 726,
    AARCH64_INS_MOVN = 727,
    AARCH64_INS_MOVPRFX = 728,
    AARCH64_INS_MOVT = 729,
    AARCH64_INS_MOVZ = 730,
    AARCH64_INS_MRRS = 731,
    AARCH64_INS_MRS = 732,
    AARCH64_INS_MSB = 733,
    AARCH64_INS_MSR = 734,
    AARCH64_INS_MSRR = 735,
    AARCH64_INS_MSUBPT = 736,
    AARCH64_INS_MSUB = 737,
    AARCH64_INS_MUL = 738,
    AARCH64_INS_MVNI = 739,
    AARCH64_INS_NANDS = 740,
    AARCH64_INS_NAND = 741,
    AARCH64_INS_NBSL = 742,
    AARCH64_INS_NEG = 743,
    AARCH64_INS_NMATCH = 744,
    AARCH64_INS_NORS = 745,
    AARCH64_INS_NOR = 746,
    AARCH64_INS_NOT = 747,
    AARCH64_INS_ORNS = 748,
    AARCH64_INS_ORN = 749,
    AARCH64_INS_ORQV = 750,
    AARCH64_INS_ORRS = 751,
    AARCH64_INS_ORR = 752,
    AARCH64_INS_ORV = 753,
    AARCH64_INS_PACDA = 754,
    AARCH64_INS_PACDB = 755,
    AARCH64_INS_PACDZA = 756,
    AARCH64_INS_PACDZB = 757,
    AARCH64_INS_PACGA = 758,
    AARCH64_INS_PACIA = 759,
    AARCH64_INS_PACIA171615 = 760,
    AARCH64_INS_PACIASPPC = 761,
    AARCH64_INS_PACIB = 762,
    AARCH64_INS_PACIB171615 = 763,
    AARCH64_INS_PACIBSPPC = 764,
    AARCH64_INS_PACIZA = 765,
    AARCH64_INS_PACIZB = 766,
    AARCH64_INS_PACNBIASPPC = 767,
    AARCH64_INS_PACNBIBSPPC = 768,
    AARCH64_INS_PEXT = 769,
    AARCH64_INS_PFALSE = 770,
    AARCH64_INS_PFIRST = 771,
    AARCH64_INS_PMOV = 772,
    AARCH64_INS_PMULLB = 773,
    AARCH64_INS_PMULLT = 774,
    AARCH64_INS_PMULL2 = 775,
    AARCH64_INS_PMULL = 776,
    AARCH64_INS_PMUL = 777,
    AARCH64_INS_PNEXT = 778,
    AARCH64_INS_PRFB = 779,
    AARCH64_INS_PRFD = 780,
    AARCH64_INS_PRFH = 781,
    AARCH64_INS_PRFM = 782,
    AARCH64_INS_PRFUM = 783,
    AARCH64_INS_PRFW = 784,
    AARCH64_INS_PSEL = 785,
    AARCH64_INS_PTEST = 786,
    AARCH64_INS_PTRUES = 787,
    AARCH64_INS_PTRUE = 788,
    AARCH64_INS_PUNPKHI = 789,
    AARCH64_INS_PUNPKLO = 790,
    AARCH64_INS_RADDHNB = 791,
    AARCH64_INS_RADDHNT = 792,
    AARCH64_INS_RADDHN = 793,
    AARCH64_INS_RADDHN2 = 794,
    AARCH64_INS_RAX1 = 795,
    AARCH64_INS_RBIT = 796,
    AARCH64_INS_RCWCAS = 797,
    AARCH64_INS_RCWCASA = 798,
    AARCH64_INS_RCWCASAL = 799,
    AARCH64_INS_RCWCASL = 800,
    AARCH64_INS_RCWCASP = 801,
    AARCH64_INS_RCWCASPA = 802,
    AARCH64_INS_RCWCASPAL = 803,
    AARCH64_INS_RCWCASPL = 804,
    AARCH64_INS_RCWCLR = 805,
    AARCH64_INS_RCWCLRA = 806,
    AARCH64_INS_RCWCLRAL = 807,
    AARCH64_INS_RCWCLRL = 808,
    AARCH64_INS_RCWCLRP = 809,
    AARCH64_INS_RCWCLRPA = 810,
    AARCH64_INS_RCWCLRPAL = 811,
    AARCH64_INS_RCWCLRPL = 812,
    AARCH64_INS_RCWSCLR = 813,
    AARCH64_INS_RCWSCLRA = 814,
    AARCH64_INS_RCWSCLRAL = 815,
    AARCH64_INS_RCWSCLRL = 816,
    AARCH64_INS_RCWSCLRP = 817,
    AARCH64_INS_RCWSCLRPA = 818,
    AARCH64_INS_RCWSCLRPAL = 819,
    AARCH64_INS_RCWSCLRPL = 820,
    AARCH64_INS_RCWSCAS = 821,
    AARCH64_INS_RCWSCASA = 822,
    AARCH64_INS_RCWSCASAL = 823,
    AARCH64_INS_RCWSCASL = 824,
    AARCH64_INS_RCWSCASP = 825,
    AARCH64_INS_RCWSCASPA = 826,
    AARCH64_INS_RCWSCASPAL = 827,
    AARCH64_INS_RCWSCASPL = 828,
    AARCH64_INS_RCWSET = 829,
    AARCH64_INS_RCWSETA = 830,
    AARCH64_INS_RCWSETAL = 831,
    AARCH64_INS_RCWSETL = 832,
    AARCH64_INS_RCWSETP = 833,
    AARCH64_INS_RCWSETPA = 834,
    AARCH64_INS_RCWSETPAL = 835,
    AARCH64_INS_RCWSETPL = 836,
    AARCH64_INS_RCWSSET = 837,
    AARCH64_INS_RCWSSETA = 838,
    AARCH64_INS_RCWSSETAL = 839,
    AARCH64_INS_RCWSSETL = 840,
    AARCH64_INS_RCWSSETP = 841,
    AARCH64_INS_RCWSSETPA = 842,
    AARCH64_INS_RCWSSETPAL = 843,
    AARCH64_INS_RCWSSETPL = 844,
    AARCH64_INS_RCWSWP = 845,
    AARCH64_INS_RCWSWPA = 846,
    AARCH64_INS_RCWSWPAL = 847,
    AARCH64_INS_RCWSWPL = 848,
    AARCH64_INS_RCWSWPP = 849,
    AARCH64_INS_RCWSWPPA = 850,
    AARCH64_INS_RCWSWPPAL = 851,
    AARCH64_INS_RCWSWPPL = 852,
    AARCH64_INS_RCWSSWP = 853,
    AARCH64_INS_RCWSSWPA = 854,
    AARCH64_INS_RCWSSWPAL = 855,
    AARCH64_INS_RCWSSWPL = 856,
    AARCH64_INS_RCWSSWPP = 857,
    AARCH64_INS_RCWSSWPPA = 858,
    AARCH64_INS_RCWSSWPPAL = 859,
    AARCH64_INS_RCWSSWPPL = 860,
    AARCH64_INS_RDFFRS = 861,
    AARCH64_INS_RDFFR = 862,
    AARCH64_INS_RDSVL = 863,
    AARCH64_INS_RDVL = 864,
    AARCH64_INS_RET = 865,
    AARCH64_INS_RETAA = 866,
    AARCH64_INS_RETAASPPC = 867,
    AARCH64_INS_RETAB = 868,
    AARCH64_INS_RETABSPPC = 869,
    AARCH64_INS_REV16 = 870,
    AARCH64_INS_REV32 = 871,
    AARCH64_INS_REV64 = 872,
    AARCH64_INS_REVB = 873,
    AARCH64_INS_REVD = 874,
    AARCH64_INS_REVH = 875,
    AARCH64_INS_REVW = 876,
    AARCH64_INS_REV = 877,
    AARCH64_INS_RMIF = 878,
    AARCH64_INS_ROR = 879,
    AARCH64_INS_RPRFM = 880,
    AARCH64_INS_RSHRNB = 881,
    AARCH64_INS_RSHRNT = 882,
    AARCH64_INS_RSHRN2 = 883,
    AARCH64_INS_RSHRN = 884,
    AARCH64_INS_RSUBHNB = 885,
    AARCH64_INS_RSUBHNT = 886,
    AARCH64_INS_RSUBHN = 887,
    AARCH64_INS_RSUBHN2 = 888,
    AARCH64_INS_SABALB = 889,
    AARCH64_INS_SABALT = 890,
    AARCH64_INS_SABAL2 = 891,
    AARCH64_INS_SABAL = 892,
    AARCH64_INS_SABA = 893,
    AARCH64_INS_SABDLB = 894,
    AARCH64_INS_SABDLT = 895,
    AARCH64_INS_SABDL2 = 896,
    AARCH64_INS_SABDL = 897,
    AARCH64_INS_SABD = 898,
    AARCH64_INS_SADALP = 899,
    AARCH64_INS_SADDLBT = 900,
    AARCH64_INS_SADDLB = 901,
    AARCH64_INS_SADDLP = 902,
    AARCH64_INS_SADDLT = 903,
    AARCH64_INS_SADDLV = 904,
    AARCH64_INS_SADDL2 = 905,
    AARCH64_INS_SADDL = 906,
    AARCH64_INS_SADDV = 907,
    AARCH64_INS_SADDWB = 908,
    AARCH64_INS_SADDWT = 909,
    AARCH64_INS_SADDW2 = 910,
    AARCH64_INS_SADDW = 911,
    AARCH64_INS_SB = 912,
    AARCH64_INS_SBCLB = 913,
    AARCH64_INS_SBCLT = 914,
    AARCH64_INS_SBCS = 915,
    AARCH64_INS_SBC = 916,
    AARCH64_INS_SBFM = 917,
    AARCH64_INS_SCLAMP = 918,
    AARCH64_INS_SCVTF = 919,
    AARCH64_INS_SDIVR = 920,
    AARCH64_INS_SDIV = 921,
    AARCH64_INS_SDOT = 922,
    AARCH64_INS_SEL = 923,
    AARCH64_INS_SETE = 924,
    AARCH64_INS_SETEN = 925,
    AARCH64_INS_SETET = 926,
    AARCH64_INS_SETETN = 927,
    AARCH64_INS_SETF16 = 928,
    AARCH64_INS_SETF8 = 929,
    AARCH64_INS_SETFFR = 930,
    AARCH64_INS_SETGM = 931,
    AARCH64_INS_SETGMN = 932,
    AARCH64_INS_SETGMT = 933,
    AARCH64_INS_SETGMTN = 934,
    AARCH64_INS_SETGP = 935,
    AARCH64_INS_SETGPN = 936,
    AARCH64_INS_SETGPT = 937,
    AARCH64_INS_SETGPTN = 938,
    AARCH64_INS_SETM = 939,
    AARCH64_INS_SETMN = 940,
    AARCH64_INS_SETMT = 941,
    AARCH64_INS_SETMTN = 942,
    AARCH64_INS_SETP = 943,
    AARCH64_INS_SETPN = 944,
    AARCH64_INS_SETPT = 945,
    AARCH64_INS_SETPTN = 946,
    AARCH64_INS_SHA1C = 947,
    AARCH64_INS_SHA1H = 948,
    AARCH64_INS_SHA1M = 949,
    AARCH64_INS_SHA1P = 950,
    AARCH64_INS_SHA1SU0 = 951,
    AARCH64_INS_SHA1SU1 = 952,
    AARCH64_INS_SHA256H2 = 953,
    AARCH64_INS_SHA256H = 954,
    AARCH64_INS_SHA256SU0 = 955,
    AARCH64_INS_SHA256SU1 = 956,
    AARCH64_INS_SHA512H = 957,
    AARCH64_INS_SHA512H2 = 958,
    AARCH64_INS_SHA512SU0 = 959,
    AARCH64_INS_SHA512SU1 = 960,
    AARCH64_INS_SHADD = 961,
    AARCH64_INS_SHLL2 = 962,
    AARCH64_INS_SHLL = 963,
    AARCH64_INS_SHL = 964,
    AARCH64_INS_SHRNB = 965,
    AARCH64_INS_SHRNT = 966,
    AARCH64_INS_SHRN2 = 967,
    AARCH64_INS_SHRN = 968,
    AARCH64_INS_SHSUBR = 969,
    AARCH64_INS_SHSUB = 970,
    AARCH64_INS_SLI = 971,
    AARCH64_INS_SM3PARTW1 = 972,
    AARCH64_INS_SM3PARTW2 = 973,
    AARCH64_INS_SM3SS1 = 974,
    AARCH64_INS_SM3TT1A = 975,
    AARCH64_INS_SM3TT1B = 976,
    AARCH64_INS_SM3TT2A = 977,
    AARCH64_INS_SM3TT2B = 978,
    AARCH64_INS_SM4E = 979,
    AARCH64_INS_SM4EKEY = 980,
    AARCH64_INS_SMADDL = 981,
    AARCH64_INS_SMAXP = 982,
    AARCH64_INS_SMAXQV = 983,
    AARCH64_INS_SMAXV = 984,
    AARCH64_INS_SMAX = 985,
    AARCH64_INS_SMC = 986,
    AARCH64_INS_SMINP = 987,
    AARCH64_INS_SMINQV = 988,
    AARCH64_INS_SMINV = 989,
    AARCH64_INS_SMIN = 990,
    AARCH64_INS_SMLALB = 991,
    AARCH64_INS_SMLALL = 992,
    AARCH64_INS_SMLALT = 993,
    AARCH64_INS_SMLAL = 994,
    AARCH64_INS_SMLAL2 = 995,
    AARCH64_INS_SMLSLB = 996,
    AARCH64_INS_SMLSLL = 997,
    AARCH64_INS_SMLSLT = 998,
    AARCH64_INS_SMLSL = 999,
    AARCH64_INS_SMLSL2 = 1000,
    AARCH64_INS_SMMLA = 1001,
    AARCH64_INS_SMOPA = 1002,
    AARCH64_INS_SMOPS = 1003,
    AARCH64_INS_SMOV = 1004,
    AARCH64_INS_SMSUBL = 1005,
    AARCH64_INS_SMULH = 1006,
    AARCH64_INS_SMULLB = 1007,
    AARCH64_INS_SMULLT = 1008,
    AARCH64_INS_SMULL2 = 1009,
    AARCH64_INS_SMULL = 1010,
    AARCH64_INS_SPLICE = 1011,
    AARCH64_INS_SQABS = 1012,
    AARCH64_INS_SQADD = 1013,
    AARCH64_INS_SQCADD = 1014,
    AARCH64_INS_SQCVTN = 1015,
    AARCH64_INS_SQCVTUN = 1016,
    AARCH64_INS_SQCVTU = 1017,
    AARCH64_INS_SQCVT = 1018,
    AARCH64_INS_SQDECB = 1019,
    AARCH64_INS_SQDECD = 1020,
    AARCH64_INS_SQDECH = 1021,
    AARCH64_INS_SQDECP = 1022,
    AARCH64_INS_SQDECW = 1023,
    AARCH64_INS_SQDMLALBT = 1024,
    AARCH64_INS_SQDMLALB = 1025,
    AARCH64_INS_SQDMLALT = 1026,
    AARCH64_INS_SQDMLAL = 1027,
    AARCH64_INS_SQDMLAL2 = 1028,
    AARCH64_INS_SQDMLSLBT = 1029,
    AARCH64_INS_SQDMLSLB = 1030,
    AARCH64_INS_SQDMLSLT = 1031,
    AARCH64_INS_SQDMLSL = 1032,
    AARCH64_INS_SQDMLSL2 = 1033,
    AARCH64_INS_SQDMULH = 1034,
    AARCH64_INS_SQDMULLB = 1035,
    AARCH64_INS_SQDMULLT = 1036,
    AARCH64_INS_SQDMULL = 1037,
    AARCH64_INS_SQDMULL2 = 1038,
    AARCH64_INS_SQINCB = 1039,
    AARCH64_INS_SQINCD = 1040,
    AARCH64_INS_SQINCH = 1041,
    AARCH64_INS_SQINCP = 1042,
    AARCH64_INS_SQINCW = 1043,
    AARCH64_INS_SQNEG = 1044,
    AARCH64_INS_SQRDCMLAH = 1045,
    AARCH64_INS_SQRDMLAH = 1046,
    AARCH64_INS_SQRDMLSH = 1047,
    AARCH64_INS_SQRDMULH = 1048,
    AARCH64_INS_SQRSHLR = 1049,
    AARCH64_INS_SQRSHL = 1050,
    AARCH64_INS_SQRSHRNB = 1051,
    AARCH64_INS_SQRSHRNT = 1052,
    AARCH64_INS_SQRSHRN = 1053,
    AARCH64_INS_SQRSHRN2 = 1054,
    AARCH64_INS_SQRSHRUNB = 1055,
    AARCH64_INS_SQRSHRUNT = 1056,
    AARCH64_INS_SQRSHRUN = 1057,
    AARCH64_INS_SQRSHRUN2 = 1058,
    AARCH64_INS_SQRSHRU = 1059,
    AARCH64_INS_SQRSHR = 1060,
    AARCH64_INS_SQSHLR = 1061,
    AARCH64_INS_SQSHLU = 1062,
    AARCH64_INS_SQSHL = 1063,
    AARCH64_INS_SQSHRNB = 1064,
    AARCH64_INS_SQSHRNT = 1065,
    AARCH64_INS_SQSHRN = 1066,
    AARCH64_INS_SQSHRN2 = 1067,
    AARCH64_INS_SQSHRUNB = 1068,
    AARCH64_INS_SQSHRUNT = 1069,
    AARCH64_INS_SQSHRUN = 1070,
    AARCH64_INS_SQSHRUN2 = 1071,
    AARCH64_INS_SQSUBR = 1072,
    AARCH64_INS_SQSUB = 1073,
    AARCH64_INS_SQXTNB = 1074,
    AARCH64_INS_SQXTNT = 1075,
    AARCH64_INS_SQXTN2 = 1076,
    AARCH64_INS_SQXTN = 1077,
    AARCH64_INS_SQXTUNB = 1078,
    AARCH64_INS_SQXTUNT = 1079,
    AARCH64_INS_SQXTUN2 = 1080,
    AARCH64_INS_SQXTUN = 1081,
    AARCH64_INS_SRHADD = 1082,
    AARCH64_INS_SRI = 1083,
    AARCH64_INS_SRSHLR = 1084,
    AARCH64_INS_SRSHL = 1085,
    AARCH64_INS_SRSHR = 1086,
    AARCH64_INS_SRSRA = 1087,
    AARCH64_INS_SSHLLB = 1088,
    AARCH64_INS_SSHLLT = 1089,
    AARCH64_INS_SSHLL2 = 1090,
    AARCH64_INS_SSHLL = 1091,
    AARCH64_INS_SSHL = 1092,
    AARCH64_INS_SSHR = 1093,
    AARCH64_INS_SSRA = 1094,
    AARCH64_INS_ST1B = 1095,
    AARCH64_INS_ST1D = 1096,
    AARCH64_INS_ST1H = 1097,
    AARCH64_INS_ST1Q = 1098,
    AARCH64_INS_ST1W = 1099,
    AARCH64_INS_SSUBLBT = 1100,
    AARCH64_INS_SSUBLB = 1101,
    AARCH64_INS_SSUBLTB = 1102,
    AARCH64_INS_SSUBLT = 1103,
    AARCH64_INS_SSUBL2 = 1104,
    AARCH64_INS_SSUBL = 1105,
    AARCH64_INS_SSUBWB = 1106,
    AARCH64_INS_SSUBWT = 1107,
    AARCH64_INS_SSUBW2 = 1108,
    AARCH64_INS_SSUBW = 1109,
    AARCH64_INS_ST1 = 1110,
    AARCH64_INS_ST2B = 1111,
    AARCH64_INS_ST2D = 1112,
    AARCH64_INS_ST2G = 1113,
    AARCH64_INS_ST2H = 1114,
    AARCH64_INS_ST2Q = 1115,
    AARCH64_INS_ST2 = 1116,
    AARCH64_INS_ST2W = 1117,
    AARCH64_INS_ST3B = 1118,
    AARCH64_INS_ST3D = 1119,
    AARCH64_INS_ST3H = 1120,
    AARCH64_INS_ST3Q = 1121,
    AARCH64_INS_ST3 = 1122,
    AARCH64_INS_ST3W = 1123,
    AARCH64_INS_ST4B = 1124,
    AARCH64_INS_ST4D = 1125,
    AARCH64_INS_ST4 = 1126,
    AARCH64_INS_ST4H = 1127,
    AARCH64_INS_ST4Q = 1128,
    AARCH64_INS_ST4W = 1129,
    AARCH64_INS_ST64B = 1130,
    AARCH64_INS_ST64BV = 1131,
    AARCH64_INS_ST64BV0 = 1132,
    AARCH64_INS_STGM = 1133,
    AARCH64_INS_STGP = 1134,
    AARCH64_INS_STG = 1135,
    AARCH64_INS_STILP = 1136,
    AARCH64_INS_STL1 = 1137,
    AARCH64_INS_STLLRB = 1138,
    AARCH64_INS_STLLRH = 1139,
    AARCH64_INS_STLLR = 1140,
    AARCH64_INS_STLRB = 1141,
    AARCH64_INS_STLRH = 1142,
    AARCH64_INS_STLR = 1143,
    AARCH64_INS_STLURB = 1144,
    AARCH64_INS_STLURH = 1145,
    AARCH64_INS_STLUR = 1146,
    AARCH64_INS_STLXP = 1147,
    AARCH64_INS_STLXRB = 1148,
    AARCH64_INS_STLXRH = 1149,
    AARCH64_INS_STLXR = 1150,
    AARCH64_INS_STNP = 1151,
    AARCH64_INS_STNT1B = 1152,
    AARCH64_INS_STNT1D = 1153,
    AARCH64_INS_STNT1H = 1154,
    AARCH64_INS_STNT1W = 1155,
    AARCH64_INS_STP = 1156,
    AARCH64_INS_STRB = 1157,
    AARCH64_INS_STR = 1158,
    AARCH64_INS_STRH = 1159,
    AARCH64_INS_STTRB = 1160,
    AARCH64_INS_STTRH = 1161,
    AARCH64_INS_STTR = 1162,
    AARCH64_INS_STURB = 1163,
    AARCH64_INS_STUR = 1164,
    AARCH64_INS_STURH = 1165,
    AARCH64_INS_STXP = 1166,
    AARCH64_INS_STXRB = 1167,
    AARCH64_INS_STXRH = 1168,
    AARCH64_INS_STXR = 1169,
    AARCH64_INS_STZ2G = 1170,
    AARCH64_INS_STZGM = 1171,
    AARCH64_INS_STZG = 1172,
    AARCH64_INS_SUBG = 1173,
    AARCH64_INS_SUBHNB = 1174,
    AARCH64_INS_SUBHNT = 1175,
    AARCH64_INS_SUBHN = 1176,
    AARCH64_INS_SUBHN2 = 1177,
    AARCH64_INS_SUBP = 1178,
    AARCH64_INS_SUBPS = 1179,
    AARCH64_INS_SUBPT = 1180,
    AARCH64_INS_SUBR = 1181,
    AARCH64_INS_SUBS = 1182,
    AARCH64_INS_SUB = 1183,
    AARCH64_INS_SUDOT = 1184,
    AARCH64_INS_SUMLALL = 1185,
    AARCH64_INS_SUMOPA = 1186,
    AARCH64_INS_SUMOPS = 1187,
    AARCH64_INS_SUNPKHI = 1188,
    AARCH64_INS_SUNPKLO = 1189,
    AARCH64_INS_SUNPK = 1190,
    AARCH64_INS_SUQADD = 1191,
    AARCH64_INS_SUVDOT = 1192,
    AARCH64_INS_SVC = 1193,
    AARCH64_INS_SVDOT = 1194,
    AARCH64_INS_SWPAB = 1195,
    AARCH64_INS_SWPAH = 1196,
    AARCH64_INS_SWPALB = 1197,
    AARCH64_INS_SWPALH = 1198,
    AARCH64_INS_SWPAL = 1199,
    AARCH64_INS_SWPA = 1200,
    AARCH64_INS_SWPB = 1201,
    AARCH64_INS_SWPH = 1202,
    AARCH64_INS_SWPLB = 1203,
    AARCH64_INS_SWPLH = 1204,
    AARCH64_INS_SWPL = 1205,
    AARCH64_INS_SWPP = 1206,
    AARCH64_INS_SWPPA = 1207,
    AARCH64_INS_SWPPAL = 1208,
    AARCH64_INS_SWPPL = 1209,
    AARCH64_INS_SWP = 1210,
    AARCH64_INS_SXTB = 1211,
    AARCH64_INS_SXTH = 1212,
    AARCH64_INS_SXTW = 1213,
    AARCH64_INS_SYSL = 1214,
    AARCH64_INS_SYSP = 1215,
    AARCH64_INS_SYS = 1216,
    AARCH64_INS_TBLQ = 1217,
    AARCH64_INS_TBL = 1218,
    AARCH64_INS_TBNZ = 1219,
    AARCH64_INS_TBXQ = 1220,
    AARCH64_INS_TBX = 1221,
    AARCH64_INS_TBZ = 1222,
    AARCH64_INS_TCANCEL = 1223,
    AARCH64_INS_TCOMMIT = 1224,
    AARCH64_INS_TRCIT = 1225,
    AARCH64_INS_TRN1 = 1226,
    AARCH64_INS_TRN2 = 1227,
    AARCH64_INS_TSB = 1228,
    AARCH64_INS_TSTART = 1229,
    AARCH64_INS_TTEST = 1230,
    AARCH64_INS_UABALB = 1231,
    AARCH64_INS_UABALT = 1232,
    AARCH64_INS_UABAL2 = 1233,
    AARCH64_INS_UABAL = 1234,
    AARCH64_INS_UABA = 1235,
    AARCH64_INS_UABDLB = 1236,
    AARCH64_INS_UABDLT = 1237,
    AARCH64_INS_UABDL2 = 1238,
    AARCH64_INS_UABDL = 1239,
    AARCH64_INS_UABD = 1240,
    AARCH64_INS_UADALP = 1241,
    AARCH64_INS_UADDLB = 1242,
    AARCH64_INS_UADDLP = 1243,
    AARCH64_INS_UADDLT = 1244,
    AARCH64_INS_UADDLV = 1245,
    AARCH64_INS_UADDL2 = 1246,
    AARCH64_INS_UADDL = 1247,
    AARCH64_INS_UADDV = 1248,
    AARCH64_INS_UADDWB = 1249,
    AARCH64_INS_UADDWT = 1250,
    AARCH64_INS_UADDW2 = 1251,
    AARCH64_INS_UADDW = 1252,
    AARCH64_INS_UBFM = 1253,
    AARCH64_INS_UCLAMP = 1254,
    AARCH64_INS_UCVTF = 1255,
    AARCH64_INS_UDF = 1256,
    AARCH64_INS_UDIVR = 1257,
    AARCH64_INS_UDIV = 1258,
    AARCH64_INS_UDOT = 1259,
    AARCH64_INS_UHADD = 1260,
    AARCH64_INS_UHSUBR = 1261,
    AARCH64_INS_UHSUB = 1262,
    AARCH64_INS_UMADDL = 1263,
    AARCH64_INS_UMAXP = 1264,
    AARCH64_INS_UMAXQV = 1265,
    AARCH64_INS_UMAXV = 1266,
    AARCH64_INS_UMAX = 1267,
    AARCH64_INS_UMINP = 1268,
    AARCH64_INS_UMINQV = 1269,
    AARCH64_INS_UMINV = 1270,
    AARCH64_INS_UMIN = 1271,
    AARCH64_INS_UMLALB = 1272,
    AARCH64_INS_UMLALL = 1273,
    AARCH64_INS_UMLALT = 1274,
    AARCH64_INS_UMLAL = 1275,
    AARCH64_INS_UMLAL2 = 1276,
    AARCH64_INS_UMLSLB = 1277,
    AARCH64_INS_UMLSLL = 1278,
    AARCH64_INS_UMLSLT = 1279,
    AARCH64_INS_UMLSL = 1280,
    AARCH64_INS_UMLSL2 = 1281,
    AARCH64_INS_UMMLA = 1282,
    AARCH64_INS_UMOPA = 1283,
    AARCH64_INS_UMOPS = 1284,
    AARCH64_INS_UMOV = 1285,
    AARCH64_INS_UMSUBL = 1286,
    AARCH64_INS_UMULH = 1287,
    AARCH64_INS_UMULLB = 1288,
    AARCH64_INS_UMULLT = 1289,
    AARCH64_INS_UMULL2 = 1290,
    AARCH64_INS_UMULL = 1291,
    AARCH64_INS_UQADD = 1292,
    AARCH64_INS_UQCVTN = 1293,
    AARCH64_INS_UQCVT = 1294,
    AARCH64_INS_UQDECB = 1295,
    AARCH64_INS_UQDECD = 1296,
    AARCH64_INS_UQDECH = 1297,
    AARCH64_INS_UQDECP = 1298,
    AARCH64_INS_UQDECW = 1299,
    AARCH64_INS_UQINCB = 1300,
    AARCH64_INS_UQINCD = 1301,
    AARCH64_INS_UQINCH = 1302,
    AARCH64_INS_UQINCP = 1303,
    AARCH64_INS_UQINCW = 1304,
    AARCH64_INS_UQRSHLR = 1305,
    AARCH64_INS_UQRSHL = 1306,
    AARCH64_INS_UQRSHRNB = 1307,
    AARCH64_INS_UQRSHRNT = 1308,
    AARCH64_INS_UQRSHRN = 1309,
    AARCH64_INS_UQRSHRN2 = 1310,
    AARCH64_INS_UQRSHR = 1311,
    AARCH64_INS_UQSHLR = 1312,
    AARCH64_INS_UQSHL = 1313,
    AARCH64_INS_UQSHRNB = 1314,
    AARCH64_INS_UQSHRNT = 1315,
    AARCH64_INS_UQSHRN = 1316,
    AARCH64_INS_UQSHRN2 = 1317,
    AARCH64_INS_UQSUBR = 1318,
    AARCH64_INS_UQSUB = 1319,
    AARCH64_INS_UQXTNB = 1320,
    AARCH64_INS_UQXTNT = 1321,
    AARCH64_INS_UQXTN2 = 1322,
    AARCH64_INS_UQXTN = 1323,
    AARCH64_INS_URECPE = 1324,
    AARCH64_INS_URHADD = 1325,
    AARCH64_INS_URSHLR = 1326,
    AARCH64_INS_URSHL = 1327,
    AARCH64_INS_URSHR = 1328,
    AARCH64_INS_URSQRTE = 1329,
    AARCH64_INS_URSRA = 1330,
    AARCH64_INS_USDOT = 1331,
    AARCH64_INS_USHLLB = 1332,
    AARCH64_INS_USHLLT = 1333,
    AARCH64_INS_USHLL2 = 1334,
    AARCH64_INS_USHLL = 1335,
    AARCH64_INS_USHL = 1336,
    AARCH64_INS_USHR = 1337,
    AARCH64_INS_USMLALL = 1338,
    AARCH64_INS_USMMLA = 1339,
    AARCH64_INS_USMOPA = 1340,
    AARCH64_INS_USMOPS = 1341,
    AARCH64_INS_USQADD = 1342,
    AARCH64_INS_USRA = 1343,
    AARCH64_INS_USUBLB = 1344,
    AARCH64_INS_USUBLT = 1345,
    AARCH64_INS_USUBL2 = 1346,
    AARCH64_INS_USUBL = 1347,
    AARCH64_INS_USUBWB = 1348,
    AARCH64_INS_USUBWT = 1349,
    AARCH64_INS_USUBW2 = 1350,
    AARCH64_INS_USUBW = 1351,
    AARCH64_INS_USVDOT = 1352,
    AARCH64_INS_UUNPKHI = 1353,
    AARCH64_INS_UUNPKLO = 1354,
    AARCH64_INS_UUNPK = 1355,
    AARCH64_INS_UVDOT = 1356,
    AARCH64_INS_UXTB = 1357,
    AARCH64_INS_UXTH = 1358,
    AARCH64_INS_UXTW = 1359,
    AARCH64_INS_UZP1 = 1360,
    AARCH64_INS_UZP2 = 1361,
    AARCH64_INS_UZPQ1 = 1362,
    AARCH64_INS_UZPQ2 = 1363,
    AARCH64_INS_UZP = 1364,
    AARCH64_INS_WFET = 1365,
    AARCH64_INS_WFIT = 1366,
    AARCH64_INS_WHILEGE = 1367,
    AARCH64_INS_WHILEGT = 1368,
    AARCH64_INS_WHILEHI = 1369,
    AARCH64_INS_WHILEHS = 1370,
    AARCH64_INS_WHILELE = 1371,
    AARCH64_INS_WHILELO = 1372,
    AARCH64_INS_WHILELS = 1373,
    AARCH64_INS_WHILELT = 1374,
    AARCH64_INS_WHILERW = 1375,
    AARCH64_INS_WHILEWR = 1376,
    AARCH64_INS_WRFFR = 1377,
    AARCH64_INS_XAFLAG = 1378,
    AARCH64_INS_XAR = 1379,
    AARCH64_INS_XPACD = 1380,
    AARCH64_INS_XPACI = 1381,
    AARCH64_INS_XTN2 = 1382,
    AARCH64_INS_XTN = 1383,
    AARCH64_INS_ZERO = 1384,
    AARCH64_INS_ZIP1 = 1385,
    AARCH64_INS_ZIP2 = 1386,
    AARCH64_INS_ZIPQ1 = 1387,
    AARCH64_INS_ZIPQ2 = 1388,
    AARCH64_INS_ZIP = 1389,
    AARCH64_INS_ENDING = 1390,
    AARCH64_INS_ALIAS_BEGIN = 1391,
    AARCH64_INS_ALIAS_ADDPT = 1392,
    AARCH64_INS_ALIAS_GCSB = 1393,
    AARCH64_INS_ALIAS_GCSPOPM = 1394,
    AARCH64_INS_ALIAS_LDAPUR = 1395,
    AARCH64_INS_ALIAS_STLLRB = 1396,
    AARCH64_INS_ALIAS_STLLRH = 1397,
    AARCH64_INS_ALIAS_STLLR = 1398,
    AARCH64_INS_ALIAS_STLRB = 1399,
    AARCH64_INS_ALIAS_STLRH = 1400,
    AARCH64_INS_ALIAS_STLR = 1401,
    AARCH64_INS_ALIAS_STLUR = 1402,
    AARCH64_INS_ALIAS_SUBPT = 1403,
    AARCH64_INS_ALIAS_LDRAA = 1404,
    AARCH64_INS_ALIAS_ADD = 1405,
    AARCH64_INS_ALIAS_CMN = 1406,
    AARCH64_INS_ALIAS_ADDS = 1407,
    AARCH64_INS_ALIAS_AND = 1408,
    AARCH64_INS_ALIAS_ANDS = 1409,
    AARCH64_INS_ALIAS_LDR = 1410,
    AARCH64_INS_ALIAS_STR = 1411,
    AARCH64_INS_ALIAS_LDRB = 1412,
    AARCH64_INS_ALIAS_STRB = 1413,
    AARCH64_INS_ALIAS_LDRH = 1414,
    AARCH64_INS_ALIAS_STRH = 1415,
    AARCH64_INS_ALIAS_PRFM = 1416,
    AARCH64_INS_ALIAS_LDAPURB = 1417,
    AARCH64_INS_ALIAS_STLURB = 1418,
    AARCH64_INS_ALIAS_LDUR = 1419,
    AARCH64_INS_ALIAS_STUR = 1420,
    AARCH64_INS_ALIAS_PRFUM = 1421,
    AARCH64_INS_ALIAS_LDTR = 1422,
    AARCH64_INS_ALIAS_STTR = 1423,
    AARCH64_INS_ALIAS_LDP = 1424,
    AARCH64_INS_ALIAS_STGP = 1425,
    AARCH64_INS_ALIAS_LDNP = 1426,
    AARCH64_INS_ALIAS_STNP = 1427,
    AARCH64_INS_ALIAS_STG = 1428,
    AARCH64_INS_ALIAS_MOV = 1429,
    AARCH64_INS_ALIAS_LD1 = 1430,
    AARCH64_INS_ALIAS_LD1R = 1431,
    AARCH64_INS_ALIAS_STADDLB = 1432,
    AARCH64_INS_ALIAS_STADDLH = 1433,
    AARCH64_INS_ALIAS_STADDL = 1434,
    AARCH64_INS_ALIAS_STADDB = 1435,
    AARCH64_INS_ALIAS_STADDH = 1436,
    AARCH64_INS_ALIAS_STADD = 1437,
    AARCH64_INS_ALIAS_PTRUE = 1438,
    AARCH64_INS_ALIAS_PTRUES = 1439,
    AARCH64_INS_ALIAS_CNTB = 1440,
    AARCH64_INS_ALIAS_SQINCH = 1441,
    AARCH64_INS_ALIAS_INCB = 1442,
    AARCH64_INS_ALIAS_SQINCB = 1443,
    AARCH64_INS_ALIAS_UQINCB = 1444,
    AARCH64_INS_ALIAS_ORR = 1445,
    AARCH64_INS_ALIAS_DUPM = 1446,
    AARCH64_INS_ALIAS_FMOV = 1447,
    AARCH64_INS_ALIAS_EOR3 = 1448,
    AARCH64_INS_ALIAS_ST1B = 1449,
    AARCH64_INS_ALIAS_ST2B = 1450,
    AARCH64_INS_ALIAS_ST2Q = 1451,
    AARCH64_INS_ALIAS_STNT1B = 1452,
    AARCH64_INS_ALIAS_LD1B = 1453,
    AARCH64_INS_ALIAS_LDNT1B = 1454,
    AARCH64_INS_ALIAS_LD1RQB = 1455,
    AARCH64_INS_ALIAS_LD1RB = 1456,
    AARCH64_INS_ALIAS_LDFF1B = 1457,
    AARCH64_INS_ALIAS_LDNF1B = 1458,
    AARCH64_INS_ALIAS_LD2B = 1459,
    AARCH64_INS_ALIAS_LD1SB = 1460,
    AARCH64_INS_ALIAS_PRFB = 1461,
    AARCH64_INS_ALIAS_LDNT1SB = 1462,
    AARCH64_INS_ALIAS_LD1ROB = 1463,
    AARCH64_INS_ALIAS_LD1Q = 1464,
    AARCH64_INS_ALIAS_ST1Q = 1465,
    AARCH64_INS_ALIAS_LD1W = 1466,
    AARCH64_INS_ALIAS_PMOV = 1467,
    AARCH64_INS_ALIAS_SMSTART = 1468,
    AARCH64_INS_ALIAS_SMSTOP = 1469,
    AARCH64_INS_ALIAS_ZERO = 1470,
    AARCH64_INS_ALIAS_MOVT = 1471,
    AARCH64_INS_ALIAS_NOP = 1472,
    AARCH64_INS_ALIAS_YIELD = 1473,
    AARCH64_INS_ALIAS_WFE = 1474,
    AARCH64_INS_ALIAS_WFI = 1475,
    AARCH64_INS_ALIAS_SEV = 1476,
    AARCH64_INS_ALIAS_SEVL = 1477,
    AARCH64_INS_ALIAS_DGH = 1478,
    AARCH64_INS_ALIAS_ESB = 1479,
    AARCH64_INS_ALIAS_CSDB = 1480,
    AARCH64_INS_ALIAS_BTI = 1481,
    AARCH64_INS_ALIAS_PSB = 1482,
    AARCH64_INS_ALIAS_CHKFEAT = 1483,
    AARCH64_INS_ALIAS_PACIAZ = 1484,
    AARCH64_INS_ALIAS_PACIBZ = 1485,
    AARCH64_INS_ALIAS_AUTIAZ = 1486,
    AARCH64_INS_ALIAS_AUTIBZ = 1487,
    AARCH64_INS_ALIAS_PACIASP = 1488,
    AARCH64_INS_ALIAS_PACIBSP = 1489,
    AARCH64_INS_ALIAS_AUTIASP = 1490,
    AARCH64_INS_ALIAS_AUTIBSP = 1491,
    AARCH64_INS_ALIAS_PACIA1716 = 1492,
    AARCH64_INS_ALIAS_PACIB1716 = 1493,
    AARCH64_INS_ALIAS_AUTIA1716 = 1494,
    AARCH64_INS_ALIAS_AUTIB1716 = 1495,
    AARCH64_INS_ALIAS_XPACLRI = 1496,
    AARCH64_INS_ALIAS_LDRAB = 1497,
    AARCH64_INS_ALIAS_PACM = 1498,
    AARCH64_INS_ALIAS_CLREX = 1499,
    AARCH64_INS_ALIAS_ISB = 1500,
    AARCH64_INS_ALIAS_SSBB = 1501,
    AARCH64_INS_ALIAS_PSSBB = 1502,
    AARCH64_INS_ALIAS_DFB = 1503,
    AARCH64_INS_ALIAS_SYS = 1504,
    AARCH64_INS_ALIAS_MOVN = 1505,
    AARCH64_INS_ALIAS_MOVZ = 1506,
    AARCH64_INS_ALIAS_NGC = 1507,
    AARCH64_INS_ALIAS_NGCS = 1508,
    AARCH64_INS_ALIAS_SUB = 1509,
    AARCH64_INS_ALIAS_CMP = 1510,
    AARCH64_INS_ALIAS_SUBS = 1511,
    AARCH64_INS_ALIAS_NEG = 1512,
    AARCH64_INS_ALIAS_NEGS = 1513,
    AARCH64_INS_ALIAS_MUL = 1514,
    AARCH64_INS_ALIAS_MNEG = 1515,
    AARCH64_INS_ALIAS_SMULL = 1516,
    AARCH64_INS_ALIAS_SMNEGL = 1517,
    AARCH64_INS_ALIAS_UMULL = 1518,
    AARCH64_INS_ALIAS_UMNEGL = 1519,
    AARCH64_INS_ALIAS_STCLRLB = 1520,
    AARCH64_INS_ALIAS_STCLRLH = 1521,
    AARCH64_INS_ALIAS_STCLRL = 1522,
    AARCH64_INS_ALIAS_STCLRB = 1523,
    AARCH64_INS_ALIAS_STCLRH = 1524,
    AARCH64_INS_ALIAS_STCLR = 1525,
    AARCH64_INS_ALIAS_STEORLB = 1526,
    AARCH64_INS_ALIAS_STEORLH = 1527,
    AARCH64_INS_ALIAS_STEORL = 1528,
    AARCH64_INS_ALIAS_STEORB = 1529,
    AARCH64_INS_ALIAS_STEORH = 1530,
    AARCH64_INS_ALIAS_STEOR = 1531,
    AARCH64_INS_ALIAS_STSETLB = 1532,
    AARCH64_INS_ALIAS_STSETLH = 1533,
    AARCH64_INS_ALIAS_STSETL = 1534,
    AARCH64_INS_ALIAS_STSETB = 1535,
    AARCH64_INS_ALIAS_STSETH = 1536,
    AARCH64_INS_ALIAS_STSET = 1537,
    AARCH64_INS_ALIAS_STSMAXLB = 1538,
    AARCH64_INS_ALIAS_STSMAXLH = 1539,
    AARCH64_INS_ALIAS_STSMAXL = 1540,
    AARCH64_INS_ALIAS_STSMAXB = 1541,
    AARCH64_INS_ALIAS_STSMAXH = 1542,
    AARCH64_INS_ALIAS_STSMAX = 1543,
    AARCH64_INS_ALIAS_STSMINLB = 1544,
    AARCH64_INS_ALIAS_STSMINLH = 1545,
    AARCH64_INS_ALIAS_STSMINL = 1546,
    AARCH64_INS_ALIAS_STSMINB = 1547,
    AARCH64_INS_ALIAS_STSMINH = 1548,
    AARCH64_INS_ALIAS_STSMIN = 1549,
    AARCH64_INS_ALIAS_STUMAXLB = 1550,
    AARCH64_INS_ALIAS_STUMAXLH = 1551,
    AARCH64_INS_ALIAS_STUMAXL = 1552,
    AARCH64_INS_ALIAS_STUMAXB = 1553,
    AARCH64_INS_ALIAS_STUMAXH = 1554,
    AARCH64_INS_ALIAS_STUMAX = 1555,
    AARCH64_INS_ALIAS_STUMINLB = 1556,
    AARCH64_INS_ALIAS_STUMINLH = 1557,
    AARCH64_INS_ALIAS_STUMINL = 1558,
    AARCH64_INS_ALIAS_STUMINB = 1559,
    AARCH64_INS_ALIAS_STUMINH = 1560,
    AARCH64_INS_ALIAS_STUMIN = 1561,
    AARCH64_INS_ALIAS_IRG = 1562,
    AARCH64_INS_ALIAS_LDG = 1563,
    AARCH64_INS_ALIAS_STZG = 1564,
    AARCH64_INS_ALIAS_ST2G = 1565,
    AARCH64_INS_ALIAS_STZ2G = 1566,
    AARCH64_INS_ALIAS_BICS = 1567,
    AARCH64_INS_ALIAS_BIC = 1568,
    AARCH64_INS_ALIAS_EON = 1569,
    AARCH64_INS_ALIAS_EOR = 1570,
    AARCH64_INS_ALIAS_ORN = 1571,
    AARCH64_INS_ALIAS_MVN = 1572,
    AARCH64_INS_ALIAS_TST = 1573,
    AARCH64_INS_ALIAS_ROR = 1574,
    AARCH64_INS_ALIAS_ASR = 1575,
    AARCH64_INS_ALIAS_SXTB = 1576,
    AARCH64_INS_ALIAS_SXTH = 1577,
    AARCH64_INS_ALIAS_SXTW = 1578,
    AARCH64_INS_ALIAS_LSR = 1579,
    AARCH64_INS_ALIAS_UXTB = 1580,
    AARCH64_INS_ALIAS_UXTH = 1581,
    AARCH64_INS_ALIAS_UXTW = 1582,
    AARCH64_INS_ALIAS_CSET = 1583,
    AARCH64_INS_ALIAS_CSETM = 1584,
    AARCH64_INS_ALIAS_CINC = 1585,
    AARCH64_INS_ALIAS_CINV = 1586,
    AARCH64_INS_ALIAS_CNEG = 1587,
    AARCH64_INS_ALIAS_RET = 1588,
    AARCH64_INS_ALIAS_DCPS1 = 1589,
    AARCH64_INS_ALIAS_DCPS2 = 1590,
    AARCH64_INS_ALIAS_DCPS3 = 1591,
    AARCH64_INS_ALIAS_LDPSW = 1592,
    AARCH64_INS_ALIAS_LDRSH = 1593,
    AARCH64_INS_ALIAS_LDRSB = 1594,
    AARCH64_INS_ALIAS_LDRSW = 1595,
    AARCH64_INS_ALIAS_LDURH = 1596,
    AARCH64_INS_ALIAS_LDURB = 1597,
    AARCH64_INS_ALIAS_LDURSH = 1598,
    AARCH64_INS_ALIAS_LDURSB = 1599,
    AARCH64_INS_ALIAS_LDURSW = 1600,
    AARCH64_INS_ALIAS_LDTRH = 1601,
    AARCH64_INS_ALIAS_LDTRB = 1602,
    AARCH64_INS_ALIAS_LDTRSH = 1603,
    AARCH64_INS_ALIAS_LDTRSB = 1604,
    AARCH64_INS_ALIAS_LDTRSW = 1605,
    AARCH64_INS_ALIAS_STP = 1606,
    AARCH64_INS_ALIAS_STURH = 1607,
    AARCH64_INS_ALIAS_STURB = 1608,
    AARCH64_INS_ALIAS_STLURH = 1609,
    AARCH64_INS_ALIAS_LDAPURSB = 1610,
    AARCH64_INS_ALIAS_LDAPURH = 1611,
    AARCH64_INS_ALIAS_LDAPURSH = 1612,
    AARCH64_INS_ALIAS_LDAPURSW = 1613,
    AARCH64_INS_ALIAS_STTRH = 1614,
    AARCH64_INS_ALIAS_STTRB = 1615,
    AARCH64_INS_ALIAS_BIC_4H = 1616,
    AARCH64_INS_ALIAS_BIC_8H = 1617,
    AARCH64_INS_ALIAS_BIC_2S = 1618,
    AARCH64_INS_ALIAS_BIC_4S = 1619,
    AARCH64_INS_ALIAS_ORR_4H = 1620,
    AARCH64_INS_ALIAS_ORR_8H = 1621,
    AARCH64_INS_ALIAS_ORR_2S = 1622,
    AARCH64_INS_ALIAS_ORR_4S = 1623,
    AARCH64_INS_ALIAS_SXTL_8H = 1624,
    AARCH64_INS_ALIAS_SXTL = 1625,
    AARCH64_INS_ALIAS_SXTL_4S = 1626,
    AARCH64_INS_ALIAS_SXTL_2D = 1627,
    AARCH64_INS_ALIAS_SXTL2_8H = 1628,
    AARCH64_INS_ALIAS_SXTL2 = 1629,
    AARCH64_INS_ALIAS_SXTL2_4S = 1630,
    AARCH64_INS_ALIAS_SXTL2_2D = 1631,
    AARCH64_INS_ALIAS_UXTL_8H = 1632,
    AARCH64_INS_ALIAS_UXTL = 1633,
    AARCH64_INS_ALIAS_UXTL_4S = 1634,
    AARCH64_INS_ALIAS_UXTL_2D = 1635,
    AARCH64_INS_ALIAS_UXTL2_8H = 1636,
    AARCH64_INS_ALIAS_UXTL2 = 1637,
    AARCH64_INS_ALIAS_UXTL2_4S = 1638,
    AARCH64_INS_ALIAS_UXTL2_2D = 1639,
    AARCH64_INS_ALIAS_LD2 = 1640,
    AARCH64_INS_ALIAS_LD3 = 1641,
    AARCH64_INS_ALIAS_LD4 = 1642,
    AARCH64_INS_ALIAS_ST1 = 1643,
    AARCH64_INS_ALIAS_ST2 = 1644,
    AARCH64_INS_ALIAS_ST3 = 1645,
    AARCH64_INS_ALIAS_ST4 = 1646,
    AARCH64_INS_ALIAS_LD2R = 1647,
    AARCH64_INS_ALIAS_LD3R = 1648,
    AARCH64_INS_ALIAS_LD4R = 1649,
    AARCH64_INS_ALIAS_CLRBHB = 1650,
    AARCH64_INS_ALIAS_STILP = 1651,
    AARCH64_INS_ALIAS_STL1 = 1652,
    AARCH64_INS_ALIAS_SYSP = 1653,
    AARCH64_INS_ALIAS_LD1SW = 1654,
    AARCH64_INS_ALIAS_LD1H = 1655,
    AARCH64_INS_ALIAS_LD1SH = 1656,
    AARCH64_INS_ALIAS_LD1D = 1657,
    AARCH64_INS_ALIAS_LD1RSW = 1658,
    AARCH64_INS_ALIAS_LD1RH = 1659,
    AARCH64_INS_ALIAS_LD1RSH = 1660,
    AARCH64_INS_ALIAS_LD1RW = 1661,
    AARCH64_INS_ALIAS_LD1RSB = 1662,
    AARCH64_INS_ALIAS_LD1RD = 1663,
    AARCH64_INS_ALIAS_LD1RQH = 1664,
    AARCH64_INS_ALIAS_LD1RQW = 1665,
    AARCH64_INS_ALIAS_LD1RQD = 1666,
    AARCH64_INS_ALIAS_LDNF1SW = 1667,
    AARCH64_INS_ALIAS_LDNF1H = 1668,
    AARCH64_INS_ALIAS_LDNF1SH = 1669,
    AARCH64_INS_ALIAS_LDNF1W = 1670,
    AARCH64_INS_ALIAS_LDNF1SB = 1671,
    AARCH64_INS_ALIAS_LDNF1D = 1672,
    AARCH64_INS_ALIAS_LDFF1SW = 1673,
    AARCH64_INS_ALIAS_LDFF1H = 1674,
    AARCH64_INS_ALIAS_LDFF1SH = 1675,
    AARCH64_INS_ALIAS_LDFF1W = 1676,
    AARCH64_INS_ALIAS_LDFF1SB = 1677,
    AARCH64_INS_ALIAS_LDFF1D = 1678,
    AARCH64_INS_ALIAS_LD3B = 1679,
    AARCH64_INS_ALIAS_LD4B = 1680,
    AARCH64_INS_ALIAS_LD2H = 1681,
    AARCH64_INS_ALIAS_LD3H = 1682,
    AARCH64_INS_ALIAS_LD4H = 1683,
    AARCH64_INS_ALIAS_LD2W = 1684,
    AARCH64_INS_ALIAS_LD3W = 1685,
    AARCH64_INS_ALIAS_LD4W = 1686,
    AARCH64_INS_ALIAS_LD2D = 1687,
    AARCH64_INS_ALIAS_LD3D = 1688,
    AARCH64_INS_ALIAS_LD4D = 1689,
    AARCH64_INS_ALIAS_LD2Q = 1690,
    AARCH64_INS_ALIAS_LD3Q = 1691,
    AARCH64_INS_ALIAS_LD4Q = 1692,
    AARCH64_INS_ALIAS_LDNT1H = 1693,
    AARCH64_INS_ALIAS_LDNT1W = 1694,
    AARCH64_INS_ALIAS_LDNT1D = 1695,
    AARCH64_INS_ALIAS_ST1H = 1696,
    AARCH64_INS_ALIAS_ST1W = 1697,
    AARCH64_INS_ALIAS_ST1D = 1698,
    AARCH64_INS_ALIAS_ST3B = 1699,
    AARCH64_INS_ALIAS_ST4B = 1700,
    AARCH64_INS_ALIAS_ST2H = 1701,
    AARCH64_INS_ALIAS_ST3H = 1702,
    AARCH64_INS_ALIAS_ST4H = 1703,
    AARCH64_INS_ALIAS_ST2W = 1704,
    AARCH64_INS_ALIAS_ST3W = 1705,
    AARCH64_INS_ALIAS_ST4W = 1706,
    AARCH64_INS_ALIAS_ST2D = 1707,
    AARCH64_INS_ALIAS_ST3D = 1708,
    AARCH64_INS_ALIAS_ST4D = 1709,
    AARCH64_INS_ALIAS_ST3Q = 1710,
    AARCH64_INS_ALIAS_ST4Q = 1711,
    AARCH64_INS_ALIAS_STNT1H = 1712,
    AARCH64_INS_ALIAS_STNT1W = 1713,
    AARCH64_INS_ALIAS_STNT1D = 1714,
    AARCH64_INS_ALIAS_PRFH = 1715,
    AARCH64_INS_ALIAS_PRFW = 1716,
    AARCH64_INS_ALIAS_PRFD = 1717,
    AARCH64_INS_ALIAS_CNTH = 1718,
    AARCH64_INS_ALIAS_CNTW = 1719,
    AARCH64_INS_ALIAS_CNTD = 1720,
    AARCH64_INS_ALIAS_DECB = 1721,
    AARCH64_INS_ALIAS_INCH = 1722,
    AARCH64_INS_ALIAS_DECH = 1723,
    AARCH64_INS_ALIAS_INCW = 1724,
    AARCH64_INS_ALIAS_DECW = 1725,
    AARCH64_INS_ALIAS_INCD = 1726,
    AARCH64_INS_ALIAS_DECD = 1727,
    AARCH64_INS_ALIAS_SQDECB = 1728,
    AARCH64_INS_ALIAS_UQDECB = 1729,
    AARCH64_INS_ALIAS_UQINCH = 1730,
    AARCH64_INS_ALIAS_SQDECH = 1731,
    AARCH64_INS_ALIAS_UQDECH = 1732,
    AARCH64_INS_ALIAS_SQINCW = 1733,
    AARCH64_INS_ALIAS_UQINCW = 1734,
    AARCH64_INS_ALIAS_SQDECW = 1735,
    AARCH64_INS_ALIAS_UQDECW = 1736,
    AARCH64_INS_ALIAS_SQINCD = 1737,
    AARCH64_INS_ALIAS_UQINCD = 1738,
    AARCH64_INS_ALIAS_SQDECD = 1739,
    AARCH64_INS_ALIAS_UQDECD = 1740,
    AARCH64_INS_ALIAS_MOVS = 1741,
    AARCH64_INS_ALIAS_NOT = 1742,
    AARCH64_INS_ALIAS_NOTS = 1743,
    AARCH64_INS_ALIAS_LD1ROH = 1744,
    AARCH64_INS_ALIAS_LD1ROW = 1745,
    AARCH64_INS_ALIAS_LD1ROD = 1746,
    AARCH64_INS_ALIAS_BCAX = 1747,
    AARCH64_INS_ALIAS_BSL = 1748,
    AARCH64_INS_ALIAS_BSL1N = 1749,
    AARCH64_INS_ALIAS_BSL2N = 1750,
    AARCH64_INS_ALIAS_NBSL = 1751,
    AARCH64_INS_ALIAS_LDNT1SH = 1752,
    AARCH64_INS_ALIAS_LDNT1SW = 1753,
    AARCH64_INS_ALIAS_CFP = 1754,
    AARCH64_INS_ALIAS_DVP = 1755,
    AARCH64_INS_ALIAS_COSP = 1756,
    AARCH64_INS_ALIAS_CPP = 1757,
    AARCH64_INS_ALIAS_IC = 1758,
    AARCH64_INS_ALIAS_DC = 1759,
    AARCH64_INS_ALIAS_AT = 1760,
    AARCH64_INS_ALIAS_TLBI = 1761,
    AARCH64_INS_ALIAS_TLBIP = 1762,
    AARCH64_INS_ALIAS_RPRFM = 1763,
    AARCH64_INS_ALIAS_LSL = 1764,
    AARCH64_INS_ALIAS_SBFX = 1765,
    AARCH64_INS_ALIAS_UBFX = 1766,
    AARCH64_INS_ALIAS_SBFIZ = 1767,
    AARCH64_INS_ALIAS_UBFIZ = 1768,
    AARCH64_INS_ALIAS_BFC = 1769,
    AARCH64_INS_ALIAS_BFI = 1770,
    AARCH64_INS_ALIAS_BFXIL = 1771,
    AARCH64_INS_ALIAS_END = 1772,
}
pub mod aarch64_insn_group {
    #[doc = " Group of AArch64 instructions"]
    pub type Type = libc::c_uint;
    #[doc = "< = CS_GRP_INVALID"]
    pub const AARCH64_GRP_INVALID: Type = 0;
    #[doc = "< = CS_GRP_JUMP"]
    pub const AARCH64_GRP_JUMP: Type = 1;
    pub const AARCH64_GRP_CALL: Type = 2;
    pub const AARCH64_GRP_RET: Type = 3;
    pub const AARCH64_GRP_INT: Type = 4;
    #[doc = "< = CS_GRP_PRIVILEGE"]
    pub const AARCH64_GRP_PRIVILEGE: Type = 6;
    #[doc = "< = CS_GRP_BRANCH_RELATIVE"]
    pub const AARCH64_GRP_BRANCH_RELATIVE: Type = 7;
    pub const AARCH64_FEATURE_HASV8_0A: Type = 128;
    pub const AARCH64_FEATURE_HASV8_1A: Type = 129;
    pub const AARCH64_FEATURE_HASV8_2A: Type = 130;
    pub const AARCH64_FEATURE_HASV8_3A: Type = 131;
    pub const AARCH64_FEATURE_HASV8_4A: Type = 132;
    pub const AARCH64_FEATURE_HASV8_5A: Type = 133;
    pub const AARCH64_FEATURE_HASV8_6A: Type = 134;
    pub const AARCH64_FEATURE_HASV8_7A: Type = 135;
    pub const AARCH64_FEATURE_HASV8_8A: Type = 136;
    pub const AARCH64_FEATURE_HASV8_9A: Type = 137;
    pub const AARCH64_FEATURE_HASV9_0A: Type = 138;
    pub const AARCH64_FEATURE_HASV9_1A: Type = 139;
    pub const AARCH64_FEATURE_HASV9_2A: Type = 140;
    pub const AARCH64_FEATURE_HASV9_3A: Type = 141;
    pub const AARCH64_FEATURE_HASV9_4A: Type = 142;
    pub const AARCH64_FEATURE_HASV8_0R: Type = 143;
    pub const AARCH64_FEATURE_HASEL2VMSA: Type = 144;
    pub const AARCH64_FEATURE_HASEL3: Type = 145;
    pub const AARCH64_FEATURE_HASVH: Type = 146;
    pub const AARCH64_FEATURE_HASLOR: Type = 147;
    pub const AARCH64_FEATURE_HASPAUTH: Type = 148;
    pub const AARCH64_FEATURE_HASPAUTHLR: Type = 149;
    pub const AARCH64_FEATURE_HASJS: Type = 150;
    pub const AARCH64_FEATURE_HASCCIDX: Type = 151;
    pub const AARCH64_FEATURE_HASCOMPLXNUM: Type = 152;
    pub const AARCH64_FEATURE_HASNV: Type = 153;
    pub const AARCH64_FEATURE_HASMPAM: Type = 154;
    pub const AARCH64_FEATURE_HASDIT: Type = 155;
    pub const AARCH64_FEATURE_HASTRACEV8_4: Type = 156;
    pub const AARCH64_FEATURE_HASAM: Type = 157;
    pub const AARCH64_FEATURE_HASSEL2: Type = 158;
    pub const AARCH64_FEATURE_HASTLB_RMI: Type = 159;
    pub const AARCH64_FEATURE_HASFLAGM: Type = 160;
    pub const AARCH64_FEATURE_HASRCPC_IMMO: Type = 161;
    pub const AARCH64_FEATURE_HASFPARMV8: Type = 162;
    pub const AARCH64_FEATURE_HASNEON: Type = 163;
    pub const AARCH64_FEATURE_HASSM4: Type = 164;
    pub const AARCH64_FEATURE_HASSHA3: Type = 165;
    pub const AARCH64_FEATURE_HASSHA2: Type = 166;
    pub const AARCH64_FEATURE_HASAES: Type = 167;
    pub const AARCH64_FEATURE_HASDOTPROD: Type = 168;
    pub const AARCH64_FEATURE_HASCRC: Type = 169;
    pub const AARCH64_FEATURE_HASCSSC: Type = 170;
    pub const AARCH64_FEATURE_HASLSE: Type = 171;
    pub const AARCH64_FEATURE_HASRAS: Type = 172;
    pub const AARCH64_FEATURE_HASRDM: Type = 173;
    pub const AARCH64_FEATURE_HASFULLFP16: Type = 174;
    pub const AARCH64_FEATURE_HASFP16FML: Type = 175;
    pub const AARCH64_FEATURE_HASSPE: Type = 176;
    pub const AARCH64_FEATURE_HASFUSEAES: Type = 177;
    pub const AARCH64_FEATURE_HASSVE: Type = 178;
    pub const AARCH64_FEATURE_HASSVE2: Type = 179;
    pub const AARCH64_FEATURE_HASSVE2P1: Type = 180;
    pub const AARCH64_FEATURE_HASSVE2AES: Type = 181;
    pub const AARCH64_FEATURE_HASSVE2SM4: Type = 182;
    pub const AARCH64_FEATURE_HASSVE2SHA3: Type = 183;
    pub const AARCH64_FEATURE_HASSVE2BITPERM: Type = 184;
    pub const AARCH64_FEATURE_HASB16B16: Type = 185;
    pub const AARCH64_FEATURE_HASSME: Type = 186;
    pub const AARCH64_FEATURE_HASSMEF64F64: Type = 187;
    pub const AARCH64_FEATURE_HASSMEF16F16: Type = 188;
    pub const AARCH64_FEATURE_HASSMEFA64: Type = 189;
    pub const AARCH64_FEATURE_HASSMEI16I64: Type = 190;
    pub const AARCH64_FEATURE_HASSME2: Type = 191;
    pub const AARCH64_FEATURE_HASSME2P1: Type = 192;
    pub const AARCH64_FEATURE_HASFPMR: Type = 193;
    pub const AARCH64_FEATURE_HASFP8: Type = 194;
    pub const AARCH64_FEATURE_HASFAMINMAX: Type = 195;
    pub const AARCH64_FEATURE_HASFP8FMA: Type = 196;
    pub const AARCH64_FEATURE_HASSSVE_FP8FMA: Type = 197;
    pub const AARCH64_FEATURE_HASFP8DOT2: Type = 198;
    pub const AARCH64_FEATURE_HASSSVE_FP8DOT2: Type = 199;
    pub const AARCH64_FEATURE_HASFP8DOT4: Type = 200;
    pub const AARCH64_FEATURE_HASSSVE_FP8DOT4: Type = 201;
    pub const AARCH64_FEATURE_HASLUT: Type = 202;
    pub const AARCH64_FEATURE_HASSME_LUTV2: Type = 203;
    pub const AARCH64_FEATURE_HASSMEF8F16: Type = 204;
    pub const AARCH64_FEATURE_HASSMEF8F32: Type = 205;
    pub const AARCH64_FEATURE_HASSVEORSME: Type = 206;
    pub const AARCH64_FEATURE_HASSVE2ORSME: Type = 207;
    pub const AARCH64_FEATURE_HASSVE2ORSME2: Type = 208;
    pub const AARCH64_FEATURE_HASSVE2P1_OR_HASSME: Type = 209;
    pub const AARCH64_FEATURE_HASSVE2P1_OR_HASSME2: Type = 210;
    pub const AARCH64_FEATURE_HASSVE2P1_OR_HASSME2P1: Type = 211;
    pub const AARCH64_FEATURE_HASNEONORSME: Type = 212;
    pub const AARCH64_FEATURE_HASRCPC: Type = 213;
    pub const AARCH64_FEATURE_HASALTNZCV: Type = 214;
    pub const AARCH64_FEATURE_HASFRINT3264: Type = 215;
    pub const AARCH64_FEATURE_HASSB: Type = 216;
    pub const AARCH64_FEATURE_HASPREDRES: Type = 217;
    pub const AARCH64_FEATURE_HASCCDP: Type = 218;
    pub const AARCH64_FEATURE_HASBTI: Type = 219;
    pub const AARCH64_FEATURE_HASMTE: Type = 220;
    pub const AARCH64_FEATURE_HASTME: Type = 221;
    pub const AARCH64_FEATURE_HASETE: Type = 222;
    pub const AARCH64_FEATURE_HASTRBE: Type = 223;
    pub const AARCH64_FEATURE_HASBF16: Type = 224;
    pub const AARCH64_FEATURE_HASMATMULINT8: Type = 225;
    pub const AARCH64_FEATURE_HASMATMULFP32: Type = 226;
    pub const AARCH64_FEATURE_HASMATMULFP64: Type = 227;
    pub const AARCH64_FEATURE_HASXS: Type = 228;
    pub const AARCH64_FEATURE_HASWFXT: Type = 229;
    pub const AARCH64_FEATURE_HASLS64: Type = 230;
    pub const AARCH64_FEATURE_HASBRBE: Type = 231;
    pub const AARCH64_FEATURE_HASSPE_EEF: Type = 232;
    pub const AARCH64_FEATURE_HASHBC: Type = 233;
    pub const AARCH64_FEATURE_HASMOPS: Type = 234;
    pub const AARCH64_FEATURE_HASCLRBHB: Type = 235;
    pub const AARCH64_FEATURE_HASSPECRES2: Type = 236;
    pub const AARCH64_FEATURE_HASITE: Type = 237;
    pub const AARCH64_FEATURE_HASTHE: Type = 238;
    pub const AARCH64_FEATURE_HASRCPC3: Type = 239;
    pub const AARCH64_FEATURE_HASLSE128: Type = 240;
    pub const AARCH64_FEATURE_HASD128: Type = 241;
    pub const AARCH64_FEATURE_HASCHK: Type = 242;
    pub const AARCH64_FEATURE_HASGCS: Type = 243;
    pub const AARCH64_FEATURE_HASCPA: Type = 244;
    pub const AARCH64_FEATURE_USENEGATIVEIMMEDIATES: Type = 245;
    pub const AARCH64_FEATURE_HASCCPP: Type = 246;
    pub const AARCH64_FEATURE_HASPAN: Type = 247;
    pub const AARCH64_FEATURE_HASPSUAO: Type = 248;
    pub const AARCH64_FEATURE_HASPAN_RWV: Type = 249;
    pub const AARCH64_FEATURE_HASCONTEXTIDREL2: Type = 250;
    pub const AARCH64_GRP_ENDING: Type = 251;
}
pub mod m68k_reg {
    #[doc = " M68K registers and special registers"]
    pub type Type = libc::c_uint;
    pub const M68K_REG_INVALID: Type = 0;
    pub const M68K_REG_D0: Type = 1;
    pub const M68K_REG_D1: Type = 2;
    pub const M68K_REG_D2: Type = 3;
    pub const M68K_REG_D3: Type = 4;
    pub const M68K_REG_D4: Type = 5;
    pub const M68K_REG_D5: Type = 6;
    pub const M68K_REG_D6: Type = 7;
    pub const M68K_REG_D7: Type = 8;
    pub const M68K_REG_A0: Type = 9;
    pub const M68K_REG_A1: Type = 10;
    pub const M68K_REG_A2: Type = 11;
    pub const M68K_REG_A3: Type = 12;
    pub const M68K_REG_A4: Type = 13;
    pub const M68K_REG_A5: Type = 14;
    pub const M68K_REG_A6: Type = 15;
    pub const M68K_REG_A7: Type = 16;
    pub const M68K_REG_FP0: Type = 17;
    pub const M68K_REG_FP1: Type = 18;
    pub const M68K_REG_FP2: Type = 19;
    pub const M68K_REG_FP3: Type = 20;
    pub const M68K_REG_FP4: Type = 21;
    pub const M68K_REG_FP5: Type = 22;
    pub const M68K_REG_FP6: Type = 23;
    pub const M68K_REG_FP7: Type = 24;
    pub const M68K_REG_PC: Type = 25;
    pub const M68K_REG_SR: Type = 26;
    pub const M68K_REG_CCR: Type = 27;
    pub const M68K_REG_SFC: Type = 28;
    pub const M68K_REG_DFC: Type = 29;
    pub const M68K_REG_USP: Type = 30;
    pub const M68K_REG_VBR: Type = 31;
    pub const M68K_REG_CACR: Type = 32;
    pub const M68K_REG_CAAR: Type = 33;
    pub const M68K_REG_MSP: Type = 34;
    pub const M68K_REG_ISP: Type = 35;
    pub const M68K_REG_TC: Type = 36;
    pub const M68K_REG_ITT0: Type = 37;
    pub const M68K_REG_ITT1: Type = 38;
    pub const M68K_REG_DTT0: Type = 39;
    pub const M68K_REG_DTT1: Type = 40;
    pub const M68K_REG_MMUSR: Type = 41;
    pub const M68K_REG_URP: Type = 42;
    pub const M68K_REG_SRP: Type = 43;
    pub const M68K_REG_FPCR: Type = 44;
    pub const M68K_REG_FPSR: Type = 45;
    pub const M68K_REG_FPIAR: Type = 46;
    pub const M68K_REG_ENDING: Type = 47;
}
#[repr(u32)]
#[doc = " M68K Addressing Modes"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum m68k_address_mode {
    #[doc = "< No address mode."]
    M68K_AM_NONE = 0,
    #[doc = "< Register Direct - Data"]
    M68K_AM_REG_DIRECT_DATA = 1,
    #[doc = "< Register Direct - Address"]
    M68K_AM_REG_DIRECT_ADDR = 2,
    #[doc = "< Register Indirect - Address"]
    M68K_AM_REGI_ADDR = 3,
    #[doc = "< Register Indirect - Address with Postincrement"]
    M68K_AM_REGI_ADDR_POST_INC = 4,
    #[doc = "< Register Indirect - Address with Predecrement"]
    M68K_AM_REGI_ADDR_PRE_DEC = 5,
    #[doc = "< Register Indirect - Address with Displacement"]
    M68K_AM_REGI_ADDR_DISP = 6,
    #[doc = "< Address Register Indirect With Index- 8-bit displacement"]
    M68K_AM_AREGI_INDEX_8_BIT_DISP = 7,
    #[doc = "< Address Register Indirect With Index- Base displacement"]
    M68K_AM_AREGI_INDEX_BASE_DISP = 8,
    #[doc = "< Memory indirect - Postindex"]
    M68K_AM_MEMI_POST_INDEX = 9,
    #[doc = "< Memory indirect - Preindex"]
    M68K_AM_MEMI_PRE_INDEX = 10,
    #[doc = "< Program Counter Indirect - with Displacement"]
    M68K_AM_PCI_DISP = 11,
    #[doc = "< Program Counter Indirect with Index - with 8-Bit Displacement"]
    M68K_AM_PCI_INDEX_8_BIT_DISP = 12,
    #[doc = "< Program Counter Indirect with Index - with Base Displacement"]
    M68K_AM_PCI_INDEX_BASE_DISP = 13,
    #[doc = "< Program Counter Memory Indirect - Postindexed"]
    M68K_AM_PC_MEMI_POST_INDEX = 14,
    #[doc = "< Program Counter Memory Indirect - Preindexed"]
    M68K_AM_PC_MEMI_PRE_INDEX = 15,
    #[doc = "< Absolute Data Addressing  - Short"]
    M68K_AM_ABSOLUTE_DATA_SHORT = 16,
    #[doc = "< Absolute Data Addressing  - Long"]
    M68K_AM_ABSOLUTE_DATA_LONG = 17,
    #[doc = "< Immediate value"]
    M68K_AM_IMMEDIATE = 18,
    #[doc = "< Address as displacement from (PC+2) used by branches"]
    M68K_AM_BRANCH_DISPLACEMENT = 19,
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum m68k_op_type {
    #[doc = "< = CS_OP_INVALID (Uninitialized)."]
    M68K_OP_INVALID = 0,
    #[doc = "< = CS_OP_REG (Register operand)."]
    M68K_OP_REG = 1,
    #[doc = "< = CS_OP_IMM (Immediate operand)."]
    M68K_OP_IMM = 2,
    #[doc = "< single precision Floating-Point operand"]
    M68K_OP_FP_SINGLE = 16,
    #[doc = "< double precision Floating-Point operand"]
    M68K_OP_FP_DOUBLE = 17,
    #[doc = "< Register bits move"]
    M68K_OP_REG_BITS = 18,
    #[doc = "< Register pair in the same op (upper 4 bits for first reg, lower for second)"]
    M68K_OP_REG_PAIR = 19,
    #[doc = "< Branch displacement"]
    M68K_OP_BR_DISP = 20,
    #[doc = "< = CS_OP_MEM (Memory operand)."]
    M68K_OP_MEM = 128,
}
#[doc = " Instruction's operand referring to memory\n This is associated with M68K_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m68k_op_mem {
    #[doc = "< base register (or M68K_REG_INVALID if irrelevant)"]
    pub base_reg: m68k_reg::Type,
    #[doc = "< index register (or M68K_REG_INVALID if irrelevant)"]
    pub index_reg: m68k_reg::Type,
    #[doc = "< indirect base register (or M68K_REG_INVALID if irrelevant)"]
    pub in_base_reg: m68k_reg::Type,
    #[doc = "< indirect displacement"]
    pub in_disp: u32,
    #[doc = "< other displacement"]
    pub out_disp: u32,
    #[doc = "< displacement value"]
    pub disp: i16,
    #[doc = "< scale for index register"]
    pub scale: u8,
    #[doc = "< set to true if the two values below should be used"]
    pub bitfield: u8,
    #[doc = "< used for bf* instructions"]
    pub width: u8,
    #[doc = "< used for bf* instructions"]
    pub offset: u8,
    #[doc = "< 0 = w, 1 = l"]
    pub index_size: u8,
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum m68k_op_br_disp_size {
    #[doc = "< = CS_OP_INVALID (Uninitialized)."]
    M68K_OP_BR_DISP_SIZE_INVALID = 0,
    #[doc = "< signed 8-bit displacement"]
    M68K_OP_BR_DISP_SIZE_BYTE = 1,
    #[doc = "< signed 16-bit displacement"]
    M68K_OP_BR_DISP_SIZE_WORD = 2,
    #[doc = "< signed 32-bit displacement"]
    M68K_OP_BR_DISP_SIZE_LONG = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m68k_op_br_disp {
    #[doc = "< displacement value"]
    pub disp: i32,
    #[doc = "< Size from m68k_op_br_disp_size type above"]
    pub disp_size: u8,
}
#[doc = " Register pair in one operand."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_m68k_op_reg_pair {
    pub reg_0: m68k_reg::Type,
    pub reg_1: m68k_reg::Type,
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_m68k_op {
    pub __bindgen_anon_1: cs_m68k_op__bindgen_ty_1,
    #[doc = "< data when operand is targeting memory"]
    pub mem: m68k_op_mem,
    #[doc = "< data when operand is a branch displacement"]
    pub br_disp: m68k_op_br_disp,
    #[doc = "< register bits for movem etc. (always in d0-d7, a0-a7, fp0 - fp7 order)"]
    pub register_bits: u32,
    pub type_: m68k_op_type,
    #[doc = "< M68K addressing mode for this op"]
    pub address_mode: m68k_address_mode,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_m68k_op__bindgen_ty_1 {
    #[doc = "< immediate value for IMM operand"]
    pub imm: u64,
    #[doc = "< double imm"]
    pub dimm: f64,
    #[doc = "< float imm"]
    pub simm: f32,
    #[doc = "< register value for REG operand"]
    pub reg: m68k_reg::Type,
    #[doc = "< register pair in one operand"]
    pub reg_pair: cs_m68k_op_reg_pair,
}
impl ::core::fmt::Debug for cs_m68k_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_m68k_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_m68k_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "cs_m68k_op {{ __bindgen_anon_1: {:?}, mem: {:?}, br_disp: {:?}, type: {:?}, address_mode: {:?} }}" , self . __bindgen_anon_1 , self . mem , self . br_disp , self . type_ , self . address_mode)
    }
}
#[repr(u32)]
#[doc = " Operation size of the CPU instructions"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum m68k_cpu_size {
    #[doc = "< unsized or unspecified"]
    M68K_CPU_SIZE_NONE = 0,
    #[doc = "< 1 byte in size"]
    M68K_CPU_SIZE_BYTE = 1,
    #[doc = "< 2 bytes in size"]
    M68K_CPU_SIZE_WORD = 2,
    #[doc = "< 4 bytes in size"]
    M68K_CPU_SIZE_LONG = 4,
}
#[repr(u32)]
#[doc = " Operation size of the FPU instructions (Notice that FPU instruction can also use CPU sizes if needed)"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum m68k_fpu_size {
    #[doc = "< unsized like fsave/frestore"]
    M68K_FPU_SIZE_NONE = 0,
    #[doc = "< 4 byte in size (single float)"]
    M68K_FPU_SIZE_SINGLE = 4,
    #[doc = "< 8 byte in size (double)"]
    M68K_FPU_SIZE_DOUBLE = 8,
    #[doc = "< 12 byte in size (extended real format)"]
    M68K_FPU_SIZE_EXTENDED = 12,
}
#[repr(u32)]
#[doc = " Type of size that is being used for the current instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum m68k_size_type {
    M68K_SIZE_TYPE_INVALID = 0,
    M68K_SIZE_TYPE_CPU = 1,
    M68K_SIZE_TYPE_FPU = 2,
}
#[doc = " Operation size of the current instruction (NOT the actually size of instruction)"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m68k_op_size {
    pub type_: m68k_size_type,
    pub __bindgen_anon_1: m68k_op_size__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m68k_op_size__bindgen_ty_1 {
    pub cpu_size: m68k_cpu_size,
    pub fpu_size: m68k_fpu_size,
}
impl ::core::fmt::Debug for m68k_op_size__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "m68k_op_size__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for m68k_op_size {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "m68k_op_size {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[doc = " The M68K instruction and its operands"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_m68k {
    #[doc = "< operands for this instruction."]
    pub operands: [cs_m68k_op; 4usize],
    #[doc = "< size of data operand works on in bytes (.b, .w, .l, etc)"]
    pub op_size: m68k_op_size,
    #[doc = "< number of operands for the instruction"]
    pub op_count: u8,
}
impl ::core::fmt::Debug for cs_m68k {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_m68k {{ operands: {:?}, op_size: {:?} }}",
            self.operands, self.op_size
        )
    }
}
#[repr(u32)]
#[doc = " M68K instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum m68k_insn {
    M68K_INS_INVALID = 0,
    M68K_INS_ABCD = 1,
    M68K_INS_ADD = 2,
    M68K_INS_ADDA = 3,
    M68K_INS_ADDI = 4,
    M68K_INS_ADDQ = 5,
    M68K_INS_ADDX = 6,
    M68K_INS_AND = 7,
    M68K_INS_ANDI = 8,
    M68K_INS_ASL = 9,
    M68K_INS_ASR = 10,
    M68K_INS_BHS = 11,
    M68K_INS_BLO = 12,
    M68K_INS_BHI = 13,
    M68K_INS_BLS = 14,
    M68K_INS_BCC = 15,
    M68K_INS_BCS = 16,
    M68K_INS_BNE = 17,
    M68K_INS_BEQ = 18,
    M68K_INS_BVC = 19,
    M68K_INS_BVS = 20,
    M68K_INS_BPL = 21,
    M68K_INS_BMI = 22,
    M68K_INS_BGE = 23,
    M68K_INS_BLT = 24,
    M68K_INS_BGT = 25,
    M68K_INS_BLE = 26,
    M68K_INS_BRA = 27,
    M68K_INS_BSR = 28,
    M68K_INS_BCHG = 29,
    M68K_INS_BCLR = 30,
    M68K_INS_BSET = 31,
    M68K_INS_BTST = 32,
    M68K_INS_BFCHG = 33,
    M68K_INS_BFCLR = 34,
    M68K_INS_BFEXTS = 35,
    M68K_INS_BFEXTU = 36,
    M68K_INS_BFFFO = 37,
    M68K_INS_BFINS = 38,
    M68K_INS_BFSET = 39,
    M68K_INS_BFTST = 40,
    M68K_INS_BKPT = 41,
    M68K_INS_CALLM = 42,
    M68K_INS_CAS = 43,
    M68K_INS_CAS2 = 44,
    M68K_INS_CHK = 45,
    M68K_INS_CHK2 = 46,
    M68K_INS_CLR = 47,
    M68K_INS_CMP = 48,
    M68K_INS_CMPA = 49,
    M68K_INS_CMPI = 50,
    M68K_INS_CMPM = 51,
    M68K_INS_CMP2 = 52,
    M68K_INS_CINVL = 53,
    M68K_INS_CINVP = 54,
    M68K_INS_CINVA = 55,
    M68K_INS_CPUSHL = 56,
    M68K_INS_CPUSHP = 57,
    M68K_INS_CPUSHA = 58,
    M68K_INS_DBT = 59,
    M68K_INS_DBF = 60,
    M68K_INS_DBHI = 61,
    M68K_INS_DBLS = 62,
    M68K_INS_DBCC = 63,
    M68K_INS_DBCS = 64,
    M68K_INS_DBNE = 65,
    M68K_INS_DBEQ = 66,
    M68K_INS_DBVC = 67,
    M68K_INS_DBVS = 68,
    M68K_INS_DBPL = 69,
    M68K_INS_DBMI = 70,
    M68K_INS_DBGE = 71,
    M68K_INS_DBLT = 72,
    M68K_INS_DBGT = 73,
    M68K_INS_DBLE = 74,
    M68K_INS_DBRA = 75,
    M68K_INS_DIVS = 76,
    M68K_INS_DIVSL = 77,
    M68K_INS_DIVU = 78,
    M68K_INS_DIVUL = 79,
    M68K_INS_EOR = 80,
    M68K_INS_EORI = 81,
    M68K_INS_EXG = 82,
    M68K_INS_EXT = 83,
    M68K_INS_EXTB = 84,
    M68K_INS_FABS = 85,
    M68K_INS_FSABS = 86,
    M68K_INS_FDABS = 87,
    M68K_INS_FACOS = 88,
    M68K_INS_FADD = 89,
    M68K_INS_FSADD = 90,
    M68K_INS_FDADD = 91,
    M68K_INS_FASIN = 92,
    M68K_INS_FATAN = 93,
    M68K_INS_FATANH = 94,
    M68K_INS_FBF = 95,
    M68K_INS_FBEQ = 96,
    M68K_INS_FBOGT = 97,
    M68K_INS_FBOGE = 98,
    M68K_INS_FBOLT = 99,
    M68K_INS_FBOLE = 100,
    M68K_INS_FBOGL = 101,
    M68K_INS_FBOR = 102,
    M68K_INS_FBUN = 103,
    M68K_INS_FBUEQ = 104,
    M68K_INS_FBUGT = 105,
    M68K_INS_FBUGE = 106,
    M68K_INS_FBULT = 107,
    M68K_INS_FBULE = 108,
    M68K_INS_FBNE = 109,
    M68K_INS_FBT = 110,
    M68K_INS_FBSF = 111,
    M68K_INS_FBSEQ = 112,
    M68K_INS_FBGT = 113,
    M68K_INS_FBGE = 114,
    M68K_INS_FBLT = 115,
    M68K_INS_FBLE = 116,
    M68K_INS_FBGL = 117,
    M68K_INS_FBGLE = 118,
    M68K_INS_FBNGLE = 119,
    M68K_INS_FBNGL = 120,
    M68K_INS_FBNLE = 121,
    M68K_INS_FBNLT = 122,
    M68K_INS_FBNGE = 123,
    M68K_INS_FBNGT = 124,
    M68K_INS_FBSNE = 125,
    M68K_INS_FBST = 126,
    M68K_INS_FCMP = 127,
    M68K_INS_FCOS = 128,
    M68K_INS_FCOSH = 129,
    M68K_INS_FDBF = 130,
    M68K_INS_FDBEQ = 131,
    M68K_INS_FDBOGT = 132,
    M68K_INS_FDBOGE = 133,
    M68K_INS_FDBOLT = 134,
    M68K_INS_FDBOLE = 135,
    M68K_INS_FDBOGL = 136,
    M68K_INS_FDBOR = 137,
    M68K_INS_FDBUN = 138,
    M68K_INS_FDBUEQ = 139,
    M68K_INS_FDBUGT = 140,
    M68K_INS_FDBUGE = 141,
    M68K_INS_FDBULT = 142,
    M68K_INS_FDBULE = 143,
    M68K_INS_FDBNE = 144,
    M68K_INS_FDBT = 145,
    M68K_INS_FDBSF = 146,
    M68K_INS_FDBSEQ = 147,
    M68K_INS_FDBGT = 148,
    M68K_INS_FDBGE = 149,
    M68K_INS_FDBLT = 150,
    M68K_INS_FDBLE = 151,
    M68K_INS_FDBGL = 152,
    M68K_INS_FDBGLE = 153,
    M68K_INS_FDBNGLE = 154,
    M68K_INS_FDBNGL = 155,
    M68K_INS_FDBNLE = 156,
    M68K_INS_FDBNLT = 157,
    M68K_INS_FDBNGE = 158,
    M68K_INS_FDBNGT = 159,
    M68K_INS_FDBSNE = 160,
    M68K_INS_FDBST = 161,
    M68K_INS_FDIV = 162,
    M68K_INS_FSDIV = 163,
    M68K_INS_FDDIV = 164,
    M68K_INS_FETOX = 165,
    M68K_INS_FETOXM1 = 166,
    M68K_INS_FGETEXP = 167,
    M68K_INS_FGETMAN = 168,
    M68K_INS_FINT = 169,
    M68K_INS_FINTRZ = 170,
    M68K_INS_FLOG10 = 171,
    M68K_INS_FLOG2 = 172,
    M68K_INS_FLOGN = 173,
    M68K_INS_FLOGNP1 = 174,
    M68K_INS_FMOD = 175,
    M68K_INS_FMOVE = 176,
    M68K_INS_FSMOVE = 177,
    M68K_INS_FDMOVE = 178,
    M68K_INS_FMOVECR = 179,
    M68K_INS_FMOVEM = 180,
    M68K_INS_FMUL = 181,
    M68K_INS_FSMUL = 182,
    M68K_INS_FDMUL = 183,
    M68K_INS_FNEG = 184,
    M68K_INS_FSNEG = 185,
    M68K_INS_FDNEG = 186,
    M68K_INS_FNOP = 187,
    M68K_INS_FREM = 188,
    M68K_INS_FRESTORE = 189,
    M68K_INS_FSAVE = 190,
    M68K_INS_FSCALE = 191,
    M68K_INS_FSGLDIV = 192,
    M68K_INS_FSGLMUL = 193,
    M68K_INS_FSIN = 194,
    M68K_INS_FSINCOS = 195,
    M68K_INS_FSINH = 196,
    M68K_INS_FSQRT = 197,
    M68K_INS_FSSQRT = 198,
    M68K_INS_FDSQRT = 199,
    M68K_INS_FSF = 200,
    M68K_INS_FSBEQ = 201,
    M68K_INS_FSOGT = 202,
    M68K_INS_FSOGE = 203,
    M68K_INS_FSOLT = 204,
    M68K_INS_FSOLE = 205,
    M68K_INS_FSOGL = 206,
    M68K_INS_FSOR = 207,
    M68K_INS_FSUN = 208,
    M68K_INS_FSUEQ = 209,
    M68K_INS_FSUGT = 210,
    M68K_INS_FSUGE = 211,
    M68K_INS_FSULT = 212,
    M68K_INS_FSULE = 213,
    M68K_INS_FSNE = 214,
    M68K_INS_FST = 215,
    M68K_INS_FSSF = 216,
    M68K_INS_FSSEQ = 217,
    M68K_INS_FSGT = 218,
    M68K_INS_FSGE = 219,
    M68K_INS_FSLT = 220,
    M68K_INS_FSLE = 221,
    M68K_INS_FSGL = 222,
    M68K_INS_FSGLE = 223,
    M68K_INS_FSNGLE = 224,
    M68K_INS_FSNGL = 225,
    M68K_INS_FSNLE = 226,
    M68K_INS_FSNLT = 227,
    M68K_INS_FSNGE = 228,
    M68K_INS_FSNGT = 229,
    M68K_INS_FSSNE = 230,
    M68K_INS_FSST = 231,
    M68K_INS_FSUB = 232,
    M68K_INS_FSSUB = 233,
    M68K_INS_FDSUB = 234,
    M68K_INS_FTAN = 235,
    M68K_INS_FTANH = 236,
    M68K_INS_FTENTOX = 237,
    M68K_INS_FTRAPF = 238,
    M68K_INS_FTRAPEQ = 239,
    M68K_INS_FTRAPOGT = 240,
    M68K_INS_FTRAPOGE = 241,
    M68K_INS_FTRAPOLT = 242,
    M68K_INS_FTRAPOLE = 243,
    M68K_INS_FTRAPOGL = 244,
    M68K_INS_FTRAPOR = 245,
    M68K_INS_FTRAPUN = 246,
    M68K_INS_FTRAPUEQ = 247,
    M68K_INS_FTRAPUGT = 248,
    M68K_INS_FTRAPUGE = 249,
    M68K_INS_FTRAPULT = 250,
    M68K_INS_FTRAPULE = 251,
    M68K_INS_FTRAPNE = 252,
    M68K_INS_FTRAPT = 253,
    M68K_INS_FTRAPSF = 254,
    M68K_INS_FTRAPSEQ = 255,
    M68K_INS_FTRAPGT = 256,
    M68K_INS_FTRAPGE = 257,
    M68K_INS_FTRAPLT = 258,
    M68K_INS_FTRAPLE = 259,
    M68K_INS_FTRAPGL = 260,
    M68K_INS_FTRAPGLE = 261,
    M68K_INS_FTRAPNGLE = 262,
    M68K_INS_FTRAPNGL = 263,
    M68K_INS_FTRAPNLE = 264,
    M68K_INS_FTRAPNLT = 265,
    M68K_INS_FTRAPNGE = 266,
    M68K_INS_FTRAPNGT = 267,
    M68K_INS_FTRAPSNE = 268,
    M68K_INS_FTRAPST = 269,
    M68K_INS_FTST = 270,
    M68K_INS_FTWOTOX = 271,
    M68K_INS_HALT = 272,
    M68K_INS_ILLEGAL = 273,
    M68K_INS_JMP = 274,
    M68K_INS_JSR = 275,
    M68K_INS_LEA = 276,
    M68K_INS_LINK = 277,
    M68K_INS_LPSTOP = 278,
    M68K_INS_LSL = 279,
    M68K_INS_LSR = 280,
    M68K_INS_MOVE = 281,
    M68K_INS_MOVEA = 282,
    M68K_INS_MOVEC = 283,
    M68K_INS_MOVEM = 284,
    M68K_INS_MOVEP = 285,
    M68K_INS_MOVEQ = 286,
    M68K_INS_MOVES = 287,
    M68K_INS_MOVE16 = 288,
    M68K_INS_MULS = 289,
    M68K_INS_MULU = 290,
    M68K_INS_NBCD = 291,
    M68K_INS_NEG = 292,
    M68K_INS_NEGX = 293,
    M68K_INS_NOP = 294,
    M68K_INS_NOT = 295,
    M68K_INS_OR = 296,
    M68K_INS_ORI = 297,
    M68K_INS_PACK = 298,
    M68K_INS_PEA = 299,
    M68K_INS_PFLUSH = 300,
    M68K_INS_PFLUSHA = 301,
    M68K_INS_PFLUSHAN = 302,
    M68K_INS_PFLUSHN = 303,
    M68K_INS_PLOADR = 304,
    M68K_INS_PLOADW = 305,
    M68K_INS_PLPAR = 306,
    M68K_INS_PLPAW = 307,
    M68K_INS_PMOVE = 308,
    M68K_INS_PMOVEFD = 309,
    M68K_INS_PTESTR = 310,
    M68K_INS_PTESTW = 311,
    M68K_INS_PULSE = 312,
    M68K_INS_REMS = 313,
    M68K_INS_REMU = 314,
    M68K_INS_RESET = 315,
    M68K_INS_ROL = 316,
    M68K_INS_ROR = 317,
    M68K_INS_ROXL = 318,
    M68K_INS_ROXR = 319,
    M68K_INS_RTD = 320,
    M68K_INS_RTE = 321,
    M68K_INS_RTM = 322,
    M68K_INS_RTR = 323,
    M68K_INS_RTS = 324,
    M68K_INS_SBCD = 325,
    M68K_INS_ST = 326,
    M68K_INS_SF = 327,
    M68K_INS_SHI = 328,
    M68K_INS_SLS = 329,
    M68K_INS_SCC = 330,
    M68K_INS_SHS = 331,
    M68K_INS_SCS = 332,
    M68K_INS_SLO = 333,
    M68K_INS_SNE = 334,
    M68K_INS_SEQ = 335,
    M68K_INS_SVC = 336,
    M68K_INS_SVS = 337,
    M68K_INS_SPL = 338,
    M68K_INS_SMI = 339,
    M68K_INS_SGE = 340,
    M68K_INS_SLT = 341,
    M68K_INS_SGT = 342,
    M68K_INS_SLE = 343,
    M68K_INS_STOP = 344,
    M68K_INS_SUB = 345,
    M68K_INS_SUBA = 346,
    M68K_INS_SUBI = 347,
    M68K_INS_SUBQ = 348,
    M68K_INS_SUBX = 349,
    M68K_INS_SWAP = 350,
    M68K_INS_TAS = 351,
    M68K_INS_TRAP = 352,
    M68K_INS_TRAPV = 353,
    M68K_INS_TRAPT = 354,
    M68K_INS_TRAPF = 355,
    M68K_INS_TRAPHI = 356,
    M68K_INS_TRAPLS = 357,
    M68K_INS_TRAPCC = 358,
    M68K_INS_TRAPHS = 359,
    M68K_INS_TRAPCS = 360,
    M68K_INS_TRAPLO = 361,
    M68K_INS_TRAPNE = 362,
    M68K_INS_TRAPEQ = 363,
    M68K_INS_TRAPVC = 364,
    M68K_INS_TRAPVS = 365,
    M68K_INS_TRAPPL = 366,
    M68K_INS_TRAPMI = 367,
    M68K_INS_TRAPGE = 368,
    M68K_INS_TRAPLT = 369,
    M68K_INS_TRAPGT = 370,
    M68K_INS_TRAPLE = 371,
    M68K_INS_TST = 372,
    M68K_INS_UNLK = 373,
    M68K_INS_UNPK = 374,
    M68K_INS_ENDING = 375,
}
#[repr(u32)]
#[doc = " Group of M68K instructions"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum m68k_group_type {
    #[doc = "< CS_GRUP_INVALID"]
    M68K_GRP_INVALID = 0,
    #[doc = "< = CS_GRP_JUMP"]
    M68K_GRP_JUMP = 1,
    #[doc = "< = CS_GRP_RET"]
    M68K_GRP_RET = 3,
    #[doc = "< = CS_GRP_IRET"]
    M68K_GRP_IRET = 5,
    #[doc = "< = CS_GRP_BRANCH_RELATIVE"]
    M68K_GRP_BRANCH_RELATIVE = 7,
    M68K_GRP_ENDING = 8,
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mips_op_type {
    #[doc = "< = CS_OP_INVALID (Uninitialized)."]
    MIPS_OP_INVALID = 0,
    #[doc = "< = CS_OP_REG (Register operand)."]
    MIPS_OP_REG = 1,
    #[doc = "< = CS_OP_IMM (Immediate operand)."]
    MIPS_OP_IMM = 2,
    #[doc = "< = CS_OP_MEM (Memory operand)."]
    MIPS_OP_MEM = 128,
}
pub mod mips_reg {
    #[doc = " MIPS registers"]
    pub type Type = libc::c_uint;
    pub const MIPS_REG_INVALID: Type = 0;
    pub const MIPS_REG_AT: Type = 1;
    pub const MIPS_REG_AT_NM: Type = 2;
    pub const MIPS_REG_DSPCCOND: Type = 3;
    pub const MIPS_REG_DSPCARRY: Type = 4;
    pub const MIPS_REG_DSPEFI: Type = 5;
    pub const MIPS_REG_DSPOUTFLAG: Type = 6;
    pub const MIPS_REG_DSPPOS: Type = 7;
    pub const MIPS_REG_DSPSCOUNT: Type = 8;
    pub const MIPS_REG_FP: Type = 9;
    pub const MIPS_REG_FP_NM: Type = 10;
    pub const MIPS_REG_GP: Type = 11;
    pub const MIPS_REG_GP_NM: Type = 12;
    pub const MIPS_REG_MSAACCESS: Type = 13;
    pub const MIPS_REG_MSACSR: Type = 14;
    pub const MIPS_REG_MSAIR: Type = 15;
    pub const MIPS_REG_MSAMAP: Type = 16;
    pub const MIPS_REG_MSAMODIFY: Type = 17;
    pub const MIPS_REG_MSAREQUEST: Type = 18;
    pub const MIPS_REG_MSASAVE: Type = 19;
    pub const MIPS_REG_MSAUNMAP: Type = 20;
    pub const MIPS_REG_PC: Type = 21;
    pub const MIPS_REG_RA: Type = 22;
    pub const MIPS_REG_RA_NM: Type = 23;
    pub const MIPS_REG_SP: Type = 24;
    pub const MIPS_REG_SP_NM: Type = 25;
    pub const MIPS_REG_ZERO: Type = 26;
    pub const MIPS_REG_ZERO_NM: Type = 27;
    pub const MIPS_REG_A0: Type = 28;
    pub const MIPS_REG_A1: Type = 29;
    pub const MIPS_REG_A2: Type = 30;
    pub const MIPS_REG_A3: Type = 31;
    pub const MIPS_REG_AC0: Type = 32;
    pub const MIPS_REG_AC1: Type = 33;
    pub const MIPS_REG_AC2: Type = 34;
    pub const MIPS_REG_AC3: Type = 35;
    pub const MIPS_REG_AT_64: Type = 36;
    pub const MIPS_REG_COP00: Type = 37;
    pub const MIPS_REG_COP01: Type = 38;
    pub const MIPS_REG_COP02: Type = 39;
    pub const MIPS_REG_COP03: Type = 40;
    pub const MIPS_REG_COP04: Type = 41;
    pub const MIPS_REG_COP05: Type = 42;
    pub const MIPS_REG_COP06: Type = 43;
    pub const MIPS_REG_COP07: Type = 44;
    pub const MIPS_REG_COP08: Type = 45;
    pub const MIPS_REG_COP09: Type = 46;
    pub const MIPS_REG_COP20: Type = 47;
    pub const MIPS_REG_COP21: Type = 48;
    pub const MIPS_REG_COP22: Type = 49;
    pub const MIPS_REG_COP23: Type = 50;
    pub const MIPS_REG_COP24: Type = 51;
    pub const MIPS_REG_COP25: Type = 52;
    pub const MIPS_REG_COP26: Type = 53;
    pub const MIPS_REG_COP27: Type = 54;
    pub const MIPS_REG_COP28: Type = 55;
    pub const MIPS_REG_COP29: Type = 56;
    pub const MIPS_REG_COP30: Type = 57;
    pub const MIPS_REG_COP31: Type = 58;
    pub const MIPS_REG_COP32: Type = 59;
    pub const MIPS_REG_COP33: Type = 60;
    pub const MIPS_REG_COP34: Type = 61;
    pub const MIPS_REG_COP35: Type = 62;
    pub const MIPS_REG_COP36: Type = 63;
    pub const MIPS_REG_COP37: Type = 64;
    pub const MIPS_REG_COP38: Type = 65;
    pub const MIPS_REG_COP39: Type = 66;
    pub const MIPS_REG_COP010: Type = 67;
    pub const MIPS_REG_COP011: Type = 68;
    pub const MIPS_REG_COP012: Type = 69;
    pub const MIPS_REG_COP013: Type = 70;
    pub const MIPS_REG_COP014: Type = 71;
    pub const MIPS_REG_COP015: Type = 72;
    pub const MIPS_REG_COP016: Type = 73;
    pub const MIPS_REG_COP017: Type = 74;
    pub const MIPS_REG_COP018: Type = 75;
    pub const MIPS_REG_COP019: Type = 76;
    pub const MIPS_REG_COP020: Type = 77;
    pub const MIPS_REG_COP021: Type = 78;
    pub const MIPS_REG_COP022: Type = 79;
    pub const MIPS_REG_COP023: Type = 80;
    pub const MIPS_REG_COP024: Type = 81;
    pub const MIPS_REG_COP025: Type = 82;
    pub const MIPS_REG_COP026: Type = 83;
    pub const MIPS_REG_COP027: Type = 84;
    pub const MIPS_REG_COP028: Type = 85;
    pub const MIPS_REG_COP029: Type = 86;
    pub const MIPS_REG_COP030: Type = 87;
    pub const MIPS_REG_COP031: Type = 88;
    pub const MIPS_REG_COP210: Type = 89;
    pub const MIPS_REG_COP211: Type = 90;
    pub const MIPS_REG_COP212: Type = 91;
    pub const MIPS_REG_COP213: Type = 92;
    pub const MIPS_REG_COP214: Type = 93;
    pub const MIPS_REG_COP215: Type = 94;
    pub const MIPS_REG_COP216: Type = 95;
    pub const MIPS_REG_COP217: Type = 96;
    pub const MIPS_REG_COP218: Type = 97;
    pub const MIPS_REG_COP219: Type = 98;
    pub const MIPS_REG_COP220: Type = 99;
    pub const MIPS_REG_COP221: Type = 100;
    pub const MIPS_REG_COP222: Type = 101;
    pub const MIPS_REG_COP223: Type = 102;
    pub const MIPS_REG_COP224: Type = 103;
    pub const MIPS_REG_COP225: Type = 104;
    pub const MIPS_REG_COP226: Type = 105;
    pub const MIPS_REG_COP227: Type = 106;
    pub const MIPS_REG_COP228: Type = 107;
    pub const MIPS_REG_COP229: Type = 108;
    pub const MIPS_REG_COP230: Type = 109;
    pub const MIPS_REG_COP231: Type = 110;
    pub const MIPS_REG_COP310: Type = 111;
    pub const MIPS_REG_COP311: Type = 112;
    pub const MIPS_REG_COP312: Type = 113;
    pub const MIPS_REG_COP313: Type = 114;
    pub const MIPS_REG_COP314: Type = 115;
    pub const MIPS_REG_COP315: Type = 116;
    pub const MIPS_REG_COP316: Type = 117;
    pub const MIPS_REG_COP317: Type = 118;
    pub const MIPS_REG_COP318: Type = 119;
    pub const MIPS_REG_COP319: Type = 120;
    pub const MIPS_REG_COP320: Type = 121;
    pub const MIPS_REG_COP321: Type = 122;
    pub const MIPS_REG_COP322: Type = 123;
    pub const MIPS_REG_COP323: Type = 124;
    pub const MIPS_REG_COP324: Type = 125;
    pub const MIPS_REG_COP325: Type = 126;
    pub const MIPS_REG_COP326: Type = 127;
    pub const MIPS_REG_COP327: Type = 128;
    pub const MIPS_REG_COP328: Type = 129;
    pub const MIPS_REG_COP329: Type = 130;
    pub const MIPS_REG_COP330: Type = 131;
    pub const MIPS_REG_COP331: Type = 132;
    pub const MIPS_REG_D0: Type = 133;
    pub const MIPS_REG_D1: Type = 134;
    pub const MIPS_REG_D2: Type = 135;
    pub const MIPS_REG_D3: Type = 136;
    pub const MIPS_REG_D4: Type = 137;
    pub const MIPS_REG_D5: Type = 138;
    pub const MIPS_REG_D6: Type = 139;
    pub const MIPS_REG_D7: Type = 140;
    pub const MIPS_REG_D8: Type = 141;
    pub const MIPS_REG_D9: Type = 142;
    pub const MIPS_REG_D10: Type = 143;
    pub const MIPS_REG_D11: Type = 144;
    pub const MIPS_REG_D12: Type = 145;
    pub const MIPS_REG_D13: Type = 146;
    pub const MIPS_REG_D14: Type = 147;
    pub const MIPS_REG_D15: Type = 148;
    pub const MIPS_REG_DSPOUTFLAG20: Type = 149;
    pub const MIPS_REG_DSPOUTFLAG21: Type = 150;
    pub const MIPS_REG_DSPOUTFLAG22: Type = 151;
    pub const MIPS_REG_DSPOUTFLAG23: Type = 152;
    pub const MIPS_REG_F0: Type = 153;
    pub const MIPS_REG_F1: Type = 154;
    pub const MIPS_REG_F2: Type = 155;
    pub const MIPS_REG_F3: Type = 156;
    pub const MIPS_REG_F4: Type = 157;
    pub const MIPS_REG_F5: Type = 158;
    pub const MIPS_REG_F6: Type = 159;
    pub const MIPS_REG_F7: Type = 160;
    pub const MIPS_REG_F8: Type = 161;
    pub const MIPS_REG_F9: Type = 162;
    pub const MIPS_REG_F10: Type = 163;
    pub const MIPS_REG_F11: Type = 164;
    pub const MIPS_REG_F12: Type = 165;
    pub const MIPS_REG_F13: Type = 166;
    pub const MIPS_REG_F14: Type = 167;
    pub const MIPS_REG_F15: Type = 168;
    pub const MIPS_REG_F16: Type = 169;
    pub const MIPS_REG_F17: Type = 170;
    pub const MIPS_REG_F18: Type = 171;
    pub const MIPS_REG_F19: Type = 172;
    pub const MIPS_REG_F20: Type = 173;
    pub const MIPS_REG_F21: Type = 174;
    pub const MIPS_REG_F22: Type = 175;
    pub const MIPS_REG_F23: Type = 176;
    pub const MIPS_REG_F24: Type = 177;
    pub const MIPS_REG_F25: Type = 178;
    pub const MIPS_REG_F26: Type = 179;
    pub const MIPS_REG_F27: Type = 180;
    pub const MIPS_REG_F28: Type = 181;
    pub const MIPS_REG_F29: Type = 182;
    pub const MIPS_REG_F30: Type = 183;
    pub const MIPS_REG_F31: Type = 184;
    pub const MIPS_REG_FCC0: Type = 185;
    pub const MIPS_REG_FCC1: Type = 186;
    pub const MIPS_REG_FCC2: Type = 187;
    pub const MIPS_REG_FCC3: Type = 188;
    pub const MIPS_REG_FCC4: Type = 189;
    pub const MIPS_REG_FCC5: Type = 190;
    pub const MIPS_REG_FCC6: Type = 191;
    pub const MIPS_REG_FCC7: Type = 192;
    pub const MIPS_REG_FCR0: Type = 193;
    pub const MIPS_REG_FCR1: Type = 194;
    pub const MIPS_REG_FCR2: Type = 195;
    pub const MIPS_REG_FCR3: Type = 196;
    pub const MIPS_REG_FCR4: Type = 197;
    pub const MIPS_REG_FCR5: Type = 198;
    pub const MIPS_REG_FCR6: Type = 199;
    pub const MIPS_REG_FCR7: Type = 200;
    pub const MIPS_REG_FCR8: Type = 201;
    pub const MIPS_REG_FCR9: Type = 202;
    pub const MIPS_REG_FCR10: Type = 203;
    pub const MIPS_REG_FCR11: Type = 204;
    pub const MIPS_REG_FCR12: Type = 205;
    pub const MIPS_REG_FCR13: Type = 206;
    pub const MIPS_REG_FCR14: Type = 207;
    pub const MIPS_REG_FCR15: Type = 208;
    pub const MIPS_REG_FCR16: Type = 209;
    pub const MIPS_REG_FCR17: Type = 210;
    pub const MIPS_REG_FCR18: Type = 211;
    pub const MIPS_REG_FCR19: Type = 212;
    pub const MIPS_REG_FCR20: Type = 213;
    pub const MIPS_REG_FCR21: Type = 214;
    pub const MIPS_REG_FCR22: Type = 215;
    pub const MIPS_REG_FCR23: Type = 216;
    pub const MIPS_REG_FCR24: Type = 217;
    pub const MIPS_REG_FCR25: Type = 218;
    pub const MIPS_REG_FCR26: Type = 219;
    pub const MIPS_REG_FCR27: Type = 220;
    pub const MIPS_REG_FCR28: Type = 221;
    pub const MIPS_REG_FCR29: Type = 222;
    pub const MIPS_REG_FCR30: Type = 223;
    pub const MIPS_REG_FCR31: Type = 224;
    pub const MIPS_REG_FP_64: Type = 225;
    pub const MIPS_REG_F_HI0: Type = 226;
    pub const MIPS_REG_F_HI1: Type = 227;
    pub const MIPS_REG_F_HI2: Type = 228;
    pub const MIPS_REG_F_HI3: Type = 229;
    pub const MIPS_REG_F_HI4: Type = 230;
    pub const MIPS_REG_F_HI5: Type = 231;
    pub const MIPS_REG_F_HI6: Type = 232;
    pub const MIPS_REG_F_HI7: Type = 233;
    pub const MIPS_REG_F_HI8: Type = 234;
    pub const MIPS_REG_F_HI9: Type = 235;
    pub const MIPS_REG_F_HI10: Type = 236;
    pub const MIPS_REG_F_HI11: Type = 237;
    pub const MIPS_REG_F_HI12: Type = 238;
    pub const MIPS_REG_F_HI13: Type = 239;
    pub const MIPS_REG_F_HI14: Type = 240;
    pub const MIPS_REG_F_HI15: Type = 241;
    pub const MIPS_REG_F_HI16: Type = 242;
    pub const MIPS_REG_F_HI17: Type = 243;
    pub const MIPS_REG_F_HI18: Type = 244;
    pub const MIPS_REG_F_HI19: Type = 245;
    pub const MIPS_REG_F_HI20: Type = 246;
    pub const MIPS_REG_F_HI21: Type = 247;
    pub const MIPS_REG_F_HI22: Type = 248;
    pub const MIPS_REG_F_HI23: Type = 249;
    pub const MIPS_REG_F_HI24: Type = 250;
    pub const MIPS_REG_F_HI25: Type = 251;
    pub const MIPS_REG_F_HI26: Type = 252;
    pub const MIPS_REG_F_HI27: Type = 253;
    pub const MIPS_REG_F_HI28: Type = 254;
    pub const MIPS_REG_F_HI29: Type = 255;
    pub const MIPS_REG_F_HI30: Type = 256;
    pub const MIPS_REG_F_HI31: Type = 257;
    pub const MIPS_REG_GP_64: Type = 258;
    pub const MIPS_REG_HI0: Type = 259;
    pub const MIPS_REG_HI1: Type = 260;
    pub const MIPS_REG_HI2: Type = 261;
    pub const MIPS_REG_HI3: Type = 262;
    pub const MIPS_REG_HWR0: Type = 263;
    pub const MIPS_REG_HWR1: Type = 264;
    pub const MIPS_REG_HWR2: Type = 265;
    pub const MIPS_REG_HWR3: Type = 266;
    pub const MIPS_REG_HWR4: Type = 267;
    pub const MIPS_REG_HWR5: Type = 268;
    pub const MIPS_REG_HWR6: Type = 269;
    pub const MIPS_REG_HWR7: Type = 270;
    pub const MIPS_REG_HWR8: Type = 271;
    pub const MIPS_REG_HWR9: Type = 272;
    pub const MIPS_REG_HWR10: Type = 273;
    pub const MIPS_REG_HWR11: Type = 274;
    pub const MIPS_REG_HWR12: Type = 275;
    pub const MIPS_REG_HWR13: Type = 276;
    pub const MIPS_REG_HWR14: Type = 277;
    pub const MIPS_REG_HWR15: Type = 278;
    pub const MIPS_REG_HWR16: Type = 279;
    pub const MIPS_REG_HWR17: Type = 280;
    pub const MIPS_REG_HWR18: Type = 281;
    pub const MIPS_REG_HWR19: Type = 282;
    pub const MIPS_REG_HWR20: Type = 283;
    pub const MIPS_REG_HWR21: Type = 284;
    pub const MIPS_REG_HWR22: Type = 285;
    pub const MIPS_REG_HWR23: Type = 286;
    pub const MIPS_REG_HWR24: Type = 287;
    pub const MIPS_REG_HWR25: Type = 288;
    pub const MIPS_REG_HWR26: Type = 289;
    pub const MIPS_REG_HWR27: Type = 290;
    pub const MIPS_REG_HWR28: Type = 291;
    pub const MIPS_REG_HWR29: Type = 292;
    pub const MIPS_REG_HWR30: Type = 293;
    pub const MIPS_REG_HWR31: Type = 294;
    pub const MIPS_REG_K0: Type = 295;
    pub const MIPS_REG_K1: Type = 296;
    pub const MIPS_REG_LO0: Type = 297;
    pub const MIPS_REG_LO1: Type = 298;
    pub const MIPS_REG_LO2: Type = 299;
    pub const MIPS_REG_LO3: Type = 300;
    pub const MIPS_REG_MPL0: Type = 301;
    pub const MIPS_REG_MPL1: Type = 302;
    pub const MIPS_REG_MPL2: Type = 303;
    pub const MIPS_REG_MSA8: Type = 304;
    pub const MIPS_REG_MSA9: Type = 305;
    pub const MIPS_REG_MSA10: Type = 306;
    pub const MIPS_REG_MSA11: Type = 307;
    pub const MIPS_REG_MSA12: Type = 308;
    pub const MIPS_REG_MSA13: Type = 309;
    pub const MIPS_REG_MSA14: Type = 310;
    pub const MIPS_REG_MSA15: Type = 311;
    pub const MIPS_REG_MSA16: Type = 312;
    pub const MIPS_REG_MSA17: Type = 313;
    pub const MIPS_REG_MSA18: Type = 314;
    pub const MIPS_REG_MSA19: Type = 315;
    pub const MIPS_REG_MSA20: Type = 316;
    pub const MIPS_REG_MSA21: Type = 317;
    pub const MIPS_REG_MSA22: Type = 318;
    pub const MIPS_REG_MSA23: Type = 319;
    pub const MIPS_REG_MSA24: Type = 320;
    pub const MIPS_REG_MSA25: Type = 321;
    pub const MIPS_REG_MSA26: Type = 322;
    pub const MIPS_REG_MSA27: Type = 323;
    pub const MIPS_REG_MSA28: Type = 324;
    pub const MIPS_REG_MSA29: Type = 325;
    pub const MIPS_REG_MSA30: Type = 326;
    pub const MIPS_REG_MSA31: Type = 327;
    pub const MIPS_REG_P0: Type = 328;
    pub const MIPS_REG_P1: Type = 329;
    pub const MIPS_REG_P2: Type = 330;
    pub const MIPS_REG_RA_64: Type = 331;
    pub const MIPS_REG_S0: Type = 332;
    pub const MIPS_REG_S1: Type = 333;
    pub const MIPS_REG_S2: Type = 334;
    pub const MIPS_REG_S3: Type = 335;
    pub const MIPS_REG_S4: Type = 336;
    pub const MIPS_REG_S5: Type = 337;
    pub const MIPS_REG_S6: Type = 338;
    pub const MIPS_REG_S7: Type = 339;
    pub const MIPS_REG_SP_64: Type = 340;
    pub const MIPS_REG_T0: Type = 341;
    pub const MIPS_REG_T1: Type = 342;
    pub const MIPS_REG_T2: Type = 343;
    pub const MIPS_REG_T3: Type = 344;
    pub const MIPS_REG_T4: Type = 345;
    pub const MIPS_REG_T5: Type = 346;
    pub const MIPS_REG_T6: Type = 347;
    pub const MIPS_REG_T7: Type = 348;
    pub const MIPS_REG_T8: Type = 349;
    pub const MIPS_REG_T9: Type = 350;
    pub const MIPS_REG_V0: Type = 351;
    pub const MIPS_REG_V1: Type = 352;
    pub const MIPS_REG_W0: Type = 353;
    pub const MIPS_REG_W1: Type = 354;
    pub const MIPS_REG_W2: Type = 355;
    pub const MIPS_REG_W3: Type = 356;
    pub const MIPS_REG_W4: Type = 357;
    pub const MIPS_REG_W5: Type = 358;
    pub const MIPS_REG_W6: Type = 359;
    pub const MIPS_REG_W7: Type = 360;
    pub const MIPS_REG_W8: Type = 361;
    pub const MIPS_REG_W9: Type = 362;
    pub const MIPS_REG_W10: Type = 363;
    pub const MIPS_REG_W11: Type = 364;
    pub const MIPS_REG_W12: Type = 365;
    pub const MIPS_REG_W13: Type = 366;
    pub const MIPS_REG_W14: Type = 367;
    pub const MIPS_REG_W15: Type = 368;
    pub const MIPS_REG_W16: Type = 369;
    pub const MIPS_REG_W17: Type = 370;
    pub const MIPS_REG_W18: Type = 371;
    pub const MIPS_REG_W19: Type = 372;
    pub const MIPS_REG_W20: Type = 373;
    pub const MIPS_REG_W21: Type = 374;
    pub const MIPS_REG_W22: Type = 375;
    pub const MIPS_REG_W23: Type = 376;
    pub const MIPS_REG_W24: Type = 377;
    pub const MIPS_REG_W25: Type = 378;
    pub const MIPS_REG_W26: Type = 379;
    pub const MIPS_REG_W27: Type = 380;
    pub const MIPS_REG_W28: Type = 381;
    pub const MIPS_REG_W29: Type = 382;
    pub const MIPS_REG_W30: Type = 383;
    pub const MIPS_REG_W31: Type = 384;
    pub const MIPS_REG_ZERO_64: Type = 385;
    pub const MIPS_REG_A0_NM: Type = 386;
    pub const MIPS_REG_A1_NM: Type = 387;
    pub const MIPS_REG_A2_NM: Type = 388;
    pub const MIPS_REG_A3_NM: Type = 389;
    pub const MIPS_REG_A4_NM: Type = 390;
    pub const MIPS_REG_A5_NM: Type = 391;
    pub const MIPS_REG_A6_NM: Type = 392;
    pub const MIPS_REG_A7_NM: Type = 393;
    pub const MIPS_REG_COP0SEL_BADINST: Type = 394;
    pub const MIPS_REG_COP0SEL_BADINSTRP: Type = 395;
    pub const MIPS_REG_COP0SEL_BADINSTRX: Type = 396;
    pub const MIPS_REG_COP0SEL_BADVADDR: Type = 397;
    pub const MIPS_REG_COP0SEL_BEVVA: Type = 398;
    pub const MIPS_REG_COP0SEL_CACHEERR: Type = 399;
    pub const MIPS_REG_COP0SEL_CAUSE: Type = 400;
    pub const MIPS_REG_COP0SEL_CDMMBASE: Type = 401;
    pub const MIPS_REG_COP0SEL_CMGCRBASE: Type = 402;
    pub const MIPS_REG_COP0SEL_COMPARE: Type = 403;
    pub const MIPS_REG_COP0SEL_CONFIG: Type = 404;
    pub const MIPS_REG_COP0SEL_CONTEXT: Type = 405;
    pub const MIPS_REG_COP0SEL_CONTEXTCONFIG: Type = 406;
    pub const MIPS_REG_COP0SEL_COUNT: Type = 407;
    pub const MIPS_REG_COP0SEL_DDATAHI: Type = 408;
    pub const MIPS_REG_COP0SEL_DDATALO: Type = 409;
    pub const MIPS_REG_COP0SEL_DEBUG: Type = 410;
    pub const MIPS_REG_COP0SEL_DEBUGCONTEXTID: Type = 411;
    pub const MIPS_REG_COP0SEL_DEPC: Type = 412;
    pub const MIPS_REG_COP0SEL_DESAVE: Type = 413;
    pub const MIPS_REG_COP0SEL_DTAGHI: Type = 414;
    pub const MIPS_REG_COP0SEL_DTAGLO: Type = 415;
    pub const MIPS_REG_COP0SEL_EBASE: Type = 416;
    pub const MIPS_REG_COP0SEL_ENTRYHI: Type = 417;
    pub const MIPS_REG_COP0SEL_EPC: Type = 418;
    pub const MIPS_REG_COP0SEL_ERRCTL: Type = 419;
    pub const MIPS_REG_COP0SEL_ERROREPC: Type = 420;
    pub const MIPS_REG_COP0SEL_GLOBALNUMBER: Type = 421;
    pub const MIPS_REG_COP0SEL_GTOFFSET: Type = 422;
    pub const MIPS_REG_COP0SEL_HWRENA: Type = 423;
    pub const MIPS_REG_COP0SEL_IDATAHI: Type = 424;
    pub const MIPS_REG_COP0SEL_IDATALO: Type = 425;
    pub const MIPS_REG_COP0SEL_INDEX: Type = 426;
    pub const MIPS_REG_COP0SEL_INTCTL: Type = 427;
    pub const MIPS_REG_COP0SEL_ITAGHI: Type = 428;
    pub const MIPS_REG_COP0SEL_ITAGLO: Type = 429;
    pub const MIPS_REG_COP0SEL_LLADDR: Type = 430;
    pub const MIPS_REG_COP0SEL_MAAR: Type = 431;
    pub const MIPS_REG_COP0SEL_MAARI: Type = 432;
    pub const MIPS_REG_COP0SEL_MEMORYMAPID: Type = 433;
    pub const MIPS_REG_COP0SEL_MVPCONTROL: Type = 434;
    pub const MIPS_REG_COP0SEL_NESTEDEPC: Type = 435;
    pub const MIPS_REG_COP0SEL_NESTEDEXC: Type = 436;
    pub const MIPS_REG_COP0SEL_PAGEGRAIN: Type = 437;
    pub const MIPS_REG_COP0SEL_PAGEMASK: Type = 438;
    pub const MIPS_REG_COP0SEL_PRID: Type = 439;
    pub const MIPS_REG_COP0SEL_PWBASE: Type = 440;
    pub const MIPS_REG_COP0SEL_PWCTL: Type = 441;
    pub const MIPS_REG_COP0SEL_PWFIELD: Type = 442;
    pub const MIPS_REG_COP0SEL_PWSIZE: Type = 443;
    pub const MIPS_REG_COP0SEL_RANDOM: Type = 444;
    pub const MIPS_REG_COP0SEL_SRSCTL: Type = 445;
    pub const MIPS_REG_COP0SEL_SRSMAP: Type = 446;
    pub const MIPS_REG_COP0SEL_STATUS: Type = 447;
    pub const MIPS_REG_COP0SEL_TCBIND: Type = 448;
    pub const MIPS_REG_COP0SEL_TCCONTEXT: Type = 449;
    pub const MIPS_REG_COP0SEL_TCHALT: Type = 450;
    pub const MIPS_REG_COP0SEL_TCOPT: Type = 451;
    pub const MIPS_REG_COP0SEL_TCRESTART: Type = 452;
    pub const MIPS_REG_COP0SEL_TCSCHEDULE: Type = 453;
    pub const MIPS_REG_COP0SEL_TCSCHEFBACK: Type = 454;
    pub const MIPS_REG_COP0SEL_TCSTATUS: Type = 455;
    pub const MIPS_REG_COP0SEL_TRACECONTROL: Type = 456;
    pub const MIPS_REG_COP0SEL_TRACEDBPC: Type = 457;
    pub const MIPS_REG_COP0SEL_TRACEIBPC: Type = 458;
    pub const MIPS_REG_COP0SEL_USERLOCAL: Type = 459;
    pub const MIPS_REG_COP0SEL_VIEW_IPL: Type = 460;
    pub const MIPS_REG_COP0SEL_VIEW_RIPL: Type = 461;
    pub const MIPS_REG_COP0SEL_VPCONTROL: Type = 462;
    pub const MIPS_REG_COP0SEL_VPECONTROL: Type = 463;
    pub const MIPS_REG_COP0SEL_VPEOPT: Type = 464;
    pub const MIPS_REG_COP0SEL_VPESCHEDULE: Type = 465;
    pub const MIPS_REG_COP0SEL_VPESCHEFBACK: Type = 466;
    pub const MIPS_REG_COP0SEL_WIRED: Type = 467;
    pub const MIPS_REG_COP0SEL_XCONTEXT: Type = 468;
    pub const MIPS_REG_COP0SEL_XCONTEXTCONFIG: Type = 469;
    pub const MIPS_REG_COP0SEL_YQMASK: Type = 470;
    pub const MIPS_REG_K0_NM: Type = 471;
    pub const MIPS_REG_K1_NM: Type = 472;
    pub const MIPS_REG_S0_NM: Type = 473;
    pub const MIPS_REG_S1_NM: Type = 474;
    pub const MIPS_REG_S2_NM: Type = 475;
    pub const MIPS_REG_S3_NM: Type = 476;
    pub const MIPS_REG_S4_NM: Type = 477;
    pub const MIPS_REG_S5_NM: Type = 478;
    pub const MIPS_REG_S6_NM: Type = 479;
    pub const MIPS_REG_S7_NM: Type = 480;
    pub const MIPS_REG_T0_NM: Type = 481;
    pub const MIPS_REG_T1_NM: Type = 482;
    pub const MIPS_REG_T2_NM: Type = 483;
    pub const MIPS_REG_T3_NM: Type = 484;
    pub const MIPS_REG_T4_NM: Type = 485;
    pub const MIPS_REG_T5_NM: Type = 486;
    pub const MIPS_REG_T8_NM: Type = 487;
    pub const MIPS_REG_T9_NM: Type = 488;
    pub const MIPS_REG_A0_64: Type = 489;
    pub const MIPS_REG_A1_64: Type = 490;
    pub const MIPS_REG_A2_64: Type = 491;
    pub const MIPS_REG_A3_64: Type = 492;
    pub const MIPS_REG_AC0_64: Type = 493;
    pub const MIPS_REG_COP0SEL_CONFIG1: Type = 494;
    pub const MIPS_REG_COP0SEL_CONFIG2: Type = 495;
    pub const MIPS_REG_COP0SEL_CONFIG3: Type = 496;
    pub const MIPS_REG_COP0SEL_CONFIG4: Type = 497;
    pub const MIPS_REG_COP0SEL_CONFIG5: Type = 498;
    pub const MIPS_REG_COP0SEL_DEBUG2: Type = 499;
    pub const MIPS_REG_COP0SEL_ENTRYLO0: Type = 500;
    pub const MIPS_REG_COP0SEL_ENTRYLO1: Type = 501;
    pub const MIPS_REG_COP0SEL_GUESTCTL0: Type = 502;
    pub const MIPS_REG_COP0SEL_GUESTCTL1: Type = 503;
    pub const MIPS_REG_COP0SEL_GUESTCTL2: Type = 504;
    pub const MIPS_REG_COP0SEL_GUESTCTL3: Type = 505;
    pub const MIPS_REG_COP0SEL_KSCRATCH1: Type = 506;
    pub const MIPS_REG_COP0SEL_KSCRATCH2: Type = 507;
    pub const MIPS_REG_COP0SEL_KSCRATCH3: Type = 508;
    pub const MIPS_REG_COP0SEL_KSCRATCH4: Type = 509;
    pub const MIPS_REG_COP0SEL_KSCRATCH5: Type = 510;
    pub const MIPS_REG_COP0SEL_KSCRATCH6: Type = 511;
    pub const MIPS_REG_COP0SEL_MVPCONF0: Type = 512;
    pub const MIPS_REG_COP0SEL_MVPCONF1: Type = 513;
    pub const MIPS_REG_COP0SEL_PERFCNT0: Type = 514;
    pub const MIPS_REG_COP0SEL_PERFCNT1: Type = 515;
    pub const MIPS_REG_COP0SEL_PERFCNT2: Type = 516;
    pub const MIPS_REG_COP0SEL_PERFCNT3: Type = 517;
    pub const MIPS_REG_COP0SEL_PERFCNT4: Type = 518;
    pub const MIPS_REG_COP0SEL_PERFCNT5: Type = 519;
    pub const MIPS_REG_COP0SEL_PERFCNT6: Type = 520;
    pub const MIPS_REG_COP0SEL_PERFCNT7: Type = 521;
    pub const MIPS_REG_COP0SEL_PERFCTL0: Type = 522;
    pub const MIPS_REG_COP0SEL_PERFCTL1: Type = 523;
    pub const MIPS_REG_COP0SEL_PERFCTL2: Type = 524;
    pub const MIPS_REG_COP0SEL_PERFCTL3: Type = 525;
    pub const MIPS_REG_COP0SEL_PERFCTL4: Type = 526;
    pub const MIPS_REG_COP0SEL_PERFCTL5: Type = 527;
    pub const MIPS_REG_COP0SEL_PERFCTL6: Type = 528;
    pub const MIPS_REG_COP0SEL_PERFCTL7: Type = 529;
    pub const MIPS_REG_COP0SEL_SEGCTL0: Type = 530;
    pub const MIPS_REG_COP0SEL_SEGCTL1: Type = 531;
    pub const MIPS_REG_COP0SEL_SEGCTL2: Type = 532;
    pub const MIPS_REG_COP0SEL_SRSCONF0: Type = 533;
    pub const MIPS_REG_COP0SEL_SRSCONF1: Type = 534;
    pub const MIPS_REG_COP0SEL_SRSCONF2: Type = 535;
    pub const MIPS_REG_COP0SEL_SRSCONF3: Type = 536;
    pub const MIPS_REG_COP0SEL_SRSCONF4: Type = 537;
    pub const MIPS_REG_COP0SEL_SRSMAP2: Type = 538;
    pub const MIPS_REG_COP0SEL_TRACECONTROL2: Type = 539;
    pub const MIPS_REG_COP0SEL_TRACECONTROL3: Type = 540;
    pub const MIPS_REG_COP0SEL_USERTRACEDATA1: Type = 541;
    pub const MIPS_REG_COP0SEL_USERTRACEDATA2: Type = 542;
    pub const MIPS_REG_COP0SEL_VPECONF0: Type = 543;
    pub const MIPS_REG_COP0SEL_VPECONF1: Type = 544;
    pub const MIPS_REG_COP0SEL_WATCHHI0: Type = 545;
    pub const MIPS_REG_COP0SEL_WATCHHI1: Type = 546;
    pub const MIPS_REG_COP0SEL_WATCHHI2: Type = 547;
    pub const MIPS_REG_COP0SEL_WATCHHI3: Type = 548;
    pub const MIPS_REG_COP0SEL_WATCHHI4: Type = 549;
    pub const MIPS_REG_COP0SEL_WATCHHI5: Type = 550;
    pub const MIPS_REG_COP0SEL_WATCHHI6: Type = 551;
    pub const MIPS_REG_COP0SEL_WATCHHI7: Type = 552;
    pub const MIPS_REG_COP0SEL_WATCHHI8: Type = 553;
    pub const MIPS_REG_COP0SEL_WATCHHI9: Type = 554;
    pub const MIPS_REG_COP0SEL_WATCHHI10: Type = 555;
    pub const MIPS_REG_COP0SEL_WATCHHI11: Type = 556;
    pub const MIPS_REG_COP0SEL_WATCHHI12: Type = 557;
    pub const MIPS_REG_COP0SEL_WATCHHI13: Type = 558;
    pub const MIPS_REG_COP0SEL_WATCHHI14: Type = 559;
    pub const MIPS_REG_COP0SEL_WATCHHI15: Type = 560;
    pub const MIPS_REG_COP0SEL_WATCHLO0: Type = 561;
    pub const MIPS_REG_COP0SEL_WATCHLO1: Type = 562;
    pub const MIPS_REG_COP0SEL_WATCHLO2: Type = 563;
    pub const MIPS_REG_COP0SEL_WATCHLO3: Type = 564;
    pub const MIPS_REG_COP0SEL_WATCHLO4: Type = 565;
    pub const MIPS_REG_COP0SEL_WATCHLO5: Type = 566;
    pub const MIPS_REG_COP0SEL_WATCHLO6: Type = 567;
    pub const MIPS_REG_COP0SEL_WATCHLO7: Type = 568;
    pub const MIPS_REG_COP0SEL_WATCHLO8: Type = 569;
    pub const MIPS_REG_COP0SEL_WATCHLO9: Type = 570;
    pub const MIPS_REG_COP0SEL_WATCHLO10: Type = 571;
    pub const MIPS_REG_COP0SEL_WATCHLO11: Type = 572;
    pub const MIPS_REG_COP0SEL_WATCHLO12: Type = 573;
    pub const MIPS_REG_COP0SEL_WATCHLO13: Type = 574;
    pub const MIPS_REG_COP0SEL_WATCHLO14: Type = 575;
    pub const MIPS_REG_COP0SEL_WATCHLO15: Type = 576;
    pub const MIPS_REG_D0_64: Type = 577;
    pub const MIPS_REG_D1_64: Type = 578;
    pub const MIPS_REG_D2_64: Type = 579;
    pub const MIPS_REG_D3_64: Type = 580;
    pub const MIPS_REG_D4_64: Type = 581;
    pub const MIPS_REG_D5_64: Type = 582;
    pub const MIPS_REG_D6_64: Type = 583;
    pub const MIPS_REG_D7_64: Type = 584;
    pub const MIPS_REG_D8_64: Type = 585;
    pub const MIPS_REG_D9_64: Type = 586;
    pub const MIPS_REG_D10_64: Type = 587;
    pub const MIPS_REG_D11_64: Type = 588;
    pub const MIPS_REG_D12_64: Type = 589;
    pub const MIPS_REG_D13_64: Type = 590;
    pub const MIPS_REG_D14_64: Type = 591;
    pub const MIPS_REG_D15_64: Type = 592;
    pub const MIPS_REG_D16_64: Type = 593;
    pub const MIPS_REG_D17_64: Type = 594;
    pub const MIPS_REG_D18_64: Type = 595;
    pub const MIPS_REG_D19_64: Type = 596;
    pub const MIPS_REG_D20_64: Type = 597;
    pub const MIPS_REG_D21_64: Type = 598;
    pub const MIPS_REG_D22_64: Type = 599;
    pub const MIPS_REG_D23_64: Type = 600;
    pub const MIPS_REG_D24_64: Type = 601;
    pub const MIPS_REG_D25_64: Type = 602;
    pub const MIPS_REG_D26_64: Type = 603;
    pub const MIPS_REG_D27_64: Type = 604;
    pub const MIPS_REG_D28_64: Type = 605;
    pub const MIPS_REG_D29_64: Type = 606;
    pub const MIPS_REG_D30_64: Type = 607;
    pub const MIPS_REG_D31_64: Type = 608;
    pub const MIPS_REG_DSPOUTFLAG16_19: Type = 609;
    pub const MIPS_REG_HI0_64: Type = 610;
    pub const MIPS_REG_K0_64: Type = 611;
    pub const MIPS_REG_K1_64: Type = 612;
    pub const MIPS_REG_LO0_64: Type = 613;
    pub const MIPS_REG_S0_64: Type = 614;
    pub const MIPS_REG_S1_64: Type = 615;
    pub const MIPS_REG_S2_64: Type = 616;
    pub const MIPS_REG_S3_64: Type = 617;
    pub const MIPS_REG_S4_64: Type = 618;
    pub const MIPS_REG_S5_64: Type = 619;
    pub const MIPS_REG_S6_64: Type = 620;
    pub const MIPS_REG_S7_64: Type = 621;
    pub const MIPS_REG_T0_64: Type = 622;
    pub const MIPS_REG_T1_64: Type = 623;
    pub const MIPS_REG_T2_64: Type = 624;
    pub const MIPS_REG_T3_64: Type = 625;
    pub const MIPS_REG_T4_64: Type = 626;
    pub const MIPS_REG_T5_64: Type = 627;
    pub const MIPS_REG_T6_64: Type = 628;
    pub const MIPS_REG_T7_64: Type = 629;
    pub const MIPS_REG_T8_64: Type = 630;
    pub const MIPS_REG_T9_64: Type = 631;
    pub const MIPS_REG_V0_64: Type = 632;
    pub const MIPS_REG_V1_64: Type = 633;
    pub const MIPS_REG_COP0SEL_GUESTCTL0EXT: Type = 634;
    pub const MIPS_REG_ENDING: Type = 635;
}
#[doc = " Instruction's operand referring to memory\n This is associated with MIPS_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mips_op_mem {
    #[doc = "< base register"]
    pub base: mips_reg::Type,
    #[doc = "< displacement/offset value"]
    pub disp: i64,
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_mips_op {
    #[doc = "< operand type"]
    pub type_: mips_op_type,
    pub __bindgen_anon_1: cs_mips_op__bindgen_ty_1,
    #[doc = "< defines if the register is part of a list"]
    pub is_reglist: bool,
    #[doc = "< when true, the immediate value is unsigned"]
    pub is_unsigned: bool,
    #[doc = " How is this operand accessed? (READ, WRITE or READ|WRITE)\n NOTE: this field is irrelevant if engine is compiled in DIET mode."]
    pub access: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_mips_op__bindgen_ty_1 {
    #[doc = "< register id for REG operand"]
    pub reg: mips_reg::Type,
    #[doc = "< signed immediate value for IMM operand"]
    pub imm: i64,
    #[doc = "< unsigned immediate value for IMM operand"]
    pub uimm: u64,
    #[doc = "< base/index/scale/disp value for MEM operand"]
    pub mem: mips_op_mem,
}
impl ::core::fmt::Debug for cs_mips_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_mips_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_mips_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "cs_mips_op {{ type: {:?}, __bindgen_anon_1: {:?}, is_reglist: {:?}, is_unsigned: {:?} }}" , self . type_ , self . __bindgen_anon_1 , self . is_reglist , self . is_unsigned)
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_mips {
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_mips_op; 10usize],
}
impl ::core::fmt::Debug for cs_mips {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_mips {{ operands: {:?} }}", self.operands)
    }
}
#[repr(u32)]
#[doc = " MIPS instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mips_insn {
    MIPS_INS_INVALID = 0,
    MIPS_INS_ABS = 1,
    MIPS_INS_ALIGN = 2,
    MIPS_INS_BEQL = 3,
    MIPS_INS_BGE = 4,
    MIPS_INS_BGEL = 5,
    MIPS_INS_BGEU = 6,
    MIPS_INS_BGEUL = 7,
    MIPS_INS_BGT = 8,
    MIPS_INS_BGTL = 9,
    MIPS_INS_BGTU = 10,
    MIPS_INS_BGTUL = 11,
    MIPS_INS_BLE = 12,
    MIPS_INS_BLEL = 13,
    MIPS_INS_BLEU = 14,
    MIPS_INS_BLEUL = 15,
    MIPS_INS_BLT = 16,
    MIPS_INS_BLTL = 17,
    MIPS_INS_BLTU = 18,
    MIPS_INS_BLTUL = 19,
    MIPS_INS_BNEL = 20,
    MIPS_INS_B = 21,
    MIPS_INS_BEQ = 22,
    MIPS_INS_BNE = 23,
    MIPS_INS_CFTC1 = 24,
    MIPS_INS_CTTC1 = 25,
    MIPS_INS_DMUL = 26,
    MIPS_INS_DMULO = 27,
    MIPS_INS_DMULOU = 28,
    MIPS_INS_DROL = 29,
    MIPS_INS_DROR = 30,
    MIPS_INS_DDIV = 31,
    MIPS_INS_DREM = 32,
    MIPS_INS_DDIVU = 33,
    MIPS_INS_DREMU = 34,
    MIPS_INS_JAL = 35,
    MIPS_INS_LD = 36,
    MIPS_INS_LWM = 37,
    MIPS_INS_LA = 38,
    MIPS_INS_DLA = 39,
    MIPS_INS_LI = 40,
    MIPS_INS_DLI = 41,
    MIPS_INS_LI_D = 42,
    MIPS_INS_LI_S = 43,
    MIPS_INS_MFTACX = 44,
    MIPS_INS_MFTC0 = 45,
    MIPS_INS_MFTC1 = 46,
    MIPS_INS_MFTDSP = 47,
    MIPS_INS_MFTGPR = 48,
    MIPS_INS_MFTHC1 = 49,
    MIPS_INS_MFTHI = 50,
    MIPS_INS_MFTLO = 51,
    MIPS_INS_MTTACX = 52,
    MIPS_INS_MTTC0 = 53,
    MIPS_INS_MTTC1 = 54,
    MIPS_INS_MTTDSP = 55,
    MIPS_INS_MTTGPR = 56,
    MIPS_INS_MTTHC1 = 57,
    MIPS_INS_MTTHI = 58,
    MIPS_INS_MTTLO = 59,
    MIPS_INS_MUL = 60,
    MIPS_INS_MULO = 61,
    MIPS_INS_MULOU = 62,
    MIPS_INS_NOR = 63,
    MIPS_INS_ADDIU = 64,
    MIPS_INS_ANDI = 65,
    MIPS_INS_SUBU = 66,
    MIPS_INS_TRUNC_W_D = 67,
    MIPS_INS_TRUNC_W_S = 68,
    MIPS_INS_ROL = 69,
    MIPS_INS_ROR = 70,
    MIPS_INS_S_D = 71,
    MIPS_INS_SD = 72,
    MIPS_INS_DIV = 73,
    MIPS_INS_SEQ = 74,
    MIPS_INS_SGE = 75,
    MIPS_INS_SGEU = 76,
    MIPS_INS_SGT = 77,
    MIPS_INS_SGTU = 78,
    MIPS_INS_SLE = 79,
    MIPS_INS_SLEU = 80,
    MIPS_INS_SLT = 81,
    MIPS_INS_SLTU = 82,
    MIPS_INS_SNE = 83,
    MIPS_INS_REM = 84,
    MIPS_INS_SWM = 85,
    MIPS_INS_SAA = 86,
    MIPS_INS_SAAD = 87,
    MIPS_INS_DIVU = 88,
    MIPS_INS_REMU = 89,
    MIPS_INS_ULH = 90,
    MIPS_INS_ULHU = 91,
    MIPS_INS_ULW = 92,
    MIPS_INS_USH = 93,
    MIPS_INS_USW = 94,
    MIPS_INS_ABSQ_S_PH = 95,
    MIPS_INS_ABSQ_S_QB = 96,
    MIPS_INS_ABSQ_S_W = 97,
    MIPS_INS_ADD = 98,
    MIPS_INS_ADDIUPC = 99,
    MIPS_INS_ADDIUR1SP = 100,
    MIPS_INS_ADDIUR2 = 101,
    MIPS_INS_ADDIUS5 = 102,
    MIPS_INS_ADDIUSP = 103,
    MIPS_INS_ADDQH_PH = 104,
    MIPS_INS_ADDQH_R_PH = 105,
    MIPS_INS_ADDQH_R_W = 106,
    MIPS_INS_ADDQH_W = 107,
    MIPS_INS_ADDQ_PH = 108,
    MIPS_INS_ADDQ_S_PH = 109,
    MIPS_INS_ADDQ_S_W = 110,
    MIPS_INS_ADDR_PS = 111,
    MIPS_INS_ADDSC = 112,
    MIPS_INS_ADDS_A_B = 113,
    MIPS_INS_ADDS_A_D = 114,
    MIPS_INS_ADDS_A_H = 115,
    MIPS_INS_ADDS_A_W = 116,
    MIPS_INS_ADDS_S_B = 117,
    MIPS_INS_ADDS_S_D = 118,
    MIPS_INS_ADDS_S_H = 119,
    MIPS_INS_ADDS_S_W = 120,
    MIPS_INS_ADDS_U_B = 121,
    MIPS_INS_ADDS_U_D = 122,
    MIPS_INS_ADDS_U_H = 123,
    MIPS_INS_ADDS_U_W = 124,
    MIPS_INS_ADDU16 = 125,
    MIPS_INS_ADDUH_QB = 126,
    MIPS_INS_ADDUH_R_QB = 127,
    MIPS_INS_ADDU = 128,
    MIPS_INS_ADDU_PH = 129,
    MIPS_INS_ADDU_QB = 130,
    MIPS_INS_ADDU_S_PH = 131,
    MIPS_INS_ADDU_S_QB = 132,
    MIPS_INS_ADDVI_B = 133,
    MIPS_INS_ADDVI_D = 134,
    MIPS_INS_ADDVI_H = 135,
    MIPS_INS_ADDVI_W = 136,
    MIPS_INS_ADDV_B = 137,
    MIPS_INS_ADDV_D = 138,
    MIPS_INS_ADDV_H = 139,
    MIPS_INS_ADDV_W = 140,
    MIPS_INS_ADDWC = 141,
    MIPS_INS_ADD_A_B = 142,
    MIPS_INS_ADD_A_D = 143,
    MIPS_INS_ADD_A_H = 144,
    MIPS_INS_ADD_A_W = 145,
    MIPS_INS_ADDI = 146,
    MIPS_INS_ALUIPC = 147,
    MIPS_INS_AND = 148,
    MIPS_INS_AND16 = 149,
    MIPS_INS_ANDI16 = 150,
    MIPS_INS_ANDI_B = 151,
    MIPS_INS_AND_V = 152,
    MIPS_INS_APPEND = 153,
    MIPS_INS_ASUB_S_B = 154,
    MIPS_INS_ASUB_S_D = 155,
    MIPS_INS_ASUB_S_H = 156,
    MIPS_INS_ASUB_S_W = 157,
    MIPS_INS_ASUB_U_B = 158,
    MIPS_INS_ASUB_U_D = 159,
    MIPS_INS_ASUB_U_H = 160,
    MIPS_INS_ASUB_U_W = 161,
    MIPS_INS_AUI = 162,
    MIPS_INS_AUIPC = 163,
    MIPS_INS_AVER_S_B = 164,
    MIPS_INS_AVER_S_D = 165,
    MIPS_INS_AVER_S_H = 166,
    MIPS_INS_AVER_S_W = 167,
    MIPS_INS_AVER_U_B = 168,
    MIPS_INS_AVER_U_D = 169,
    MIPS_INS_AVER_U_H = 170,
    MIPS_INS_AVER_U_W = 171,
    MIPS_INS_AVE_S_B = 172,
    MIPS_INS_AVE_S_D = 173,
    MIPS_INS_AVE_S_H = 174,
    MIPS_INS_AVE_S_W = 175,
    MIPS_INS_AVE_U_B = 176,
    MIPS_INS_AVE_U_D = 177,
    MIPS_INS_AVE_U_H = 178,
    MIPS_INS_AVE_U_W = 179,
    MIPS_INS_B16 = 180,
    MIPS_INS_BADDU = 181,
    MIPS_INS_BAL = 182,
    MIPS_INS_BALC = 183,
    MIPS_INS_BALIGN = 184,
    MIPS_INS_BALRSC = 185,
    MIPS_INS_BBEQZC = 186,
    MIPS_INS_BBIT0 = 187,
    MIPS_INS_BBIT032 = 188,
    MIPS_INS_BBIT1 = 189,
    MIPS_INS_BBIT132 = 190,
    MIPS_INS_BBNEZC = 191,
    MIPS_INS_BC = 192,
    MIPS_INS_BC16 = 193,
    MIPS_INS_BC1EQZ = 194,
    MIPS_INS_BC1EQZC = 195,
    MIPS_INS_BC1F = 196,
    MIPS_INS_BC1FL = 197,
    MIPS_INS_BC1NEZ = 198,
    MIPS_INS_BC1NEZC = 199,
    MIPS_INS_BC1T = 200,
    MIPS_INS_BC1TL = 201,
    MIPS_INS_BC2EQZ = 202,
    MIPS_INS_BC2EQZC = 203,
    MIPS_INS_BC2NEZ = 204,
    MIPS_INS_BC2NEZC = 205,
    MIPS_INS_BCLRI_B = 206,
    MIPS_INS_BCLRI_D = 207,
    MIPS_INS_BCLRI_H = 208,
    MIPS_INS_BCLRI_W = 209,
    MIPS_INS_BCLR_B = 210,
    MIPS_INS_BCLR_D = 211,
    MIPS_INS_BCLR_H = 212,
    MIPS_INS_BCLR_W = 213,
    MIPS_INS_BEQC = 214,
    MIPS_INS_BEQIC = 215,
    MIPS_INS_BEQZ16 = 216,
    MIPS_INS_BEQZALC = 217,
    MIPS_INS_BEQZC = 218,
    MIPS_INS_BEQZC16 = 219,
    MIPS_INS_BGEC = 220,
    MIPS_INS_BGEIC = 221,
    MIPS_INS_BGEIUC = 222,
    MIPS_INS_BGEUC = 223,
    MIPS_INS_BGEZ = 224,
    MIPS_INS_BGEZAL = 225,
    MIPS_INS_BGEZALC = 226,
    MIPS_INS_BGEZALL = 227,
    MIPS_INS_BGEZALS = 228,
    MIPS_INS_BGEZC = 229,
    MIPS_INS_BGEZL = 230,
    MIPS_INS_BGTZ = 231,
    MIPS_INS_BGTZALC = 232,
    MIPS_INS_BGTZC = 233,
    MIPS_INS_BGTZL = 234,
    MIPS_INS_BINSLI_B = 235,
    MIPS_INS_BINSLI_D = 236,
    MIPS_INS_BINSLI_H = 237,
    MIPS_INS_BINSLI_W = 238,
    MIPS_INS_BINSL_B = 239,
    MIPS_INS_BINSL_D = 240,
    MIPS_INS_BINSL_H = 241,
    MIPS_INS_BINSL_W = 242,
    MIPS_INS_BINSRI_B = 243,
    MIPS_INS_BINSRI_D = 244,
    MIPS_INS_BINSRI_H = 245,
    MIPS_INS_BINSRI_W = 246,
    MIPS_INS_BINSR_B = 247,
    MIPS_INS_BINSR_D = 248,
    MIPS_INS_BINSR_H = 249,
    MIPS_INS_BINSR_W = 250,
    MIPS_INS_BITREV = 251,
    MIPS_INS_BITREVW = 252,
    MIPS_INS_BITSWAP = 253,
    MIPS_INS_BLEZ = 254,
    MIPS_INS_BLEZALC = 255,
    MIPS_INS_BLEZC = 256,
    MIPS_INS_BLEZL = 257,
    MIPS_INS_BLTC = 258,
    MIPS_INS_BLTIC = 259,
    MIPS_INS_BLTIUC = 260,
    MIPS_INS_BLTUC = 261,
    MIPS_INS_BLTZ = 262,
    MIPS_INS_BLTZAL = 263,
    MIPS_INS_BLTZALC = 264,
    MIPS_INS_BLTZALL = 265,
    MIPS_INS_BLTZALS = 266,
    MIPS_INS_BLTZC = 267,
    MIPS_INS_BLTZL = 268,
    MIPS_INS_BMNZI_B = 269,
    MIPS_INS_BMNZ_V = 270,
    MIPS_INS_BMZI_B = 271,
    MIPS_INS_BMZ_V = 272,
    MIPS_INS_BNEC = 273,
    MIPS_INS_BNEGI_B = 274,
    MIPS_INS_BNEGI_D = 275,
    MIPS_INS_BNEGI_H = 276,
    MIPS_INS_BNEGI_W = 277,
    MIPS_INS_BNEG_B = 278,
    MIPS_INS_BNEG_D = 279,
    MIPS_INS_BNEG_H = 280,
    MIPS_INS_BNEG_W = 281,
    MIPS_INS_BNEIC = 282,
    MIPS_INS_BNEZ16 = 283,
    MIPS_INS_BNEZALC = 284,
    MIPS_INS_BNEZC = 285,
    MIPS_INS_BNEZC16 = 286,
    MIPS_INS_BNVC = 287,
    MIPS_INS_BNZ_B = 288,
    MIPS_INS_BNZ_D = 289,
    MIPS_INS_BNZ_H = 290,
    MIPS_INS_BNZ_V = 291,
    MIPS_INS_BNZ_W = 292,
    MIPS_INS_BOVC = 293,
    MIPS_INS_BPOSGE32 = 294,
    MIPS_INS_BPOSGE32C = 295,
    MIPS_INS_BREAK = 296,
    MIPS_INS_BREAK16 = 297,
    MIPS_INS_BRSC = 298,
    MIPS_INS_BSELI_B = 299,
    MIPS_INS_BSEL_V = 300,
    MIPS_INS_BSETI_B = 301,
    MIPS_INS_BSETI_D = 302,
    MIPS_INS_BSETI_H = 303,
    MIPS_INS_BSETI_W = 304,
    MIPS_INS_BSET_B = 305,
    MIPS_INS_BSET_D = 306,
    MIPS_INS_BSET_H = 307,
    MIPS_INS_BSET_W = 308,
    MIPS_INS_BYTEREVW = 309,
    MIPS_INS_BZ_B = 310,
    MIPS_INS_BZ_D = 311,
    MIPS_INS_BZ_H = 312,
    MIPS_INS_BZ_V = 313,
    MIPS_INS_BZ_W = 314,
    MIPS_INS_BEQZ = 315,
    MIPS_INS_BNEZ = 316,
    MIPS_INS_BTEQZ = 317,
    MIPS_INS_BTNEZ = 318,
    MIPS_INS_CACHE = 319,
    MIPS_INS_CACHEE = 320,
    MIPS_INS_CEIL_L_D = 321,
    MIPS_INS_CEIL_L_S = 322,
    MIPS_INS_CEIL_W_D = 323,
    MIPS_INS_CEIL_W_S = 324,
    MIPS_INS_CEQI_B = 325,
    MIPS_INS_CEQI_D = 326,
    MIPS_INS_CEQI_H = 327,
    MIPS_INS_CEQI_W = 328,
    MIPS_INS_CEQ_B = 329,
    MIPS_INS_CEQ_D = 330,
    MIPS_INS_CEQ_H = 331,
    MIPS_INS_CEQ_W = 332,
    MIPS_INS_CFC1 = 333,
    MIPS_INS_CFC2 = 334,
    MIPS_INS_CFCMSA = 335,
    MIPS_INS_CINS = 336,
    MIPS_INS_CINS32 = 337,
    MIPS_INS_CLASS_D = 338,
    MIPS_INS_CLASS_S = 339,
    MIPS_INS_CLEI_S_B = 340,
    MIPS_INS_CLEI_S_D = 341,
    MIPS_INS_CLEI_S_H = 342,
    MIPS_INS_CLEI_S_W = 343,
    MIPS_INS_CLEI_U_B = 344,
    MIPS_INS_CLEI_U_D = 345,
    MIPS_INS_CLEI_U_H = 346,
    MIPS_INS_CLEI_U_W = 347,
    MIPS_INS_CLE_S_B = 348,
    MIPS_INS_CLE_S_D = 349,
    MIPS_INS_CLE_S_H = 350,
    MIPS_INS_CLE_S_W = 351,
    MIPS_INS_CLE_U_B = 352,
    MIPS_INS_CLE_U_D = 353,
    MIPS_INS_CLE_U_H = 354,
    MIPS_INS_CLE_U_W = 355,
    MIPS_INS_CLO = 356,
    MIPS_INS_CLTI_S_B = 357,
    MIPS_INS_CLTI_S_D = 358,
    MIPS_INS_CLTI_S_H = 359,
    MIPS_INS_CLTI_S_W = 360,
    MIPS_INS_CLTI_U_B = 361,
    MIPS_INS_CLTI_U_D = 362,
    MIPS_INS_CLTI_U_H = 363,
    MIPS_INS_CLTI_U_W = 364,
    MIPS_INS_CLT_S_B = 365,
    MIPS_INS_CLT_S_D = 366,
    MIPS_INS_CLT_S_H = 367,
    MIPS_INS_CLT_S_W = 368,
    MIPS_INS_CLT_U_B = 369,
    MIPS_INS_CLT_U_D = 370,
    MIPS_INS_CLT_U_H = 371,
    MIPS_INS_CLT_U_W = 372,
    MIPS_INS_CLZ = 373,
    MIPS_INS_CMPGDU_EQ_QB = 374,
    MIPS_INS_CMPGDU_LE_QB = 375,
    MIPS_INS_CMPGDU_LT_QB = 376,
    MIPS_INS_CMPGU_EQ_QB = 377,
    MIPS_INS_CMPGU_LE_QB = 378,
    MIPS_INS_CMPGU_LT_QB = 379,
    MIPS_INS_CMPU_EQ_QB = 380,
    MIPS_INS_CMPU_LE_QB = 381,
    MIPS_INS_CMPU_LT_QB = 382,
    MIPS_INS_CMP_AF_D = 383,
    MIPS_INS_CMP_AF_S = 384,
    MIPS_INS_CMP_EQ_D = 385,
    MIPS_INS_CMP_EQ_PH = 386,
    MIPS_INS_CMP_EQ_S = 387,
    MIPS_INS_CMP_LE_D = 388,
    MIPS_INS_CMP_LE_PH = 389,
    MIPS_INS_CMP_LE_S = 390,
    MIPS_INS_CMP_LT_D = 391,
    MIPS_INS_CMP_LT_PH = 392,
    MIPS_INS_CMP_LT_S = 393,
    MIPS_INS_CMP_SAF_D = 394,
    MIPS_INS_CMP_SAF_S = 395,
    MIPS_INS_CMP_SEQ_D = 396,
    MIPS_INS_CMP_SEQ_S = 397,
    MIPS_INS_CMP_SLE_D = 398,
    MIPS_INS_CMP_SLE_S = 399,
    MIPS_INS_CMP_SLT_D = 400,
    MIPS_INS_CMP_SLT_S = 401,
    MIPS_INS_CMP_SUEQ_D = 402,
    MIPS_INS_CMP_SUEQ_S = 403,
    MIPS_INS_CMP_SULE_D = 404,
    MIPS_INS_CMP_SULE_S = 405,
    MIPS_INS_CMP_SULT_D = 406,
    MIPS_INS_CMP_SULT_S = 407,
    MIPS_INS_CMP_SUN_D = 408,
    MIPS_INS_CMP_SUN_S = 409,
    MIPS_INS_CMP_UEQ_D = 410,
    MIPS_INS_CMP_UEQ_S = 411,
    MIPS_INS_CMP_ULE_D = 412,
    MIPS_INS_CMP_ULE_S = 413,
    MIPS_INS_CMP_ULT_D = 414,
    MIPS_INS_CMP_ULT_S = 415,
    MIPS_INS_CMP_UN_D = 416,
    MIPS_INS_CMP_UN_S = 417,
    MIPS_INS_COPY_S_B = 418,
    MIPS_INS_COPY_S_D = 419,
    MIPS_INS_COPY_S_H = 420,
    MIPS_INS_COPY_S_W = 421,
    MIPS_INS_COPY_U_B = 422,
    MIPS_INS_COPY_U_H = 423,
    MIPS_INS_COPY_U_W = 424,
    MIPS_INS_CRC32B = 425,
    MIPS_INS_CRC32CB = 426,
    MIPS_INS_CRC32CD = 427,
    MIPS_INS_CRC32CH = 428,
    MIPS_INS_CRC32CW = 429,
    MIPS_INS_CRC32D = 430,
    MIPS_INS_CRC32H = 431,
    MIPS_INS_CRC32W = 432,
    MIPS_INS_CTC1 = 433,
    MIPS_INS_CTC2 = 434,
    MIPS_INS_CTCMSA = 435,
    MIPS_INS_CVT_D_S = 436,
    MIPS_INS_CVT_D_W = 437,
    MIPS_INS_CVT_D_L = 438,
    MIPS_INS_CVT_L_D = 439,
    MIPS_INS_CVT_L_S = 440,
    MIPS_INS_CVT_PS_PW = 441,
    MIPS_INS_CVT_PS_S = 442,
    MIPS_INS_CVT_PW_PS = 443,
    MIPS_INS_CVT_S_D = 444,
    MIPS_INS_CVT_S_L = 445,
    MIPS_INS_CVT_S_PL = 446,
    MIPS_INS_CVT_S_PU = 447,
    MIPS_INS_CVT_S_W = 448,
    MIPS_INS_CVT_W_D = 449,
    MIPS_INS_CVT_W_S = 450,
    MIPS_INS_C_EQ_D = 451,
    MIPS_INS_C_EQ_S = 452,
    MIPS_INS_C_F_D = 453,
    MIPS_INS_C_F_S = 454,
    MIPS_INS_C_LE_D = 455,
    MIPS_INS_C_LE_S = 456,
    MIPS_INS_C_LT_D = 457,
    MIPS_INS_C_LT_S = 458,
    MIPS_INS_C_NGE_D = 459,
    MIPS_INS_C_NGE_S = 460,
    MIPS_INS_C_NGLE_D = 461,
    MIPS_INS_C_NGLE_S = 462,
    MIPS_INS_C_NGL_D = 463,
    MIPS_INS_C_NGL_S = 464,
    MIPS_INS_C_NGT_D = 465,
    MIPS_INS_C_NGT_S = 466,
    MIPS_INS_C_OLE_D = 467,
    MIPS_INS_C_OLE_S = 468,
    MIPS_INS_C_OLT_D = 469,
    MIPS_INS_C_OLT_S = 470,
    MIPS_INS_C_SEQ_D = 471,
    MIPS_INS_C_SEQ_S = 472,
    MIPS_INS_C_SF_D = 473,
    MIPS_INS_C_SF_S = 474,
    MIPS_INS_C_UEQ_D = 475,
    MIPS_INS_C_UEQ_S = 476,
    MIPS_INS_C_ULE_D = 477,
    MIPS_INS_C_ULE_S = 478,
    MIPS_INS_C_ULT_D = 479,
    MIPS_INS_C_ULT_S = 480,
    MIPS_INS_C_UN_D = 481,
    MIPS_INS_C_UN_S = 482,
    MIPS_INS_CMP = 483,
    MIPS_INS_CMPI = 484,
    MIPS_INS_DADD = 485,
    MIPS_INS_DADDI = 486,
    MIPS_INS_DADDIU = 487,
    MIPS_INS_DADDU = 488,
    MIPS_INS_DAHI = 489,
    MIPS_INS_DALIGN = 490,
    MIPS_INS_DATI = 491,
    MIPS_INS_DAUI = 492,
    MIPS_INS_DBITSWAP = 493,
    MIPS_INS_DCLO = 494,
    MIPS_INS_DCLZ = 495,
    MIPS_INS_DERET = 496,
    MIPS_INS_DEXT = 497,
    MIPS_INS_DEXTM = 498,
    MIPS_INS_DEXTU = 499,
    MIPS_INS_DI = 500,
    MIPS_INS_DINS = 501,
    MIPS_INS_DINSM = 502,
    MIPS_INS_DINSU = 503,
    MIPS_INS_DIV_S_B = 504,
    MIPS_INS_DIV_S_D = 505,
    MIPS_INS_DIV_S_H = 506,
    MIPS_INS_DIV_S_W = 507,
    MIPS_INS_DIV_U_B = 508,
    MIPS_INS_DIV_U_D = 509,
    MIPS_INS_DIV_U_H = 510,
    MIPS_INS_DIV_U_W = 511,
    MIPS_INS_DLSA = 512,
    MIPS_INS_DMFC0 = 513,
    MIPS_INS_DMFC1 = 514,
    MIPS_INS_DMFC2 = 515,
    MIPS_INS_DMFGC0 = 516,
    MIPS_INS_DMOD = 517,
    MIPS_INS_DMODU = 518,
    MIPS_INS_DMT = 519,
    MIPS_INS_DMTC0 = 520,
    MIPS_INS_DMTC1 = 521,
    MIPS_INS_DMTC2 = 522,
    MIPS_INS_DMTGC0 = 523,
    MIPS_INS_DMUH = 524,
    MIPS_INS_DMUHU = 525,
    MIPS_INS_DMULT = 526,
    MIPS_INS_DMULTU = 527,
    MIPS_INS_DMULU = 528,
    MIPS_INS_DOTP_S_D = 529,
    MIPS_INS_DOTP_S_H = 530,
    MIPS_INS_DOTP_S_W = 531,
    MIPS_INS_DOTP_U_D = 532,
    MIPS_INS_DOTP_U_H = 533,
    MIPS_INS_DOTP_U_W = 534,
    MIPS_INS_DPADD_S_D = 535,
    MIPS_INS_DPADD_S_H = 536,
    MIPS_INS_DPADD_S_W = 537,
    MIPS_INS_DPADD_U_D = 538,
    MIPS_INS_DPADD_U_H = 539,
    MIPS_INS_DPADD_U_W = 540,
    MIPS_INS_DPAQX_SA_W_PH = 541,
    MIPS_INS_DPAQX_S_W_PH = 542,
    MIPS_INS_DPAQ_SA_L_W = 543,
    MIPS_INS_DPAQ_S_W_PH = 544,
    MIPS_INS_DPAU_H_QBL = 545,
    MIPS_INS_DPAU_H_QBR = 546,
    MIPS_INS_DPAX_W_PH = 547,
    MIPS_INS_DPA_W_PH = 548,
    MIPS_INS_DPOP = 549,
    MIPS_INS_DPSQX_SA_W_PH = 550,
    MIPS_INS_DPSQX_S_W_PH = 551,
    MIPS_INS_DPSQ_SA_L_W = 552,
    MIPS_INS_DPSQ_S_W_PH = 553,
    MIPS_INS_DPSUB_S_D = 554,
    MIPS_INS_DPSUB_S_H = 555,
    MIPS_INS_DPSUB_S_W = 556,
    MIPS_INS_DPSUB_U_D = 557,
    MIPS_INS_DPSUB_U_H = 558,
    MIPS_INS_DPSUB_U_W = 559,
    MIPS_INS_DPSU_H_QBL = 560,
    MIPS_INS_DPSU_H_QBR = 561,
    MIPS_INS_DPSX_W_PH = 562,
    MIPS_INS_DPS_W_PH = 563,
    MIPS_INS_DROTR = 564,
    MIPS_INS_DROTR32 = 565,
    MIPS_INS_DROTRV = 566,
    MIPS_INS_DSBH = 567,
    MIPS_INS_DSHD = 568,
    MIPS_INS_DSLL = 569,
    MIPS_INS_DSLL32 = 570,
    MIPS_INS_DSLLV = 571,
    MIPS_INS_DSRA = 572,
    MIPS_INS_DSRA32 = 573,
    MIPS_INS_DSRAV = 574,
    MIPS_INS_DSRL = 575,
    MIPS_INS_DSRL32 = 576,
    MIPS_INS_DSRLV = 577,
    MIPS_INS_DSUB = 578,
    MIPS_INS_DSUBU = 579,
    MIPS_INS_DVP = 580,
    MIPS_INS_DVPE = 581,
    MIPS_INS_EHB = 582,
    MIPS_INS_EI = 583,
    MIPS_INS_EMT = 584,
    MIPS_INS_ERET = 585,
    MIPS_INS_ERETNC = 586,
    MIPS_INS_EVP = 587,
    MIPS_INS_EVPE = 588,
    MIPS_INS_EXT = 589,
    MIPS_INS_EXTP = 590,
    MIPS_INS_EXTPDP = 591,
    MIPS_INS_EXTPDPV = 592,
    MIPS_INS_EXTPV = 593,
    MIPS_INS_EXTRV_RS_W = 594,
    MIPS_INS_EXTRV_R_W = 595,
    MIPS_INS_EXTRV_S_H = 596,
    MIPS_INS_EXTRV_W = 597,
    MIPS_INS_EXTR_RS_W = 598,
    MIPS_INS_EXTR_R_W = 599,
    MIPS_INS_EXTR_S_H = 600,
    MIPS_INS_EXTR_W = 601,
    MIPS_INS_EXTS = 602,
    MIPS_INS_EXTS32 = 603,
    MIPS_INS_EXTW = 604,
    MIPS_INS_ABS_D = 605,
    MIPS_INS_ABS_S = 606,
    MIPS_INS_FADD_D = 607,
    MIPS_INS_ADD_D = 608,
    MIPS_INS_ADD_PS = 609,
    MIPS_INS_ADD_S = 610,
    MIPS_INS_FADD_W = 611,
    MIPS_INS_FCAF_D = 612,
    MIPS_INS_FCAF_W = 613,
    MIPS_INS_FCEQ_D = 614,
    MIPS_INS_FCEQ_W = 615,
    MIPS_INS_FCLASS_D = 616,
    MIPS_INS_FCLASS_W = 617,
    MIPS_INS_FCLE_D = 618,
    MIPS_INS_FCLE_W = 619,
    MIPS_INS_FCLT_D = 620,
    MIPS_INS_FCLT_W = 621,
    MIPS_INS_FCNE_D = 622,
    MIPS_INS_FCNE_W = 623,
    MIPS_INS_FCOR_D = 624,
    MIPS_INS_FCOR_W = 625,
    MIPS_INS_FCUEQ_D = 626,
    MIPS_INS_FCUEQ_W = 627,
    MIPS_INS_FCULE_D = 628,
    MIPS_INS_FCULE_W = 629,
    MIPS_INS_FCULT_D = 630,
    MIPS_INS_FCULT_W = 631,
    MIPS_INS_FCUNE_D = 632,
    MIPS_INS_FCUNE_W = 633,
    MIPS_INS_FCUN_D = 634,
    MIPS_INS_FCUN_W = 635,
    MIPS_INS_FDIV_D = 636,
    MIPS_INS_DIV_D = 637,
    MIPS_INS_DIV_S = 638,
    MIPS_INS_FDIV_W = 639,
    MIPS_INS_FEXDO_H = 640,
    MIPS_INS_FEXDO_W = 641,
    MIPS_INS_FEXP2_D = 642,
    MIPS_INS_FEXP2_W = 643,
    MIPS_INS_FEXUPL_D = 644,
    MIPS_INS_FEXUPL_W = 645,
    MIPS_INS_FEXUPR_D = 646,
    MIPS_INS_FEXUPR_W = 647,
    MIPS_INS_FFINT_S_D = 648,
    MIPS_INS_FFINT_S_W = 649,
    MIPS_INS_FFINT_U_D = 650,
    MIPS_INS_FFINT_U_W = 651,
    MIPS_INS_FFQL_D = 652,
    MIPS_INS_FFQL_W = 653,
    MIPS_INS_FFQR_D = 654,
    MIPS_INS_FFQR_W = 655,
    MIPS_INS_FILL_B = 656,
    MIPS_INS_FILL_D = 657,
    MIPS_INS_FILL_H = 658,
    MIPS_INS_FILL_W = 659,
    MIPS_INS_FLOG2_D = 660,
    MIPS_INS_FLOG2_W = 661,
    MIPS_INS_FLOOR_L_D = 662,
    MIPS_INS_FLOOR_L_S = 663,
    MIPS_INS_FLOOR_W_D = 664,
    MIPS_INS_FLOOR_W_S = 665,
    MIPS_INS_FMADD_D = 666,
    MIPS_INS_FMADD_W = 667,
    MIPS_INS_FMAX_A_D = 668,
    MIPS_INS_FMAX_A_W = 669,
    MIPS_INS_FMAX_D = 670,
    MIPS_INS_FMAX_W = 671,
    MIPS_INS_FMIN_A_D = 672,
    MIPS_INS_FMIN_A_W = 673,
    MIPS_INS_FMIN_D = 674,
    MIPS_INS_FMIN_W = 675,
    MIPS_INS_MOV_D = 676,
    MIPS_INS_MOV_S = 677,
    MIPS_INS_FMSUB_D = 678,
    MIPS_INS_FMSUB_W = 679,
    MIPS_INS_FMUL_D = 680,
    MIPS_INS_MUL_D = 681,
    MIPS_INS_MUL_PS = 682,
    MIPS_INS_MUL_S = 683,
    MIPS_INS_FMUL_W = 684,
    MIPS_INS_NEG_D = 685,
    MIPS_INS_NEG_S = 686,
    MIPS_INS_FORK = 687,
    MIPS_INS_FRCP_D = 688,
    MIPS_INS_FRCP_W = 689,
    MIPS_INS_FRINT_D = 690,
    MIPS_INS_FRINT_W = 691,
    MIPS_INS_FRSQRT_D = 692,
    MIPS_INS_FRSQRT_W = 693,
    MIPS_INS_FSAF_D = 694,
    MIPS_INS_FSAF_W = 695,
    MIPS_INS_FSEQ_D = 696,
    MIPS_INS_FSEQ_W = 697,
    MIPS_INS_FSLE_D = 698,
    MIPS_INS_FSLE_W = 699,
    MIPS_INS_FSLT_D = 700,
    MIPS_INS_FSLT_W = 701,
    MIPS_INS_FSNE_D = 702,
    MIPS_INS_FSNE_W = 703,
    MIPS_INS_FSOR_D = 704,
    MIPS_INS_FSOR_W = 705,
    MIPS_INS_FSQRT_D = 706,
    MIPS_INS_SQRT_D = 707,
    MIPS_INS_SQRT_S = 708,
    MIPS_INS_FSQRT_W = 709,
    MIPS_INS_FSUB_D = 710,
    MIPS_INS_SUB_D = 711,
    MIPS_INS_SUB_PS = 712,
    MIPS_INS_SUB_S = 713,
    MIPS_INS_FSUB_W = 714,
    MIPS_INS_FSUEQ_D = 715,
    MIPS_INS_FSUEQ_W = 716,
    MIPS_INS_FSULE_D = 717,
    MIPS_INS_FSULE_W = 718,
    MIPS_INS_FSULT_D = 719,
    MIPS_INS_FSULT_W = 720,
    MIPS_INS_FSUNE_D = 721,
    MIPS_INS_FSUNE_W = 722,
    MIPS_INS_FSUN_D = 723,
    MIPS_INS_FSUN_W = 724,
    MIPS_INS_FTINT_S_D = 725,
    MIPS_INS_FTINT_S_W = 726,
    MIPS_INS_FTINT_U_D = 727,
    MIPS_INS_FTINT_U_W = 728,
    MIPS_INS_FTQ_H = 729,
    MIPS_INS_FTQ_W = 730,
    MIPS_INS_FTRUNC_S_D = 731,
    MIPS_INS_FTRUNC_S_W = 732,
    MIPS_INS_FTRUNC_U_D = 733,
    MIPS_INS_FTRUNC_U_W = 734,
    MIPS_INS_GINVI = 735,
    MIPS_INS_GINVT = 736,
    MIPS_INS_HADD_S_D = 737,
    MIPS_INS_HADD_S_H = 738,
    MIPS_INS_HADD_S_W = 739,
    MIPS_INS_HADD_U_D = 740,
    MIPS_INS_HADD_U_H = 741,
    MIPS_INS_HADD_U_W = 742,
    MIPS_INS_HSUB_S_D = 743,
    MIPS_INS_HSUB_S_H = 744,
    MIPS_INS_HSUB_S_W = 745,
    MIPS_INS_HSUB_U_D = 746,
    MIPS_INS_HSUB_U_H = 747,
    MIPS_INS_HSUB_U_W = 748,
    MIPS_INS_HYPCALL = 749,
    MIPS_INS_ILVEV_B = 750,
    MIPS_INS_ILVEV_D = 751,
    MIPS_INS_ILVEV_H = 752,
    MIPS_INS_ILVEV_W = 753,
    MIPS_INS_ILVL_B = 754,
    MIPS_INS_ILVL_D = 755,
    MIPS_INS_ILVL_H = 756,
    MIPS_INS_ILVL_W = 757,
    MIPS_INS_ILVOD_B = 758,
    MIPS_INS_ILVOD_D = 759,
    MIPS_INS_ILVOD_H = 760,
    MIPS_INS_ILVOD_W = 761,
    MIPS_INS_ILVR_B = 762,
    MIPS_INS_ILVR_D = 763,
    MIPS_INS_ILVR_H = 764,
    MIPS_INS_ILVR_W = 765,
    MIPS_INS_INS = 766,
    MIPS_INS_INSERT_B = 767,
    MIPS_INS_INSERT_D = 768,
    MIPS_INS_INSERT_H = 769,
    MIPS_INS_INSERT_W = 770,
    MIPS_INS_INSV = 771,
    MIPS_INS_INSVE_B = 772,
    MIPS_INS_INSVE_D = 773,
    MIPS_INS_INSVE_H = 774,
    MIPS_INS_INSVE_W = 775,
    MIPS_INS_J = 776,
    MIPS_INS_JALR = 777,
    MIPS_INS_JALRC = 778,
    MIPS_INS_JALRC_HB = 779,
    MIPS_INS_JALRS16 = 780,
    MIPS_INS_JALRS = 781,
    MIPS_INS_JALR_HB = 782,
    MIPS_INS_JALS = 783,
    MIPS_INS_JALX = 784,
    MIPS_INS_JIALC = 785,
    MIPS_INS_JIC = 786,
    MIPS_INS_JR = 787,
    MIPS_INS_JR16 = 788,
    MIPS_INS_JRADDIUSP = 789,
    MIPS_INS_JRC = 790,
    MIPS_INS_JRC16 = 791,
    MIPS_INS_JRCADDIUSP = 792,
    MIPS_INS_JR_HB = 793,
    MIPS_INS_LAPC_H = 794,
    MIPS_INS_LAPC_B = 795,
    MIPS_INS_LB = 796,
    MIPS_INS_LBE = 797,
    MIPS_INS_LBU16 = 798,
    MIPS_INS_LBU = 799,
    MIPS_INS_LBUX = 800,
    MIPS_INS_LBX = 801,
    MIPS_INS_LBUE = 802,
    MIPS_INS_LDC1 = 803,
    MIPS_INS_LDC2 = 804,
    MIPS_INS_LDC3 = 805,
    MIPS_INS_LDI_B = 806,
    MIPS_INS_LDI_D = 807,
    MIPS_INS_LDI_H = 808,
    MIPS_INS_LDI_W = 809,
    MIPS_INS_LDL = 810,
    MIPS_INS_LDPC = 811,
    MIPS_INS_LDR = 812,
    MIPS_INS_LDXC1 = 813,
    MIPS_INS_LD_B = 814,
    MIPS_INS_LD_D = 815,
    MIPS_INS_LD_H = 816,
    MIPS_INS_LD_W = 817,
    MIPS_INS_LH = 818,
    MIPS_INS_LHE = 819,
    MIPS_INS_LHU16 = 820,
    MIPS_INS_LHU = 821,
    MIPS_INS_LHUXS = 822,
    MIPS_INS_LHUX = 823,
    MIPS_INS_LHX = 824,
    MIPS_INS_LHXS = 825,
    MIPS_INS_LHUE = 826,
    MIPS_INS_LI16 = 827,
    MIPS_INS_LL = 828,
    MIPS_INS_LLD = 829,
    MIPS_INS_LLE = 830,
    MIPS_INS_LLWP = 831,
    MIPS_INS_LSA = 832,
    MIPS_INS_LUI = 833,
    MIPS_INS_LUXC1 = 834,
    MIPS_INS_LW = 835,
    MIPS_INS_LW16 = 836,
    MIPS_INS_LWC1 = 837,
    MIPS_INS_LWC2 = 838,
    MIPS_INS_LWC3 = 839,
    MIPS_INS_LWE = 840,
    MIPS_INS_LWL = 841,
    MIPS_INS_LWLE = 842,
    MIPS_INS_LWM16 = 843,
    MIPS_INS_LWM32 = 844,
    MIPS_INS_LWPC = 845,
    MIPS_INS_LWP = 846,
    MIPS_INS_LWR = 847,
    MIPS_INS_LWRE = 848,
    MIPS_INS_LWUPC = 849,
    MIPS_INS_LWU = 850,
    MIPS_INS_LWX = 851,
    MIPS_INS_LWXC1 = 852,
    MIPS_INS_LWXS = 853,
    MIPS_INS_MADD = 854,
    MIPS_INS_MADDF_D = 855,
    MIPS_INS_MADDF_S = 856,
    MIPS_INS_MADDR_Q_H = 857,
    MIPS_INS_MADDR_Q_W = 858,
    MIPS_INS_MADDU = 859,
    MIPS_INS_MADDV_B = 860,
    MIPS_INS_MADDV_D = 861,
    MIPS_INS_MADDV_H = 862,
    MIPS_INS_MADDV_W = 863,
    MIPS_INS_MADD_D = 864,
    MIPS_INS_MADD_Q_H = 865,
    MIPS_INS_MADD_Q_W = 866,
    MIPS_INS_MADD_S = 867,
    MIPS_INS_MAQ_SA_W_PHL = 868,
    MIPS_INS_MAQ_SA_W_PHR = 869,
    MIPS_INS_MAQ_S_W_PHL = 870,
    MIPS_INS_MAQ_S_W_PHR = 871,
    MIPS_INS_MAXA_D = 872,
    MIPS_INS_MAXA_S = 873,
    MIPS_INS_MAXI_S_B = 874,
    MIPS_INS_MAXI_S_D = 875,
    MIPS_INS_MAXI_S_H = 876,
    MIPS_INS_MAXI_S_W = 877,
    MIPS_INS_MAXI_U_B = 878,
    MIPS_INS_MAXI_U_D = 879,
    MIPS_INS_MAXI_U_H = 880,
    MIPS_INS_MAXI_U_W = 881,
    MIPS_INS_MAX_A_B = 882,
    MIPS_INS_MAX_A_D = 883,
    MIPS_INS_MAX_A_H = 884,
    MIPS_INS_MAX_A_W = 885,
    MIPS_INS_MAX_D = 886,
    MIPS_INS_MAX_S = 887,
    MIPS_INS_MAX_S_B = 888,
    MIPS_INS_MAX_S_D = 889,
    MIPS_INS_MAX_S_H = 890,
    MIPS_INS_MAX_S_W = 891,
    MIPS_INS_MAX_U_B = 892,
    MIPS_INS_MAX_U_D = 893,
    MIPS_INS_MAX_U_H = 894,
    MIPS_INS_MAX_U_W = 895,
    MIPS_INS_MFC0 = 896,
    MIPS_INS_MFC1 = 897,
    MIPS_INS_MFC2 = 898,
    MIPS_INS_MFGC0 = 899,
    MIPS_INS_MFHC0 = 900,
    MIPS_INS_MFHC1 = 901,
    MIPS_INS_MFHC2 = 902,
    MIPS_INS_MFHGC0 = 903,
    MIPS_INS_MFHI = 904,
    MIPS_INS_MFHI16 = 905,
    MIPS_INS_MFLO = 906,
    MIPS_INS_MFLO16 = 907,
    MIPS_INS_MFTR = 908,
    MIPS_INS_MINA_D = 909,
    MIPS_INS_MINA_S = 910,
    MIPS_INS_MINI_S_B = 911,
    MIPS_INS_MINI_S_D = 912,
    MIPS_INS_MINI_S_H = 913,
    MIPS_INS_MINI_S_W = 914,
    MIPS_INS_MINI_U_B = 915,
    MIPS_INS_MINI_U_D = 916,
    MIPS_INS_MINI_U_H = 917,
    MIPS_INS_MINI_U_W = 918,
    MIPS_INS_MIN_A_B = 919,
    MIPS_INS_MIN_A_D = 920,
    MIPS_INS_MIN_A_H = 921,
    MIPS_INS_MIN_A_W = 922,
    MIPS_INS_MIN_D = 923,
    MIPS_INS_MIN_S = 924,
    MIPS_INS_MIN_S_B = 925,
    MIPS_INS_MIN_S_D = 926,
    MIPS_INS_MIN_S_H = 927,
    MIPS_INS_MIN_S_W = 928,
    MIPS_INS_MIN_U_B = 929,
    MIPS_INS_MIN_U_D = 930,
    MIPS_INS_MIN_U_H = 931,
    MIPS_INS_MIN_U_W = 932,
    MIPS_INS_MOD = 933,
    MIPS_INS_MODSUB = 934,
    MIPS_INS_MODU = 935,
    MIPS_INS_MOD_S_B = 936,
    MIPS_INS_MOD_S_D = 937,
    MIPS_INS_MOD_S_H = 938,
    MIPS_INS_MOD_S_W = 939,
    MIPS_INS_MOD_U_B = 940,
    MIPS_INS_MOD_U_D = 941,
    MIPS_INS_MOD_U_H = 942,
    MIPS_INS_MOD_U_W = 943,
    MIPS_INS_MOVE = 944,
    MIPS_INS_MOVE16 = 945,
    MIPS_INS_MOVE_BALC = 946,
    MIPS_INS_MOVEP = 947,
    MIPS_INS_MOVE_V = 948,
    MIPS_INS_MOVF_D = 949,
    MIPS_INS_MOVF = 950,
    MIPS_INS_MOVF_S = 951,
    MIPS_INS_MOVN_D = 952,
    MIPS_INS_MOVN = 953,
    MIPS_INS_MOVN_S = 954,
    MIPS_INS_MOVT_D = 955,
    MIPS_INS_MOVT = 956,
    MIPS_INS_MOVT_S = 957,
    MIPS_INS_MOVZ_D = 958,
    MIPS_INS_MOVZ = 959,
    MIPS_INS_MOVZ_S = 960,
    MIPS_INS_MSUB = 961,
    MIPS_INS_MSUBF_D = 962,
    MIPS_INS_MSUBF_S = 963,
    MIPS_INS_MSUBR_Q_H = 964,
    MIPS_INS_MSUBR_Q_W = 965,
    MIPS_INS_MSUBU = 966,
    MIPS_INS_MSUBV_B = 967,
    MIPS_INS_MSUBV_D = 968,
    MIPS_INS_MSUBV_H = 969,
    MIPS_INS_MSUBV_W = 970,
    MIPS_INS_MSUB_D = 971,
    MIPS_INS_MSUB_Q_H = 972,
    MIPS_INS_MSUB_Q_W = 973,
    MIPS_INS_MSUB_S = 974,
    MIPS_INS_MTC0 = 975,
    MIPS_INS_MTC1 = 976,
    MIPS_INS_MTC2 = 977,
    MIPS_INS_MTGC0 = 978,
    MIPS_INS_MTHC0 = 979,
    MIPS_INS_MTHC1 = 980,
    MIPS_INS_MTHC2 = 981,
    MIPS_INS_MTHGC0 = 982,
    MIPS_INS_MTHI = 983,
    MIPS_INS_MTHLIP = 984,
    MIPS_INS_MTLO = 985,
    MIPS_INS_MTM0 = 986,
    MIPS_INS_MTM1 = 987,
    MIPS_INS_MTM2 = 988,
    MIPS_INS_MTP0 = 989,
    MIPS_INS_MTP1 = 990,
    MIPS_INS_MTP2 = 991,
    MIPS_INS_MTTR = 992,
    MIPS_INS_MUH = 993,
    MIPS_INS_MUHU = 994,
    MIPS_INS_MULEQ_S_W_PHL = 995,
    MIPS_INS_MULEQ_S_W_PHR = 996,
    MIPS_INS_MULEU_S_PH_QBL = 997,
    MIPS_INS_MULEU_S_PH_QBR = 998,
    MIPS_INS_MULQ_RS_PH = 999,
    MIPS_INS_MULQ_RS_W = 1000,
    MIPS_INS_MULQ_S_PH = 1001,
    MIPS_INS_MULQ_S_W = 1002,
    MIPS_INS_MULR_PS = 1003,
    MIPS_INS_MULR_Q_H = 1004,
    MIPS_INS_MULR_Q_W = 1005,
    MIPS_INS_MULSAQ_S_W_PH = 1006,
    MIPS_INS_MULSA_W_PH = 1007,
    MIPS_INS_MULT = 1008,
    MIPS_INS_MULTU = 1009,
    MIPS_INS_MULU = 1010,
    MIPS_INS_MULV_B = 1011,
    MIPS_INS_MULV_D = 1012,
    MIPS_INS_MULV_H = 1013,
    MIPS_INS_MULV_W = 1014,
    MIPS_INS_MUL_PH = 1015,
    MIPS_INS_MUL_Q_H = 1016,
    MIPS_INS_MUL_Q_W = 1017,
    MIPS_INS_MUL_S_PH = 1018,
    MIPS_INS_NLOC_B = 1019,
    MIPS_INS_NLOC_D = 1020,
    MIPS_INS_NLOC_H = 1021,
    MIPS_INS_NLOC_W = 1022,
    MIPS_INS_NLZC_B = 1023,
    MIPS_INS_NLZC_D = 1024,
    MIPS_INS_NLZC_H = 1025,
    MIPS_INS_NLZC_W = 1026,
    MIPS_INS_NMADD_D = 1027,
    MIPS_INS_NMADD_S = 1028,
    MIPS_INS_NMSUB_D = 1029,
    MIPS_INS_NMSUB_S = 1030,
    MIPS_INS_NOP32 = 1031,
    MIPS_INS_NOP = 1032,
    MIPS_INS_NORI_B = 1033,
    MIPS_INS_NOR_V = 1034,
    MIPS_INS_NOT16 = 1035,
    MIPS_INS_NOT = 1036,
    MIPS_INS_NEG = 1037,
    MIPS_INS_OR = 1038,
    MIPS_INS_OR16 = 1039,
    MIPS_INS_ORI_B = 1040,
    MIPS_INS_ORI = 1041,
    MIPS_INS_OR_V = 1042,
    MIPS_INS_PACKRL_PH = 1043,
    MIPS_INS_PAUSE = 1044,
    MIPS_INS_PCKEV_B = 1045,
    MIPS_INS_PCKEV_D = 1046,
    MIPS_INS_PCKEV_H = 1047,
    MIPS_INS_PCKEV_W = 1048,
    MIPS_INS_PCKOD_B = 1049,
    MIPS_INS_PCKOD_D = 1050,
    MIPS_INS_PCKOD_H = 1051,
    MIPS_INS_PCKOD_W = 1052,
    MIPS_INS_PCNT_B = 1053,
    MIPS_INS_PCNT_D = 1054,
    MIPS_INS_PCNT_H = 1055,
    MIPS_INS_PCNT_W = 1056,
    MIPS_INS_PICK_PH = 1057,
    MIPS_INS_PICK_QB = 1058,
    MIPS_INS_PLL_PS = 1059,
    MIPS_INS_PLU_PS = 1060,
    MIPS_INS_POP = 1061,
    MIPS_INS_PRECEQU_PH_QBL = 1062,
    MIPS_INS_PRECEQU_PH_QBLA = 1063,
    MIPS_INS_PRECEQU_PH_QBR = 1064,
    MIPS_INS_PRECEQU_PH_QBRA = 1065,
    MIPS_INS_PRECEQ_W_PHL = 1066,
    MIPS_INS_PRECEQ_W_PHR = 1067,
    MIPS_INS_PRECEU_PH_QBL = 1068,
    MIPS_INS_PRECEU_PH_QBLA = 1069,
    MIPS_INS_PRECEU_PH_QBR = 1070,
    MIPS_INS_PRECEU_PH_QBRA = 1071,
    MIPS_INS_PRECRQU_S_QB_PH = 1072,
    MIPS_INS_PRECRQ_PH_W = 1073,
    MIPS_INS_PRECRQ_QB_PH = 1074,
    MIPS_INS_PRECRQ_RS_PH_W = 1075,
    MIPS_INS_PRECR_QB_PH = 1076,
    MIPS_INS_PRECR_SRA_PH_W = 1077,
    MIPS_INS_PRECR_SRA_R_PH_W = 1078,
    MIPS_INS_PREF = 1079,
    MIPS_INS_PREFE = 1080,
    MIPS_INS_PREFX = 1081,
    MIPS_INS_PREPEND = 1082,
    MIPS_INS_PUL_PS = 1083,
    MIPS_INS_PUU_PS = 1084,
    MIPS_INS_RADDU_W_QB = 1085,
    MIPS_INS_RDDSP = 1086,
    MIPS_INS_RDHWR = 1087,
    MIPS_INS_RDPGPR = 1088,
    MIPS_INS_RECIP_D = 1089,
    MIPS_INS_RECIP_S = 1090,
    MIPS_INS_REPLV_PH = 1091,
    MIPS_INS_REPLV_QB = 1092,
    MIPS_INS_REPL_PH = 1093,
    MIPS_INS_REPL_QB = 1094,
    MIPS_INS_RESTORE_JRC = 1095,
    MIPS_INS_RESTORE = 1096,
    MIPS_INS_RINT_D = 1097,
    MIPS_INS_RINT_S = 1098,
    MIPS_INS_ROTR = 1099,
    MIPS_INS_ROTRV = 1100,
    MIPS_INS_ROTX = 1101,
    MIPS_INS_ROUND_L_D = 1102,
    MIPS_INS_ROUND_L_S = 1103,
    MIPS_INS_ROUND_W_D = 1104,
    MIPS_INS_ROUND_W_S = 1105,
    MIPS_INS_RSQRT_D = 1106,
    MIPS_INS_RSQRT_S = 1107,
    MIPS_INS_SAT_S_B = 1108,
    MIPS_INS_SAT_S_D = 1109,
    MIPS_INS_SAT_S_H = 1110,
    MIPS_INS_SAT_S_W = 1111,
    MIPS_INS_SAT_U_B = 1112,
    MIPS_INS_SAT_U_D = 1113,
    MIPS_INS_SAT_U_H = 1114,
    MIPS_INS_SAT_U_W = 1115,
    MIPS_INS_SAVE = 1116,
    MIPS_INS_SB = 1117,
    MIPS_INS_SB16 = 1118,
    MIPS_INS_SBE = 1119,
    MIPS_INS_SBX = 1120,
    MIPS_INS_SC = 1121,
    MIPS_INS_SCD = 1122,
    MIPS_INS_SCE = 1123,
    MIPS_INS_SCWP = 1124,
    MIPS_INS_SDBBP = 1125,
    MIPS_INS_SDBBP16 = 1126,
    MIPS_INS_SDC1 = 1127,
    MIPS_INS_SDC2 = 1128,
    MIPS_INS_SDC3 = 1129,
    MIPS_INS_SDL = 1130,
    MIPS_INS_SDR = 1131,
    MIPS_INS_SDXC1 = 1132,
    MIPS_INS_SEB = 1133,
    MIPS_INS_SEH = 1134,
    MIPS_INS_SELEQZ = 1135,
    MIPS_INS_SELEQZ_D = 1136,
    MIPS_INS_SELEQZ_S = 1137,
    MIPS_INS_SELNEZ = 1138,
    MIPS_INS_SELNEZ_D = 1139,
    MIPS_INS_SELNEZ_S = 1140,
    MIPS_INS_SEL_D = 1141,
    MIPS_INS_SEL_S = 1142,
    MIPS_INS_SEQI = 1143,
    MIPS_INS_SH = 1144,
    MIPS_INS_SH16 = 1145,
    MIPS_INS_SHE = 1146,
    MIPS_INS_SHF_B = 1147,
    MIPS_INS_SHF_H = 1148,
    MIPS_INS_SHF_W = 1149,
    MIPS_INS_SHILO = 1150,
    MIPS_INS_SHILOV = 1151,
    MIPS_INS_SHLLV_PH = 1152,
    MIPS_INS_SHLLV_QB = 1153,
    MIPS_INS_SHLLV_S_PH = 1154,
    MIPS_INS_SHLLV_S_W = 1155,
    MIPS_INS_SHLL_PH = 1156,
    MIPS_INS_SHLL_QB = 1157,
    MIPS_INS_SHLL_S_PH = 1158,
    MIPS_INS_SHLL_S_W = 1159,
    MIPS_INS_SHRAV_PH = 1160,
    MIPS_INS_SHRAV_QB = 1161,
    MIPS_INS_SHRAV_R_PH = 1162,
    MIPS_INS_SHRAV_R_QB = 1163,
    MIPS_INS_SHRAV_R_W = 1164,
    MIPS_INS_SHRA_PH = 1165,
    MIPS_INS_SHRA_QB = 1166,
    MIPS_INS_SHRA_R_PH = 1167,
    MIPS_INS_SHRA_R_QB = 1168,
    MIPS_INS_SHRA_R_W = 1169,
    MIPS_INS_SHRLV_PH = 1170,
    MIPS_INS_SHRLV_QB = 1171,
    MIPS_INS_SHRL_PH = 1172,
    MIPS_INS_SHRL_QB = 1173,
    MIPS_INS_SHXS = 1174,
    MIPS_INS_SHX = 1175,
    MIPS_INS_SIGRIE = 1176,
    MIPS_INS_SLDI_B = 1177,
    MIPS_INS_SLDI_D = 1178,
    MIPS_INS_SLDI_H = 1179,
    MIPS_INS_SLDI_W = 1180,
    MIPS_INS_SLD_B = 1181,
    MIPS_INS_SLD_D = 1182,
    MIPS_INS_SLD_H = 1183,
    MIPS_INS_SLD_W = 1184,
    MIPS_INS_SLL = 1185,
    MIPS_INS_SLL16 = 1186,
    MIPS_INS_SLLI_B = 1187,
    MIPS_INS_SLLI_D = 1188,
    MIPS_INS_SLLI_H = 1189,
    MIPS_INS_SLLI_W = 1190,
    MIPS_INS_SLLV = 1191,
    MIPS_INS_SLL_B = 1192,
    MIPS_INS_SLL_D = 1193,
    MIPS_INS_SLL_H = 1194,
    MIPS_INS_SLL_W = 1195,
    MIPS_INS_SLTIU = 1196,
    MIPS_INS_SLTI = 1197,
    MIPS_INS_SNEI = 1198,
    MIPS_INS_SOV = 1199,
    MIPS_INS_SPLATI_B = 1200,
    MIPS_INS_SPLATI_D = 1201,
    MIPS_INS_SPLATI_H = 1202,
    MIPS_INS_SPLATI_W = 1203,
    MIPS_INS_SPLAT_B = 1204,
    MIPS_INS_SPLAT_D = 1205,
    MIPS_INS_SPLAT_H = 1206,
    MIPS_INS_SPLAT_W = 1207,
    MIPS_INS_SRA = 1208,
    MIPS_INS_SRAI_B = 1209,
    MIPS_INS_SRAI_D = 1210,
    MIPS_INS_SRAI_H = 1211,
    MIPS_INS_SRAI_W = 1212,
    MIPS_INS_SRARI_B = 1213,
    MIPS_INS_SRARI_D = 1214,
    MIPS_INS_SRARI_H = 1215,
    MIPS_INS_SRARI_W = 1216,
    MIPS_INS_SRAR_B = 1217,
    MIPS_INS_SRAR_D = 1218,
    MIPS_INS_SRAR_H = 1219,
    MIPS_INS_SRAR_W = 1220,
    MIPS_INS_SRAV = 1221,
    MIPS_INS_SRA_B = 1222,
    MIPS_INS_SRA_D = 1223,
    MIPS_INS_SRA_H = 1224,
    MIPS_INS_SRA_W = 1225,
    MIPS_INS_SRL = 1226,
    MIPS_INS_SRL16 = 1227,
    MIPS_INS_SRLI_B = 1228,
    MIPS_INS_SRLI_D = 1229,
    MIPS_INS_SRLI_H = 1230,
    MIPS_INS_SRLI_W = 1231,
    MIPS_INS_SRLRI_B = 1232,
    MIPS_INS_SRLRI_D = 1233,
    MIPS_INS_SRLRI_H = 1234,
    MIPS_INS_SRLRI_W = 1235,
    MIPS_INS_SRLR_B = 1236,
    MIPS_INS_SRLR_D = 1237,
    MIPS_INS_SRLR_H = 1238,
    MIPS_INS_SRLR_W = 1239,
    MIPS_INS_SRLV = 1240,
    MIPS_INS_SRL_B = 1241,
    MIPS_INS_SRL_D = 1242,
    MIPS_INS_SRL_H = 1243,
    MIPS_INS_SRL_W = 1244,
    MIPS_INS_SSNOP = 1245,
    MIPS_INS_ST_B = 1246,
    MIPS_INS_ST_D = 1247,
    MIPS_INS_ST_H = 1248,
    MIPS_INS_ST_W = 1249,
    MIPS_INS_SUB = 1250,
    MIPS_INS_SUBQH_PH = 1251,
    MIPS_INS_SUBQH_R_PH = 1252,
    MIPS_INS_SUBQH_R_W = 1253,
    MIPS_INS_SUBQH_W = 1254,
    MIPS_INS_SUBQ_PH = 1255,
    MIPS_INS_SUBQ_S_PH = 1256,
    MIPS_INS_SUBQ_S_W = 1257,
    MIPS_INS_SUBSUS_U_B = 1258,
    MIPS_INS_SUBSUS_U_D = 1259,
    MIPS_INS_SUBSUS_U_H = 1260,
    MIPS_INS_SUBSUS_U_W = 1261,
    MIPS_INS_SUBSUU_S_B = 1262,
    MIPS_INS_SUBSUU_S_D = 1263,
    MIPS_INS_SUBSUU_S_H = 1264,
    MIPS_INS_SUBSUU_S_W = 1265,
    MIPS_INS_SUBS_S_B = 1266,
    MIPS_INS_SUBS_S_D = 1267,
    MIPS_INS_SUBS_S_H = 1268,
    MIPS_INS_SUBS_S_W = 1269,
    MIPS_INS_SUBS_U_B = 1270,
    MIPS_INS_SUBS_U_D = 1271,
    MIPS_INS_SUBS_U_H = 1272,
    MIPS_INS_SUBS_U_W = 1273,
    MIPS_INS_SUBU16 = 1274,
    MIPS_INS_SUBUH_QB = 1275,
    MIPS_INS_SUBUH_R_QB = 1276,
    MIPS_INS_SUBU_PH = 1277,
    MIPS_INS_SUBU_QB = 1278,
    MIPS_INS_SUBU_S_PH = 1279,
    MIPS_INS_SUBU_S_QB = 1280,
    MIPS_INS_SUBVI_B = 1281,
    MIPS_INS_SUBVI_D = 1282,
    MIPS_INS_SUBVI_H = 1283,
    MIPS_INS_SUBVI_W = 1284,
    MIPS_INS_SUBV_B = 1285,
    MIPS_INS_SUBV_D = 1286,
    MIPS_INS_SUBV_H = 1287,
    MIPS_INS_SUBV_W = 1288,
    MIPS_INS_SUXC1 = 1289,
    MIPS_INS_SW = 1290,
    MIPS_INS_SW16 = 1291,
    MIPS_INS_SWC1 = 1292,
    MIPS_INS_SWC2 = 1293,
    MIPS_INS_SWC3 = 1294,
    MIPS_INS_SWE = 1295,
    MIPS_INS_SWL = 1296,
    MIPS_INS_SWLE = 1297,
    MIPS_INS_SWM16 = 1298,
    MIPS_INS_SWM32 = 1299,
    MIPS_INS_SWPC = 1300,
    MIPS_INS_SWP = 1301,
    MIPS_INS_SWR = 1302,
    MIPS_INS_SWRE = 1303,
    MIPS_INS_SWSP = 1304,
    MIPS_INS_SWXC1 = 1305,
    MIPS_INS_SWXS = 1306,
    MIPS_INS_SWX = 1307,
    MIPS_INS_SYNC = 1308,
    MIPS_INS_SYNCI = 1309,
    MIPS_INS_SYSCALL = 1310,
    MIPS_INS_TEQ = 1311,
    MIPS_INS_TEQI = 1312,
    MIPS_INS_TGE = 1313,
    MIPS_INS_TGEI = 1314,
    MIPS_INS_TGEIU = 1315,
    MIPS_INS_TGEU = 1316,
    MIPS_INS_TLBGINV = 1317,
    MIPS_INS_TLBGINVF = 1318,
    MIPS_INS_TLBGP = 1319,
    MIPS_INS_TLBGR = 1320,
    MIPS_INS_TLBGWI = 1321,
    MIPS_INS_TLBGWR = 1322,
    MIPS_INS_TLBINV = 1323,
    MIPS_INS_TLBINVF = 1324,
    MIPS_INS_TLBP = 1325,
    MIPS_INS_TLBR = 1326,
    MIPS_INS_TLBWI = 1327,
    MIPS_INS_TLBWR = 1328,
    MIPS_INS_TLT = 1329,
    MIPS_INS_TLTI = 1330,
    MIPS_INS_TLTIU = 1331,
    MIPS_INS_TLTU = 1332,
    MIPS_INS_TNE = 1333,
    MIPS_INS_TNEI = 1334,
    MIPS_INS_TRUNC_L_D = 1335,
    MIPS_INS_TRUNC_L_S = 1336,
    MIPS_INS_UALH = 1337,
    MIPS_INS_UALWM = 1338,
    MIPS_INS_UALW = 1339,
    MIPS_INS_UASH = 1340,
    MIPS_INS_UASWM = 1341,
    MIPS_INS_UASW = 1342,
    MIPS_INS_V3MULU = 1343,
    MIPS_INS_VMM0 = 1344,
    MIPS_INS_VMULU = 1345,
    MIPS_INS_VSHF_B = 1346,
    MIPS_INS_VSHF_D = 1347,
    MIPS_INS_VSHF_H = 1348,
    MIPS_INS_VSHF_W = 1349,
    MIPS_INS_WAIT = 1350,
    MIPS_INS_WRDSP = 1351,
    MIPS_INS_WRPGPR = 1352,
    MIPS_INS_WSBH = 1353,
    MIPS_INS_XOR = 1354,
    MIPS_INS_XOR16 = 1355,
    MIPS_INS_XORI_B = 1356,
    MIPS_INS_XORI = 1357,
    MIPS_INS_XOR_V = 1358,
    MIPS_INS_YIELD = 1359,
    MIPS_INS_ENDING = 1360,
    MIPS_INS_ALIAS_BEGIN = 1361,
    MIPS_INS_ALIAS_ADDIU_B32 = 1362,
    MIPS_INS_ALIAS_BITREVB = 1363,
    MIPS_INS_ALIAS_BITREVH = 1364,
    MIPS_INS_ALIAS_BYTEREVH = 1365,
    MIPS_INS_ALIAS_NOT = 1366,
    MIPS_INS_ALIAS_RESTORE_JRC = 1367,
    MIPS_INS_ALIAS_RESTORE = 1368,
    MIPS_INS_ALIAS_SAVE = 1369,
    MIPS_INS_ALIAS_MOVE = 1370,
    MIPS_INS_ALIAS_BAL = 1371,
    MIPS_INS_ALIAS_JALR_HB = 1372,
    MIPS_INS_ALIAS_NEG = 1373,
    MIPS_INS_ALIAS_NEGU = 1374,
    MIPS_INS_ALIAS_NOP = 1375,
    MIPS_INS_ALIAS_BNEZL = 1376,
    MIPS_INS_ALIAS_BEQZL = 1377,
    MIPS_INS_ALIAS_SYSCALL = 1378,
    MIPS_INS_ALIAS_BREAK = 1379,
    MIPS_INS_ALIAS_EI = 1380,
    MIPS_INS_ALIAS_DI = 1381,
    MIPS_INS_ALIAS_TEQ = 1382,
    MIPS_INS_ALIAS_TGE = 1383,
    MIPS_INS_ALIAS_TGEU = 1384,
    MIPS_INS_ALIAS_TLT = 1385,
    MIPS_INS_ALIAS_TLTU = 1386,
    MIPS_INS_ALIAS_TNE = 1387,
    MIPS_INS_ALIAS_RDHWR = 1388,
    MIPS_INS_ALIAS_SDBBP = 1389,
    MIPS_INS_ALIAS_SYNC = 1390,
    MIPS_INS_ALIAS_HYPCALL = 1391,
    MIPS_INS_ALIAS_NOR = 1392,
    MIPS_INS_ALIAS_C_F_S = 1393,
    MIPS_INS_ALIAS_C_UN_S = 1394,
    MIPS_INS_ALIAS_C_EQ_S = 1395,
    MIPS_INS_ALIAS_C_UEQ_S = 1396,
    MIPS_INS_ALIAS_C_OLT_S = 1397,
    MIPS_INS_ALIAS_C_ULT_S = 1398,
    MIPS_INS_ALIAS_C_OLE_S = 1399,
    MIPS_INS_ALIAS_C_ULE_S = 1400,
    MIPS_INS_ALIAS_C_SF_S = 1401,
    MIPS_INS_ALIAS_C_NGLE_S = 1402,
    MIPS_INS_ALIAS_C_SEQ_S = 1403,
    MIPS_INS_ALIAS_C_NGL_S = 1404,
    MIPS_INS_ALIAS_C_LT_S = 1405,
    MIPS_INS_ALIAS_C_NGE_S = 1406,
    MIPS_INS_ALIAS_C_LE_S = 1407,
    MIPS_INS_ALIAS_C_NGT_S = 1408,
    MIPS_INS_ALIAS_BC1T = 1409,
    MIPS_INS_ALIAS_BC1F = 1410,
    MIPS_INS_ALIAS_C_F_D = 1411,
    MIPS_INS_ALIAS_C_UN_D = 1412,
    MIPS_INS_ALIAS_C_EQ_D = 1413,
    MIPS_INS_ALIAS_C_UEQ_D = 1414,
    MIPS_INS_ALIAS_C_OLT_D = 1415,
    MIPS_INS_ALIAS_C_ULT_D = 1416,
    MIPS_INS_ALIAS_C_OLE_D = 1417,
    MIPS_INS_ALIAS_C_ULE_D = 1418,
    MIPS_INS_ALIAS_C_SF_D = 1419,
    MIPS_INS_ALIAS_C_NGLE_D = 1420,
    MIPS_INS_ALIAS_C_SEQ_D = 1421,
    MIPS_INS_ALIAS_C_NGL_D = 1422,
    MIPS_INS_ALIAS_C_LT_D = 1423,
    MIPS_INS_ALIAS_C_NGE_D = 1424,
    MIPS_INS_ALIAS_C_LE_D = 1425,
    MIPS_INS_ALIAS_C_NGT_D = 1426,
    MIPS_INS_ALIAS_BC1TL = 1427,
    MIPS_INS_ALIAS_BC1FL = 1428,
    MIPS_INS_ALIAS_DNEG = 1429,
    MIPS_INS_ALIAS_DNEGU = 1430,
    MIPS_INS_ALIAS_SLT = 1431,
    MIPS_INS_ALIAS_SLTU = 1432,
    MIPS_INS_ALIAS_SIGRIE = 1433,
    MIPS_INS_ALIAS_JR = 1434,
    MIPS_INS_ALIAS_JRC = 1435,
    MIPS_INS_ALIAS_JALRC = 1436,
    MIPS_INS_ALIAS_DIV = 1437,
    MIPS_INS_ALIAS_DIVU = 1438,
    MIPS_INS_ALIAS_LAPC = 1439,
    MIPS_INS_ALIAS_WRDSP = 1440,
    MIPS_INS_ALIAS_WAIT = 1441,
    MIPS_INS_ALIAS_SW = 1442,
    MIPS_INS_ALIAS_JALRC_HB = 1443,
    MIPS_INS_ALIAS_ADDIU_B = 1444,
    MIPS_INS_ALIAS_ADDIU_W = 1445,
    MIPS_INS_ALIAS_JRC_HB = 1446,
    MIPS_INS_ALIAS_BEQC = 1447,
    MIPS_INS_ALIAS_BNEC = 1448,
    MIPS_INS_ALIAS_BEQZC = 1449,
    MIPS_INS_ALIAS_BNEZC = 1450,
    MIPS_INS_ALIAS_MFC0 = 1451,
    MIPS_INS_ALIAS_MFHC0 = 1452,
    MIPS_INS_ALIAS_MTC0 = 1453,
    MIPS_INS_ALIAS_MTHC0 = 1454,
    MIPS_INS_ALIAS_DMT = 1455,
    MIPS_INS_ALIAS_EMT = 1456,
    MIPS_INS_ALIAS_DVPE = 1457,
    MIPS_INS_ALIAS_EVPE = 1458,
    MIPS_INS_ALIAS_YIELD = 1459,
    MIPS_INS_ALIAS_MFTC0 = 1460,
    MIPS_INS_ALIAS_MFTLO = 1461,
    MIPS_INS_ALIAS_MFTHI = 1462,
    MIPS_INS_ALIAS_MFTACX = 1463,
    MIPS_INS_ALIAS_MTTC0 = 1464,
    MIPS_INS_ALIAS_MTTLO = 1465,
    MIPS_INS_ALIAS_MTTHI = 1466,
    MIPS_INS_ALIAS_MTTACX = 1467,
    MIPS_INS_ALIAS_B = 1468,
    MIPS_INS_ALIAS_BEQZ = 1469,
    MIPS_INS_ALIAS_BNEZ = 1470,
    MIPS_INS_ALIAS_LI = 1471,
    MIPS_INS_ALIAS_END = 1472,
}
pub mod mips_insn_group {
    #[doc = " Group of MIPS instructions"]
    pub type Type = libc::c_uint;
    #[doc = "< = CS_GRP_INVALID"]
    pub const MIPS_GRP_INVALID: Type = 0;
    #[doc = "< = CS_GRP_JUMP"]
    pub const MIPS_GRP_JUMP: Type = 1;
    #[doc = "< = CS_GRP_CALL"]
    pub const MIPS_GRP_CALL: Type = 2;
    #[doc = "< = CS_GRP_RET"]
    pub const MIPS_GRP_RET: Type = 3;
    #[doc = "< = CS_GRP_INT"]
    pub const MIPS_GRP_INT: Type = 4;
    #[doc = "< = CS_GRP_IRET"]
    pub const MIPS_GRP_IRET: Type = 5;
    #[doc = "< = CS_GRP_PRIVILEGE"]
    pub const MIPS_GRP_PRIVILEGE: Type = 6;
    #[doc = "< = CS_GRP_BRANCH_RELATIVE"]
    pub const MIPS_GRP_BRANCH_RELATIVE: Type = 7;
    pub const MIPS_FEATURE_HASMIPS2: Type = 128;
    pub const MIPS_FEATURE_HASMIPS3_32: Type = 129;
    pub const MIPS_FEATURE_HASMIPS3_32R2: Type = 130;
    pub const MIPS_FEATURE_HASMIPS3: Type = 131;
    pub const MIPS_FEATURE_NOTMIPS3: Type = 132;
    pub const MIPS_FEATURE_HASMIPS4_32: Type = 133;
    pub const MIPS_FEATURE_NOTMIPS4_32: Type = 134;
    pub const MIPS_FEATURE_HASMIPS4_32R2: Type = 135;
    pub const MIPS_FEATURE_HASMIPS5_32R2: Type = 136;
    pub const MIPS_FEATURE_HASMIPS32: Type = 137;
    pub const MIPS_FEATURE_HASMIPS32R2: Type = 138;
    pub const MIPS_FEATURE_HASMIPS32R5: Type = 139;
    pub const MIPS_FEATURE_HASMIPS32R6: Type = 140;
    pub const MIPS_FEATURE_NOTMIPS32R6: Type = 141;
    pub const MIPS_FEATURE_HASNANOMIPS: Type = 142;
    pub const MIPS_FEATURE_NOTNANOMIPS: Type = 143;
    pub const MIPS_FEATURE_ISGP64BIT: Type = 144;
    pub const MIPS_FEATURE_ISGP32BIT: Type = 145;
    pub const MIPS_FEATURE_ISPTR64BIT: Type = 146;
    pub const MIPS_FEATURE_ISPTR32BIT: Type = 147;
    pub const MIPS_FEATURE_HASMIPS64: Type = 148;
    pub const MIPS_FEATURE_NOTMIPS64: Type = 149;
    pub const MIPS_FEATURE_HASMIPS64R2: Type = 150;
    pub const MIPS_FEATURE_HASMIPS64R5: Type = 151;
    pub const MIPS_FEATURE_HASMIPS64R6: Type = 152;
    pub const MIPS_FEATURE_NOTMIPS64R6: Type = 153;
    pub const MIPS_FEATURE_INMIPS16MODE: Type = 154;
    pub const MIPS_FEATURE_NOTINMIPS16MODE: Type = 155;
    pub const MIPS_FEATURE_HASCNMIPS: Type = 156;
    pub const MIPS_FEATURE_NOTCNMIPS: Type = 157;
    pub const MIPS_FEATURE_HASCNMIPSP: Type = 158;
    pub const MIPS_FEATURE_NOTCNMIPSP: Type = 159;
    pub const MIPS_FEATURE_ISSYM32: Type = 160;
    pub const MIPS_FEATURE_ISSYM64: Type = 161;
    pub const MIPS_FEATURE_HASSTDENC: Type = 162;
    pub const MIPS_FEATURE_INMICROMIPS: Type = 163;
    pub const MIPS_FEATURE_NOTINMICROMIPS: Type = 164;
    pub const MIPS_FEATURE_HASEVA: Type = 165;
    pub const MIPS_FEATURE_HASMSA: Type = 166;
    pub const MIPS_FEATURE_HASMADD4: Type = 167;
    pub const MIPS_FEATURE_HASMT: Type = 168;
    pub const MIPS_FEATURE_USEINDIRECTJUMPSHAZARD: Type = 169;
    pub const MIPS_FEATURE_NOINDIRECTJUMPGUARDS: Type = 170;
    pub const MIPS_FEATURE_HASCRC: Type = 171;
    pub const MIPS_FEATURE_HASVIRT: Type = 172;
    pub const MIPS_FEATURE_HASGINV: Type = 173;
    pub const MIPS_FEATURE_HASTLB: Type = 174;
    pub const MIPS_FEATURE_ISFP64BIT: Type = 175;
    pub const MIPS_FEATURE_NOTFP64BIT: Type = 176;
    pub const MIPS_FEATURE_ISSINGLEFLOAT: Type = 177;
    pub const MIPS_FEATURE_ISNOTSINGLEFLOAT: Type = 178;
    pub const MIPS_FEATURE_ISNOTSOFTFLOAT: Type = 179;
    pub const MIPS_FEATURE_HASMIPS3D: Type = 180;
    pub const MIPS_FEATURE_HASDSP: Type = 181;
    pub const MIPS_FEATURE_HASDSPR2: Type = 182;
    pub const MIPS_FEATURE_HASDSPR3: Type = 183;
    pub const MIPS_GRP_ENDING: Type = 184;
}
impl ppc_pred {
    pub const PPC_PRED_SO: ppc_pred = ppc_pred::PPC_PRED_UN;
}
impl ppc_pred {
    pub const PPC_PRED_NS: ppc_pred = ppc_pred::PPC_PRED_NU;
}
impl ppc_pred {
    pub const PPC_PRED_SPE: ppc_pred = ppc_pred::PPC_PRED_GT;
}
#[repr(u32)]
#[doc = " Enum was moved from PPCPredicates.h so we do not have duplicates.\n\n Branch predicate enum. It contains the CR predicates and CTR predicates.\n\n Enum values are \"((BI % 4) << 5) | BO\"  for various predicates.\n\n CR field encoding:\n\n Bit:    |   0   |    1    |   2   |     3    |\n         |-------|---------|-------|----------|\n Meaning | Less  | Greater | Zero  | Summary  |\n         | Then  | Then    |       | Overflow |\n\n BO encoding\n\n Bit     |   0    |     1       |   2   |      3     |     4      |\n         |--------|-------------|-------|------------|------------|\n If      | Test   | Test        | Decr. | test       |            |\n unset:  | CR(BI) | CR(BI) == 0 | CTR   | CTR != 0   |            |\n         |--------|-------------|-------|------------|------------|\n If      | Don't  | Test        | Don't | test       |            |\n set:    | Test   | CR(BI) == 1 | decr. | CTR == 0   |            |\n         | CR(BI) |             | CTR   |            |            |\n         |--------|-------------|-------|------------|------------|\n Alter-  |        | Hint bit:   |       | Hint bit:  | Hint bit:  |\n native  | None   |   a         | None  |    a       |    t       |\n meaning |        | or ignored  |       | or ignored | or ignored |\n\n NOTE: If we do not decrement the counter, it is not used for the condition.\n\n The bits \"at\" are both present if:\n \t\t- CTR is decremented, but CR is not checked.\n     - CR is checked, but CTR is not decremented."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ppc_pred {
    PPC_PRED_INVALID = 65535,
    PPC_PRED_LT = 12,
    PPC_PRED_LE = 36,
    PPC_PRED_EQ = 76,
    PPC_PRED_GE = 4,
    PPC_PRED_GT = 44,
    PPC_PRED_NE = 68,
    #[doc = "< Unordered (after fp comparison)"]
    PPC_PRED_UN = 108,
    #[doc = "< Not Unordered (after fp comparison)"]
    PPC_PRED_NU = 100,
    #[doc = " CTR predicates"]
    PPC_PRED_NZ = 16,
    #[doc = " CTR predicates"]
    PPC_PRED_Z = 18,
    #[doc = " CTR predicates"]
    PPC_PRED_LT_MINUS = 14,
    #[doc = " CTR predicates"]
    PPC_PRED_LE_MINUS = 38,
    #[doc = " CTR predicates"]
    PPC_PRED_EQ_MINUS = 78,
    #[doc = " CTR predicates"]
    PPC_PRED_GE_MINUS = 6,
    #[doc = " CTR predicates"]
    PPC_PRED_GT_MINUS = 46,
    #[doc = " CTR predicates"]
    PPC_PRED_NE_MINUS = 70,
    #[doc = " CTR predicates"]
    PPC_PRED_UN_MINUS = 110,
    #[doc = " CTR predicates"]
    PPC_PRED_NU_MINUS = 102,
    #[doc = " CTR predicates"]
    PPC_PRED_NZ_MINUS = 24,
    #[doc = " CTR predicates"]
    PPC_PRED_Z_MINUS = 26,
    #[doc = " CTR predicates"]
    PPC_PRED_LT_PLUS = 15,
    #[doc = " CTR predicates"]
    PPC_PRED_LE_PLUS = 39,
    #[doc = " CTR predicates"]
    PPC_PRED_EQ_PLUS = 79,
    #[doc = " CTR predicates"]
    PPC_PRED_GE_PLUS = 7,
    #[doc = " CTR predicates"]
    PPC_PRED_GT_PLUS = 47,
    #[doc = " CTR predicates"]
    PPC_PRED_NE_PLUS = 71,
    #[doc = " CTR predicates"]
    PPC_PRED_UN_PLUS = 111,
    #[doc = " CTR predicates"]
    PPC_PRED_NU_PLUS = 103,
    #[doc = " CTR predicates"]
    PPC_PRED_NZ_PLUS = 25,
    #[doc = " CTR predicates"]
    PPC_PRED_Z_PLUS = 27,
    #[doc = " CTR predicates"]
    PPC_PRED_LT_RESERVED = 13,
    #[doc = " CTR predicates"]
    PPC_PRED_LE_RESERVED = 37,
    #[doc = " CTR predicates"]
    PPC_PRED_EQ_RESERVED = 77,
    #[doc = " CTR predicates"]
    PPC_PRED_GE_RESERVED = 5,
    #[doc = " CTR predicates"]
    PPC_PRED_GT_RESERVED = 45,
    #[doc = " CTR predicates"]
    PPC_PRED_NE_RESERVED = 69,
    #[doc = " CTR predicates"]
    PPC_PRED_UN_RESERVED = 109,
    #[doc = " CTR predicates"]
    PPC_PRED_NU_RESERVED = 101,
    #[doc = " CTR predicates"]
    PPC_PRED_NZ_RESERVED = 17,
    #[doc = " CTR predicates"]
    PPC_PRED_Z_RESERVED = 19,
    #[doc = " CTR predicates"]
    PPC_PRED_BIT_SET = 1024,
    #[doc = " CTR predicates"]
    PPC_PRED_BIT_UNSET = 1025,
}
#[repr(u32)]
#[doc = " CR field indices and their meaning."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ppc_cr_bit {
    #[doc = "< CR bit Less Than"]
    PPC_BI_LT = 0,
    #[doc = "< CR bit Greater Than"]
    PPC_BI_GT = 1,
    #[doc = "< CR bit Zero"]
    PPC_BI_Z = 2,
    #[doc = "< CR bit Summary Overflow"]
    PPC_BI_SO = 3,
    #[doc = "< CR bit was not set/invalid"]
    PPC_BI_INVALID = 255,
}
#[repr(u32)]
#[doc = " Masks of flags in the BO field."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ppc_bo_mask {
    #[doc = "< Flag mask: Test CR bit."]
    PPC_BO_TEST_CR = 16,
    #[doc = "< Flag mask: Compare CR bit to 0 or 1."]
    PPC_BO_CR_CMP = 8,
    #[doc = "< Flag mask: Decrement counter."]
    PPC_BO_DECR_CTR = 4,
    #[doc = "< Flag mask: Compare CTR to 0 or 1."]
    PPC_BO_CTR_CMP = 2,
    #[doc = "< Either ignored (z) or hint bit t"]
    PPC_BO_T = 1,
}
impl ppc_br_hint {
    pub const PPC_BR_HINT_MASK: ppc_br_hint = ppc_br_hint::PPC_BR_TAKEN;
}
#[repr(u32)]
#[doc = " Bit for branch taken (plus) or not-taken (minus) hint\n Encodes the meaning of the branch hint bits.\n Bit:  | 0 | 1 |\n Name: | a | t |"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ppc_br_hint {
    PPC_BR_NOT_GIVEN = 0,
    PPC_BR_RESERVED = 1,
    #[doc = "< Minus"]
    PPC_BR_NOT_TAKEN = 2,
    #[doc = "< Plus"]
    PPC_BR_TAKEN = 3,
}
#[repr(u32)]
#[doc = " Encodes the different meanings of the BH field.\n The enum values does NOT match the BH field values!"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ppc_bh {
    PPC_BH_INVALID = 0,
    PPC_BH_SUBROUTINE_RET = 1,
    PPC_BH_NO_SUBROUTINE_RET = 2,
    PPC_BH_NOT_PREDICTABLE = 3,
    PPC_BH_RESERVED = 4,
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ppc_op_type {
    #[doc = "< Uninitialized."]
    PPC_OP_INVALID = 0,
    #[doc = "< Register operand."]
    PPC_OP_REG = 1,
    #[doc = "< Immediate operand."]
    PPC_OP_IMM = 2,
    #[doc = "< Memory operand."]
    PPC_OP_MEM = 128,
}
pub mod ppc_reg {
    #[doc = " PPC registers"]
    pub type Type = libc::c_uint;
    pub const PPC_REG_INVALID: Type = 0;
    pub const PPC_REG_BP: Type = 1;
    pub const PPC_REG_CARRY: Type = 2;
    pub const PPC_REG_CTR: Type = 3;
    pub const PPC_REG_FP: Type = 4;
    pub const PPC_REG_LR: Type = 5;
    pub const PPC_REG_RM: Type = 6;
    pub const PPC_REG_SPEFSCR: Type = 7;
    pub const PPC_REG_VRSAVE: Type = 8;
    pub const PPC_REG_XER: Type = 9;
    pub const PPC_REG_ZERO: Type = 10;
    pub const PPC_REG_ACC0: Type = 11;
    pub const PPC_REG_ACC1: Type = 12;
    pub const PPC_REG_ACC2: Type = 13;
    pub const PPC_REG_ACC3: Type = 14;
    pub const PPC_REG_ACC4: Type = 15;
    pub const PPC_REG_ACC5: Type = 16;
    pub const PPC_REG_ACC6: Type = 17;
    pub const PPC_REG_ACC7: Type = 18;
    pub const PPC_REG_BP8: Type = 19;
    pub const PPC_REG_CR0: Type = 20;
    pub const PPC_REG_CR1: Type = 21;
    pub const PPC_REG_CR2: Type = 22;
    pub const PPC_REG_CR3: Type = 23;
    pub const PPC_REG_CR4: Type = 24;
    pub const PPC_REG_CR5: Type = 25;
    pub const PPC_REG_CR6: Type = 26;
    pub const PPC_REG_CR7: Type = 27;
    pub const PPC_REG_CTR8: Type = 28;
    pub const PPC_REG_DMR0: Type = 29;
    pub const PPC_REG_DMR1: Type = 30;
    pub const PPC_REG_DMR2: Type = 31;
    pub const PPC_REG_DMR3: Type = 32;
    pub const PPC_REG_DMR4: Type = 33;
    pub const PPC_REG_DMR5: Type = 34;
    pub const PPC_REG_DMR6: Type = 35;
    pub const PPC_REG_DMR7: Type = 36;
    pub const PPC_REG_DMRROW0: Type = 37;
    pub const PPC_REG_DMRROW1: Type = 38;
    pub const PPC_REG_DMRROW2: Type = 39;
    pub const PPC_REG_DMRROW3: Type = 40;
    pub const PPC_REG_DMRROW4: Type = 41;
    pub const PPC_REG_DMRROW5: Type = 42;
    pub const PPC_REG_DMRROW6: Type = 43;
    pub const PPC_REG_DMRROW7: Type = 44;
    pub const PPC_REG_DMRROW8: Type = 45;
    pub const PPC_REG_DMRROW9: Type = 46;
    pub const PPC_REG_DMRROW10: Type = 47;
    pub const PPC_REG_DMRROW11: Type = 48;
    pub const PPC_REG_DMRROW12: Type = 49;
    pub const PPC_REG_DMRROW13: Type = 50;
    pub const PPC_REG_DMRROW14: Type = 51;
    pub const PPC_REG_DMRROW15: Type = 52;
    pub const PPC_REG_DMRROW16: Type = 53;
    pub const PPC_REG_DMRROW17: Type = 54;
    pub const PPC_REG_DMRROW18: Type = 55;
    pub const PPC_REG_DMRROW19: Type = 56;
    pub const PPC_REG_DMRROW20: Type = 57;
    pub const PPC_REG_DMRROW21: Type = 58;
    pub const PPC_REG_DMRROW22: Type = 59;
    pub const PPC_REG_DMRROW23: Type = 60;
    pub const PPC_REG_DMRROW24: Type = 61;
    pub const PPC_REG_DMRROW25: Type = 62;
    pub const PPC_REG_DMRROW26: Type = 63;
    pub const PPC_REG_DMRROW27: Type = 64;
    pub const PPC_REG_DMRROW28: Type = 65;
    pub const PPC_REG_DMRROW29: Type = 66;
    pub const PPC_REG_DMRROW30: Type = 67;
    pub const PPC_REG_DMRROW31: Type = 68;
    pub const PPC_REG_DMRROW32: Type = 69;
    pub const PPC_REG_DMRROW33: Type = 70;
    pub const PPC_REG_DMRROW34: Type = 71;
    pub const PPC_REG_DMRROW35: Type = 72;
    pub const PPC_REG_DMRROW36: Type = 73;
    pub const PPC_REG_DMRROW37: Type = 74;
    pub const PPC_REG_DMRROW38: Type = 75;
    pub const PPC_REG_DMRROW39: Type = 76;
    pub const PPC_REG_DMRROW40: Type = 77;
    pub const PPC_REG_DMRROW41: Type = 78;
    pub const PPC_REG_DMRROW42: Type = 79;
    pub const PPC_REG_DMRROW43: Type = 80;
    pub const PPC_REG_DMRROW44: Type = 81;
    pub const PPC_REG_DMRROW45: Type = 82;
    pub const PPC_REG_DMRROW46: Type = 83;
    pub const PPC_REG_DMRROW47: Type = 84;
    pub const PPC_REG_DMRROW48: Type = 85;
    pub const PPC_REG_DMRROW49: Type = 86;
    pub const PPC_REG_DMRROW50: Type = 87;
    pub const PPC_REG_DMRROW51: Type = 88;
    pub const PPC_REG_DMRROW52: Type = 89;
    pub const PPC_REG_DMRROW53: Type = 90;
    pub const PPC_REG_DMRROW54: Type = 91;
    pub const PPC_REG_DMRROW55: Type = 92;
    pub const PPC_REG_DMRROW56: Type = 93;
    pub const PPC_REG_DMRROW57: Type = 94;
    pub const PPC_REG_DMRROW58: Type = 95;
    pub const PPC_REG_DMRROW59: Type = 96;
    pub const PPC_REG_DMRROW60: Type = 97;
    pub const PPC_REG_DMRROW61: Type = 98;
    pub const PPC_REG_DMRROW62: Type = 99;
    pub const PPC_REG_DMRROW63: Type = 100;
    pub const PPC_REG_DMRROWP0: Type = 101;
    pub const PPC_REG_DMRROWP1: Type = 102;
    pub const PPC_REG_DMRROWP2: Type = 103;
    pub const PPC_REG_DMRROWP3: Type = 104;
    pub const PPC_REG_DMRROWP4: Type = 105;
    pub const PPC_REG_DMRROWP5: Type = 106;
    pub const PPC_REG_DMRROWP6: Type = 107;
    pub const PPC_REG_DMRROWP7: Type = 108;
    pub const PPC_REG_DMRROWP8: Type = 109;
    pub const PPC_REG_DMRROWP9: Type = 110;
    pub const PPC_REG_DMRROWP10: Type = 111;
    pub const PPC_REG_DMRROWP11: Type = 112;
    pub const PPC_REG_DMRROWP12: Type = 113;
    pub const PPC_REG_DMRROWP13: Type = 114;
    pub const PPC_REG_DMRROWP14: Type = 115;
    pub const PPC_REG_DMRROWP15: Type = 116;
    pub const PPC_REG_DMRROWP16: Type = 117;
    pub const PPC_REG_DMRROWP17: Type = 118;
    pub const PPC_REG_DMRROWP18: Type = 119;
    pub const PPC_REG_DMRROWP19: Type = 120;
    pub const PPC_REG_DMRROWP20: Type = 121;
    pub const PPC_REG_DMRROWP21: Type = 122;
    pub const PPC_REG_DMRROWP22: Type = 123;
    pub const PPC_REG_DMRROWP23: Type = 124;
    pub const PPC_REG_DMRROWP24: Type = 125;
    pub const PPC_REG_DMRROWP25: Type = 126;
    pub const PPC_REG_DMRROWP26: Type = 127;
    pub const PPC_REG_DMRROWP27: Type = 128;
    pub const PPC_REG_DMRROWP28: Type = 129;
    pub const PPC_REG_DMRROWP29: Type = 130;
    pub const PPC_REG_DMRROWP30: Type = 131;
    pub const PPC_REG_DMRROWP31: Type = 132;
    pub const PPC_REG_DMRP0: Type = 133;
    pub const PPC_REG_DMRP1: Type = 134;
    pub const PPC_REG_DMRP2: Type = 135;
    pub const PPC_REG_DMRP3: Type = 136;
    pub const PPC_REG_F0: Type = 137;
    pub const PPC_REG_F1: Type = 138;
    pub const PPC_REG_F2: Type = 139;
    pub const PPC_REG_F3: Type = 140;
    pub const PPC_REG_F4: Type = 141;
    pub const PPC_REG_F5: Type = 142;
    pub const PPC_REG_F6: Type = 143;
    pub const PPC_REG_F7: Type = 144;
    pub const PPC_REG_F8: Type = 145;
    pub const PPC_REG_F9: Type = 146;
    pub const PPC_REG_F10: Type = 147;
    pub const PPC_REG_F11: Type = 148;
    pub const PPC_REG_F12: Type = 149;
    pub const PPC_REG_F13: Type = 150;
    pub const PPC_REG_F14: Type = 151;
    pub const PPC_REG_F15: Type = 152;
    pub const PPC_REG_F16: Type = 153;
    pub const PPC_REG_F17: Type = 154;
    pub const PPC_REG_F18: Type = 155;
    pub const PPC_REG_F19: Type = 156;
    pub const PPC_REG_F20: Type = 157;
    pub const PPC_REG_F21: Type = 158;
    pub const PPC_REG_F22: Type = 159;
    pub const PPC_REG_F23: Type = 160;
    pub const PPC_REG_F24: Type = 161;
    pub const PPC_REG_F25: Type = 162;
    pub const PPC_REG_F26: Type = 163;
    pub const PPC_REG_F27: Type = 164;
    pub const PPC_REG_F28: Type = 165;
    pub const PPC_REG_F29: Type = 166;
    pub const PPC_REG_F30: Type = 167;
    pub const PPC_REG_F31: Type = 168;
    pub const PPC_REG_FP8: Type = 169;
    pub const PPC_REG_FPAIR0: Type = 170;
    pub const PPC_REG_FPAIR2: Type = 171;
    pub const PPC_REG_FPAIR4: Type = 172;
    pub const PPC_REG_FPAIR6: Type = 173;
    pub const PPC_REG_FPAIR8: Type = 174;
    pub const PPC_REG_FPAIR10: Type = 175;
    pub const PPC_REG_FPAIR12: Type = 176;
    pub const PPC_REG_FPAIR14: Type = 177;
    pub const PPC_REG_FPAIR16: Type = 178;
    pub const PPC_REG_FPAIR18: Type = 179;
    pub const PPC_REG_FPAIR20: Type = 180;
    pub const PPC_REG_FPAIR22: Type = 181;
    pub const PPC_REG_FPAIR24: Type = 182;
    pub const PPC_REG_FPAIR26: Type = 183;
    pub const PPC_REG_FPAIR28: Type = 184;
    pub const PPC_REG_FPAIR30: Type = 185;
    pub const PPC_REG_H0: Type = 186;
    pub const PPC_REG_H1: Type = 187;
    pub const PPC_REG_H2: Type = 188;
    pub const PPC_REG_H3: Type = 189;
    pub const PPC_REG_H4: Type = 190;
    pub const PPC_REG_H5: Type = 191;
    pub const PPC_REG_H6: Type = 192;
    pub const PPC_REG_H7: Type = 193;
    pub const PPC_REG_H8: Type = 194;
    pub const PPC_REG_H9: Type = 195;
    pub const PPC_REG_H10: Type = 196;
    pub const PPC_REG_H11: Type = 197;
    pub const PPC_REG_H12: Type = 198;
    pub const PPC_REG_H13: Type = 199;
    pub const PPC_REG_H14: Type = 200;
    pub const PPC_REG_H15: Type = 201;
    pub const PPC_REG_H16: Type = 202;
    pub const PPC_REG_H17: Type = 203;
    pub const PPC_REG_H18: Type = 204;
    pub const PPC_REG_H19: Type = 205;
    pub const PPC_REG_H20: Type = 206;
    pub const PPC_REG_H21: Type = 207;
    pub const PPC_REG_H22: Type = 208;
    pub const PPC_REG_H23: Type = 209;
    pub const PPC_REG_H24: Type = 210;
    pub const PPC_REG_H25: Type = 211;
    pub const PPC_REG_H26: Type = 212;
    pub const PPC_REG_H27: Type = 213;
    pub const PPC_REG_H28: Type = 214;
    pub const PPC_REG_H29: Type = 215;
    pub const PPC_REG_H30: Type = 216;
    pub const PPC_REG_H31: Type = 217;
    pub const PPC_REG_LR8: Type = 218;
    pub const PPC_REG_QF0: Type = 219;
    pub const PPC_REG_QF1: Type = 220;
    pub const PPC_REG_QF2: Type = 221;
    pub const PPC_REG_QF3: Type = 222;
    pub const PPC_REG_QF4: Type = 223;
    pub const PPC_REG_QF5: Type = 224;
    pub const PPC_REG_QF6: Type = 225;
    pub const PPC_REG_QF7: Type = 226;
    pub const PPC_REG_QF8: Type = 227;
    pub const PPC_REG_QF9: Type = 228;
    pub const PPC_REG_QF10: Type = 229;
    pub const PPC_REG_QF11: Type = 230;
    pub const PPC_REG_QF12: Type = 231;
    pub const PPC_REG_QF13: Type = 232;
    pub const PPC_REG_QF14: Type = 233;
    pub const PPC_REG_QF15: Type = 234;
    pub const PPC_REG_QF16: Type = 235;
    pub const PPC_REG_QF17: Type = 236;
    pub const PPC_REG_QF18: Type = 237;
    pub const PPC_REG_QF19: Type = 238;
    pub const PPC_REG_QF20: Type = 239;
    pub const PPC_REG_QF21: Type = 240;
    pub const PPC_REG_QF22: Type = 241;
    pub const PPC_REG_QF23: Type = 242;
    pub const PPC_REG_QF24: Type = 243;
    pub const PPC_REG_QF25: Type = 244;
    pub const PPC_REG_QF26: Type = 245;
    pub const PPC_REG_QF27: Type = 246;
    pub const PPC_REG_QF28: Type = 247;
    pub const PPC_REG_QF29: Type = 248;
    pub const PPC_REG_QF30: Type = 249;
    pub const PPC_REG_QF31: Type = 250;
    pub const PPC_REG_R0: Type = 251;
    pub const PPC_REG_R1: Type = 252;
    pub const PPC_REG_R2: Type = 253;
    pub const PPC_REG_R3: Type = 254;
    pub const PPC_REG_R4: Type = 255;
    pub const PPC_REG_R5: Type = 256;
    pub const PPC_REG_R6: Type = 257;
    pub const PPC_REG_R7: Type = 258;
    pub const PPC_REG_R8: Type = 259;
    pub const PPC_REG_R9: Type = 260;
    pub const PPC_REG_R10: Type = 261;
    pub const PPC_REG_R11: Type = 262;
    pub const PPC_REG_R12: Type = 263;
    pub const PPC_REG_R13: Type = 264;
    pub const PPC_REG_R14: Type = 265;
    pub const PPC_REG_R15: Type = 266;
    pub const PPC_REG_R16: Type = 267;
    pub const PPC_REG_R17: Type = 268;
    pub const PPC_REG_R18: Type = 269;
    pub const PPC_REG_R19: Type = 270;
    pub const PPC_REG_R20: Type = 271;
    pub const PPC_REG_R21: Type = 272;
    pub const PPC_REG_R22: Type = 273;
    pub const PPC_REG_R23: Type = 274;
    pub const PPC_REG_R24: Type = 275;
    pub const PPC_REG_R25: Type = 276;
    pub const PPC_REG_R26: Type = 277;
    pub const PPC_REG_R27: Type = 278;
    pub const PPC_REG_R28: Type = 279;
    pub const PPC_REG_R29: Type = 280;
    pub const PPC_REG_R30: Type = 281;
    pub const PPC_REG_R31: Type = 282;
    pub const PPC_REG_S0: Type = 283;
    pub const PPC_REG_S1: Type = 284;
    pub const PPC_REG_S2: Type = 285;
    pub const PPC_REG_S3: Type = 286;
    pub const PPC_REG_S4: Type = 287;
    pub const PPC_REG_S5: Type = 288;
    pub const PPC_REG_S6: Type = 289;
    pub const PPC_REG_S7: Type = 290;
    pub const PPC_REG_S8: Type = 291;
    pub const PPC_REG_S9: Type = 292;
    pub const PPC_REG_S10: Type = 293;
    pub const PPC_REG_S11: Type = 294;
    pub const PPC_REG_S12: Type = 295;
    pub const PPC_REG_S13: Type = 296;
    pub const PPC_REG_S14: Type = 297;
    pub const PPC_REG_S15: Type = 298;
    pub const PPC_REG_S16: Type = 299;
    pub const PPC_REG_S17: Type = 300;
    pub const PPC_REG_S18: Type = 301;
    pub const PPC_REG_S19: Type = 302;
    pub const PPC_REG_S20: Type = 303;
    pub const PPC_REG_S21: Type = 304;
    pub const PPC_REG_S22: Type = 305;
    pub const PPC_REG_S23: Type = 306;
    pub const PPC_REG_S24: Type = 307;
    pub const PPC_REG_S25: Type = 308;
    pub const PPC_REG_S26: Type = 309;
    pub const PPC_REG_S27: Type = 310;
    pub const PPC_REG_S28: Type = 311;
    pub const PPC_REG_S29: Type = 312;
    pub const PPC_REG_S30: Type = 313;
    pub const PPC_REG_S31: Type = 314;
    pub const PPC_REG_UACC0: Type = 315;
    pub const PPC_REG_UACC1: Type = 316;
    pub const PPC_REG_UACC2: Type = 317;
    pub const PPC_REG_UACC3: Type = 318;
    pub const PPC_REG_UACC4: Type = 319;
    pub const PPC_REG_UACC5: Type = 320;
    pub const PPC_REG_UACC6: Type = 321;
    pub const PPC_REG_UACC7: Type = 322;
    pub const PPC_REG_V0: Type = 323;
    pub const PPC_REG_V1: Type = 324;
    pub const PPC_REG_V2: Type = 325;
    pub const PPC_REG_V3: Type = 326;
    pub const PPC_REG_V4: Type = 327;
    pub const PPC_REG_V5: Type = 328;
    pub const PPC_REG_V6: Type = 329;
    pub const PPC_REG_V7: Type = 330;
    pub const PPC_REG_V8: Type = 331;
    pub const PPC_REG_V9: Type = 332;
    pub const PPC_REG_V10: Type = 333;
    pub const PPC_REG_V11: Type = 334;
    pub const PPC_REG_V12: Type = 335;
    pub const PPC_REG_V13: Type = 336;
    pub const PPC_REG_V14: Type = 337;
    pub const PPC_REG_V15: Type = 338;
    pub const PPC_REG_V16: Type = 339;
    pub const PPC_REG_V17: Type = 340;
    pub const PPC_REG_V18: Type = 341;
    pub const PPC_REG_V19: Type = 342;
    pub const PPC_REG_V20: Type = 343;
    pub const PPC_REG_V21: Type = 344;
    pub const PPC_REG_V22: Type = 345;
    pub const PPC_REG_V23: Type = 346;
    pub const PPC_REG_V24: Type = 347;
    pub const PPC_REG_V25: Type = 348;
    pub const PPC_REG_V26: Type = 349;
    pub const PPC_REG_V27: Type = 350;
    pub const PPC_REG_V28: Type = 351;
    pub const PPC_REG_V29: Type = 352;
    pub const PPC_REG_V30: Type = 353;
    pub const PPC_REG_V31: Type = 354;
    pub const PPC_REG_VF0: Type = 355;
    pub const PPC_REG_VF1: Type = 356;
    pub const PPC_REG_VF2: Type = 357;
    pub const PPC_REG_VF3: Type = 358;
    pub const PPC_REG_VF4: Type = 359;
    pub const PPC_REG_VF5: Type = 360;
    pub const PPC_REG_VF6: Type = 361;
    pub const PPC_REG_VF7: Type = 362;
    pub const PPC_REG_VF8: Type = 363;
    pub const PPC_REG_VF9: Type = 364;
    pub const PPC_REG_VF10: Type = 365;
    pub const PPC_REG_VF11: Type = 366;
    pub const PPC_REG_VF12: Type = 367;
    pub const PPC_REG_VF13: Type = 368;
    pub const PPC_REG_VF14: Type = 369;
    pub const PPC_REG_VF15: Type = 370;
    pub const PPC_REG_VF16: Type = 371;
    pub const PPC_REG_VF17: Type = 372;
    pub const PPC_REG_VF18: Type = 373;
    pub const PPC_REG_VF19: Type = 374;
    pub const PPC_REG_VF20: Type = 375;
    pub const PPC_REG_VF21: Type = 376;
    pub const PPC_REG_VF22: Type = 377;
    pub const PPC_REG_VF23: Type = 378;
    pub const PPC_REG_VF24: Type = 379;
    pub const PPC_REG_VF25: Type = 380;
    pub const PPC_REG_VF26: Type = 381;
    pub const PPC_REG_VF27: Type = 382;
    pub const PPC_REG_VF28: Type = 383;
    pub const PPC_REG_VF29: Type = 384;
    pub const PPC_REG_VF30: Type = 385;
    pub const PPC_REG_VF31: Type = 386;
    pub const PPC_REG_VSL0: Type = 387;
    pub const PPC_REG_VSL1: Type = 388;
    pub const PPC_REG_VSL2: Type = 389;
    pub const PPC_REG_VSL3: Type = 390;
    pub const PPC_REG_VSL4: Type = 391;
    pub const PPC_REG_VSL5: Type = 392;
    pub const PPC_REG_VSL6: Type = 393;
    pub const PPC_REG_VSL7: Type = 394;
    pub const PPC_REG_VSL8: Type = 395;
    pub const PPC_REG_VSL9: Type = 396;
    pub const PPC_REG_VSL10: Type = 397;
    pub const PPC_REG_VSL11: Type = 398;
    pub const PPC_REG_VSL12: Type = 399;
    pub const PPC_REG_VSL13: Type = 400;
    pub const PPC_REG_VSL14: Type = 401;
    pub const PPC_REG_VSL15: Type = 402;
    pub const PPC_REG_VSL16: Type = 403;
    pub const PPC_REG_VSL17: Type = 404;
    pub const PPC_REG_VSL18: Type = 405;
    pub const PPC_REG_VSL19: Type = 406;
    pub const PPC_REG_VSL20: Type = 407;
    pub const PPC_REG_VSL21: Type = 408;
    pub const PPC_REG_VSL22: Type = 409;
    pub const PPC_REG_VSL23: Type = 410;
    pub const PPC_REG_VSL24: Type = 411;
    pub const PPC_REG_VSL25: Type = 412;
    pub const PPC_REG_VSL26: Type = 413;
    pub const PPC_REG_VSL27: Type = 414;
    pub const PPC_REG_VSL28: Type = 415;
    pub const PPC_REG_VSL29: Type = 416;
    pub const PPC_REG_VSL30: Type = 417;
    pub const PPC_REG_VSL31: Type = 418;
    pub const PPC_REG_VSRP0: Type = 419;
    pub const PPC_REG_VSRP1: Type = 420;
    pub const PPC_REG_VSRP2: Type = 421;
    pub const PPC_REG_VSRP3: Type = 422;
    pub const PPC_REG_VSRP4: Type = 423;
    pub const PPC_REG_VSRP5: Type = 424;
    pub const PPC_REG_VSRP6: Type = 425;
    pub const PPC_REG_VSRP7: Type = 426;
    pub const PPC_REG_VSRP8: Type = 427;
    pub const PPC_REG_VSRP9: Type = 428;
    pub const PPC_REG_VSRP10: Type = 429;
    pub const PPC_REG_VSRP11: Type = 430;
    pub const PPC_REG_VSRP12: Type = 431;
    pub const PPC_REG_VSRP13: Type = 432;
    pub const PPC_REG_VSRP14: Type = 433;
    pub const PPC_REG_VSRP15: Type = 434;
    pub const PPC_REG_VSRP16: Type = 435;
    pub const PPC_REG_VSRP17: Type = 436;
    pub const PPC_REG_VSRP18: Type = 437;
    pub const PPC_REG_VSRP19: Type = 438;
    pub const PPC_REG_VSRP20: Type = 439;
    pub const PPC_REG_VSRP21: Type = 440;
    pub const PPC_REG_VSRP22: Type = 441;
    pub const PPC_REG_VSRP23: Type = 442;
    pub const PPC_REG_VSRP24: Type = 443;
    pub const PPC_REG_VSRP25: Type = 444;
    pub const PPC_REG_VSRP26: Type = 445;
    pub const PPC_REG_VSRP27: Type = 446;
    pub const PPC_REG_VSRP28: Type = 447;
    pub const PPC_REG_VSRP29: Type = 448;
    pub const PPC_REG_VSRP30: Type = 449;
    pub const PPC_REG_VSRP31: Type = 450;
    pub const PPC_REG_VSX32: Type = 451;
    pub const PPC_REG_VSX33: Type = 452;
    pub const PPC_REG_VSX34: Type = 453;
    pub const PPC_REG_VSX35: Type = 454;
    pub const PPC_REG_VSX36: Type = 455;
    pub const PPC_REG_VSX37: Type = 456;
    pub const PPC_REG_VSX38: Type = 457;
    pub const PPC_REG_VSX39: Type = 458;
    pub const PPC_REG_VSX40: Type = 459;
    pub const PPC_REG_VSX41: Type = 460;
    pub const PPC_REG_VSX42: Type = 461;
    pub const PPC_REG_VSX43: Type = 462;
    pub const PPC_REG_VSX44: Type = 463;
    pub const PPC_REG_VSX45: Type = 464;
    pub const PPC_REG_VSX46: Type = 465;
    pub const PPC_REG_VSX47: Type = 466;
    pub const PPC_REG_VSX48: Type = 467;
    pub const PPC_REG_VSX49: Type = 468;
    pub const PPC_REG_VSX50: Type = 469;
    pub const PPC_REG_VSX51: Type = 470;
    pub const PPC_REG_VSX52: Type = 471;
    pub const PPC_REG_VSX53: Type = 472;
    pub const PPC_REG_VSX54: Type = 473;
    pub const PPC_REG_VSX55: Type = 474;
    pub const PPC_REG_VSX56: Type = 475;
    pub const PPC_REG_VSX57: Type = 476;
    pub const PPC_REG_VSX58: Type = 477;
    pub const PPC_REG_VSX59: Type = 478;
    pub const PPC_REG_VSX60: Type = 479;
    pub const PPC_REG_VSX61: Type = 480;
    pub const PPC_REG_VSX62: Type = 481;
    pub const PPC_REG_VSX63: Type = 482;
    pub const PPC_REG_WACC0: Type = 483;
    pub const PPC_REG_WACC1: Type = 484;
    pub const PPC_REG_WACC2: Type = 485;
    pub const PPC_REG_WACC3: Type = 486;
    pub const PPC_REG_WACC4: Type = 487;
    pub const PPC_REG_WACC5: Type = 488;
    pub const PPC_REG_WACC6: Type = 489;
    pub const PPC_REG_WACC7: Type = 490;
    pub const PPC_REG_WACC_HI0: Type = 491;
    pub const PPC_REG_WACC_HI1: Type = 492;
    pub const PPC_REG_WACC_HI2: Type = 493;
    pub const PPC_REG_WACC_HI3: Type = 494;
    pub const PPC_REG_WACC_HI4: Type = 495;
    pub const PPC_REG_WACC_HI5: Type = 496;
    pub const PPC_REG_WACC_HI6: Type = 497;
    pub const PPC_REG_WACC_HI7: Type = 498;
    pub const PPC_REG_X0: Type = 499;
    pub const PPC_REG_X1: Type = 500;
    pub const PPC_REG_X2: Type = 501;
    pub const PPC_REG_X3: Type = 502;
    pub const PPC_REG_X4: Type = 503;
    pub const PPC_REG_X5: Type = 504;
    pub const PPC_REG_X6: Type = 505;
    pub const PPC_REG_X7: Type = 506;
    pub const PPC_REG_X8: Type = 507;
    pub const PPC_REG_X9: Type = 508;
    pub const PPC_REG_X10: Type = 509;
    pub const PPC_REG_X11: Type = 510;
    pub const PPC_REG_X12: Type = 511;
    pub const PPC_REG_X13: Type = 512;
    pub const PPC_REG_X14: Type = 513;
    pub const PPC_REG_X15: Type = 514;
    pub const PPC_REG_X16: Type = 515;
    pub const PPC_REG_X17: Type = 516;
    pub const PPC_REG_X18: Type = 517;
    pub const PPC_REG_X19: Type = 518;
    pub const PPC_REG_X20: Type = 519;
    pub const PPC_REG_X21: Type = 520;
    pub const PPC_REG_X22: Type = 521;
    pub const PPC_REG_X23: Type = 522;
    pub const PPC_REG_X24: Type = 523;
    pub const PPC_REG_X25: Type = 524;
    pub const PPC_REG_X26: Type = 525;
    pub const PPC_REG_X27: Type = 526;
    pub const PPC_REG_X28: Type = 527;
    pub const PPC_REG_X29: Type = 528;
    pub const PPC_REG_X30: Type = 529;
    pub const PPC_REG_X31: Type = 530;
    pub const PPC_REG_ZERO8: Type = 531;
    pub const PPC_REG_CR0EQ: Type = 532;
    pub const PPC_REG_CR1EQ: Type = 533;
    pub const PPC_REG_CR2EQ: Type = 534;
    pub const PPC_REG_CR3EQ: Type = 535;
    pub const PPC_REG_CR4EQ: Type = 536;
    pub const PPC_REG_CR5EQ: Type = 537;
    pub const PPC_REG_CR6EQ: Type = 538;
    pub const PPC_REG_CR7EQ: Type = 539;
    pub const PPC_REG_CR0GT: Type = 540;
    pub const PPC_REG_CR1GT: Type = 541;
    pub const PPC_REG_CR2GT: Type = 542;
    pub const PPC_REG_CR3GT: Type = 543;
    pub const PPC_REG_CR4GT: Type = 544;
    pub const PPC_REG_CR5GT: Type = 545;
    pub const PPC_REG_CR6GT: Type = 546;
    pub const PPC_REG_CR7GT: Type = 547;
    pub const PPC_REG_CR0LT: Type = 548;
    pub const PPC_REG_CR1LT: Type = 549;
    pub const PPC_REG_CR2LT: Type = 550;
    pub const PPC_REG_CR3LT: Type = 551;
    pub const PPC_REG_CR4LT: Type = 552;
    pub const PPC_REG_CR5LT: Type = 553;
    pub const PPC_REG_CR6LT: Type = 554;
    pub const PPC_REG_CR7LT: Type = 555;
    pub const PPC_REG_CR0UN: Type = 556;
    pub const PPC_REG_CR1UN: Type = 557;
    pub const PPC_REG_CR2UN: Type = 558;
    pub const PPC_REG_CR3UN: Type = 559;
    pub const PPC_REG_CR4UN: Type = 560;
    pub const PPC_REG_CR5UN: Type = 561;
    pub const PPC_REG_CR6UN: Type = 562;
    pub const PPC_REG_CR7UN: Type = 563;
    pub const PPC_REG_G8P0: Type = 564;
    pub const PPC_REG_G8P1: Type = 565;
    pub const PPC_REG_G8P2: Type = 566;
    pub const PPC_REG_G8P3: Type = 567;
    pub const PPC_REG_G8P4: Type = 568;
    pub const PPC_REG_G8P5: Type = 569;
    pub const PPC_REG_G8P6: Type = 570;
    pub const PPC_REG_G8P7: Type = 571;
    pub const PPC_REG_G8P8: Type = 572;
    pub const PPC_REG_G8P9: Type = 573;
    pub const PPC_REG_G8P10: Type = 574;
    pub const PPC_REG_G8P11: Type = 575;
    pub const PPC_REG_G8P12: Type = 576;
    pub const PPC_REG_G8P13: Type = 577;
    pub const PPC_REG_G8P14: Type = 578;
    pub const PPC_REG_G8P15: Type = 579;
    pub const PPC_REG_ENDING: Type = 580;
}
#[doc = " Instruction's operand referring to memory\n This is associated with PPC_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ppc_op_mem {
    #[doc = "< base register"]
    pub base: ppc_reg::Type,
    #[doc = "< displacement/offset value"]
    pub disp: i32,
    #[doc = "< Offset register"]
    pub offset: ppc_reg::Type,
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_ppc_op {
    #[doc = "< operand type"]
    pub type_: ppc_op_type,
    pub __bindgen_anon_1: cs_ppc_op__bindgen_ty_1,
    pub access: cs_ac_type,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_ppc_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: ppc_reg::Type,
    #[doc = "< immediate value for IMM operand"]
    pub imm: i64,
    #[doc = "< base/disp value for MEM operand"]
    pub mem: ppc_op_mem,
}
impl ::core::fmt::Debug for cs_ppc_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_ppc_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_ppc_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_ppc_op {{ type: {:?}, __bindgen_anon_1: {:?}, access: {:?} }}",
            self.type_, self.__bindgen_anon_1, self.access
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ppc_bc {
    #[doc = "< BO field of branch condition. UINT8_MAX if invalid."]
    pub bo: u8,
    #[doc = "< BI field of branch condition. UINT8_MAX if invalid."]
    pub bi: u8,
    #[doc = "< CR field bit to test."]
    pub crX_bit: ppc_cr_bit,
    #[doc = "< The CR field accessed."]
    pub crX: ppc_reg::Type,
    pub hint: ppc_br_hint,
    #[doc = "< CR-bit branch predicate"]
    pub pred_cr: ppc_pred,
    #[doc = "< CTR branch predicate"]
    pub pred_ctr: ppc_pred,
    #[doc = "< The BH field hint if any is present."]
    pub bh: ppc_bh,
}
#[repr(u32)]
#[doc = " PPC instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ppc_insn {
    PPC_INS_INVALID = 0,
    PPC_INS_CLRLSLDI = 1,
    PPC_INS_CLRLSLWI = 2,
    PPC_INS_CLRRDI = 3,
    PPC_INS_CLRRWI = 4,
    PPC_INS_DCBFL = 5,
    PPC_INS_DCBFLP = 6,
    PPC_INS_DCBFPS = 7,
    PPC_INS_DCBF = 8,
    PPC_INS_DCBSTPS = 9,
    PPC_INS_DCBTCT = 10,
    PPC_INS_DCBTDS = 11,
    PPC_INS_DCBTSTCT = 12,
    PPC_INS_DCBTSTDS = 13,
    PPC_INS_DCBTSTT = 14,
    PPC_INS_DCBTST = 15,
    PPC_INS_DCBTT = 16,
    PPC_INS_DCBT = 17,
    PPC_INS_EXTLDI = 18,
    PPC_INS_EXTLWI = 19,
    PPC_INS_EXTRDI = 20,
    PPC_INS_EXTRWI = 21,
    PPC_INS_INSLWI = 22,
    PPC_INS_INSRDI = 23,
    PPC_INS_INSRWI = 24,
    PPC_INS_LA = 25,
    PPC_INS_LI = 26,
    PPC_INS_LIS = 27,
    PPC_INS_PSUBI = 28,
    PPC_INS_RLWIMI = 29,
    PPC_INS_RLWINM = 30,
    PPC_INS_RLWNM = 31,
    PPC_INS_ROTRDI = 32,
    PPC_INS_ROTRWI = 33,
    PPC_INS_SLDI = 34,
    PPC_INS_SLWI = 35,
    PPC_INS_SRDI = 36,
    PPC_INS_SRWI = 37,
    PPC_INS_SUBI = 38,
    PPC_INS_SUBIC = 39,
    PPC_INS_SUBIS = 40,
    PPC_INS_SUBPCIS = 41,
    PPC_INS_ADD = 42,
    PPC_INS_ADDO = 43,
    PPC_INS_ADDC = 44,
    PPC_INS_ADDCO = 45,
    PPC_INS_ADDE = 46,
    PPC_INS_ADDEO = 47,
    PPC_INS_ADDEX = 48,
    PPC_INS_ADDG6S = 49,
    PPC_INS_ADDI = 50,
    PPC_INS_ADDIC = 51,
    PPC_INS_ADDIS = 52,
    PPC_INS_ADDME = 53,
    PPC_INS_ADDMEO = 54,
    PPC_INS_ADDPCIS = 55,
    PPC_INS_ADDZE = 56,
    PPC_INS_ADDZEO = 57,
    PPC_INS_AND = 58,
    PPC_INS_ANDC = 59,
    PPC_INS_ANDIS = 60,
    PPC_INS_ANDI = 61,
    PPC_INS_ATTN = 62,
    PPC_INS_B = 63,
    PPC_INS_BA = 64,
    PPC_INS_BCDADD = 65,
    PPC_INS_BCDCFN = 66,
    PPC_INS_BCDCFSQ = 67,
    PPC_INS_BCDCFZ = 68,
    PPC_INS_BCDCPSGN = 69,
    PPC_INS_BCDCTN = 70,
    PPC_INS_BCDCTSQ = 71,
    PPC_INS_BCDCTZ = 72,
    PPC_INS_BCDSETSGN = 73,
    PPC_INS_BCDSR = 74,
    PPC_INS_BCDSUB = 75,
    PPC_INS_BCDS = 76,
    PPC_INS_BCDTRUNC = 77,
    PPC_INS_BCDUS = 78,
    PPC_INS_BCDUTRUNC = 79,
    PPC_INS_BCTR = 80,
    PPC_INS_BCTRL = 81,
    PPC_INS_BL = 82,
    PPC_INS_BLA = 83,
    PPC_INS_BLR = 84,
    PPC_INS_BLRL = 85,
    PPC_INS_BPERMD = 86,
    PPC_INS_BRD = 87,
    PPC_INS_BRH = 88,
    PPC_INS_BRINC = 89,
    PPC_INS_BRW = 90,
    PPC_INS_CBCDTD = 91,
    PPC_INS_CDTBCD = 92,
    PPC_INS_CFUGED = 93,
    PPC_INS_CLRBHRB = 94,
    PPC_INS_CMPB = 95,
    PPC_INS_CMPD = 96,
    PPC_INS_CMPDI = 97,
    PPC_INS_CMPEQB = 98,
    PPC_INS_CMPLD = 99,
    PPC_INS_CMPLDI = 100,
    PPC_INS_CMPLW = 101,
    PPC_INS_CMPLWI = 102,
    PPC_INS_CMPRB = 103,
    PPC_INS_CMPW = 104,
    PPC_INS_CMPWI = 105,
    PPC_INS_CNTLZD = 106,
    PPC_INS_CNTLZDM = 107,
    PPC_INS_CNTLZW = 108,
    PPC_INS_CNTTZD = 109,
    PPC_INS_CNTTZDM = 110,
    PPC_INS_CNTTZW = 111,
    PPC_INS_CPABORT = 112,
    PPC_INS_COPY = 113,
    PPC_INS_PASTE = 114,
    PPC_INS_CRAND = 115,
    PPC_INS_CRANDC = 116,
    PPC_INS_CREQV = 117,
    PPC_INS_CRNAND = 118,
    PPC_INS_CRNOR = 119,
    PPC_INS_CROR = 120,
    PPC_INS_CRORC = 121,
    PPC_INS_CRXOR = 122,
    PPC_INS_DADD = 123,
    PPC_INS_DADDQ = 124,
    PPC_INS_DARN = 125,
    PPC_INS_DCBA = 126,
    PPC_INS_DCBFEP = 127,
    PPC_INS_DCBI = 128,
    PPC_INS_DCBST = 129,
    PPC_INS_DCBSTEP = 130,
    PPC_INS_DCBTEP = 131,
    PPC_INS_DCBTSTEP = 132,
    PPC_INS_DCBZ = 133,
    PPC_INS_DCBZEP = 134,
    PPC_INS_DCBZL = 135,
    PPC_INS_DCBZLEP = 136,
    PPC_INS_DCCCI = 137,
    PPC_INS_DCFFIX = 138,
    PPC_INS_DCFFIXQ = 139,
    PPC_INS_DCFFIXQQ = 140,
    PPC_INS_DCMPO = 141,
    PPC_INS_DCMPOQ = 142,
    PPC_INS_DCMPU = 143,
    PPC_INS_DCMPUQ = 144,
    PPC_INS_DCTDP = 145,
    PPC_INS_DCTFIX = 146,
    PPC_INS_DCTFIXQ = 147,
    PPC_INS_DCTFIXQQ = 148,
    PPC_INS_DCTQPQ = 149,
    PPC_INS_DDEDPD = 150,
    PPC_INS_DDEDPDQ = 151,
    PPC_INS_DDIV = 152,
    PPC_INS_DDIVQ = 153,
    PPC_INS_DENBCD = 154,
    PPC_INS_DENBCDQ = 155,
    PPC_INS_DIEX = 156,
    PPC_INS_DIEXQ = 157,
    PPC_INS_DIVD = 158,
    PPC_INS_DIVDE = 159,
    PPC_INS_DIVDEO = 160,
    PPC_INS_DIVDEU = 161,
    PPC_INS_DIVDEUO = 162,
    PPC_INS_DIVDO = 163,
    PPC_INS_DIVDU = 164,
    PPC_INS_DIVDUO = 165,
    PPC_INS_DIVW = 166,
    PPC_INS_DIVWE = 167,
    PPC_INS_DIVWEO = 168,
    PPC_INS_DIVWEU = 169,
    PPC_INS_DIVWEUO = 170,
    PPC_INS_DIVWO = 171,
    PPC_INS_DIVWU = 172,
    PPC_INS_DIVWUO = 173,
    PPC_INS_DMMR = 174,
    PPC_INS_DMSETDMRZ = 175,
    PPC_INS_DMUL = 176,
    PPC_INS_DMULQ = 177,
    PPC_INS_DMXOR = 178,
    PPC_INS_DMXXEXTFDMR256 = 179,
    PPC_INS_DMXXEXTFDMR512 = 180,
    PPC_INS_DMXXINSTFDMR256 = 181,
    PPC_INS_DMXXINSTFDMR512 = 182,
    PPC_INS_DQUA = 183,
    PPC_INS_DQUAI = 184,
    PPC_INS_DQUAIQ = 185,
    PPC_INS_DQUAQ = 186,
    PPC_INS_DRDPQ = 187,
    PPC_INS_DRINTN = 188,
    PPC_INS_DRINTNQ = 189,
    PPC_INS_DRINTX = 190,
    PPC_INS_DRINTXQ = 191,
    PPC_INS_DRRND = 192,
    PPC_INS_DRRNDQ = 193,
    PPC_INS_DRSP = 194,
    PPC_INS_DSCLI = 195,
    PPC_INS_DSCLIQ = 196,
    PPC_INS_DSCRI = 197,
    PPC_INS_DSCRIQ = 198,
    PPC_INS_DSS = 199,
    PPC_INS_DSSALL = 200,
    PPC_INS_DST = 201,
    PPC_INS_DSTST = 202,
    PPC_INS_DSTSTT = 203,
    PPC_INS_DSTT = 204,
    PPC_INS_DSUB = 205,
    PPC_INS_DSUBQ = 206,
    PPC_INS_DTSTDC = 207,
    PPC_INS_DTSTDCQ = 208,
    PPC_INS_DTSTDG = 209,
    PPC_INS_DTSTDGQ = 210,
    PPC_INS_DTSTEX = 211,
    PPC_INS_DTSTEXQ = 212,
    PPC_INS_DTSTSF = 213,
    PPC_INS_DTSTSFI = 214,
    PPC_INS_DTSTSFIQ = 215,
    PPC_INS_DTSTSFQ = 216,
    PPC_INS_DXEX = 217,
    PPC_INS_DXEXQ = 218,
    PPC_INS_EFDABS = 219,
    PPC_INS_EFDADD = 220,
    PPC_INS_EFDCFS = 221,
    PPC_INS_EFDCFSF = 222,
    PPC_INS_EFDCFSI = 223,
    PPC_INS_EFDCFSID = 224,
    PPC_INS_EFDCFUF = 225,
    PPC_INS_EFDCFUI = 226,
    PPC_INS_EFDCFUID = 227,
    PPC_INS_EFDCMPEQ = 228,
    PPC_INS_EFDCMPGT = 229,
    PPC_INS_EFDCMPLT = 230,
    PPC_INS_EFDCTSF = 231,
    PPC_INS_EFDCTSI = 232,
    PPC_INS_EFDCTSIDZ = 233,
    PPC_INS_EFDCTSIZ = 234,
    PPC_INS_EFDCTUF = 235,
    PPC_INS_EFDCTUI = 236,
    PPC_INS_EFDCTUIDZ = 237,
    PPC_INS_EFDCTUIZ = 238,
    PPC_INS_EFDDIV = 239,
    PPC_INS_EFDMUL = 240,
    PPC_INS_EFDNABS = 241,
    PPC_INS_EFDNEG = 242,
    PPC_INS_EFDSUB = 243,
    PPC_INS_EFDTSTEQ = 244,
    PPC_INS_EFDTSTGT = 245,
    PPC_INS_EFDTSTLT = 246,
    PPC_INS_EFSABS = 247,
    PPC_INS_EFSADD = 248,
    PPC_INS_EFSCFD = 249,
    PPC_INS_EFSCFSF = 250,
    PPC_INS_EFSCFSI = 251,
    PPC_INS_EFSCFUF = 252,
    PPC_INS_EFSCFUI = 253,
    PPC_INS_EFSCMPEQ = 254,
    PPC_INS_EFSCMPGT = 255,
    PPC_INS_EFSCMPLT = 256,
    PPC_INS_EFSCTSF = 257,
    PPC_INS_EFSCTSI = 258,
    PPC_INS_EFSCTSIZ = 259,
    PPC_INS_EFSCTUF = 260,
    PPC_INS_EFSCTUI = 261,
    PPC_INS_EFSCTUIZ = 262,
    PPC_INS_EFSDIV = 263,
    PPC_INS_EFSMUL = 264,
    PPC_INS_EFSNABS = 265,
    PPC_INS_EFSNEG = 266,
    PPC_INS_EFSSUB = 267,
    PPC_INS_EFSTSTEQ = 268,
    PPC_INS_EFSTSTGT = 269,
    PPC_INS_EFSTSTLT = 270,
    PPC_INS_EQV = 271,
    PPC_INS_EVABS = 272,
    PPC_INS_EVADDIW = 273,
    PPC_INS_EVADDSMIAAW = 274,
    PPC_INS_EVADDSSIAAW = 275,
    PPC_INS_EVADDUMIAAW = 276,
    PPC_INS_EVADDUSIAAW = 277,
    PPC_INS_EVADDW = 278,
    PPC_INS_EVAND = 279,
    PPC_INS_EVANDC = 280,
    PPC_INS_EVCMPEQ = 281,
    PPC_INS_EVCMPGTS = 282,
    PPC_INS_EVCMPGTU = 283,
    PPC_INS_EVCMPLTS = 284,
    PPC_INS_EVCMPLTU = 285,
    PPC_INS_EVCNTLSW = 286,
    PPC_INS_EVCNTLZW = 287,
    PPC_INS_EVDIVWS = 288,
    PPC_INS_EVDIVWU = 289,
    PPC_INS_EVEQV = 290,
    PPC_INS_EVEXTSB = 291,
    PPC_INS_EVEXTSH = 292,
    PPC_INS_EVFSABS = 293,
    PPC_INS_EVFSADD = 294,
    PPC_INS_EVFSCFSF = 295,
    PPC_INS_EVFSCFSI = 296,
    PPC_INS_EVFSCFUF = 297,
    PPC_INS_EVFSCFUI = 298,
    PPC_INS_EVFSCMPEQ = 299,
    PPC_INS_EVFSCMPGT = 300,
    PPC_INS_EVFSCMPLT = 301,
    PPC_INS_EVFSCTSF = 302,
    PPC_INS_EVFSCTSI = 303,
    PPC_INS_EVFSCTSIZ = 304,
    PPC_INS_EVFSCTUI = 305,
    PPC_INS_EVFSDIV = 306,
    PPC_INS_EVFSMUL = 307,
    PPC_INS_EVFSNABS = 308,
    PPC_INS_EVFSNEG = 309,
    PPC_INS_EVFSSUB = 310,
    PPC_INS_EVFSTSTEQ = 311,
    PPC_INS_EVFSTSTGT = 312,
    PPC_INS_EVFSTSTLT = 313,
    PPC_INS_EVLDD = 314,
    PPC_INS_EVLDDX = 315,
    PPC_INS_EVLDH = 316,
    PPC_INS_EVLDHX = 317,
    PPC_INS_EVLDW = 318,
    PPC_INS_EVLDWX = 319,
    PPC_INS_EVLHHESPLAT = 320,
    PPC_INS_EVLHHESPLATX = 321,
    PPC_INS_EVLHHOSSPLAT = 322,
    PPC_INS_EVLHHOSSPLATX = 323,
    PPC_INS_EVLHHOUSPLAT = 324,
    PPC_INS_EVLHHOUSPLATX = 325,
    PPC_INS_EVLWHE = 326,
    PPC_INS_EVLWHEX = 327,
    PPC_INS_EVLWHOS = 328,
    PPC_INS_EVLWHOSX = 329,
    PPC_INS_EVLWHOU = 330,
    PPC_INS_EVLWHOUX = 331,
    PPC_INS_EVLWHSPLAT = 332,
    PPC_INS_EVLWHSPLATX = 333,
    PPC_INS_EVLWWSPLAT = 334,
    PPC_INS_EVLWWSPLATX = 335,
    PPC_INS_EVMERGEHI = 336,
    PPC_INS_EVMERGEHILO = 337,
    PPC_INS_EVMERGELO = 338,
    PPC_INS_EVMERGELOHI = 339,
    PPC_INS_EVMHEGSMFAA = 340,
    PPC_INS_EVMHEGSMFAN = 341,
    PPC_INS_EVMHEGSMIAA = 342,
    PPC_INS_EVMHEGSMIAN = 343,
    PPC_INS_EVMHEGUMIAA = 344,
    PPC_INS_EVMHEGUMIAN = 345,
    PPC_INS_EVMHESMF = 346,
    PPC_INS_EVMHESMFA = 347,
    PPC_INS_EVMHESMFAAW = 348,
    PPC_INS_EVMHESMFANW = 349,
    PPC_INS_EVMHESMI = 350,
    PPC_INS_EVMHESMIA = 351,
    PPC_INS_EVMHESMIAAW = 352,
    PPC_INS_EVMHESMIANW = 353,
    PPC_INS_EVMHESSF = 354,
    PPC_INS_EVMHESSFA = 355,
    PPC_INS_EVMHESSFAAW = 356,
    PPC_INS_EVMHESSFANW = 357,
    PPC_INS_EVMHESSIAAW = 358,
    PPC_INS_EVMHESSIANW = 359,
    PPC_INS_EVMHEUMI = 360,
    PPC_INS_EVMHEUMIA = 361,
    PPC_INS_EVMHEUMIAAW = 362,
    PPC_INS_EVMHEUMIANW = 363,
    PPC_INS_EVMHEUSIAAW = 364,
    PPC_INS_EVMHEUSIANW = 365,
    PPC_INS_EVMHOGSMFAA = 366,
    PPC_INS_EVMHOGSMFAN = 367,
    PPC_INS_EVMHOGSMIAA = 368,
    PPC_INS_EVMHOGSMIAN = 369,
    PPC_INS_EVMHOGUMIAA = 370,
    PPC_INS_EVMHOGUMIAN = 371,
    PPC_INS_EVMHOSMF = 372,
    PPC_INS_EVMHOSMFA = 373,
    PPC_INS_EVMHOSMFAAW = 374,
    PPC_INS_EVMHOSMFANW = 375,
    PPC_INS_EVMHOSMI = 376,
    PPC_INS_EVMHOSMIA = 377,
    PPC_INS_EVMHOSMIAAW = 378,
    PPC_INS_EVMHOSMIANW = 379,
    PPC_INS_EVMHOSSF = 380,
    PPC_INS_EVMHOSSFA = 381,
    PPC_INS_EVMHOSSFAAW = 382,
    PPC_INS_EVMHOSSFANW = 383,
    PPC_INS_EVMHOSSIAAW = 384,
    PPC_INS_EVMHOSSIANW = 385,
    PPC_INS_EVMHOUMI = 386,
    PPC_INS_EVMHOUMIA = 387,
    PPC_INS_EVMHOUMIAAW = 388,
    PPC_INS_EVMHOUMIANW = 389,
    PPC_INS_EVMHOUSIAAW = 390,
    PPC_INS_EVMHOUSIANW = 391,
    PPC_INS_EVMRA = 392,
    PPC_INS_EVMWHSMF = 393,
    PPC_INS_EVMWHSMFA = 394,
    PPC_INS_EVMWHSMI = 395,
    PPC_INS_EVMWHSMIA = 396,
    PPC_INS_EVMWHSSF = 397,
    PPC_INS_EVMWHSSFA = 398,
    PPC_INS_EVMWHUMI = 399,
    PPC_INS_EVMWHUMIA = 400,
    PPC_INS_EVMWLSMIAAW = 401,
    PPC_INS_EVMWLSMIANW = 402,
    PPC_INS_EVMWLSSIAAW = 403,
    PPC_INS_EVMWLSSIANW = 404,
    PPC_INS_EVMWLUMI = 405,
    PPC_INS_EVMWLUMIA = 406,
    PPC_INS_EVMWLUMIAAW = 407,
    PPC_INS_EVMWLUMIANW = 408,
    PPC_INS_EVMWLUSIAAW = 409,
    PPC_INS_EVMWLUSIANW = 410,
    PPC_INS_EVMWSMF = 411,
    PPC_INS_EVMWSMFA = 412,
    PPC_INS_EVMWSMFAA = 413,
    PPC_INS_EVMWSMFAN = 414,
    PPC_INS_EVMWSMI = 415,
    PPC_INS_EVMWSMIA = 416,
    PPC_INS_EVMWSMIAA = 417,
    PPC_INS_EVMWSMIAN = 418,
    PPC_INS_EVMWSSF = 419,
    PPC_INS_EVMWSSFA = 420,
    PPC_INS_EVMWSSFAA = 421,
    PPC_INS_EVMWSSFAN = 422,
    PPC_INS_EVMWUMI = 423,
    PPC_INS_EVMWUMIA = 424,
    PPC_INS_EVMWUMIAA = 425,
    PPC_INS_EVMWUMIAN = 426,
    PPC_INS_EVNAND = 427,
    PPC_INS_EVNEG = 428,
    PPC_INS_EVNOR = 429,
    PPC_INS_EVOR = 430,
    PPC_INS_EVORC = 431,
    PPC_INS_EVRLW = 432,
    PPC_INS_EVRLWI = 433,
    PPC_INS_EVRNDW = 434,
    PPC_INS_EVSEL = 435,
    PPC_INS_EVSLW = 436,
    PPC_INS_EVSLWI = 437,
    PPC_INS_EVSPLATFI = 438,
    PPC_INS_EVSPLATI = 439,
    PPC_INS_EVSRWIS = 440,
    PPC_INS_EVSRWIU = 441,
    PPC_INS_EVSRWS = 442,
    PPC_INS_EVSRWU = 443,
    PPC_INS_EVSTDD = 444,
    PPC_INS_EVSTDDX = 445,
    PPC_INS_EVSTDH = 446,
    PPC_INS_EVSTDHX = 447,
    PPC_INS_EVSTDW = 448,
    PPC_INS_EVSTDWX = 449,
    PPC_INS_EVSTWHE = 450,
    PPC_INS_EVSTWHEX = 451,
    PPC_INS_EVSTWHO = 452,
    PPC_INS_EVSTWHOX = 453,
    PPC_INS_EVSTWWE = 454,
    PPC_INS_EVSTWWEX = 455,
    PPC_INS_EVSTWWO = 456,
    PPC_INS_EVSTWWOX = 457,
    PPC_INS_EVSUBFSMIAAW = 458,
    PPC_INS_EVSUBFSSIAAW = 459,
    PPC_INS_EVSUBFUMIAAW = 460,
    PPC_INS_EVSUBFUSIAAW = 461,
    PPC_INS_EVSUBFW = 462,
    PPC_INS_EVSUBIFW = 463,
    PPC_INS_EVXOR = 464,
    PPC_INS_EXTSB = 465,
    PPC_INS_EXTSH = 466,
    PPC_INS_EXTSW = 467,
    PPC_INS_EXTSWSLI = 468,
    PPC_INS_EIEIO = 469,
    PPC_INS_FABS = 470,
    PPC_INS_FADD = 471,
    PPC_INS_FADDS = 472,
    PPC_INS_FCFID = 473,
    PPC_INS_FCFIDS = 474,
    PPC_INS_FCFIDU = 475,
    PPC_INS_FCFIDUS = 476,
    PPC_INS_FCMPO = 477,
    PPC_INS_FCMPU = 478,
    PPC_INS_FCPSGN = 479,
    PPC_INS_FCTID = 480,
    PPC_INS_FCTIDU = 481,
    PPC_INS_FCTIDUZ = 482,
    PPC_INS_FCTIDZ = 483,
    PPC_INS_FCTIW = 484,
    PPC_INS_FCTIWU = 485,
    PPC_INS_FCTIWUZ = 486,
    PPC_INS_FCTIWZ = 487,
    PPC_INS_FDIV = 488,
    PPC_INS_FDIVS = 489,
    PPC_INS_FMADD = 490,
    PPC_INS_FMADDS = 491,
    PPC_INS_FMR = 492,
    PPC_INS_FMSUB = 493,
    PPC_INS_FMSUBS = 494,
    PPC_INS_FMUL = 495,
    PPC_INS_FMULS = 496,
    PPC_INS_FNABS = 497,
    PPC_INS_FNEG = 498,
    PPC_INS_FNMADD = 499,
    PPC_INS_FNMADDS = 500,
    PPC_INS_FNMSUB = 501,
    PPC_INS_FNMSUBS = 502,
    PPC_INS_FRE = 503,
    PPC_INS_FRES = 504,
    PPC_INS_FRIM = 505,
    PPC_INS_FRIN = 506,
    PPC_INS_FRIP = 507,
    PPC_INS_FRIZ = 508,
    PPC_INS_FRSP = 509,
    PPC_INS_FRSQRTE = 510,
    PPC_INS_FRSQRTES = 511,
    PPC_INS_FSEL = 512,
    PPC_INS_FSQRT = 513,
    PPC_INS_FSQRTS = 514,
    PPC_INS_FSUB = 515,
    PPC_INS_FSUBS = 516,
    PPC_INS_FTDIV = 517,
    PPC_INS_FTSQRT = 518,
    PPC_INS_HASHCHK = 519,
    PPC_INS_HASHCHKP = 520,
    PPC_INS_HASHST = 521,
    PPC_INS_HASHSTP = 522,
    PPC_INS_HRFID = 523,
    PPC_INS_ICBI = 524,
    PPC_INS_ICBIEP = 525,
    PPC_INS_ICBLC = 526,
    PPC_INS_ICBLQ = 527,
    PPC_INS_ICBT = 528,
    PPC_INS_ICBTLS = 529,
    PPC_INS_ICCCI = 530,
    PPC_INS_ISEL = 531,
    PPC_INS_ISYNC = 532,
    PPC_INS_LBARX = 533,
    PPC_INS_LBEPX = 534,
    PPC_INS_LBZ = 535,
    PPC_INS_LBZCIX = 536,
    PPC_INS_LBZU = 537,
    PPC_INS_LBZUX = 538,
    PPC_INS_LBZX = 539,
    PPC_INS_LD = 540,
    PPC_INS_LDARX = 541,
    PPC_INS_LDAT = 542,
    PPC_INS_LDBRX = 543,
    PPC_INS_LDCIX = 544,
    PPC_INS_LDU = 545,
    PPC_INS_LDUX = 546,
    PPC_INS_LDX = 547,
    PPC_INS_LFD = 548,
    PPC_INS_LFDEPX = 549,
    PPC_INS_LFDU = 550,
    PPC_INS_LFDUX = 551,
    PPC_INS_LFDX = 552,
    PPC_INS_LFIWAX = 553,
    PPC_INS_LFIWZX = 554,
    PPC_INS_LFS = 555,
    PPC_INS_LFSU = 556,
    PPC_INS_LFSUX = 557,
    PPC_INS_LFSX = 558,
    PPC_INS_LHA = 559,
    PPC_INS_LHARX = 560,
    PPC_INS_LHAU = 561,
    PPC_INS_LHAUX = 562,
    PPC_INS_LHAX = 563,
    PPC_INS_LHBRX = 564,
    PPC_INS_LHEPX = 565,
    PPC_INS_LHZ = 566,
    PPC_INS_LHZCIX = 567,
    PPC_INS_LHZU = 568,
    PPC_INS_LHZUX = 569,
    PPC_INS_LHZX = 570,
    PPC_INS_LMW = 571,
    PPC_INS_LQ = 572,
    PPC_INS_LQARX = 573,
    PPC_INS_LSWI = 574,
    PPC_INS_LVEBX = 575,
    PPC_INS_LVEHX = 576,
    PPC_INS_LVEWX = 577,
    PPC_INS_LVSL = 578,
    PPC_INS_LVSR = 579,
    PPC_INS_LVX = 580,
    PPC_INS_LVXL = 581,
    PPC_INS_LWA = 582,
    PPC_INS_LWARX = 583,
    PPC_INS_LWAT = 584,
    PPC_INS_LWAUX = 585,
    PPC_INS_LWAX = 586,
    PPC_INS_LWBRX = 587,
    PPC_INS_LWEPX = 588,
    PPC_INS_LWZ = 589,
    PPC_INS_LWZCIX = 590,
    PPC_INS_LWZU = 591,
    PPC_INS_LWZUX = 592,
    PPC_INS_LWZX = 593,
    PPC_INS_LXSD = 594,
    PPC_INS_LXSDX = 595,
    PPC_INS_LXSIBZX = 596,
    PPC_INS_LXSIHZX = 597,
    PPC_INS_LXSIWAX = 598,
    PPC_INS_LXSIWZX = 599,
    PPC_INS_LXSSP = 600,
    PPC_INS_LXSSPX = 601,
    PPC_INS_LXV = 602,
    PPC_INS_LXVB16X = 603,
    PPC_INS_LXVD2X = 604,
    PPC_INS_LXVDSX = 605,
    PPC_INS_LXVH8X = 606,
    PPC_INS_LXVKQ = 607,
    PPC_INS_LXVL = 608,
    PPC_INS_LXVLL = 609,
    PPC_INS_LXVP = 610,
    PPC_INS_LXVPRL = 611,
    PPC_INS_LXVPRLL = 612,
    PPC_INS_LXVPX = 613,
    PPC_INS_LXVRBX = 614,
    PPC_INS_LXVRDX = 615,
    PPC_INS_LXVRHX = 616,
    PPC_INS_LXVRL = 617,
    PPC_INS_LXVRLL = 618,
    PPC_INS_LXVRWX = 619,
    PPC_INS_LXVW4X = 620,
    PPC_INS_LXVWSX = 621,
    PPC_INS_LXVX = 622,
    PPC_INS_MADDHD = 623,
    PPC_INS_MADDHDU = 624,
    PPC_INS_MADDLD = 625,
    PPC_INS_MBAR = 626,
    PPC_INS_MCRF = 627,
    PPC_INS_MCRFS = 628,
    PPC_INS_MCRXRX = 629,
    PPC_INS_MFBHRBE = 630,
    PPC_INS_MFCR = 631,
    PPC_INS_MFCTR = 632,
    PPC_INS_MFDCR = 633,
    PPC_INS_MFFS = 634,
    PPC_INS_MFFSCDRN = 635,
    PPC_INS_MFFSCDRNI = 636,
    PPC_INS_MFFSCE = 637,
    PPC_INS_MFFSCRN = 638,
    PPC_INS_MFFSCRNI = 639,
    PPC_INS_MFFSL = 640,
    PPC_INS_MFLR = 641,
    PPC_INS_MFMSR = 642,
    PPC_INS_MFOCRF = 643,
    PPC_INS_MFPMR = 644,
    PPC_INS_MFSPR = 645,
    PPC_INS_MFSR = 646,
    PPC_INS_MFSRIN = 647,
    PPC_INS_MFTB = 648,
    PPC_INS_MFVSCR = 649,
    PPC_INS_MFVSRD = 650,
    PPC_INS_MFVSRLD = 651,
    PPC_INS_MFVSRWZ = 652,
    PPC_INS_MODSD = 653,
    PPC_INS_MODSW = 654,
    PPC_INS_MODUD = 655,
    PPC_INS_MODUW = 656,
    PPC_INS_MSGSYNC = 657,
    PPC_INS_MTCRF = 658,
    PPC_INS_MTCTR = 659,
    PPC_INS_MTDCR = 660,
    PPC_INS_MTFSB0 = 661,
    PPC_INS_MTFSB1 = 662,
    PPC_INS_MTFSF = 663,
    PPC_INS_MTFSFI = 664,
    PPC_INS_MTLR = 665,
    PPC_INS_MTMSR = 666,
    PPC_INS_MTMSRD = 667,
    PPC_INS_MTOCRF = 668,
    PPC_INS_MTPMR = 669,
    PPC_INS_MTSPR = 670,
    PPC_INS_MTSR = 671,
    PPC_INS_MTSRIN = 672,
    PPC_INS_MTVSCR = 673,
    PPC_INS_MTVSRBM = 674,
    PPC_INS_MTVSRBMI = 675,
    PPC_INS_MTVSRD = 676,
    PPC_INS_MTVSRDD = 677,
    PPC_INS_MTVSRDM = 678,
    PPC_INS_MTVSRHM = 679,
    PPC_INS_MTVSRQM = 680,
    PPC_INS_MTVSRWA = 681,
    PPC_INS_MTVSRWM = 682,
    PPC_INS_MTVSRWS = 683,
    PPC_INS_MTVSRWZ = 684,
    PPC_INS_MULHD = 685,
    PPC_INS_MULHDU = 686,
    PPC_INS_MULHW = 687,
    PPC_INS_MULHWU = 688,
    PPC_INS_MULLD = 689,
    PPC_INS_MULLDO = 690,
    PPC_INS_MULLI = 691,
    PPC_INS_MULLW = 692,
    PPC_INS_MULLWO = 693,
    PPC_INS_NAND = 694,
    PPC_INS_NAP = 695,
    PPC_INS_NEG = 696,
    PPC_INS_NEGO = 697,
    PPC_INS_NOP = 698,
    PPC_INS_NOR = 699,
    PPC_INS_OR = 700,
    PPC_INS_ORC = 701,
    PPC_INS_ORI = 702,
    PPC_INS_ORIS = 703,
    PPC_INS_PADDI = 704,
    PPC_INS_PDEPD = 705,
    PPC_INS_PEXTD = 706,
    PPC_INS_PLA = 707,
    PPC_INS_PLBZ = 708,
    PPC_INS_PLD = 709,
    PPC_INS_PLFD = 710,
    PPC_INS_PLFS = 711,
    PPC_INS_PLHA = 712,
    PPC_INS_PLHZ = 713,
    PPC_INS_PLI = 714,
    PPC_INS_PLWA = 715,
    PPC_INS_PLWZ = 716,
    PPC_INS_PLXSD = 717,
    PPC_INS_PLXSSP = 718,
    PPC_INS_PLXV = 719,
    PPC_INS_PLXVP = 720,
    PPC_INS_PMXVBF16GER2 = 721,
    PPC_INS_PMXVBF16GER2NN = 722,
    PPC_INS_PMXVBF16GER2NP = 723,
    PPC_INS_PMXVBF16GER2PN = 724,
    PPC_INS_PMXVBF16GER2PP = 725,
    PPC_INS_PMXVF16GER2 = 726,
    PPC_INS_PMXVF16GER2NN = 727,
    PPC_INS_PMXVF16GER2NP = 728,
    PPC_INS_PMXVF16GER2PN = 729,
    PPC_INS_PMXVF16GER2PP = 730,
    PPC_INS_PMXVF32GER = 731,
    PPC_INS_PMXVF32GERNN = 732,
    PPC_INS_PMXVF32GERNP = 733,
    PPC_INS_PMXVF32GERPN = 734,
    PPC_INS_PMXVF32GERPP = 735,
    PPC_INS_PMXVF64GER = 736,
    PPC_INS_PMXVF64GERNN = 737,
    PPC_INS_PMXVF64GERNP = 738,
    PPC_INS_PMXVF64GERPN = 739,
    PPC_INS_PMXVF64GERPP = 740,
    PPC_INS_PMXVI16GER2 = 741,
    PPC_INS_PMXVI16GER2PP = 742,
    PPC_INS_PMXVI16GER2S = 743,
    PPC_INS_PMXVI16GER2SPP = 744,
    PPC_INS_PMXVI4GER8 = 745,
    PPC_INS_PMXVI4GER8PP = 746,
    PPC_INS_PMXVI8GER4 = 747,
    PPC_INS_PMXVI8GER4PP = 748,
    PPC_INS_PMXVI8GER4SPP = 749,
    PPC_INS_POPCNTB = 750,
    PPC_INS_POPCNTD = 751,
    PPC_INS_POPCNTW = 752,
    PPC_INS_DCBZ_L = 753,
    PPC_INS_PSQ_L = 754,
    PPC_INS_PSQ_LU = 755,
    PPC_INS_PSQ_LUX = 756,
    PPC_INS_PSQ_LX = 757,
    PPC_INS_PSQ_ST = 758,
    PPC_INS_PSQ_STU = 759,
    PPC_INS_PSQ_STUX = 760,
    PPC_INS_PSQ_STX = 761,
    PPC_INS_PSTB = 762,
    PPC_INS_PSTD = 763,
    PPC_INS_PSTFD = 764,
    PPC_INS_PSTFS = 765,
    PPC_INS_PSTH = 766,
    PPC_INS_PSTW = 767,
    PPC_INS_PSTXSD = 768,
    PPC_INS_PSTXSSP = 769,
    PPC_INS_PSTXV = 770,
    PPC_INS_PSTXVP = 771,
    PPC_INS_PS_ABS = 772,
    PPC_INS_PS_ADD = 773,
    PPC_INS_PS_CMPO0 = 774,
    PPC_INS_PS_CMPO1 = 775,
    PPC_INS_PS_CMPU0 = 776,
    PPC_INS_PS_CMPU1 = 777,
    PPC_INS_PS_DIV = 778,
    PPC_INS_PS_MADD = 779,
    PPC_INS_PS_MADDS0 = 780,
    PPC_INS_PS_MADDS1 = 781,
    PPC_INS_PS_MERGE00 = 782,
    PPC_INS_PS_MERGE01 = 783,
    PPC_INS_PS_MERGE10 = 784,
    PPC_INS_PS_MERGE11 = 785,
    PPC_INS_PS_MR = 786,
    PPC_INS_PS_MSUB = 787,
    PPC_INS_PS_MUL = 788,
    PPC_INS_PS_MULS0 = 789,
    PPC_INS_PS_MULS1 = 790,
    PPC_INS_PS_NABS = 791,
    PPC_INS_PS_NEG = 792,
    PPC_INS_PS_NMADD = 793,
    PPC_INS_PS_NMSUB = 794,
    PPC_INS_PS_RES = 795,
    PPC_INS_PS_RSQRTE = 796,
    PPC_INS_PS_SEL = 797,
    PPC_INS_PS_SUB = 798,
    PPC_INS_PS_SUM0 = 799,
    PPC_INS_PS_SUM1 = 800,
    PPC_INS_QVALIGNI = 801,
    PPC_INS_QVESPLATI = 802,
    PPC_INS_QVFABS = 803,
    PPC_INS_QVFADD = 804,
    PPC_INS_QVFADDS = 805,
    PPC_INS_QVFCFID = 806,
    PPC_INS_QVFCFIDS = 807,
    PPC_INS_QVFCFIDU = 808,
    PPC_INS_QVFCFIDUS = 809,
    PPC_INS_QVFCMPEQ = 810,
    PPC_INS_QVFCMPGT = 811,
    PPC_INS_QVFCMPLT = 812,
    PPC_INS_QVFCPSGN = 813,
    PPC_INS_QVFCTID = 814,
    PPC_INS_QVFCTIDU = 815,
    PPC_INS_QVFCTIDUZ = 816,
    PPC_INS_QVFCTIDZ = 817,
    PPC_INS_QVFCTIW = 818,
    PPC_INS_QVFCTIWU = 819,
    PPC_INS_QVFCTIWUZ = 820,
    PPC_INS_QVFCTIWZ = 821,
    PPC_INS_QVFLOGICAL = 822,
    PPC_INS_QVFMADD = 823,
    PPC_INS_QVFMADDS = 824,
    PPC_INS_QVFMR = 825,
    PPC_INS_QVFMSUB = 826,
    PPC_INS_QVFMSUBS = 827,
    PPC_INS_QVFMUL = 828,
    PPC_INS_QVFMULS = 829,
    PPC_INS_QVFNABS = 830,
    PPC_INS_QVFNEG = 831,
    PPC_INS_QVFNMADD = 832,
    PPC_INS_QVFNMADDS = 833,
    PPC_INS_QVFNMSUB = 834,
    PPC_INS_QVFNMSUBS = 835,
    PPC_INS_QVFPERM = 836,
    PPC_INS_QVFRE = 837,
    PPC_INS_QVFRES = 838,
    PPC_INS_QVFRIM = 839,
    PPC_INS_QVFRIN = 840,
    PPC_INS_QVFRIP = 841,
    PPC_INS_QVFRIZ = 842,
    PPC_INS_QVFRSP = 843,
    PPC_INS_QVFRSQRTE = 844,
    PPC_INS_QVFRSQRTES = 845,
    PPC_INS_QVFSEL = 846,
    PPC_INS_QVFSUB = 847,
    PPC_INS_QVFSUBS = 848,
    PPC_INS_QVFTSTNAN = 849,
    PPC_INS_QVFXMADD = 850,
    PPC_INS_QVFXMADDS = 851,
    PPC_INS_QVFXMUL = 852,
    PPC_INS_QVFXMULS = 853,
    PPC_INS_QVFXXCPNMADD = 854,
    PPC_INS_QVFXXCPNMADDS = 855,
    PPC_INS_QVFXXMADD = 856,
    PPC_INS_QVFXXMADDS = 857,
    PPC_INS_QVFXXNPMADD = 858,
    PPC_INS_QVFXXNPMADDS = 859,
    PPC_INS_QVGPCI = 860,
    PPC_INS_QVLFCDUX = 861,
    PPC_INS_QVLFCDUXA = 862,
    PPC_INS_QVLFCDX = 863,
    PPC_INS_QVLFCDXA = 864,
    PPC_INS_QVLFCSUX = 865,
    PPC_INS_QVLFCSUXA = 866,
    PPC_INS_QVLFCSX = 867,
    PPC_INS_QVLFCSXA = 868,
    PPC_INS_QVLFDUX = 869,
    PPC_INS_QVLFDUXA = 870,
    PPC_INS_QVLFDX = 871,
    PPC_INS_QVLFDXA = 872,
    PPC_INS_QVLFIWAX = 873,
    PPC_INS_QVLFIWAXA = 874,
    PPC_INS_QVLFIWZX = 875,
    PPC_INS_QVLFIWZXA = 876,
    PPC_INS_QVLFSUX = 877,
    PPC_INS_QVLFSUXA = 878,
    PPC_INS_QVLFSX = 879,
    PPC_INS_QVLFSXA = 880,
    PPC_INS_QVLPCLDX = 881,
    PPC_INS_QVLPCLSX = 882,
    PPC_INS_QVLPCRDX = 883,
    PPC_INS_QVLPCRSX = 884,
    PPC_INS_QVSTFCDUX = 885,
    PPC_INS_QVSTFCDUXA = 886,
    PPC_INS_QVSTFCDUXI = 887,
    PPC_INS_QVSTFCDUXIA = 888,
    PPC_INS_QVSTFCDX = 889,
    PPC_INS_QVSTFCDXA = 890,
    PPC_INS_QVSTFCDXI = 891,
    PPC_INS_QVSTFCDXIA = 892,
    PPC_INS_QVSTFCSUX = 893,
    PPC_INS_QVSTFCSUXA = 894,
    PPC_INS_QVSTFCSUXI = 895,
    PPC_INS_QVSTFCSUXIA = 896,
    PPC_INS_QVSTFCSX = 897,
    PPC_INS_QVSTFCSXA = 898,
    PPC_INS_QVSTFCSXI = 899,
    PPC_INS_QVSTFCSXIA = 900,
    PPC_INS_QVSTFDUX = 901,
    PPC_INS_QVSTFDUXA = 902,
    PPC_INS_QVSTFDUXI = 903,
    PPC_INS_QVSTFDUXIA = 904,
    PPC_INS_QVSTFDX = 905,
    PPC_INS_QVSTFDXA = 906,
    PPC_INS_QVSTFDXI = 907,
    PPC_INS_QVSTFDXIA = 908,
    PPC_INS_QVSTFIWX = 909,
    PPC_INS_QVSTFIWXA = 910,
    PPC_INS_QVSTFSUX = 911,
    PPC_INS_QVSTFSUXA = 912,
    PPC_INS_QVSTFSUXI = 913,
    PPC_INS_QVSTFSUXIA = 914,
    PPC_INS_QVSTFSX = 915,
    PPC_INS_QVSTFSXA = 916,
    PPC_INS_QVSTFSXI = 917,
    PPC_INS_QVSTFSXIA = 918,
    PPC_INS_RFCI = 919,
    PPC_INS_RFDI = 920,
    PPC_INS_RFEBB = 921,
    PPC_INS_RFI = 922,
    PPC_INS_RFID = 923,
    PPC_INS_RFMCI = 924,
    PPC_INS_RLDCL = 925,
    PPC_INS_RLDCR = 926,
    PPC_INS_RLDIC = 927,
    PPC_INS_RLDICL = 928,
    PPC_INS_RLDICR = 929,
    PPC_INS_RLDIMI = 930,
    PPC_INS_SC = 931,
    PPC_INS_SCV = 932,
    PPC_INS_SETB = 933,
    PPC_INS_SETBC = 934,
    PPC_INS_SETBCR = 935,
    PPC_INS_SETNBC = 936,
    PPC_INS_SETNBCR = 937,
    PPC_INS_SLBFEE = 938,
    PPC_INS_SLBIA = 939,
    PPC_INS_SLBIE = 940,
    PPC_INS_SLBIEG = 941,
    PPC_INS_SLBMFEE = 942,
    PPC_INS_SLBMFEV = 943,
    PPC_INS_SLBMTE = 944,
    PPC_INS_SLBSYNC = 945,
    PPC_INS_SLD = 946,
    PPC_INS_SLW = 947,
    PPC_INS_STW = 948,
    PPC_INS_STWX = 949,
    PPC_INS_SRAD = 950,
    PPC_INS_SRADI = 951,
    PPC_INS_SRAW = 952,
    PPC_INS_SRAWI = 953,
    PPC_INS_SRD = 954,
    PPC_INS_SRW = 955,
    PPC_INS_STB = 956,
    PPC_INS_STBCIX = 957,
    PPC_INS_STBCX = 958,
    PPC_INS_STBEPX = 959,
    PPC_INS_STBU = 960,
    PPC_INS_STBUX = 961,
    PPC_INS_STBX = 962,
    PPC_INS_STD = 963,
    PPC_INS_STDAT = 964,
    PPC_INS_STDBRX = 965,
    PPC_INS_STDCIX = 966,
    PPC_INS_STDCX = 967,
    PPC_INS_STDU = 968,
    PPC_INS_STDUX = 969,
    PPC_INS_STDX = 970,
    PPC_INS_STFD = 971,
    PPC_INS_STFDEPX = 972,
    PPC_INS_STFDU = 973,
    PPC_INS_STFDUX = 974,
    PPC_INS_STFDX = 975,
    PPC_INS_STFIWX = 976,
    PPC_INS_STFS = 977,
    PPC_INS_STFSU = 978,
    PPC_INS_STFSUX = 979,
    PPC_INS_STFSX = 980,
    PPC_INS_STH = 981,
    PPC_INS_STHBRX = 982,
    PPC_INS_STHCIX = 983,
    PPC_INS_STHCX = 984,
    PPC_INS_STHEPX = 985,
    PPC_INS_STHU = 986,
    PPC_INS_STHUX = 987,
    PPC_INS_STHX = 988,
    PPC_INS_STMW = 989,
    PPC_INS_STOP = 990,
    PPC_INS_STQ = 991,
    PPC_INS_STQCX = 992,
    PPC_INS_STSWI = 993,
    PPC_INS_STVEBX = 994,
    PPC_INS_STVEHX = 995,
    PPC_INS_STVEWX = 996,
    PPC_INS_STVX = 997,
    PPC_INS_STVXL = 998,
    PPC_INS_STWAT = 999,
    PPC_INS_STWBRX = 1000,
    PPC_INS_STWCIX = 1001,
    PPC_INS_STWCX = 1002,
    PPC_INS_STWEPX = 1003,
    PPC_INS_STWU = 1004,
    PPC_INS_STWUX = 1005,
    PPC_INS_STXSD = 1006,
    PPC_INS_STXSDX = 1007,
    PPC_INS_STXSIBX = 1008,
    PPC_INS_STXSIHX = 1009,
    PPC_INS_STXSIWX = 1010,
    PPC_INS_STXSSP = 1011,
    PPC_INS_STXSSPX = 1012,
    PPC_INS_STXV = 1013,
    PPC_INS_STXVB16X = 1014,
    PPC_INS_STXVD2X = 1015,
    PPC_INS_STXVH8X = 1016,
    PPC_INS_STXVL = 1017,
    PPC_INS_STXVLL = 1018,
    PPC_INS_STXVP = 1019,
    PPC_INS_STXVPRL = 1020,
    PPC_INS_STXVPRLL = 1021,
    PPC_INS_STXVPX = 1022,
    PPC_INS_STXVRBX = 1023,
    PPC_INS_STXVRDX = 1024,
    PPC_INS_STXVRHX = 1025,
    PPC_INS_STXVRL = 1026,
    PPC_INS_STXVRLL = 1027,
    PPC_INS_STXVRWX = 1028,
    PPC_INS_STXVW4X = 1029,
    PPC_INS_STXVX = 1030,
    PPC_INS_SUBF = 1031,
    PPC_INS_SUBFC = 1032,
    PPC_INS_SUBFCO = 1033,
    PPC_INS_SUBFE = 1034,
    PPC_INS_SUBFEO = 1035,
    PPC_INS_SUBFIC = 1036,
    PPC_INS_SUBFME = 1037,
    PPC_INS_SUBFMEO = 1038,
    PPC_INS_SUBFO = 1039,
    PPC_INS_SUBFUS = 1040,
    PPC_INS_SUBFZE = 1041,
    PPC_INS_SUBFZEO = 1042,
    PPC_INS_SYNC = 1043,
    PPC_INS_TABORT = 1044,
    PPC_INS_TABORTDC = 1045,
    PPC_INS_TABORTDCI = 1046,
    PPC_INS_TABORTWC = 1047,
    PPC_INS_TABORTWCI = 1048,
    PPC_INS_TBEGIN = 1049,
    PPC_INS_TCHECK = 1050,
    PPC_INS_TD = 1051,
    PPC_INS_TDI = 1052,
    PPC_INS_TEND = 1053,
    PPC_INS_TLBIA = 1054,
    PPC_INS_TLBIE = 1055,
    PPC_INS_TLBIEL = 1056,
    PPC_INS_TLBILX = 1057,
    PPC_INS_TLBIVAX = 1058,
    PPC_INS_TLBLD = 1059,
    PPC_INS_TLBLI = 1060,
    PPC_INS_TLBRE = 1061,
    PPC_INS_TLBSX = 1062,
    PPC_INS_TLBSYNC = 1063,
    PPC_INS_TLBWE = 1064,
    PPC_INS_TRAP = 1065,
    PPC_INS_TRECHKPT = 1066,
    PPC_INS_TRECLAIM = 1067,
    PPC_INS_TSR = 1068,
    PPC_INS_TW = 1069,
    PPC_INS_TWI = 1070,
    PPC_INS_VABSDUB = 1071,
    PPC_INS_VABSDUH = 1072,
    PPC_INS_VABSDUW = 1073,
    PPC_INS_VADDCUQ = 1074,
    PPC_INS_VADDCUW = 1075,
    PPC_INS_VADDECUQ = 1076,
    PPC_INS_VADDEUQM = 1077,
    PPC_INS_VADDFP = 1078,
    PPC_INS_VADDSBS = 1079,
    PPC_INS_VADDSHS = 1080,
    PPC_INS_VADDSWS = 1081,
    PPC_INS_VADDUBM = 1082,
    PPC_INS_VADDUBS = 1083,
    PPC_INS_VADDUDM = 1084,
    PPC_INS_VADDUHM = 1085,
    PPC_INS_VADDUHS = 1086,
    PPC_INS_VADDUQM = 1087,
    PPC_INS_VADDUWM = 1088,
    PPC_INS_VADDUWS = 1089,
    PPC_INS_VAND = 1090,
    PPC_INS_VANDC = 1091,
    PPC_INS_VAVGSB = 1092,
    PPC_INS_VAVGSH = 1093,
    PPC_INS_VAVGSW = 1094,
    PPC_INS_VAVGUB = 1095,
    PPC_INS_VAVGUH = 1096,
    PPC_INS_VAVGUW = 1097,
    PPC_INS_VBPERMD = 1098,
    PPC_INS_VBPERMQ = 1099,
    PPC_INS_VCFSX = 1100,
    PPC_INS_VCFUGED = 1101,
    PPC_INS_VCFUX = 1102,
    PPC_INS_VCIPHER = 1103,
    PPC_INS_VCIPHERLAST = 1104,
    PPC_INS_VCLRLB = 1105,
    PPC_INS_VCLRRB = 1106,
    PPC_INS_VCLZB = 1107,
    PPC_INS_VCLZD = 1108,
    PPC_INS_VCLZDM = 1109,
    PPC_INS_VCLZH = 1110,
    PPC_INS_VCLZLSBB = 1111,
    PPC_INS_VCLZW = 1112,
    PPC_INS_VCMPBFP = 1113,
    PPC_INS_VCMPEQFP = 1114,
    PPC_INS_VCMPEQUB = 1115,
    PPC_INS_VCMPEQUD = 1116,
    PPC_INS_VCMPEQUH = 1117,
    PPC_INS_VCMPEQUQ = 1118,
    PPC_INS_VCMPEQUW = 1119,
    PPC_INS_VCMPGEFP = 1120,
    PPC_INS_VCMPGTFP = 1121,
    PPC_INS_VCMPGTSB = 1122,
    PPC_INS_VCMPGTSD = 1123,
    PPC_INS_VCMPGTSH = 1124,
    PPC_INS_VCMPGTSQ = 1125,
    PPC_INS_VCMPGTSW = 1126,
    PPC_INS_VCMPGTUB = 1127,
    PPC_INS_VCMPGTUD = 1128,
    PPC_INS_VCMPGTUH = 1129,
    PPC_INS_VCMPGTUQ = 1130,
    PPC_INS_VCMPGTUW = 1131,
    PPC_INS_VCMPNEB = 1132,
    PPC_INS_VCMPNEH = 1133,
    PPC_INS_VCMPNEW = 1134,
    PPC_INS_VCMPNEZB = 1135,
    PPC_INS_VCMPNEZH = 1136,
    PPC_INS_VCMPNEZW = 1137,
    PPC_INS_VCMPSQ = 1138,
    PPC_INS_VCMPUQ = 1139,
    PPC_INS_VCNTMBB = 1140,
    PPC_INS_VCNTMBD = 1141,
    PPC_INS_VCNTMBH = 1142,
    PPC_INS_VCNTMBW = 1143,
    PPC_INS_VCTSXS = 1144,
    PPC_INS_VCTUXS = 1145,
    PPC_INS_VCTZB = 1146,
    PPC_INS_VCTZD = 1147,
    PPC_INS_VCTZDM = 1148,
    PPC_INS_VCTZH = 1149,
    PPC_INS_VCTZLSBB = 1150,
    PPC_INS_VCTZW = 1151,
    PPC_INS_VDIVESD = 1152,
    PPC_INS_VDIVESQ = 1153,
    PPC_INS_VDIVESW = 1154,
    PPC_INS_VDIVEUD = 1155,
    PPC_INS_VDIVEUQ = 1156,
    PPC_INS_VDIVEUW = 1157,
    PPC_INS_VDIVSD = 1158,
    PPC_INS_VDIVSQ = 1159,
    PPC_INS_VDIVSW = 1160,
    PPC_INS_VDIVUD = 1161,
    PPC_INS_VDIVUQ = 1162,
    PPC_INS_VDIVUW = 1163,
    PPC_INS_VEQV = 1164,
    PPC_INS_VEXPANDBM = 1165,
    PPC_INS_VEXPANDDM = 1166,
    PPC_INS_VEXPANDHM = 1167,
    PPC_INS_VEXPANDQM = 1168,
    PPC_INS_VEXPANDWM = 1169,
    PPC_INS_VEXPTEFP = 1170,
    PPC_INS_VEXTDDVLX = 1171,
    PPC_INS_VEXTDDVRX = 1172,
    PPC_INS_VEXTDUBVLX = 1173,
    PPC_INS_VEXTDUBVRX = 1174,
    PPC_INS_VEXTDUHVLX = 1175,
    PPC_INS_VEXTDUHVRX = 1176,
    PPC_INS_VEXTDUWVLX = 1177,
    PPC_INS_VEXTDUWVRX = 1178,
    PPC_INS_VEXTRACTBM = 1179,
    PPC_INS_VEXTRACTD = 1180,
    PPC_INS_VEXTRACTDM = 1181,
    PPC_INS_VEXTRACTHM = 1182,
    PPC_INS_VEXTRACTQM = 1183,
    PPC_INS_VEXTRACTUB = 1184,
    PPC_INS_VEXTRACTUH = 1185,
    PPC_INS_VEXTRACTUW = 1186,
    PPC_INS_VEXTRACTWM = 1187,
    PPC_INS_VEXTSB2D = 1188,
    PPC_INS_VEXTSB2W = 1189,
    PPC_INS_VEXTSD2Q = 1190,
    PPC_INS_VEXTSH2D = 1191,
    PPC_INS_VEXTSH2W = 1192,
    PPC_INS_VEXTSW2D = 1193,
    PPC_INS_VEXTUBLX = 1194,
    PPC_INS_VEXTUBRX = 1195,
    PPC_INS_VEXTUHLX = 1196,
    PPC_INS_VEXTUHRX = 1197,
    PPC_INS_VEXTUWLX = 1198,
    PPC_INS_VEXTUWRX = 1199,
    PPC_INS_VGBBD = 1200,
    PPC_INS_VGNB = 1201,
    PPC_INS_VINSBLX = 1202,
    PPC_INS_VINSBRX = 1203,
    PPC_INS_VINSBVLX = 1204,
    PPC_INS_VINSBVRX = 1205,
    PPC_INS_VINSD = 1206,
    PPC_INS_VINSDLX = 1207,
    PPC_INS_VINSDRX = 1208,
    PPC_INS_VINSERTB = 1209,
    PPC_INS_VINSERTD = 1210,
    PPC_INS_VINSERTH = 1211,
    PPC_INS_VINSERTW = 1212,
    PPC_INS_VINSHLX = 1213,
    PPC_INS_VINSHRX = 1214,
    PPC_INS_VINSHVLX = 1215,
    PPC_INS_VINSHVRX = 1216,
    PPC_INS_VINSW = 1217,
    PPC_INS_VINSWLX = 1218,
    PPC_INS_VINSWRX = 1219,
    PPC_INS_VINSWVLX = 1220,
    PPC_INS_VINSWVRX = 1221,
    PPC_INS_VLOGEFP = 1222,
    PPC_INS_VMADDFP = 1223,
    PPC_INS_VMAXFP = 1224,
    PPC_INS_VMAXSB = 1225,
    PPC_INS_VMAXSD = 1226,
    PPC_INS_VMAXSH = 1227,
    PPC_INS_VMAXSW = 1228,
    PPC_INS_VMAXUB = 1229,
    PPC_INS_VMAXUD = 1230,
    PPC_INS_VMAXUH = 1231,
    PPC_INS_VMAXUW = 1232,
    PPC_INS_VMHADDSHS = 1233,
    PPC_INS_VMHRADDSHS = 1234,
    PPC_INS_VMINFP = 1235,
    PPC_INS_VMINSB = 1236,
    PPC_INS_VMINSD = 1237,
    PPC_INS_VMINSH = 1238,
    PPC_INS_VMINSW = 1239,
    PPC_INS_VMINUB = 1240,
    PPC_INS_VMINUD = 1241,
    PPC_INS_VMINUH = 1242,
    PPC_INS_VMINUW = 1243,
    PPC_INS_VMLADDUHM = 1244,
    PPC_INS_VMODSD = 1245,
    PPC_INS_VMODSQ = 1246,
    PPC_INS_VMODSW = 1247,
    PPC_INS_VMODUD = 1248,
    PPC_INS_VMODUQ = 1249,
    PPC_INS_VMODUW = 1250,
    PPC_INS_VMRGEW = 1251,
    PPC_INS_VMRGHB = 1252,
    PPC_INS_VMRGHH = 1253,
    PPC_INS_VMRGHW = 1254,
    PPC_INS_VMRGLB = 1255,
    PPC_INS_VMRGLH = 1256,
    PPC_INS_VMRGLW = 1257,
    PPC_INS_VMRGOW = 1258,
    PPC_INS_VMSUMCUD = 1259,
    PPC_INS_VMSUMMBM = 1260,
    PPC_INS_VMSUMSHM = 1261,
    PPC_INS_VMSUMSHS = 1262,
    PPC_INS_VMSUMUBM = 1263,
    PPC_INS_VMSUMUDM = 1264,
    PPC_INS_VMSUMUHM = 1265,
    PPC_INS_VMSUMUHS = 1266,
    PPC_INS_VMUL10CUQ = 1267,
    PPC_INS_VMUL10ECUQ = 1268,
    PPC_INS_VMUL10EUQ = 1269,
    PPC_INS_VMUL10UQ = 1270,
    PPC_INS_VMULESB = 1271,
    PPC_INS_VMULESD = 1272,
    PPC_INS_VMULESH = 1273,
    PPC_INS_VMULESW = 1274,
    PPC_INS_VMULEUB = 1275,
    PPC_INS_VMULEUD = 1276,
    PPC_INS_VMULEUH = 1277,
    PPC_INS_VMULEUW = 1278,
    PPC_INS_VMULHSD = 1279,
    PPC_INS_VMULHSW = 1280,
    PPC_INS_VMULHUD = 1281,
    PPC_INS_VMULHUW = 1282,
    PPC_INS_VMULLD = 1283,
    PPC_INS_VMULOSB = 1284,
    PPC_INS_VMULOSD = 1285,
    PPC_INS_VMULOSH = 1286,
    PPC_INS_VMULOSW = 1287,
    PPC_INS_VMULOUB = 1288,
    PPC_INS_VMULOUD = 1289,
    PPC_INS_VMULOUH = 1290,
    PPC_INS_VMULOUW = 1291,
    PPC_INS_VMULUWM = 1292,
    PPC_INS_VNAND = 1293,
    PPC_INS_VNCIPHER = 1294,
    PPC_INS_VNCIPHERLAST = 1295,
    PPC_INS_VNEGD = 1296,
    PPC_INS_VNEGW = 1297,
    PPC_INS_VNMSUBFP = 1298,
    PPC_INS_VNOR = 1299,
    PPC_INS_VOR = 1300,
    PPC_INS_VORC = 1301,
    PPC_INS_VPDEPD = 1302,
    PPC_INS_VPERM = 1303,
    PPC_INS_VPERMR = 1304,
    PPC_INS_VPERMXOR = 1305,
    PPC_INS_VPEXTD = 1306,
    PPC_INS_VPKPX = 1307,
    PPC_INS_VPKSDSS = 1308,
    PPC_INS_VPKSDUS = 1309,
    PPC_INS_VPKSHSS = 1310,
    PPC_INS_VPKSHUS = 1311,
    PPC_INS_VPKSWSS = 1312,
    PPC_INS_VPKSWUS = 1313,
    PPC_INS_VPKUDUM = 1314,
    PPC_INS_VPKUDUS = 1315,
    PPC_INS_VPKUHUM = 1316,
    PPC_INS_VPKUHUS = 1317,
    PPC_INS_VPKUWUM = 1318,
    PPC_INS_VPKUWUS = 1319,
    PPC_INS_VPMSUMB = 1320,
    PPC_INS_VPMSUMD = 1321,
    PPC_INS_VPMSUMH = 1322,
    PPC_INS_VPMSUMW = 1323,
    PPC_INS_VPOPCNTB = 1324,
    PPC_INS_VPOPCNTD = 1325,
    PPC_INS_VPOPCNTH = 1326,
    PPC_INS_VPOPCNTW = 1327,
    PPC_INS_VPRTYBD = 1328,
    PPC_INS_VPRTYBQ = 1329,
    PPC_INS_VPRTYBW = 1330,
    PPC_INS_VREFP = 1331,
    PPC_INS_VRFIM = 1332,
    PPC_INS_VRFIN = 1333,
    PPC_INS_VRFIP = 1334,
    PPC_INS_VRFIZ = 1335,
    PPC_INS_VRLB = 1336,
    PPC_INS_VRLD = 1337,
    PPC_INS_VRLDMI = 1338,
    PPC_INS_VRLDNM = 1339,
    PPC_INS_VRLH = 1340,
    PPC_INS_VRLQ = 1341,
    PPC_INS_VRLQMI = 1342,
    PPC_INS_VRLQNM = 1343,
    PPC_INS_VRLW = 1344,
    PPC_INS_VRLWMI = 1345,
    PPC_INS_VRLWNM = 1346,
    PPC_INS_VRSQRTEFP = 1347,
    PPC_INS_VSBOX = 1348,
    PPC_INS_VSEL = 1349,
    PPC_INS_VSHASIGMAD = 1350,
    PPC_INS_VSHASIGMAW = 1351,
    PPC_INS_VSL = 1352,
    PPC_INS_VSLB = 1353,
    PPC_INS_VSLD = 1354,
    PPC_INS_VSLDBI = 1355,
    PPC_INS_VSLDOI = 1356,
    PPC_INS_VSLH = 1357,
    PPC_INS_VSLO = 1358,
    PPC_INS_VSLQ = 1359,
    PPC_INS_VSLV = 1360,
    PPC_INS_VSLW = 1361,
    PPC_INS_VSPLTB = 1362,
    PPC_INS_VSPLTH = 1363,
    PPC_INS_VSPLTISB = 1364,
    PPC_INS_VSPLTISH = 1365,
    PPC_INS_VSPLTISW = 1366,
    PPC_INS_VSPLTW = 1367,
    PPC_INS_VSR = 1368,
    PPC_INS_VSRAB = 1369,
    PPC_INS_VSRAD = 1370,
    PPC_INS_VSRAH = 1371,
    PPC_INS_VSRAQ = 1372,
    PPC_INS_VSRAW = 1373,
    PPC_INS_VSRB = 1374,
    PPC_INS_VSRD = 1375,
    PPC_INS_VSRDBI = 1376,
    PPC_INS_VSRH = 1377,
    PPC_INS_VSRO = 1378,
    PPC_INS_VSRQ = 1379,
    PPC_INS_VSRV = 1380,
    PPC_INS_VSRW = 1381,
    PPC_INS_VSTRIBL = 1382,
    PPC_INS_VSTRIBR = 1383,
    PPC_INS_VSTRIHL = 1384,
    PPC_INS_VSTRIHR = 1385,
    PPC_INS_VSUBCUQ = 1386,
    PPC_INS_VSUBCUW = 1387,
    PPC_INS_VSUBECUQ = 1388,
    PPC_INS_VSUBEUQM = 1389,
    PPC_INS_VSUBFP = 1390,
    PPC_INS_VSUBSBS = 1391,
    PPC_INS_VSUBSHS = 1392,
    PPC_INS_VSUBSWS = 1393,
    PPC_INS_VSUBUBM = 1394,
    PPC_INS_VSUBUBS = 1395,
    PPC_INS_VSUBUDM = 1396,
    PPC_INS_VSUBUHM = 1397,
    PPC_INS_VSUBUHS = 1398,
    PPC_INS_VSUBUQM = 1399,
    PPC_INS_VSUBUWM = 1400,
    PPC_INS_VSUBUWS = 1401,
    PPC_INS_VSUM2SWS = 1402,
    PPC_INS_VSUM4SBS = 1403,
    PPC_INS_VSUM4SHS = 1404,
    PPC_INS_VSUM4UBS = 1405,
    PPC_INS_VSUMSWS = 1406,
    PPC_INS_VUPKHPX = 1407,
    PPC_INS_VUPKHSB = 1408,
    PPC_INS_VUPKHSH = 1409,
    PPC_INS_VUPKHSW = 1410,
    PPC_INS_VUPKLPX = 1411,
    PPC_INS_VUPKLSB = 1412,
    PPC_INS_VUPKLSH = 1413,
    PPC_INS_VUPKLSW = 1414,
    PPC_INS_VXOR = 1415,
    PPC_INS_WAIT = 1416,
    PPC_INS_WRTEE = 1417,
    PPC_INS_WRTEEI = 1418,
    PPC_INS_XOR = 1419,
    PPC_INS_XORI = 1420,
    PPC_INS_XORIS = 1421,
    PPC_INS_XSABSDP = 1422,
    PPC_INS_XSABSQP = 1423,
    PPC_INS_XSADDDP = 1424,
    PPC_INS_XSADDQP = 1425,
    PPC_INS_XSADDQPO = 1426,
    PPC_INS_XSADDSP = 1427,
    PPC_INS_XSCMPEQDP = 1428,
    PPC_INS_XSCMPEQQP = 1429,
    PPC_INS_XSCMPEXPDP = 1430,
    PPC_INS_XSCMPEXPQP = 1431,
    PPC_INS_XSCMPGEDP = 1432,
    PPC_INS_XSCMPGEQP = 1433,
    PPC_INS_XSCMPGTDP = 1434,
    PPC_INS_XSCMPGTQP = 1435,
    PPC_INS_XSCMPODP = 1436,
    PPC_INS_XSCMPOQP = 1437,
    PPC_INS_XSCMPUDP = 1438,
    PPC_INS_XSCMPUQP = 1439,
    PPC_INS_XSCPSGNDP = 1440,
    PPC_INS_XSCPSGNQP = 1441,
    PPC_INS_XSCVDPHP = 1442,
    PPC_INS_XSCVDPQP = 1443,
    PPC_INS_XSCVDPSP = 1444,
    PPC_INS_XSCVDPSPN = 1445,
    PPC_INS_XSCVDPSXDS = 1446,
    PPC_INS_XSCVDPSXWS = 1447,
    PPC_INS_XSCVDPUXDS = 1448,
    PPC_INS_XSCVDPUXWS = 1449,
    PPC_INS_XSCVHPDP = 1450,
    PPC_INS_XSCVQPDP = 1451,
    PPC_INS_XSCVQPDPO = 1452,
    PPC_INS_XSCVQPSDZ = 1453,
    PPC_INS_XSCVQPSQZ = 1454,
    PPC_INS_XSCVQPSWZ = 1455,
    PPC_INS_XSCVQPUDZ = 1456,
    PPC_INS_XSCVQPUQZ = 1457,
    PPC_INS_XSCVQPUWZ = 1458,
    PPC_INS_XSCVSDQP = 1459,
    PPC_INS_XSCVSPDP = 1460,
    PPC_INS_XSCVSPDPN = 1461,
    PPC_INS_XSCVSQQP = 1462,
    PPC_INS_XSCVSXDDP = 1463,
    PPC_INS_XSCVSXDSP = 1464,
    PPC_INS_XSCVUDQP = 1465,
    PPC_INS_XSCVUQQP = 1466,
    PPC_INS_XSCVUXDDP = 1467,
    PPC_INS_XSCVUXDSP = 1468,
    PPC_INS_XSDIVDP = 1469,
    PPC_INS_XSDIVQP = 1470,
    PPC_INS_XSDIVQPO = 1471,
    PPC_INS_XSDIVSP = 1472,
    PPC_INS_XSIEXPDP = 1473,
    PPC_INS_XSIEXPQP = 1474,
    PPC_INS_XSMADDADP = 1475,
    PPC_INS_XSMADDASP = 1476,
    PPC_INS_XSMADDMDP = 1477,
    PPC_INS_XSMADDMSP = 1478,
    PPC_INS_XSMADDQP = 1479,
    PPC_INS_XSMADDQPO = 1480,
    PPC_INS_XSMAXCDP = 1481,
    PPC_INS_XSMAXCQP = 1482,
    PPC_INS_XSMAXDP = 1483,
    PPC_INS_XSMAXJDP = 1484,
    PPC_INS_XSMINCDP = 1485,
    PPC_INS_XSMINCQP = 1486,
    PPC_INS_XSMINDP = 1487,
    PPC_INS_XSMINJDP = 1488,
    PPC_INS_XSMSUBADP = 1489,
    PPC_INS_XSMSUBASP = 1490,
    PPC_INS_XSMSUBMDP = 1491,
    PPC_INS_XSMSUBMSP = 1492,
    PPC_INS_XSMSUBQP = 1493,
    PPC_INS_XSMSUBQPO = 1494,
    PPC_INS_XSMULDP = 1495,
    PPC_INS_XSMULQP = 1496,
    PPC_INS_XSMULQPO = 1497,
    PPC_INS_XSMULSP = 1498,
    PPC_INS_XSNABSDP = 1499,
    PPC_INS_XSNABSQP = 1500,
    PPC_INS_XSNEGDP = 1501,
    PPC_INS_XSNEGQP = 1502,
    PPC_INS_XSNMADDADP = 1503,
    PPC_INS_XSNMADDASP = 1504,
    PPC_INS_XSNMADDMDP = 1505,
    PPC_INS_XSNMADDMSP = 1506,
    PPC_INS_XSNMADDQP = 1507,
    PPC_INS_XSNMADDQPO = 1508,
    PPC_INS_XSNMSUBADP = 1509,
    PPC_INS_XSNMSUBASP = 1510,
    PPC_INS_XSNMSUBMDP = 1511,
    PPC_INS_XSNMSUBMSP = 1512,
    PPC_INS_XSNMSUBQP = 1513,
    PPC_INS_XSNMSUBQPO = 1514,
    PPC_INS_XSRDPI = 1515,
    PPC_INS_XSRDPIC = 1516,
    PPC_INS_XSRDPIM = 1517,
    PPC_INS_XSRDPIP = 1518,
    PPC_INS_XSRDPIZ = 1519,
    PPC_INS_XSREDP = 1520,
    PPC_INS_XSRESP = 1521,
    PPC_INS_XSRQPI = 1522,
    PPC_INS_XSRQPIX = 1523,
    PPC_INS_XSRQPXP = 1524,
    PPC_INS_XSRSP = 1525,
    PPC_INS_XSRSQRTEDP = 1526,
    PPC_INS_XSRSQRTESP = 1527,
    PPC_INS_XSSQRTDP = 1528,
    PPC_INS_XSSQRTQP = 1529,
    PPC_INS_XSSQRTQPO = 1530,
    PPC_INS_XSSQRTSP = 1531,
    PPC_INS_XSSUBDP = 1532,
    PPC_INS_XSSUBQP = 1533,
    PPC_INS_XSSUBQPO = 1534,
    PPC_INS_XSSUBSP = 1535,
    PPC_INS_XSTDIVDP = 1536,
    PPC_INS_XSTSQRTDP = 1537,
    PPC_INS_XSTSTDCDP = 1538,
    PPC_INS_XSTSTDCQP = 1539,
    PPC_INS_XSTSTDCSP = 1540,
    PPC_INS_XSXEXPDP = 1541,
    PPC_INS_XSXEXPQP = 1542,
    PPC_INS_XSXSIGDP = 1543,
    PPC_INS_XSXSIGQP = 1544,
    PPC_INS_XVABSDP = 1545,
    PPC_INS_XVABSSP = 1546,
    PPC_INS_XVADDDP = 1547,
    PPC_INS_XVADDSP = 1548,
    PPC_INS_XVBF16GER2 = 1549,
    PPC_INS_XVBF16GER2NN = 1550,
    PPC_INS_XVBF16GER2NP = 1551,
    PPC_INS_XVBF16GER2PN = 1552,
    PPC_INS_XVBF16GER2PP = 1553,
    PPC_INS_XVCMPEQDP = 1554,
    PPC_INS_XVCMPEQSP = 1555,
    PPC_INS_XVCMPGEDP = 1556,
    PPC_INS_XVCMPGESP = 1557,
    PPC_INS_XVCMPGTDP = 1558,
    PPC_INS_XVCMPGTSP = 1559,
    PPC_INS_XVCPSGNDP = 1560,
    PPC_INS_XVCPSGNSP = 1561,
    PPC_INS_XVCVBF16SPN = 1562,
    PPC_INS_XVCVDPSP = 1563,
    PPC_INS_XVCVDPSXDS = 1564,
    PPC_INS_XVCVDPSXWS = 1565,
    PPC_INS_XVCVDPUXDS = 1566,
    PPC_INS_XVCVDPUXWS = 1567,
    PPC_INS_XVCVHPSP = 1568,
    PPC_INS_XVCVSPBF16 = 1569,
    PPC_INS_XVCVSPDP = 1570,
    PPC_INS_XVCVSPHP = 1571,
    PPC_INS_XVCVSPSXDS = 1572,
    PPC_INS_XVCVSPSXWS = 1573,
    PPC_INS_XVCVSPUXDS = 1574,
    PPC_INS_XVCVSPUXWS = 1575,
    PPC_INS_XVCVSXDDP = 1576,
    PPC_INS_XVCVSXDSP = 1577,
    PPC_INS_XVCVSXWDP = 1578,
    PPC_INS_XVCVSXWSP = 1579,
    PPC_INS_XVCVUXDDP = 1580,
    PPC_INS_XVCVUXDSP = 1581,
    PPC_INS_XVCVUXWDP = 1582,
    PPC_INS_XVCVUXWSP = 1583,
    PPC_INS_XVDIVDP = 1584,
    PPC_INS_XVDIVSP = 1585,
    PPC_INS_XVF16GER2 = 1586,
    PPC_INS_XVF16GER2NN = 1587,
    PPC_INS_XVF16GER2NP = 1588,
    PPC_INS_XVF16GER2PN = 1589,
    PPC_INS_XVF16GER2PP = 1590,
    PPC_INS_XVF32GER = 1591,
    PPC_INS_XVF32GERNN = 1592,
    PPC_INS_XVF32GERNP = 1593,
    PPC_INS_XVF32GERPN = 1594,
    PPC_INS_XVF32GERPP = 1595,
    PPC_INS_XVF64GER = 1596,
    PPC_INS_XVF64GERNN = 1597,
    PPC_INS_XVF64GERNP = 1598,
    PPC_INS_XVF64GERPN = 1599,
    PPC_INS_XVF64GERPP = 1600,
    PPC_INS_XVI16GER2 = 1601,
    PPC_INS_XVI16GER2PP = 1602,
    PPC_INS_XVI16GER2S = 1603,
    PPC_INS_XVI16GER2SPP = 1604,
    PPC_INS_XVI4GER8 = 1605,
    PPC_INS_XVI4GER8PP = 1606,
    PPC_INS_XVI8GER4 = 1607,
    PPC_INS_XVI8GER4PP = 1608,
    PPC_INS_XVI8GER4SPP = 1609,
    PPC_INS_XVIEXPDP = 1610,
    PPC_INS_XVIEXPSP = 1611,
    PPC_INS_XVMADDADP = 1612,
    PPC_INS_XVMADDASP = 1613,
    PPC_INS_XVMADDMDP = 1614,
    PPC_INS_XVMADDMSP = 1615,
    PPC_INS_XVMAXDP = 1616,
    PPC_INS_XVMAXSP = 1617,
    PPC_INS_XVMINDP = 1618,
    PPC_INS_XVMINSP = 1619,
    PPC_INS_XVMSUBADP = 1620,
    PPC_INS_XVMSUBASP = 1621,
    PPC_INS_XVMSUBMDP = 1622,
    PPC_INS_XVMSUBMSP = 1623,
    PPC_INS_XVMULDP = 1624,
    PPC_INS_XVMULSP = 1625,
    PPC_INS_XVNABSDP = 1626,
    PPC_INS_XVNABSSP = 1627,
    PPC_INS_XVNEGDP = 1628,
    PPC_INS_XVNEGSP = 1629,
    PPC_INS_XVNMADDADP = 1630,
    PPC_INS_XVNMADDASP = 1631,
    PPC_INS_XVNMADDMDP = 1632,
    PPC_INS_XVNMADDMSP = 1633,
    PPC_INS_XVNMSUBADP = 1634,
    PPC_INS_XVNMSUBASP = 1635,
    PPC_INS_XVNMSUBMDP = 1636,
    PPC_INS_XVNMSUBMSP = 1637,
    PPC_INS_XVRDPI = 1638,
    PPC_INS_XVRDPIC = 1639,
    PPC_INS_XVRDPIM = 1640,
    PPC_INS_XVRDPIP = 1641,
    PPC_INS_XVRDPIZ = 1642,
    PPC_INS_XVREDP = 1643,
    PPC_INS_XVRESP = 1644,
    PPC_INS_XVRSPI = 1645,
    PPC_INS_XVRSPIC = 1646,
    PPC_INS_XVRSPIM = 1647,
    PPC_INS_XVRSPIP = 1648,
    PPC_INS_XVRSPIZ = 1649,
    PPC_INS_XVRSQRTEDP = 1650,
    PPC_INS_XVRSQRTESP = 1651,
    PPC_INS_XVSQRTDP = 1652,
    PPC_INS_XVSQRTSP = 1653,
    PPC_INS_XVSUBDP = 1654,
    PPC_INS_XVSUBSP = 1655,
    PPC_INS_XVTDIVDP = 1656,
    PPC_INS_XVTDIVSP = 1657,
    PPC_INS_XVTLSBB = 1658,
    PPC_INS_XVTSQRTDP = 1659,
    PPC_INS_XVTSQRTSP = 1660,
    PPC_INS_XVTSTDCDP = 1661,
    PPC_INS_XVTSTDCSP = 1662,
    PPC_INS_XVXEXPDP = 1663,
    PPC_INS_XVXEXPSP = 1664,
    PPC_INS_XVXSIGDP = 1665,
    PPC_INS_XVXSIGSP = 1666,
    PPC_INS_XXBLENDVB = 1667,
    PPC_INS_XXBLENDVD = 1668,
    PPC_INS_XXBLENDVH = 1669,
    PPC_INS_XXBLENDVW = 1670,
    PPC_INS_XXBRD = 1671,
    PPC_INS_XXBRH = 1672,
    PPC_INS_XXBRQ = 1673,
    PPC_INS_XXBRW = 1674,
    PPC_INS_XXEVAL = 1675,
    PPC_INS_XXEXTRACTUW = 1676,
    PPC_INS_XXGENPCVBM = 1677,
    PPC_INS_XXGENPCVDM = 1678,
    PPC_INS_XXGENPCVHM = 1679,
    PPC_INS_XXGENPCVWM = 1680,
    PPC_INS_XXINSERTW = 1681,
    PPC_INS_XXLAND = 1682,
    PPC_INS_XXLANDC = 1683,
    PPC_INS_XXLEQV = 1684,
    PPC_INS_XXLNAND = 1685,
    PPC_INS_XXLNOR = 1686,
    PPC_INS_XXLOR = 1687,
    PPC_INS_XXLORC = 1688,
    PPC_INS_XXLXOR = 1689,
    PPC_INS_XXMFACC = 1690,
    PPC_INS_XXMRGHW = 1691,
    PPC_INS_XXMRGLW = 1692,
    PPC_INS_XXMTACC = 1693,
    PPC_INS_XXPERM = 1694,
    PPC_INS_XXPERMDI = 1695,
    PPC_INS_XXPERMR = 1696,
    PPC_INS_XXPERMX = 1697,
    PPC_INS_XXSEL = 1698,
    PPC_INS_XXSETACCZ = 1699,
    PPC_INS_XXSLDWI = 1700,
    PPC_INS_XXSPLTI32DX = 1701,
    PPC_INS_XXSPLTIB = 1702,
    PPC_INS_XXSPLTIDP = 1703,
    PPC_INS_XXSPLTIW = 1704,
    PPC_INS_XXSPLTW = 1705,
    PPC_INS_BC = 1706,
    PPC_INS_BCA = 1707,
    PPC_INS_BCCTR = 1708,
    PPC_INS_BCCTRL = 1709,
    PPC_INS_BCL = 1710,
    PPC_INS_BCLA = 1711,
    PPC_INS_BCLR = 1712,
    PPC_INS_BCLRL = 1713,
    PPC_INS_ENDING = 1714,
    PPC_INS_ALIAS_BEGIN = 1715,
    PPC_INS_ALIAS_RFEBB = 1716,
    PPC_INS_ALIAS_LI = 1717,
    PPC_INS_ALIAS_LIS = 1718,
    PPC_INS_ALIAS_MR = 1719,
    PPC_INS_ALIAS_MR_ = 1720,
    PPC_INS_ALIAS_NOT = 1721,
    PPC_INS_ALIAS_NOT_ = 1722,
    PPC_INS_ALIAS_NOP = 1723,
    PPC_INS_ALIAS_MTUDSCR = 1724,
    PPC_INS_ALIAS_MFUDSCR = 1725,
    PPC_INS_ALIAS_MTVRSAVE = 1726,
    PPC_INS_ALIAS_MFVRSAVE = 1727,
    PPC_INS_ALIAS_MTCR = 1728,
    PPC_INS_ALIAS_SUB = 1729,
    PPC_INS_ALIAS_SUB_ = 1730,
    PPC_INS_ALIAS_SUBC = 1731,
    PPC_INS_ALIAS_SUBC_ = 1732,
    PPC_INS_ALIAS_VMR = 1733,
    PPC_INS_ALIAS_VNOT = 1734,
    PPC_INS_ALIAS_ROTLWI = 1735,
    PPC_INS_ALIAS_ROTLWI_ = 1736,
    PPC_INS_ALIAS_ROTLW = 1737,
    PPC_INS_ALIAS_ROTLW_ = 1738,
    PPC_INS_ALIAS_CLRLWI = 1739,
    PPC_INS_ALIAS_CLRLWI_ = 1740,
    PPC_INS_ALIAS_ISELLT = 1741,
    PPC_INS_ALIAS_ISELGT = 1742,
    PPC_INS_ALIAS_ISELEQ = 1743,
    PPC_INS_ALIAS_XNOP = 1744,
    PPC_INS_ALIAS_CNTLZW = 1745,
    PPC_INS_ALIAS_CNTLZW_ = 1746,
    PPC_INS_ALIAS_MTXER = 1747,
    PPC_INS_ALIAS_MFXER = 1748,
    PPC_INS_ALIAS_MFRTCU = 1749,
    PPC_INS_ALIAS_MFRTCL = 1750,
    PPC_INS_ALIAS_MTLR = 1751,
    PPC_INS_ALIAS_MFLR = 1752,
    PPC_INS_ALIAS_MTCTR = 1753,
    PPC_INS_ALIAS_MFCTR = 1754,
    PPC_INS_ALIAS_MTUAMR = 1755,
    PPC_INS_ALIAS_MFUAMR = 1756,
    PPC_INS_ALIAS_MTDSCR = 1757,
    PPC_INS_ALIAS_MFDSCR = 1758,
    PPC_INS_ALIAS_MTDSISR = 1759,
    PPC_INS_ALIAS_MFDSISR = 1760,
    PPC_INS_ALIAS_MTDAR = 1761,
    PPC_INS_ALIAS_MFDAR = 1762,
    PPC_INS_ALIAS_MTDEC = 1763,
    PPC_INS_ALIAS_MFDEC = 1764,
    PPC_INS_ALIAS_MTSDR1 = 1765,
    PPC_INS_ALIAS_MFSDR1 = 1766,
    PPC_INS_ALIAS_MTSRR0 = 1767,
    PPC_INS_ALIAS_MFSRR0 = 1768,
    PPC_INS_ALIAS_MTSRR1 = 1769,
    PPC_INS_ALIAS_MFSRR1 = 1770,
    PPC_INS_ALIAS_MTCFAR = 1771,
    PPC_INS_ALIAS_MFCFAR = 1772,
    PPC_INS_ALIAS_MTAMR = 1773,
    PPC_INS_ALIAS_MFAMR = 1774,
    PPC_INS_ALIAS_MFSPRG = 1775,
    PPC_INS_ALIAS_MFSPRG0 = 1776,
    PPC_INS_ALIAS_MTSPRG = 1777,
    PPC_INS_ALIAS_MTSPRG0 = 1778,
    PPC_INS_ALIAS_MFSPRG1 = 1779,
    PPC_INS_ALIAS_MTSPRG1 = 1780,
    PPC_INS_ALIAS_MFSPRG2 = 1781,
    PPC_INS_ALIAS_MTSPRG2 = 1782,
    PPC_INS_ALIAS_MFSPRG3 = 1783,
    PPC_INS_ALIAS_MTSPRG3 = 1784,
    PPC_INS_ALIAS_MFASR = 1785,
    PPC_INS_ALIAS_MTASR = 1786,
    PPC_INS_ALIAS_MTTBL = 1787,
    PPC_INS_ALIAS_MTTBU = 1788,
    PPC_INS_ALIAS_MFPVR = 1789,
    PPC_INS_ALIAS_MFSPEFSCR = 1790,
    PPC_INS_ALIAS_MTSPEFSCR = 1791,
    PPC_INS_ALIAS_XVMOVDP = 1792,
    PPC_INS_ALIAS_XVMOVSP = 1793,
    PPC_INS_ALIAS_XXSPLTD = 1794,
    PPC_INS_ALIAS_XXMRGHD = 1795,
    PPC_INS_ALIAS_XXMRGLD = 1796,
    PPC_INS_ALIAS_XXSWAPD = 1797,
    PPC_INS_ALIAS_MFFPRD = 1798,
    PPC_INS_ALIAS_MTFPRD = 1799,
    PPC_INS_ALIAS_MFFPRWZ = 1800,
    PPC_INS_ALIAS_MTFPRWA = 1801,
    PPC_INS_ALIAS_MTFPRWZ = 1802,
    PPC_INS_ALIAS_TEND_ = 1803,
    PPC_INS_ALIAS_TENDALL_ = 1804,
    PPC_INS_ALIAS_TSUSPEND_ = 1805,
    PPC_INS_ALIAS_TRESUME_ = 1806,
    PPC_INS_ALIAS_WAIT = 1807,
    PPC_INS_ALIAS_WAITRSV = 1808,
    PPC_INS_ALIAS_SYNC = 1809,
    PPC_INS_ALIAS_PTESYNC = 1810,
    PPC_INS_ALIAS_PHWSYNC = 1811,
    PPC_INS_ALIAS_PLWSYNC = 1812,
    PPC_INS_ALIAS_STNCISYNC = 1813,
    PPC_INS_ALIAS_STCISYNC = 1814,
    PPC_INS_ALIAS_STSYNC = 1815,
    PPC_INS_ALIAS_PADDI = 1816,
    PPC_INS_ALIAS_DCI = 1817,
    PPC_INS_ALIAS_DCCCI = 1818,
    PPC_INS_ALIAS_ICI = 1819,
    PPC_INS_ALIAS_ICCCI = 1820,
    PPC_INS_ALIAS_MTFSFI = 1821,
    PPC_INS_ALIAS_MTFSFI_ = 1822,
    PPC_INS_ALIAS_MTFSF = 1823,
    PPC_INS_ALIAS_MTFSF_ = 1824,
    PPC_INS_ALIAS_SC = 1825,
    PPC_INS_ALIAS_LWSYNC = 1826,
    PPC_INS_ALIAS_WAITIMPL = 1827,
    PPC_INS_ALIAS_MBAR = 1828,
    PPC_INS_ALIAS_CRSET = 1829,
    PPC_INS_ALIAS_CRCLR = 1830,
    PPC_INS_ALIAS_CRMOVE = 1831,
    PPC_INS_ALIAS_CRNOT = 1832,
    PPC_INS_ALIAS_MFTB = 1833,
    PPC_INS_ALIAS_MFTBL = 1834,
    PPC_INS_ALIAS_MFTBU = 1835,
    PPC_INS_ALIAS_MFBR0 = 1836,
    PPC_INS_ALIAS_MTBR0 = 1837,
    PPC_INS_ALIAS_MFBR1 = 1838,
    PPC_INS_ALIAS_MTBR1 = 1839,
    PPC_INS_ALIAS_MFBR2 = 1840,
    PPC_INS_ALIAS_MTBR2 = 1841,
    PPC_INS_ALIAS_MFBR3 = 1842,
    PPC_INS_ALIAS_MTBR3 = 1843,
    PPC_INS_ALIAS_MFBR4 = 1844,
    PPC_INS_ALIAS_MTBR4 = 1845,
    PPC_INS_ALIAS_MFBR5 = 1846,
    PPC_INS_ALIAS_MTBR5 = 1847,
    PPC_INS_ALIAS_MFBR6 = 1848,
    PPC_INS_ALIAS_MTBR6 = 1849,
    PPC_INS_ALIAS_MFBR7 = 1850,
    PPC_INS_ALIAS_MTBR7 = 1851,
    PPC_INS_ALIAS_MTMSRD = 1852,
    PPC_INS_ALIAS_MTMSR = 1853,
    PPC_INS_ALIAS_MTPID = 1854,
    PPC_INS_ALIAS_MFPID = 1855,
    PPC_INS_ALIAS_MFSPRG4 = 1856,
    PPC_INS_ALIAS_MTSPRG4 = 1857,
    PPC_INS_ALIAS_MFSPRG5 = 1858,
    PPC_INS_ALIAS_MTSPRG5 = 1859,
    PPC_INS_ALIAS_MFSPRG6 = 1860,
    PPC_INS_ALIAS_MTSPRG6 = 1861,
    PPC_INS_ALIAS_MFSPRG7 = 1862,
    PPC_INS_ALIAS_MTSPRG7 = 1863,
    PPC_INS_ALIAS_MTDBATU = 1864,
    PPC_INS_ALIAS_MFDBATU = 1865,
    PPC_INS_ALIAS_MTDBATL = 1866,
    PPC_INS_ALIAS_MFDBATL = 1867,
    PPC_INS_ALIAS_MTIBATU = 1868,
    PPC_INS_ALIAS_MFIBATU = 1869,
    PPC_INS_ALIAS_MTIBATL = 1870,
    PPC_INS_ALIAS_MFIBATL = 1871,
    PPC_INS_ALIAS_MTPPR = 1872,
    PPC_INS_ALIAS_MFPPR = 1873,
    PPC_INS_ALIAS_MTESR = 1874,
    PPC_INS_ALIAS_MFESR = 1875,
    PPC_INS_ALIAS_MTDEAR = 1876,
    PPC_INS_ALIAS_MFDEAR = 1877,
    PPC_INS_ALIAS_MTTCR = 1878,
    PPC_INS_ALIAS_MFTCR = 1879,
    PPC_INS_ALIAS_MFTBHI = 1880,
    PPC_INS_ALIAS_MTTBHI = 1881,
    PPC_INS_ALIAS_MFTBLO = 1882,
    PPC_INS_ALIAS_MTTBLO = 1883,
    PPC_INS_ALIAS_MTSRR2 = 1884,
    PPC_INS_ALIAS_MFSRR2 = 1885,
    PPC_INS_ALIAS_MTSRR3 = 1886,
    PPC_INS_ALIAS_MFSRR3 = 1887,
    PPC_INS_ALIAS_MTDCCR = 1888,
    PPC_INS_ALIAS_MFDCCR = 1889,
    PPC_INS_ALIAS_MTICCR = 1890,
    PPC_INS_ALIAS_MFICCR = 1891,
    PPC_INS_ALIAS_TLBIE = 1892,
    PPC_INS_ALIAS_TLBREHI = 1893,
    PPC_INS_ALIAS_TLBRELO = 1894,
    PPC_INS_ALIAS_TLBWEHI = 1895,
    PPC_INS_ALIAS_TLBWELO = 1896,
    PPC_INS_ALIAS_TLBILXLPID = 1897,
    PPC_INS_ALIAS_TLBILXPID = 1898,
    PPC_INS_ALIAS_TLBILXVA = 1899,
    PPC_INS_ALIAS_ROTLDI = 1900,
    PPC_INS_ALIAS_ROTLDI_ = 1901,
    PPC_INS_ALIAS_ROTLD = 1902,
    PPC_INS_ALIAS_ROTLD_ = 1903,
    PPC_INS_ALIAS_CLRLDI = 1904,
    PPC_INS_ALIAS_CLRLDI_ = 1905,
    PPC_INS_ALIAS_LNIA = 1906,
    PPC_INS_ALIAS_BCp = 1907,
    PPC_INS_ALIAS_BCAp = 1908,
    PPC_INS_ALIAS_BCLp = 1909,
    PPC_INS_ALIAS_BCLAp = 1910,
    PPC_INS_ALIAS_BCm = 1911,
    PPC_INS_ALIAS_BCAm = 1912,
    PPC_INS_ALIAS_BCLm = 1913,
    PPC_INS_ALIAS_BCLAm = 1914,
    PPC_INS_ALIAS_BT = 1915,
    PPC_INS_ALIAS_BTA = 1916,
    PPC_INS_ALIAS_BTLR = 1917,
    PPC_INS_ALIAS_BTL = 1918,
    PPC_INS_ALIAS_BTLA = 1919,
    PPC_INS_ALIAS_BTLRL = 1920,
    PPC_INS_ALIAS_BTCTR = 1921,
    PPC_INS_ALIAS_BTCTRL = 1922,
    PPC_INS_ALIAS_BDZLR = 1923,
    PPC_INS_ALIAS_BDZLRL = 1924,
    PPC_INS_ALIAS_BDZL = 1925,
    PPC_INS_ALIAS_BDZLA = 1926,
    PPC_INS_ALIAS_BDZ = 1927,
    PPC_INS_ALIAS_BDNZL = 1928,
    PPC_INS_ALIAS_BDNZLA = 1929,
    PPC_INS_ALIAS_BDNZ = 1930,
    PPC_INS_ALIAS_BDZLp = 1931,
    PPC_INS_ALIAS_BDZLAp = 1932,
    PPC_INS_ALIAS_BDZp = 1933,
    PPC_INS_ALIAS_BDNZLp = 1934,
    PPC_INS_ALIAS_BDNZLAp = 1935,
    PPC_INS_ALIAS_BDNZp = 1936,
    PPC_INS_ALIAS_BDZLm = 1937,
    PPC_INS_ALIAS_BDZLAm = 1938,
    PPC_INS_ALIAS_BDZm = 1939,
    PPC_INS_ALIAS_BDNZLm = 1940,
    PPC_INS_ALIAS_BDNZLAm = 1941,
    PPC_INS_ALIAS_BDNZm = 1942,
    PPC_INS_ALIAS_BDNZLR = 1943,
    PPC_INS_ALIAS_BDNZLRL = 1944,
    PPC_INS_ALIAS_BDZLRp = 1945,
    PPC_INS_ALIAS_BDZLRLp = 1946,
    PPC_INS_ALIAS_BDNZLRp = 1947,
    PPC_INS_ALIAS_BDNZLRLp = 1948,
    PPC_INS_ALIAS_BDZLRm = 1949,
    PPC_INS_ALIAS_BDZLRLm = 1950,
    PPC_INS_ALIAS_BDNZLRm = 1951,
    PPC_INS_ALIAS_BDNZLRLm = 1952,
    PPC_INS_ALIAS_BF = 1953,
    PPC_INS_ALIAS_BFA = 1954,
    PPC_INS_ALIAS_BFLR = 1955,
    PPC_INS_ALIAS_BFL = 1956,
    PPC_INS_ALIAS_BFLA = 1957,
    PPC_INS_ALIAS_BFLRL = 1958,
    PPC_INS_ALIAS_BFCTR = 1959,
    PPC_INS_ALIAS_BFCTRL = 1960,
    PPC_INS_ALIAS_BTm = 1961,
    PPC_INS_ALIAS_BTAm = 1962,
    PPC_INS_ALIAS_BTLRm = 1963,
    PPC_INS_ALIAS_BTLm = 1964,
    PPC_INS_ALIAS_BTLAm = 1965,
    PPC_INS_ALIAS_BTLRLm = 1966,
    PPC_INS_ALIAS_BTCTRm = 1967,
    PPC_INS_ALIAS_BTCTRLm = 1968,
    PPC_INS_ALIAS_BFm = 1969,
    PPC_INS_ALIAS_BFAm = 1970,
    PPC_INS_ALIAS_BFLRm = 1971,
    PPC_INS_ALIAS_BFLm = 1972,
    PPC_INS_ALIAS_BFLAm = 1973,
    PPC_INS_ALIAS_BFLRLm = 1974,
    PPC_INS_ALIAS_BFCTRm = 1975,
    PPC_INS_ALIAS_BFCTRLm = 1976,
    PPC_INS_ALIAS_BTp = 1977,
    PPC_INS_ALIAS_BTAp = 1978,
    PPC_INS_ALIAS_BTLRp = 1979,
    PPC_INS_ALIAS_BTLp = 1980,
    PPC_INS_ALIAS_BTLAp = 1981,
    PPC_INS_ALIAS_BTLRLp = 1982,
    PPC_INS_ALIAS_BTCTRp = 1983,
    PPC_INS_ALIAS_BTCTRLp = 1984,
    PPC_INS_ALIAS_BFp = 1985,
    PPC_INS_ALIAS_BFAp = 1986,
    PPC_INS_ALIAS_BFLRp = 1987,
    PPC_INS_ALIAS_BFLp = 1988,
    PPC_INS_ALIAS_BFLAp = 1989,
    PPC_INS_ALIAS_BFLRLp = 1990,
    PPC_INS_ALIAS_BFCTRp = 1991,
    PPC_INS_ALIAS_BFCTRLp = 1992,
    PPC_INS_ALIAS_BDNZT = 1993,
    PPC_INS_ALIAS_BDNZTA = 1994,
    PPC_INS_ALIAS_BDNZTLR = 1995,
    PPC_INS_ALIAS_BDNZTL = 1996,
    PPC_INS_ALIAS_BDNZTLA = 1997,
    PPC_INS_ALIAS_BDNZTLRL = 1998,
    PPC_INS_ALIAS_BDNZF = 1999,
    PPC_INS_ALIAS_BDNZFA = 2000,
    PPC_INS_ALIAS_BDNZFLR = 2001,
    PPC_INS_ALIAS_BDNZFL = 2002,
    PPC_INS_ALIAS_BDNZFLA = 2003,
    PPC_INS_ALIAS_BDNZFLRL = 2004,
    PPC_INS_ALIAS_BDZT = 2005,
    PPC_INS_ALIAS_BDZTA = 2006,
    PPC_INS_ALIAS_BDZTLR = 2007,
    PPC_INS_ALIAS_BDZTL = 2008,
    PPC_INS_ALIAS_BDZTLA = 2009,
    PPC_INS_ALIAS_BDZTLRL = 2010,
    PPC_INS_ALIAS_BDZF = 2011,
    PPC_INS_ALIAS_BDZFA = 2012,
    PPC_INS_ALIAS_BDZFLR = 2013,
    PPC_INS_ALIAS_BDZFL = 2014,
    PPC_INS_ALIAS_BDZFLA = 2015,
    PPC_INS_ALIAS_BDZFLRL = 2016,
    PPC_INS_ALIAS_B = 2017,
    PPC_INS_ALIAS_BA = 2018,
    PPC_INS_ALIAS_BL = 2019,
    PPC_INS_ALIAS_BLA = 2020,
    PPC_INS_ALIAS_BLR = 2021,
    PPC_INS_ALIAS_BLRL = 2022,
    PPC_INS_ALIAS_BCTR = 2023,
    PPC_INS_ALIAS_BCTRL = 2024,
    PPC_INS_ALIAS_BLT = 2025,
    PPC_INS_ALIAS_BLTA = 2026,
    PPC_INS_ALIAS_BLTLR = 2027,
    PPC_INS_ALIAS_BLTCTR = 2028,
    PPC_INS_ALIAS_BLTL = 2029,
    PPC_INS_ALIAS_BLTLA = 2030,
    PPC_INS_ALIAS_BLTLRL = 2031,
    PPC_INS_ALIAS_BLTCTRL = 2032,
    PPC_INS_ALIAS_BLTm = 2033,
    PPC_INS_ALIAS_BLTAm = 2034,
    PPC_INS_ALIAS_BLTLRm = 2035,
    PPC_INS_ALIAS_BLTCTRm = 2036,
    PPC_INS_ALIAS_BLTLm = 2037,
    PPC_INS_ALIAS_BLTLAm = 2038,
    PPC_INS_ALIAS_BLTLRLm = 2039,
    PPC_INS_ALIAS_BLTCTRLm = 2040,
    PPC_INS_ALIAS_BLTp = 2041,
    PPC_INS_ALIAS_BLTAp = 2042,
    PPC_INS_ALIAS_BLTLRp = 2043,
    PPC_INS_ALIAS_BLTCTRp = 2044,
    PPC_INS_ALIAS_BLTLp = 2045,
    PPC_INS_ALIAS_BLTLAp = 2046,
    PPC_INS_ALIAS_BLTLRLp = 2047,
    PPC_INS_ALIAS_BLTCTRLp = 2048,
    PPC_INS_ALIAS_BGT = 2049,
    PPC_INS_ALIAS_BGTA = 2050,
    PPC_INS_ALIAS_BGTLR = 2051,
    PPC_INS_ALIAS_BGTCTR = 2052,
    PPC_INS_ALIAS_BGTL = 2053,
    PPC_INS_ALIAS_BGTLA = 2054,
    PPC_INS_ALIAS_BGTLRL = 2055,
    PPC_INS_ALIAS_BGTCTRL = 2056,
    PPC_INS_ALIAS_BGTm = 2057,
    PPC_INS_ALIAS_BGTAm = 2058,
    PPC_INS_ALIAS_BGTLRm = 2059,
    PPC_INS_ALIAS_BGTCTRm = 2060,
    PPC_INS_ALIAS_BGTLm = 2061,
    PPC_INS_ALIAS_BGTLAm = 2062,
    PPC_INS_ALIAS_BGTLRLm = 2063,
    PPC_INS_ALIAS_BGTCTRLm = 2064,
    PPC_INS_ALIAS_BGTp = 2065,
    PPC_INS_ALIAS_BGTAp = 2066,
    PPC_INS_ALIAS_BGTLRp = 2067,
    PPC_INS_ALIAS_BGTCTRp = 2068,
    PPC_INS_ALIAS_BGTLp = 2069,
    PPC_INS_ALIAS_BGTLAp = 2070,
    PPC_INS_ALIAS_BGTLRLp = 2071,
    PPC_INS_ALIAS_BGTCTRLp = 2072,
    PPC_INS_ALIAS_BEQ = 2073,
    PPC_INS_ALIAS_BEQA = 2074,
    PPC_INS_ALIAS_BEQLR = 2075,
    PPC_INS_ALIAS_BEQCTR = 2076,
    PPC_INS_ALIAS_BEQL = 2077,
    PPC_INS_ALIAS_BEQLA = 2078,
    PPC_INS_ALIAS_BEQLRL = 2079,
    PPC_INS_ALIAS_BEQCTRL = 2080,
    PPC_INS_ALIAS_BEQm = 2081,
    PPC_INS_ALIAS_BEQAm = 2082,
    PPC_INS_ALIAS_BEQLRm = 2083,
    PPC_INS_ALIAS_BEQCTRm = 2084,
    PPC_INS_ALIAS_BEQLm = 2085,
    PPC_INS_ALIAS_BEQLAm = 2086,
    PPC_INS_ALIAS_BEQLRLm = 2087,
    PPC_INS_ALIAS_BEQCTRLm = 2088,
    PPC_INS_ALIAS_BEQp = 2089,
    PPC_INS_ALIAS_BEQAp = 2090,
    PPC_INS_ALIAS_BEQLRp = 2091,
    PPC_INS_ALIAS_BEQCTRp = 2092,
    PPC_INS_ALIAS_BEQLp = 2093,
    PPC_INS_ALIAS_BEQLAp = 2094,
    PPC_INS_ALIAS_BEQLRLp = 2095,
    PPC_INS_ALIAS_BEQCTRLp = 2096,
    PPC_INS_ALIAS_BUN = 2097,
    PPC_INS_ALIAS_BUNA = 2098,
    PPC_INS_ALIAS_BUNLR = 2099,
    PPC_INS_ALIAS_BUNCTR = 2100,
    PPC_INS_ALIAS_BUNL = 2101,
    PPC_INS_ALIAS_BUNLA = 2102,
    PPC_INS_ALIAS_BUNLRL = 2103,
    PPC_INS_ALIAS_BUNCTRL = 2104,
    PPC_INS_ALIAS_BUNm = 2105,
    PPC_INS_ALIAS_BUNAm = 2106,
    PPC_INS_ALIAS_BUNLRm = 2107,
    PPC_INS_ALIAS_BUNCTRm = 2108,
    PPC_INS_ALIAS_BUNLm = 2109,
    PPC_INS_ALIAS_BUNLAm = 2110,
    PPC_INS_ALIAS_BUNLRLm = 2111,
    PPC_INS_ALIAS_BUNCTRLm = 2112,
    PPC_INS_ALIAS_BUNp = 2113,
    PPC_INS_ALIAS_BUNAp = 2114,
    PPC_INS_ALIAS_BUNLRp = 2115,
    PPC_INS_ALIAS_BUNCTRp = 2116,
    PPC_INS_ALIAS_BUNLp = 2117,
    PPC_INS_ALIAS_BUNLAp = 2118,
    PPC_INS_ALIAS_BUNLRLp = 2119,
    PPC_INS_ALIAS_BUNCTRLp = 2120,
    PPC_INS_ALIAS_BSO = 2121,
    PPC_INS_ALIAS_BSOA = 2122,
    PPC_INS_ALIAS_BSOLR = 2123,
    PPC_INS_ALIAS_BSOCTR = 2124,
    PPC_INS_ALIAS_BSOL = 2125,
    PPC_INS_ALIAS_BSOLA = 2126,
    PPC_INS_ALIAS_BSOLRL = 2127,
    PPC_INS_ALIAS_BSOCTRL = 2128,
    PPC_INS_ALIAS_BSOm = 2129,
    PPC_INS_ALIAS_BSOAm = 2130,
    PPC_INS_ALIAS_BSOLRm = 2131,
    PPC_INS_ALIAS_BSOCTRm = 2132,
    PPC_INS_ALIAS_BSOLm = 2133,
    PPC_INS_ALIAS_BSOLAm = 2134,
    PPC_INS_ALIAS_BSOLRLm = 2135,
    PPC_INS_ALIAS_BSOCTRLm = 2136,
    PPC_INS_ALIAS_BSOp = 2137,
    PPC_INS_ALIAS_BSOAp = 2138,
    PPC_INS_ALIAS_BSOLRp = 2139,
    PPC_INS_ALIAS_BSOCTRp = 2140,
    PPC_INS_ALIAS_BSOLp = 2141,
    PPC_INS_ALIAS_BSOLAp = 2142,
    PPC_INS_ALIAS_BSOLRLp = 2143,
    PPC_INS_ALIAS_BSOCTRLp = 2144,
    PPC_INS_ALIAS_BGE = 2145,
    PPC_INS_ALIAS_BGEA = 2146,
    PPC_INS_ALIAS_BGELR = 2147,
    PPC_INS_ALIAS_BGECTR = 2148,
    PPC_INS_ALIAS_BGEL = 2149,
    PPC_INS_ALIAS_BGELA = 2150,
    PPC_INS_ALIAS_BGELRL = 2151,
    PPC_INS_ALIAS_BGECTRL = 2152,
    PPC_INS_ALIAS_BGEm = 2153,
    PPC_INS_ALIAS_BGEAm = 2154,
    PPC_INS_ALIAS_BGELRm = 2155,
    PPC_INS_ALIAS_BGECTRm = 2156,
    PPC_INS_ALIAS_BGELm = 2157,
    PPC_INS_ALIAS_BGELAm = 2158,
    PPC_INS_ALIAS_BGELRLm = 2159,
    PPC_INS_ALIAS_BGECTRLm = 2160,
    PPC_INS_ALIAS_BGEp = 2161,
    PPC_INS_ALIAS_BGEAp = 2162,
    PPC_INS_ALIAS_BGELRp = 2163,
    PPC_INS_ALIAS_BGECTRp = 2164,
    PPC_INS_ALIAS_BGELp = 2165,
    PPC_INS_ALIAS_BGELAp = 2166,
    PPC_INS_ALIAS_BGELRLp = 2167,
    PPC_INS_ALIAS_BGECTRLp = 2168,
    PPC_INS_ALIAS_BNL = 2169,
    PPC_INS_ALIAS_BNLA = 2170,
    PPC_INS_ALIAS_BNLLR = 2171,
    PPC_INS_ALIAS_BNLCTR = 2172,
    PPC_INS_ALIAS_BNLL = 2173,
    PPC_INS_ALIAS_BNLLA = 2174,
    PPC_INS_ALIAS_BNLLRL = 2175,
    PPC_INS_ALIAS_BNLCTRL = 2176,
    PPC_INS_ALIAS_BNLm = 2177,
    PPC_INS_ALIAS_BNLAm = 2178,
    PPC_INS_ALIAS_BNLLRm = 2179,
    PPC_INS_ALIAS_BNLCTRm = 2180,
    PPC_INS_ALIAS_BNLLm = 2181,
    PPC_INS_ALIAS_BNLLAm = 2182,
    PPC_INS_ALIAS_BNLLRLm = 2183,
    PPC_INS_ALIAS_BNLCTRLm = 2184,
    PPC_INS_ALIAS_BNLp = 2185,
    PPC_INS_ALIAS_BNLAp = 2186,
    PPC_INS_ALIAS_BNLLRp = 2187,
    PPC_INS_ALIAS_BNLCTRp = 2188,
    PPC_INS_ALIAS_BNLLp = 2189,
    PPC_INS_ALIAS_BNLLAp = 2190,
    PPC_INS_ALIAS_BNLLRLp = 2191,
    PPC_INS_ALIAS_BNLCTRLp = 2192,
    PPC_INS_ALIAS_BLE = 2193,
    PPC_INS_ALIAS_BLEA = 2194,
    PPC_INS_ALIAS_BLELR = 2195,
    PPC_INS_ALIAS_BLECTR = 2196,
    PPC_INS_ALIAS_BLEL = 2197,
    PPC_INS_ALIAS_BLELA = 2198,
    PPC_INS_ALIAS_BLELRL = 2199,
    PPC_INS_ALIAS_BLECTRL = 2200,
    PPC_INS_ALIAS_BLEm = 2201,
    PPC_INS_ALIAS_BLEAm = 2202,
    PPC_INS_ALIAS_BLELRm = 2203,
    PPC_INS_ALIAS_BLECTRm = 2204,
    PPC_INS_ALIAS_BLELm = 2205,
    PPC_INS_ALIAS_BLELAm = 2206,
    PPC_INS_ALIAS_BLELRLm = 2207,
    PPC_INS_ALIAS_BLECTRLm = 2208,
    PPC_INS_ALIAS_BLEp = 2209,
    PPC_INS_ALIAS_BLEAp = 2210,
    PPC_INS_ALIAS_BLELRp = 2211,
    PPC_INS_ALIAS_BLECTRp = 2212,
    PPC_INS_ALIAS_BLELp = 2213,
    PPC_INS_ALIAS_BLELAp = 2214,
    PPC_INS_ALIAS_BLELRLp = 2215,
    PPC_INS_ALIAS_BLECTRLp = 2216,
    PPC_INS_ALIAS_BNG = 2217,
    PPC_INS_ALIAS_BNGA = 2218,
    PPC_INS_ALIAS_BNGLR = 2219,
    PPC_INS_ALIAS_BNGCTR = 2220,
    PPC_INS_ALIAS_BNGL = 2221,
    PPC_INS_ALIAS_BNGLA = 2222,
    PPC_INS_ALIAS_BNGLRL = 2223,
    PPC_INS_ALIAS_BNGCTRL = 2224,
    PPC_INS_ALIAS_BNGm = 2225,
    PPC_INS_ALIAS_BNGAm = 2226,
    PPC_INS_ALIAS_BNGLRm = 2227,
    PPC_INS_ALIAS_BNGCTRm = 2228,
    PPC_INS_ALIAS_BNGLm = 2229,
    PPC_INS_ALIAS_BNGLAm = 2230,
    PPC_INS_ALIAS_BNGLRLm = 2231,
    PPC_INS_ALIAS_BNGCTRLm = 2232,
    PPC_INS_ALIAS_BNGp = 2233,
    PPC_INS_ALIAS_BNGAp = 2234,
    PPC_INS_ALIAS_BNGLRp = 2235,
    PPC_INS_ALIAS_BNGCTRp = 2236,
    PPC_INS_ALIAS_BNGLp = 2237,
    PPC_INS_ALIAS_BNGLAp = 2238,
    PPC_INS_ALIAS_BNGLRLp = 2239,
    PPC_INS_ALIAS_BNGCTRLp = 2240,
    PPC_INS_ALIAS_BNE = 2241,
    PPC_INS_ALIAS_BNEA = 2242,
    PPC_INS_ALIAS_BNELR = 2243,
    PPC_INS_ALIAS_BNECTR = 2244,
    PPC_INS_ALIAS_BNEL = 2245,
    PPC_INS_ALIAS_BNELA = 2246,
    PPC_INS_ALIAS_BNELRL = 2247,
    PPC_INS_ALIAS_BNECTRL = 2248,
    PPC_INS_ALIAS_BNEm = 2249,
    PPC_INS_ALIAS_BNEAm = 2250,
    PPC_INS_ALIAS_BNELRm = 2251,
    PPC_INS_ALIAS_BNECTRm = 2252,
    PPC_INS_ALIAS_BNELm = 2253,
    PPC_INS_ALIAS_BNELAm = 2254,
    PPC_INS_ALIAS_BNELRLm = 2255,
    PPC_INS_ALIAS_BNECTRLm = 2256,
    PPC_INS_ALIAS_BNEp = 2257,
    PPC_INS_ALIAS_BNEAp = 2258,
    PPC_INS_ALIAS_BNELRp = 2259,
    PPC_INS_ALIAS_BNECTRp = 2260,
    PPC_INS_ALIAS_BNELp = 2261,
    PPC_INS_ALIAS_BNELAp = 2262,
    PPC_INS_ALIAS_BNELRLp = 2263,
    PPC_INS_ALIAS_BNECTRLp = 2264,
    PPC_INS_ALIAS_BNU = 2265,
    PPC_INS_ALIAS_BNUA = 2266,
    PPC_INS_ALIAS_BNULR = 2267,
    PPC_INS_ALIAS_BNUCTR = 2268,
    PPC_INS_ALIAS_BNUL = 2269,
    PPC_INS_ALIAS_BNULA = 2270,
    PPC_INS_ALIAS_BNULRL = 2271,
    PPC_INS_ALIAS_BNUCTRL = 2272,
    PPC_INS_ALIAS_BNUm = 2273,
    PPC_INS_ALIAS_BNUAm = 2274,
    PPC_INS_ALIAS_BNULRm = 2275,
    PPC_INS_ALIAS_BNUCTRm = 2276,
    PPC_INS_ALIAS_BNULm = 2277,
    PPC_INS_ALIAS_BNULAm = 2278,
    PPC_INS_ALIAS_BNULRLm = 2279,
    PPC_INS_ALIAS_BNUCTRLm = 2280,
    PPC_INS_ALIAS_BNUp = 2281,
    PPC_INS_ALIAS_BNUAp = 2282,
    PPC_INS_ALIAS_BNULRp = 2283,
    PPC_INS_ALIAS_BNUCTRp = 2284,
    PPC_INS_ALIAS_BNULp = 2285,
    PPC_INS_ALIAS_BNULAp = 2286,
    PPC_INS_ALIAS_BNULRLp = 2287,
    PPC_INS_ALIAS_BNUCTRLp = 2288,
    PPC_INS_ALIAS_BNS = 2289,
    PPC_INS_ALIAS_BNSA = 2290,
    PPC_INS_ALIAS_BNSLR = 2291,
    PPC_INS_ALIAS_BNSCTR = 2292,
    PPC_INS_ALIAS_BNSL = 2293,
    PPC_INS_ALIAS_BNSLA = 2294,
    PPC_INS_ALIAS_BNSLRL = 2295,
    PPC_INS_ALIAS_BNSCTRL = 2296,
    PPC_INS_ALIAS_BNSm = 2297,
    PPC_INS_ALIAS_BNSAm = 2298,
    PPC_INS_ALIAS_BNSLRm = 2299,
    PPC_INS_ALIAS_BNSCTRm = 2300,
    PPC_INS_ALIAS_BNSLm = 2301,
    PPC_INS_ALIAS_BNSLAm = 2302,
    PPC_INS_ALIAS_BNSLRLm = 2303,
    PPC_INS_ALIAS_BNSCTRLm = 2304,
    PPC_INS_ALIAS_BNSp = 2305,
    PPC_INS_ALIAS_BNSAp = 2306,
    PPC_INS_ALIAS_BNSLRp = 2307,
    PPC_INS_ALIAS_BNSCTRp = 2308,
    PPC_INS_ALIAS_BNSLp = 2309,
    PPC_INS_ALIAS_BNSLAp = 2310,
    PPC_INS_ALIAS_BNSLRLp = 2311,
    PPC_INS_ALIAS_BNSCTRLp = 2312,
    PPC_INS_ALIAS_CMPWI = 2313,
    PPC_INS_ALIAS_CMPW = 2314,
    PPC_INS_ALIAS_CMPLWI = 2315,
    PPC_INS_ALIAS_CMPLW = 2316,
    PPC_INS_ALIAS_CMPDI = 2317,
    PPC_INS_ALIAS_CMPD = 2318,
    PPC_INS_ALIAS_CMPLDI = 2319,
    PPC_INS_ALIAS_CMPLD = 2320,
    PPC_INS_ALIAS_CMPI = 2321,
    PPC_INS_ALIAS_CMP = 2322,
    PPC_INS_ALIAS_CMPLI = 2323,
    PPC_INS_ALIAS_CMPL = 2324,
    PPC_INS_ALIAS_TRAP = 2325,
    PPC_INS_ALIAS_TDLTI = 2326,
    PPC_INS_ALIAS_TDLT = 2327,
    PPC_INS_ALIAS_TWLTI = 2328,
    PPC_INS_ALIAS_TWLT = 2329,
    PPC_INS_ALIAS_TDLEI = 2330,
    PPC_INS_ALIAS_TDLE = 2331,
    PPC_INS_ALIAS_TWLEI = 2332,
    PPC_INS_ALIAS_TWLE = 2333,
    PPC_INS_ALIAS_TDEQI = 2334,
    PPC_INS_ALIAS_TDEQ = 2335,
    PPC_INS_ALIAS_TWEQI = 2336,
    PPC_INS_ALIAS_TWEQ = 2337,
    PPC_INS_ALIAS_TDGEI = 2338,
    PPC_INS_ALIAS_TDGE = 2339,
    PPC_INS_ALIAS_TWGEI = 2340,
    PPC_INS_ALIAS_TWGE = 2341,
    PPC_INS_ALIAS_TDGTI = 2342,
    PPC_INS_ALIAS_TDGT = 2343,
    PPC_INS_ALIAS_TWGTI = 2344,
    PPC_INS_ALIAS_TWGT = 2345,
    PPC_INS_ALIAS_TDNLI = 2346,
    PPC_INS_ALIAS_TDNL = 2347,
    PPC_INS_ALIAS_TWNLI = 2348,
    PPC_INS_ALIAS_TWNL = 2349,
    PPC_INS_ALIAS_TDNEI = 2350,
    PPC_INS_ALIAS_TDNE = 2351,
    PPC_INS_ALIAS_TWNEI = 2352,
    PPC_INS_ALIAS_TWNE = 2353,
    PPC_INS_ALIAS_TDNGI = 2354,
    PPC_INS_ALIAS_TDNG = 2355,
    PPC_INS_ALIAS_TWNGI = 2356,
    PPC_INS_ALIAS_TWNG = 2357,
    PPC_INS_ALIAS_TDLLTI = 2358,
    PPC_INS_ALIAS_TDLLT = 2359,
    PPC_INS_ALIAS_TWLLTI = 2360,
    PPC_INS_ALIAS_TWLLT = 2361,
    PPC_INS_ALIAS_TDLLEI = 2362,
    PPC_INS_ALIAS_TDLLE = 2363,
    PPC_INS_ALIAS_TWLLEI = 2364,
    PPC_INS_ALIAS_TWLLE = 2365,
    PPC_INS_ALIAS_TDLGEI = 2366,
    PPC_INS_ALIAS_TDLGE = 2367,
    PPC_INS_ALIAS_TWLGEI = 2368,
    PPC_INS_ALIAS_TWLGE = 2369,
    PPC_INS_ALIAS_TDLGTI = 2370,
    PPC_INS_ALIAS_TDLGT = 2371,
    PPC_INS_ALIAS_TWLGTI = 2372,
    PPC_INS_ALIAS_TWLGT = 2373,
    PPC_INS_ALIAS_TDLNLI = 2374,
    PPC_INS_ALIAS_TDLNL = 2375,
    PPC_INS_ALIAS_TWLNLI = 2376,
    PPC_INS_ALIAS_TWLNL = 2377,
    PPC_INS_ALIAS_TDLNGI = 2378,
    PPC_INS_ALIAS_TDLNG = 2379,
    PPC_INS_ALIAS_TWLNGI = 2380,
    PPC_INS_ALIAS_TWLNG = 2381,
    PPC_INS_ALIAS_TDUI = 2382,
    PPC_INS_ALIAS_TDU = 2383,
    PPC_INS_ALIAS_TWUI = 2384,
    PPC_INS_ALIAS_TWU = 2385,
    PPC_INS_ALIAS_PASTE_ = 2386,
    PPC_INS_ALIAS_QVFCLR = 2387,
    PPC_INS_ALIAS_QVFAND = 2388,
    PPC_INS_ALIAS_QVFANDC = 2389,
    PPC_INS_ALIAS_QVFCTFB = 2390,
    PPC_INS_ALIAS_QVFXOR = 2391,
    PPC_INS_ALIAS_QVFOR = 2392,
    PPC_INS_ALIAS_QVFNOR = 2393,
    PPC_INS_ALIAS_QVFEQU = 2394,
    PPC_INS_ALIAS_QVFNOT = 2395,
    PPC_INS_ALIAS_QVFORC = 2396,
    PPC_INS_ALIAS_QVFNAND = 2397,
    PPC_INS_ALIAS_QVFSET = 2398,
    PPC_INS_ALIAS_SLWI = 2399,
    PPC_INS_ALIAS_SRWI = 2400,
    PPC_INS_ALIAS_SLDI = 2401,
    PPC_INS_ALIAS_END = 2402,
}
pub mod ppc_insn_group {
    #[doc = " Group of PPC instructions"]
    pub type Type = libc::c_uint;
    pub const PPC_GRP_INVALID: Type = 0;
    pub const PPC_GRP_JUMP: Type = 1;
    pub const PPC_GRP_CALL: Type = 2;
    pub const PPC_GRP_RET: Type = 3;
    pub const PPC_GRP_INT: Type = 4;
    pub const PPC_GRP_IRET: Type = 5;
    pub const PPC_GRP_PRIVILEGE: Type = 6;
    pub const PPC_GRP_BRANCH_RELATIVE: Type = 7;
    pub const PPC_FEATURE_HASPS: Type = 128;
    pub const PPC_FEATURE_IN32BITMODE: Type = 129;
    pub const PPC_FEATURE_IN64BITMODE: Type = 130;
    pub const PPC_FEATURE_ISBOOKE: Type = 131;
    pub const PPC_FEATURE_ISNOTBOOKE: Type = 132;
    pub const PPC_FEATURE_HASONLYMSYNC: Type = 133;
    pub const PPC_FEATURE_HASSYNC: Type = 134;
    pub const PPC_FEATURE_ISPPC4XX: Type = 135;
    pub const PPC_FEATURE_ISPPC6XX: Type = 136;
    pub const PPC_FEATURE_ISE500: Type = 137;
    pub const PPC_FEATURE_HASSPE: Type = 138;
    pub const PPC_FEATURE_HASICBT: Type = 139;
    pub const PPC_FEATURE_HASPARTWORDATOMICS: Type = 140;
    pub const PPC_FEATURE_HASQUADWORDATOMICS: Type = 141;
    pub const PPC_FEATURE_NONANSFPMATH: Type = 142;
    pub const PPC_FEATURE_NANSFPMATH: Type = 143;
    pub const PPC_FEATURE_HASBPERMD: Type = 144;
    pub const PPC_FEATURE_HASEXTDIV: Type = 145;
    pub const PPC_FEATURE_ISISA2_06: Type = 146;
    pub const PPC_FEATURE_ISISA2_07: Type = 147;
    pub const PPC_FEATURE_ISISA3_0: Type = 148;
    pub const PPC_FEATURE_HASFPU: Type = 149;
    pub const PPC_FEATURE_PCRELATIVEMEMOPS: Type = 150;
    pub const PPC_FEATURE_ISNOTISA3_1: Type = 151;
    pub const PPC_FEATURE_MODERNAS: Type = 152;
    pub const PPC_FEATURE_ISAIX: Type = 153;
    pub const PPC_FEATURE_NOTAIX: Type = 154;
    pub const PPC_FEATURE_ISISAFUTURE: Type = 155;
    pub const PPC_FEATURE_ISNOTISAFUTURE: Type = 156;
    pub const PPC_FEATURE_HASQPX: Type = 157;
    pub const PPC_GRP_ENDING: Type = 158;
}
#[repr(u32)]
#[doc = " PPC instruction formats. To get details about them please\n refer to `PPCInstrFormats.td` in LLVM."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ppc_insn_form {
    PPC_INSN_FORM_INVALID = 0,
    PPC_INSN_FORM_DFORM_2_R0 = 1,
    PPC_INSN_FORM_XOFORM_1 = 2,
    PPC_INSN_FORM_Z23FORM_RTAB5_CY2 = 3,
    PPC_INSN_FORM_DFORM_BASE = 4,
    PPC_INSN_FORM_DXFORM = 5,
    PPC_INSN_FORM_XFORM_BASE_R3XO_SWAPPED = 6,
    PPC_INSN_FORM_DFORM_4 = 7,
    PPC_INSN_FORM_XFORM_ATTN = 8,
    PPC_INSN_FORM_IFORM = 9,
    PPC_INSN_FORM_VX_RD5_RSP5_PS1_XO9 = 10,
    PPC_INSN_FORM_VX_RD5_EO5_RS5_PS1_XO9 = 11,
    PPC_INSN_FORM_VXFORM_1 = 12,
    PPC_INSN_FORM_XLFORM_2 = 13,
    PPC_INSN_FORM_EVXFORM_1 = 14,
    PPC_INSN_FORM_XFORM_BASE_R3XO = 15,
    PPC_INSN_FORM_XFORM_16 = 16,
    PPC_INSN_FORM_DFORM_5 = 17,
    PPC_INSN_FORM_X_BF3_RS5_RS5 = 18,
    PPC_INSN_FORM_X_BF3_L1_RS5_RS5 = 19,
    PPC_INSN_FORM_XLFORM_1 = 20,
    PPC_INSN_FORM_XFORM_45 = 21,
    PPC_INSN_FORM_DCB_FORM = 22,
    PPC_INSN_FORM_DCB_FORM_HINT = 23,
    PPC_INSN_FORM_XFORM_17 = 24,
    PPC_INSN_FORM_XFORM_SP2_FRTB5 = 25,
    PPC_INSN_FORM_XFORM_S1_FRTB5 = 26,
    PPC_INSN_FORM_XFORM_ATB3 = 27,
    PPC_INSN_FORM_XFORM_AT3 = 28,
    PPC_INSN_FORM_XX2FORM_AT3_XBP5_P2 = 29,
    PPC_INSN_FORM_XX3FORM_AT3_XABP5_P1 = 30,
    PPC_INSN_FORM_Z23FORM_FRTAB5_RMC2 = 31,
    PPC_INSN_FORM_Z23FORM_FRTB5_R1_RMC2 = 32,
    PPC_INSN_FORM_Z22FORM_FRTA5_SH6 = 33,
    PPC_INSN_FORM_DSS_FORM = 34,
    PPC_INSN_FORM_Z22FORM_BF3_FRA5_DCM6 = 35,
    PPC_INSN_FORM_XFORM_BF3_UIM6_FRB5 = 36,
    PPC_INSN_FORM_EFXFORM_1 = 37,
    PPC_INSN_FORM_EFXFORM_3 = 38,
    PPC_INSN_FORM_EVXFORM_3 = 39,
    PPC_INSN_FORM_EVXFORM_D = 40,
    PPC_INSN_FORM_EVXFORM_4 = 41,
    PPC_INSN_FORM_XSFORM_1 = 42,
    PPC_INSN_FORM_XFORM_24_SYNC = 43,
    PPC_INSN_FORM_AFORM_1 = 44,
    PPC_INSN_FORM_XFORM_XD6_RA5_RB5 = 45,
    PPC_INSN_FORM_XFORM_ICBT = 46,
    PPC_INSN_FORM_AFORM_4 = 47,
    PPC_INSN_FORM_DSFORM_1 = 48,
    PPC_INSN_FORM_DQFORM_RTP5_RA17_MEM = 49,
    PPC_INSN_FORM_XX1FORM = 50,
    PPC_INSN_FORM_DQ_RD6_RS5_DQ12 = 51,
    PPC_INSN_FORM_XFORM_XT6_IMM5 = 52,
    PPC_INSN_FORM_DQFORM_XTP5_RA17_MEM = 53,
    PPC_INSN_FORM_XFORMMEMOP = 54,
    PPC_INSN_FORM_VAFORM_1A = 55,
    PPC_INSN_FORM_XFORM_MBAR = 56,
    PPC_INSN_FORM_XLFORM_3 = 57,
    PPC_INSN_FORM_XFXFORM_3P = 58,
    PPC_INSN_FORM_XFXFORM_3 = 59,
    PPC_INSN_FORM_XFXFORM_1 = 60,
    PPC_INSN_FORM_XFXFORM_5A = 61,
    PPC_INSN_FORM_XFORM_SR = 62,
    PPC_INSN_FORM_XFORM_SRIN = 63,
    PPC_INSN_FORM_VXFORM_4 = 64,
    PPC_INSN_FORM_XFXFORM_5 = 65,
    PPC_INSN_FORM_XFLFORM_1 = 66,
    PPC_INSN_FORM_XLFORM_4 = 67,
    PPC_INSN_FORM_XFORM_MTMSR = 68,
    PPC_INSN_FORM_VXFORM_5 = 69,
    PPC_INSN_FORM_VXFORM_RD5_XO5_RS5 = 70,
    PPC_INSN_FORM_DCBZL_FORM = 71,
    PPC_INSN_FORM_PSFORM_QD = 72,
    PPC_INSN_FORM_PSFORM_QI = 73,
    PPC_INSN_FORM_PSFORM_Y = 74,
    PPC_INSN_FORM_PSFORM_X = 75,
    PPC_INSN_FORM_PSFORM_C = 76,
    PPC_INSN_FORM_Z23FORM_1 = 77,
    PPC_INSN_FORM_XFORM_18 = 78,
    PPC_INSN_FORM_XFORM_20 = 79,
    PPC_INSN_FORM_Z23FORM_3 = 80,
    PPC_INSN_FORM_XLFORM_S = 81,
    PPC_INSN_FORM_MDSFORM_1 = 82,
    PPC_INSN_FORM_MDFORM_1 = 83,
    PPC_INSN_FORM_MFORM_2 = 84,
    PPC_INSN_FORM_MFORM_1 = 85,
    PPC_INSN_FORM_SCFORM = 86,
    PPC_INSN_FORM_XFORM_44 = 87,
    PPC_INSN_FORM_XOFORM_RTAB5_L1 = 88,
    PPC_INSN_FORM_XFORM_IMM3_IMM2 = 89,
    PPC_INSN_FORM_XFORM_HTM0 = 90,
    PPC_INSN_FORM_XFORM_HTM3 = 91,
    PPC_INSN_FORM_XFORM_HTM1 = 92,
    PPC_INSN_FORM_XFORM_TLBWS = 93,
    PPC_INSN_FORM_XFORM_24 = 94,
    PPC_INSN_FORM_XFORM_HTM2 = 95,
    PPC_INSN_FORM_VXFORM_2 = 96,
    PPC_INSN_FORM_VXRFORM_1 = 97,
    PPC_INSN_FORM_VXFORM_BF3_VAB5 = 98,
    PPC_INSN_FORM_VXFORM_RD5_MP_VB5 = 99,
    PPC_INSN_FORM_VXFORM_RD5_N3_VB5 = 100,
    PPC_INSN_FORM_VAFORM_1 = 101,
    PPC_INSN_FORM_VXFORM_BX = 102,
    PPC_INSN_FORM_VXFORM_CR = 103,
    PPC_INSN_FORM_VNFORM_VTAB5_SD3 = 104,
    PPC_INSN_FORM_VAFORM_2 = 105,
    PPC_INSN_FORM_VXFORM_3 = 106,
    PPC_INSN_FORM_VXFORM_VTB5_RC = 107,
    PPC_INSN_FORM_XFORM_IMM2_IMM2 = 108,
    PPC_INSN_FORM_REQUIRES = 109,
    PPC_INSN_FORM_XX2FORM = 110,
    PPC_INSN_FORM_XX3FORM = 111,
    PPC_INSN_FORM_XX3FORM_1 = 112,
    PPC_INSN_FORM_XX2_RD6_XO5_RS6 = 113,
    PPC_INSN_FORM_Z23FORM_8 = 114,
    PPC_INSN_FORM_XX2FORM_1 = 115,
    PPC_INSN_FORM_XX2_BF3_DCMX7_RS6 = 116,
    PPC_INSN_FORM_X_BF3_DCMX7_RS5 = 117,
    PPC_INSN_FORM_XX2_RD5_XO5_RS6 = 118,
    PPC_INSN_FORM_XX3FORM_AT3_XAB6 = 119,
    PPC_INSN_FORM_XX3FORM_RC = 120,
    PPC_INSN_FORM_XX2_BF3_XO5_XB6_XO9 = 121,
    PPC_INSN_FORM_XX2_RD6_DCMX7_RS6 = 122,
    PPC_INSN_FORM_XX2_RD6_UIM5_RS6 = 123,
    PPC_INSN_FORM_XFORM_XT6_IMM5_VB5 = 124,
    PPC_INSN_FORM_XX3FORM_2 = 125,
    PPC_INSN_FORM_XX4FORM = 126,
    PPC_INSN_FORM_X_RD6_IMM8 = 127,
    PPC_INSN_FORM_XX2FORM_2 = 128,
    PPC_INSN_FORM_BFORM_3 = 129,
    PPC_INSN_FORM_BFORM_3_AT = 130,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ppc_suppl_info {
    pub form: ppc_insn_form,
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_ppc {
    #[doc = " branch code for branch instructions"]
    pub bc: ppc_bc,
    #[doc = " if update_cr0 = True, then this 'dot' insn updates CR0"]
    pub update_cr0: bool,
    pub format: ppc_insn_form,
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_ppc_op; 8usize],
}
impl ::core::fmt::Debug for cs_ppc {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_ppc {{ bc: {:?}, update_cr0: {:?}, format: {:?}, operands: {:?} }}",
            self.bc, self.update_cr0, self.format, self.operands
        )
    }
}
#[repr(u32)]
#[doc = " Enums corresponding to Sparc condition codes, both icc's and fcc's."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum sparc_cc {
    #[doc = "< invalid CC (default)"]
    SPARC_CC_INVALID = 0,
    #[doc = "< Always"]
    SPARC_CC_ICC_A = 264,
    #[doc = "< Never"]
    SPARC_CC_ICC_N = 256,
    #[doc = "< Not Equal"]
    SPARC_CC_ICC_NE = 265,
    #[doc = "< Equal"]
    SPARC_CC_ICC_E = 257,
    #[doc = "< Greater"]
    SPARC_CC_ICC_G = 266,
    #[doc = "< Less or Equal"]
    SPARC_CC_ICC_LE = 258,
    #[doc = "< Greater or Equal"]
    SPARC_CC_ICC_GE = 267,
    #[doc = "< Less"]
    SPARC_CC_ICC_L = 259,
    #[doc = "< Greater Unsigned"]
    SPARC_CC_ICC_GU = 268,
    #[doc = "< Less or Equal Unsigned"]
    SPARC_CC_ICC_LEU = 260,
    #[doc = "< Carry Clear/Great or Equal Unsigned"]
    SPARC_CC_ICC_CC = 269,
    #[doc = "< Carry Set/Less Unsigned"]
    SPARC_CC_ICC_CS = 261,
    #[doc = "< Positive"]
    SPARC_CC_ICC_POS = 270,
    #[doc = "< Negative"]
    SPARC_CC_ICC_NEG = 262,
    #[doc = "< Overflow Clear"]
    SPARC_CC_ICC_VC = 271,
    #[doc = "< Overflow Set"]
    SPARC_CC_ICC_VS = 263,
    #[doc = "< Always"]
    SPARC_CC_FCC_A = 280,
    #[doc = "< Never"]
    SPARC_CC_FCC_N = 272,
    #[doc = "< Unordered"]
    SPARC_CC_FCC_U = 279,
    #[doc = "< Greater"]
    SPARC_CC_FCC_G = 278,
    #[doc = "< Unordered or Greater"]
    SPARC_CC_FCC_UG = 277,
    #[doc = "< Less"]
    SPARC_CC_FCC_L = 276,
    #[doc = "< Unordered or Less"]
    SPARC_CC_FCC_UL = 275,
    #[doc = "< Less or Greater"]
    SPARC_CC_FCC_LG = 274,
    #[doc = "< Not Equal"]
    SPARC_CC_FCC_NE = 273,
    #[doc = "< Equal"]
    SPARC_CC_FCC_E = 281,
    #[doc = "< Unordered or Equal"]
    SPARC_CC_FCC_UE = 282,
    #[doc = "< Greater or Equal"]
    SPARC_CC_FCC_GE = 283,
    #[doc = "< Unordered or Greater or Equal"]
    SPARC_CC_FCC_UGE = 284,
    #[doc = "< Less or Equal"]
    SPARC_CC_FCC_LE = 285,
    #[doc = "< Unordered or Less or Equal"]
    SPARC_CC_FCC_ULE = 286,
    #[doc = "< Ordered"]
    SPARC_CC_FCC_O = 287,
}
#[repr(u32)]
#[doc = " Branch hint"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum sparc_hint {
    #[doc = "< no hint"]
    SPARC_HINT_INVALID = 0,
    #[doc = "< annul delay slot instruction"]
    SPARC_HINT_A = 1,
    #[doc = "< branch taken"]
    SPARC_HINT_PT = 2,
    #[doc = "< branch NOT taken"]
    SPARC_HINT_PN = 4,
    SPARC_HINT_A_PN = 5,
    SPARC_HINT_A_PT = 3,
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum sparc_op_type {
    #[doc = "< = CS_OP_INVALID (Uninitialized)."]
    SPARC_OP_INVALID = 0,
    #[doc = "< = CS_OP_REG (Register operand)."]
    SPARC_OP_REG = 1,
    #[doc = "< = CS_OP_IMM (Immediate operand)."]
    SPARC_OP_IMM = 2,
    #[doc = "< = CS_OP_MEM (Memory operand)."]
    SPARC_OP_MEM = 128,
}
pub mod sparc_reg {
    #[doc = " SPARC registers"]
    pub type Type = libc::c_uint;
    pub const SPARC_REG_INVALID: Type = 0;
    pub const SPARC_REG_F0: Type = 1;
    pub const SPARC_REG_F1: Type = 2;
    pub const SPARC_REG_F2: Type = 3;
    pub const SPARC_REG_F3: Type = 4;
    pub const SPARC_REG_F4: Type = 5;
    pub const SPARC_REG_F5: Type = 6;
    pub const SPARC_REG_F6: Type = 7;
    pub const SPARC_REG_F7: Type = 8;
    pub const SPARC_REG_F8: Type = 9;
    pub const SPARC_REG_F9: Type = 10;
    pub const SPARC_REG_F10: Type = 11;
    pub const SPARC_REG_F11: Type = 12;
    pub const SPARC_REG_F12: Type = 13;
    pub const SPARC_REG_F13: Type = 14;
    pub const SPARC_REG_F14: Type = 15;
    pub const SPARC_REG_F15: Type = 16;
    pub const SPARC_REG_F16: Type = 17;
    pub const SPARC_REG_F17: Type = 18;
    pub const SPARC_REG_F18: Type = 19;
    pub const SPARC_REG_F19: Type = 20;
    pub const SPARC_REG_F20: Type = 21;
    pub const SPARC_REG_F21: Type = 22;
    pub const SPARC_REG_F22: Type = 23;
    pub const SPARC_REG_F23: Type = 24;
    pub const SPARC_REG_F24: Type = 25;
    pub const SPARC_REG_F25: Type = 26;
    pub const SPARC_REG_F26: Type = 27;
    pub const SPARC_REG_F27: Type = 28;
    pub const SPARC_REG_F28: Type = 29;
    pub const SPARC_REG_F29: Type = 30;
    pub const SPARC_REG_F30: Type = 31;
    pub const SPARC_REG_F31: Type = 32;
    pub const SPARC_REG_F32: Type = 33;
    pub const SPARC_REG_F34: Type = 34;
    pub const SPARC_REG_F36: Type = 35;
    pub const SPARC_REG_F38: Type = 36;
    pub const SPARC_REG_F40: Type = 37;
    pub const SPARC_REG_F42: Type = 38;
    pub const SPARC_REG_F44: Type = 39;
    pub const SPARC_REG_F46: Type = 40;
    pub const SPARC_REG_F48: Type = 41;
    pub const SPARC_REG_F50: Type = 42;
    pub const SPARC_REG_F52: Type = 43;
    pub const SPARC_REG_F54: Type = 44;
    pub const SPARC_REG_F56: Type = 45;
    pub const SPARC_REG_F58: Type = 46;
    pub const SPARC_REG_F60: Type = 47;
    pub const SPARC_REG_F62: Type = 48;
    pub const SPARC_REG_FCC0: Type = 49;
    pub const SPARC_REG_FCC1: Type = 50;
    pub const SPARC_REG_FCC2: Type = 51;
    pub const SPARC_REG_FCC3: Type = 52;
    pub const SPARC_REG_FP: Type = 53;
    pub const SPARC_REG_G0: Type = 54;
    pub const SPARC_REG_G1: Type = 55;
    pub const SPARC_REG_G2: Type = 56;
    pub const SPARC_REG_G3: Type = 57;
    pub const SPARC_REG_G4: Type = 58;
    pub const SPARC_REG_G5: Type = 59;
    pub const SPARC_REG_G6: Type = 60;
    pub const SPARC_REG_G7: Type = 61;
    pub const SPARC_REG_I0: Type = 62;
    pub const SPARC_REG_I1: Type = 63;
    pub const SPARC_REG_I2: Type = 64;
    pub const SPARC_REG_I3: Type = 65;
    pub const SPARC_REG_I4: Type = 66;
    pub const SPARC_REG_I5: Type = 67;
    pub const SPARC_REG_I7: Type = 68;
    pub const SPARC_REG_ICC: Type = 69;
    pub const SPARC_REG_L0: Type = 70;
    pub const SPARC_REG_L1: Type = 71;
    pub const SPARC_REG_L2: Type = 72;
    pub const SPARC_REG_L3: Type = 73;
    pub const SPARC_REG_L4: Type = 74;
    pub const SPARC_REG_L5: Type = 75;
    pub const SPARC_REG_L6: Type = 76;
    pub const SPARC_REG_L7: Type = 77;
    pub const SPARC_REG_O0: Type = 78;
    pub const SPARC_REG_O1: Type = 79;
    pub const SPARC_REG_O2: Type = 80;
    pub const SPARC_REG_O3: Type = 81;
    pub const SPARC_REG_O4: Type = 82;
    pub const SPARC_REG_O5: Type = 83;
    pub const SPARC_REG_O7: Type = 84;
    pub const SPARC_REG_SP: Type = 85;
    pub const SPARC_REG_Y: Type = 86;
    pub const SPARC_REG_XCC: Type = 87;
    pub const SPARC_REG_ENDING: Type = 88;
    pub const SPARC_REG_O6: Type = 85;
    pub const SPARC_REG_I6: Type = 53;
}
#[doc = " Instruction's operand referring to memory\n This is associated with SPARC_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sparc_op_mem {
    #[doc = "< base register, can be safely interpreted as\n< a value of type `sparc_reg`, but it is only\n< one byte wide"]
    pub base: u8,
    #[doc = "< index register, same conditions apply here"]
    pub index: u8,
    #[doc = "< displacement/offset value"]
    pub disp: i32,
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sparc_op {
    #[doc = "< operand type"]
    pub type_: sparc_op_type,
    pub __bindgen_anon_1: cs_sparc_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_sparc_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: sparc_reg::Type,
    #[doc = "< immediate value for IMM operand"]
    pub imm: i64,
    #[doc = "< base/disp value for MEM operand"]
    pub mem: sparc_op_mem,
}
impl ::core::fmt::Debug for cs_sparc_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_sparc_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_sparc_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_sparc_op {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sparc {
    #[doc = "< code condition for this insn"]
    pub cc: sparc_cc,
    #[doc = "< branch hint: encoding as bitwise OR of sparc_hint."]
    pub hint: sparc_hint,
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_sparc_op; 4usize],
}
impl ::core::fmt::Debug for cs_sparc {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_sparc {{ cc: {:?}, hint: {:?}, operands: {:?} }}",
            self.cc, self.hint, self.operands
        )
    }
}
#[repr(u32)]
#[doc = " SPARC instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum sparc_insn {
    SPARC_INS_INVALID = 0,
    SPARC_INS_ADDCC = 1,
    SPARC_INS_ADDX = 2,
    SPARC_INS_ADDXCC = 3,
    SPARC_INS_ADDXC = 4,
    SPARC_INS_ADDXCCC = 5,
    SPARC_INS_ADD = 6,
    SPARC_INS_ALIGNADDR = 7,
    SPARC_INS_ALIGNADDRL = 8,
    SPARC_INS_ANDCC = 9,
    SPARC_INS_ANDNCC = 10,
    SPARC_INS_ANDN = 11,
    SPARC_INS_AND = 12,
    SPARC_INS_ARRAY16 = 13,
    SPARC_INS_ARRAY32 = 14,
    SPARC_INS_ARRAY8 = 15,
    SPARC_INS_B = 16,
    SPARC_INS_JMP = 17,
    SPARC_INS_BMASK = 18,
    SPARC_INS_FB = 19,
    SPARC_INS_BRGEZ = 20,
    SPARC_INS_BRGZ = 21,
    SPARC_INS_BRLEZ = 22,
    SPARC_INS_BRLZ = 23,
    SPARC_INS_BRNZ = 24,
    SPARC_INS_BRZ = 25,
    SPARC_INS_BSHUFFLE = 26,
    SPARC_INS_CALL = 27,
    SPARC_INS_CASX = 28,
    SPARC_INS_CAS = 29,
    SPARC_INS_CMASK16 = 30,
    SPARC_INS_CMASK32 = 31,
    SPARC_INS_CMASK8 = 32,
    SPARC_INS_CMP = 33,
    SPARC_INS_EDGE16 = 34,
    SPARC_INS_EDGE16L = 35,
    SPARC_INS_EDGE16LN = 36,
    SPARC_INS_EDGE16N = 37,
    SPARC_INS_EDGE32 = 38,
    SPARC_INS_EDGE32L = 39,
    SPARC_INS_EDGE32LN = 40,
    SPARC_INS_EDGE32N = 41,
    SPARC_INS_EDGE8 = 42,
    SPARC_INS_EDGE8L = 43,
    SPARC_INS_EDGE8LN = 44,
    SPARC_INS_EDGE8N = 45,
    SPARC_INS_FABSD = 46,
    SPARC_INS_FABSQ = 47,
    SPARC_INS_FABSS = 48,
    SPARC_INS_FADDD = 49,
    SPARC_INS_FADDQ = 50,
    SPARC_INS_FADDS = 51,
    SPARC_INS_FALIGNDATA = 52,
    SPARC_INS_FAND = 53,
    SPARC_INS_FANDNOT1 = 54,
    SPARC_INS_FANDNOT1S = 55,
    SPARC_INS_FANDNOT2 = 56,
    SPARC_INS_FANDNOT2S = 57,
    SPARC_INS_FANDS = 58,
    SPARC_INS_FCHKSM16 = 59,
    SPARC_INS_FCMPD = 60,
    SPARC_INS_FCMPEQ16 = 61,
    SPARC_INS_FCMPEQ32 = 62,
    SPARC_INS_FCMPGT16 = 63,
    SPARC_INS_FCMPGT32 = 64,
    SPARC_INS_FCMPLE16 = 65,
    SPARC_INS_FCMPLE32 = 66,
    SPARC_INS_FCMPNE16 = 67,
    SPARC_INS_FCMPNE32 = 68,
    SPARC_INS_FCMPQ = 69,
    SPARC_INS_FCMPS = 70,
    SPARC_INS_FDIVD = 71,
    SPARC_INS_FDIVQ = 72,
    SPARC_INS_FDIVS = 73,
    SPARC_INS_FDMULQ = 74,
    SPARC_INS_FDTOI = 75,
    SPARC_INS_FDTOQ = 76,
    SPARC_INS_FDTOS = 77,
    SPARC_INS_FDTOX = 78,
    SPARC_INS_FEXPAND = 79,
    SPARC_INS_FHADDD = 80,
    SPARC_INS_FHADDS = 81,
    SPARC_INS_FHSUBD = 82,
    SPARC_INS_FHSUBS = 83,
    SPARC_INS_FITOD = 84,
    SPARC_INS_FITOQ = 85,
    SPARC_INS_FITOS = 86,
    SPARC_INS_FLCMPD = 87,
    SPARC_INS_FLCMPS = 88,
    SPARC_INS_FLUSHW = 89,
    SPARC_INS_FMEAN16 = 90,
    SPARC_INS_FMOVD = 91,
    SPARC_INS_FMOVQ = 92,
    SPARC_INS_FMOVRDGEZ = 93,
    SPARC_INS_FMOVRQGEZ = 94,
    SPARC_INS_FMOVRSGEZ = 95,
    SPARC_INS_FMOVRDGZ = 96,
    SPARC_INS_FMOVRQGZ = 97,
    SPARC_INS_FMOVRSGZ = 98,
    SPARC_INS_FMOVRDLEZ = 99,
    SPARC_INS_FMOVRQLEZ = 100,
    SPARC_INS_FMOVRSLEZ = 101,
    SPARC_INS_FMOVRDLZ = 102,
    SPARC_INS_FMOVRQLZ = 103,
    SPARC_INS_FMOVRSLZ = 104,
    SPARC_INS_FMOVRDNZ = 105,
    SPARC_INS_FMOVRQNZ = 106,
    SPARC_INS_FMOVRSNZ = 107,
    SPARC_INS_FMOVRDZ = 108,
    SPARC_INS_FMOVRQZ = 109,
    SPARC_INS_FMOVRSZ = 110,
    SPARC_INS_FMOVS = 111,
    SPARC_INS_FMUL8SUX16 = 112,
    SPARC_INS_FMUL8ULX16 = 113,
    SPARC_INS_FMUL8X16 = 114,
    SPARC_INS_FMUL8X16AL = 115,
    SPARC_INS_FMUL8X16AU = 116,
    SPARC_INS_FMULD = 117,
    SPARC_INS_FMULD8SUX16 = 118,
    SPARC_INS_FMULD8ULX16 = 119,
    SPARC_INS_FMULQ = 120,
    SPARC_INS_FMULS = 121,
    SPARC_INS_FNADDD = 122,
    SPARC_INS_FNADDS = 123,
    SPARC_INS_FNAND = 124,
    SPARC_INS_FNANDS = 125,
    SPARC_INS_FNEGD = 126,
    SPARC_INS_FNEGQ = 127,
    SPARC_INS_FNEGS = 128,
    SPARC_INS_FNHADDD = 129,
    SPARC_INS_FNHADDS = 130,
    SPARC_INS_FNOR = 131,
    SPARC_INS_FNORS = 132,
    SPARC_INS_FNOT1 = 133,
    SPARC_INS_FNOT1S = 134,
    SPARC_INS_FNOT2 = 135,
    SPARC_INS_FNOT2S = 136,
    SPARC_INS_FONE = 137,
    SPARC_INS_FONES = 138,
    SPARC_INS_FOR = 139,
    SPARC_INS_FORNOT1 = 140,
    SPARC_INS_FORNOT1S = 141,
    SPARC_INS_FORNOT2 = 142,
    SPARC_INS_FORNOT2S = 143,
    SPARC_INS_FORS = 144,
    SPARC_INS_FPACK16 = 145,
    SPARC_INS_FPACK32 = 146,
    SPARC_INS_FPACKFIX = 147,
    SPARC_INS_FPADD16 = 148,
    SPARC_INS_FPADD16S = 149,
    SPARC_INS_FPADD32 = 150,
    SPARC_INS_FPADD32S = 151,
    SPARC_INS_FPADD64 = 152,
    SPARC_INS_FPMERGE = 153,
    SPARC_INS_FPSUB16 = 154,
    SPARC_INS_FPSUB16S = 155,
    SPARC_INS_FPSUB32 = 156,
    SPARC_INS_FPSUB32S = 157,
    SPARC_INS_FQTOD = 158,
    SPARC_INS_FQTOI = 159,
    SPARC_INS_FQTOS = 160,
    SPARC_INS_FQTOX = 161,
    SPARC_INS_FSLAS16 = 162,
    SPARC_INS_FSLAS32 = 163,
    SPARC_INS_FSLL16 = 164,
    SPARC_INS_FSLL32 = 165,
    SPARC_INS_FSMULD = 166,
    SPARC_INS_FSQRTD = 167,
    SPARC_INS_FSQRTQ = 168,
    SPARC_INS_FSQRTS = 169,
    SPARC_INS_FSRA16 = 170,
    SPARC_INS_FSRA32 = 171,
    SPARC_INS_FSRC1 = 172,
    SPARC_INS_FSRC1S = 173,
    SPARC_INS_FSRC2 = 174,
    SPARC_INS_FSRC2S = 175,
    SPARC_INS_FSRL16 = 176,
    SPARC_INS_FSRL32 = 177,
    SPARC_INS_FSTOD = 178,
    SPARC_INS_FSTOI = 179,
    SPARC_INS_FSTOQ = 180,
    SPARC_INS_FSTOX = 181,
    SPARC_INS_FSUBD = 182,
    SPARC_INS_FSUBQ = 183,
    SPARC_INS_FSUBS = 184,
    SPARC_INS_FXNOR = 185,
    SPARC_INS_FXNORS = 186,
    SPARC_INS_FXOR = 187,
    SPARC_INS_FXORS = 188,
    SPARC_INS_FXTOD = 189,
    SPARC_INS_FXTOQ = 190,
    SPARC_INS_FXTOS = 191,
    SPARC_INS_FZERO = 192,
    SPARC_INS_FZEROS = 193,
    SPARC_INS_JMPL = 194,
    SPARC_INS_LDD = 195,
    SPARC_INS_LD = 196,
    SPARC_INS_LDQ = 197,
    SPARC_INS_LDSB = 198,
    SPARC_INS_LDSH = 199,
    SPARC_INS_LDSW = 200,
    SPARC_INS_LDUB = 201,
    SPARC_INS_LDUH = 202,
    SPARC_INS_LDX = 203,
    SPARC_INS_LZCNT = 204,
    SPARC_INS_MEMBAR = 205,
    SPARC_INS_MOVDTOX = 206,
    SPARC_INS_MOV = 207,
    SPARC_INS_MOVRGEZ = 208,
    SPARC_INS_MOVRGZ = 209,
    SPARC_INS_MOVRLEZ = 210,
    SPARC_INS_MOVRLZ = 211,
    SPARC_INS_MOVRNZ = 212,
    SPARC_INS_MOVRZ = 213,
    SPARC_INS_MOVSTOSW = 214,
    SPARC_INS_MOVSTOUW = 215,
    SPARC_INS_MULX = 216,
    SPARC_INS_NOP = 217,
    SPARC_INS_ORCC = 218,
    SPARC_INS_ORNCC = 219,
    SPARC_INS_ORN = 220,
    SPARC_INS_OR = 221,
    SPARC_INS_PDIST = 222,
    SPARC_INS_PDISTN = 223,
    SPARC_INS_POPC = 224,
    SPARC_INS_RD = 225,
    SPARC_INS_RESTORE = 226,
    SPARC_INS_RETT = 227,
    SPARC_INS_SAVE = 228,
    SPARC_INS_SDIVCC = 229,
    SPARC_INS_SDIVX = 230,
    SPARC_INS_SDIV = 231,
    SPARC_INS_SETHI = 232,
    SPARC_INS_SHUTDOWN = 233,
    SPARC_INS_SIAM = 234,
    SPARC_INS_SLLX = 235,
    SPARC_INS_SLL = 236,
    SPARC_INS_SMULCC = 237,
    SPARC_INS_SMUL = 238,
    SPARC_INS_SRAX = 239,
    SPARC_INS_SRA = 240,
    SPARC_INS_SRLX = 241,
    SPARC_INS_SRL = 242,
    SPARC_INS_STBAR = 243,
    SPARC_INS_STB = 244,
    SPARC_INS_STD = 245,
    SPARC_INS_ST = 246,
    SPARC_INS_STH = 247,
    SPARC_INS_STQ = 248,
    SPARC_INS_STX = 249,
    SPARC_INS_SUBCC = 250,
    SPARC_INS_SUBX = 251,
    SPARC_INS_SUBXCC = 252,
    SPARC_INS_SUB = 253,
    SPARC_INS_SWAP = 254,
    SPARC_INS_TADDCCTV = 255,
    SPARC_INS_TADDCC = 256,
    SPARC_INS_T = 257,
    SPARC_INS_TSUBCCTV = 258,
    SPARC_INS_TSUBCC = 259,
    SPARC_INS_UDIVCC = 260,
    SPARC_INS_UDIVX = 261,
    SPARC_INS_UDIV = 262,
    SPARC_INS_UMULCC = 263,
    SPARC_INS_UMULXHI = 264,
    SPARC_INS_UMUL = 265,
    SPARC_INS_UNIMP = 266,
    SPARC_INS_FCMPED = 267,
    SPARC_INS_FCMPEQ = 268,
    SPARC_INS_FCMPES = 269,
    SPARC_INS_WR = 270,
    SPARC_INS_XMULX = 271,
    SPARC_INS_XMULXHI = 272,
    SPARC_INS_XNORCC = 273,
    SPARC_INS_XNOR = 274,
    SPARC_INS_XORCC = 275,
    SPARC_INS_XOR = 276,
    SPARC_INS_RET = 277,
    SPARC_INS_RETL = 278,
    SPARC_INS_ENDING = 279,
}
pub mod sparc_insn_group {
    #[doc = " Group of SPARC instructions"]
    pub type Type = libc::c_uint;
    #[doc = "< = CS_GRP_INVALID"]
    pub const SPARC_GRP_INVALID: Type = 0;
    #[doc = "< = CS_GRP_JUMP"]
    pub const SPARC_GRP_JUMP: Type = 1;
    pub const SPARC_GRP_HARDQUAD: Type = 128;
    pub const SPARC_GRP_V9: Type = 129;
    pub const SPARC_GRP_VIS: Type = 130;
    pub const SPARC_GRP_VIS2: Type = 131;
    pub const SPARC_GRP_VIS3: Type = 132;
    pub const SPARC_GRP_32BIT: Type = 133;
    pub const SPARC_GRP_64BIT: Type = 134;
    pub const SPARC_GRP_ENDING: Type = 135;
}
#[repr(u32)]
#[doc = " Enums corresponding to SystemZ condition codes"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum systemz_cc {
    SYSTEMZ_CC_O = 0,
    SYSTEMZ_CC_H = 1,
    SYSTEMZ_CC_NLE = 2,
    SYSTEMZ_CC_L = 3,
    SYSTEMZ_CC_NHE = 4,
    SYSTEMZ_CC_LH = 5,
    SYSTEMZ_CC_NE = 6,
    SYSTEMZ_CC_E = 7,
    SYSTEMZ_CC_NLH = 8,
    SYSTEMZ_CC_HE = 9,
    SYSTEMZ_CC_NL = 10,
    SYSTEMZ_CC_LE = 11,
    SYSTEMZ_CC_NH = 12,
    SYSTEMZ_CC_NO = 13,
    SYSTEMZ_CC_INVALID = 14,
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum systemz_op_type {
    #[doc = "< = CS_OP_INVALID (Uninitialized)."]
    SYSTEMZ_OP_INVALID = 0,
    #[doc = "< = CS_OP_REG (Register operand)."]
    SYSTEMZ_OP_REG = 1,
    #[doc = "< = CS_OP_IMM (Immediate operand)."]
    SYSTEMZ_OP_IMM = 2,
    #[doc = "< = CS_OP_MEM (Memory operand)."]
    SYSTEMZ_OP_MEM = 128,
}
pub mod systemz_reg {
    #[doc = " SystemZ registers"]
    pub type Type = libc::c_uint;
    pub const SYSTEMZ_REG_INVALID: Type = 0;
    pub const SYSTEMZ_REG_CC: Type = 1;
    pub const SYSTEMZ_REG_FPC: Type = 2;
    pub const SYSTEMZ_REG_A0: Type = 3;
    pub const SYSTEMZ_REG_A1: Type = 4;
    pub const SYSTEMZ_REG_A2: Type = 5;
    pub const SYSTEMZ_REG_A3: Type = 6;
    pub const SYSTEMZ_REG_A4: Type = 7;
    pub const SYSTEMZ_REG_A5: Type = 8;
    pub const SYSTEMZ_REG_A6: Type = 9;
    pub const SYSTEMZ_REG_A7: Type = 10;
    pub const SYSTEMZ_REG_A8: Type = 11;
    pub const SYSTEMZ_REG_A9: Type = 12;
    pub const SYSTEMZ_REG_A10: Type = 13;
    pub const SYSTEMZ_REG_A11: Type = 14;
    pub const SYSTEMZ_REG_A12: Type = 15;
    pub const SYSTEMZ_REG_A13: Type = 16;
    pub const SYSTEMZ_REG_A14: Type = 17;
    pub const SYSTEMZ_REG_A15: Type = 18;
    pub const SYSTEMZ_REG_C0: Type = 19;
    pub const SYSTEMZ_REG_C1: Type = 20;
    pub const SYSTEMZ_REG_C2: Type = 21;
    pub const SYSTEMZ_REG_C3: Type = 22;
    pub const SYSTEMZ_REG_C4: Type = 23;
    pub const SYSTEMZ_REG_C5: Type = 24;
    pub const SYSTEMZ_REG_C6: Type = 25;
    pub const SYSTEMZ_REG_C7: Type = 26;
    pub const SYSTEMZ_REG_C8: Type = 27;
    pub const SYSTEMZ_REG_C9: Type = 28;
    pub const SYSTEMZ_REG_C10: Type = 29;
    pub const SYSTEMZ_REG_C11: Type = 30;
    pub const SYSTEMZ_REG_C12: Type = 31;
    pub const SYSTEMZ_REG_C13: Type = 32;
    pub const SYSTEMZ_REG_C14: Type = 33;
    pub const SYSTEMZ_REG_C15: Type = 34;
    pub const SYSTEMZ_REG_V0: Type = 35;
    pub const SYSTEMZ_REG_V1: Type = 36;
    pub const SYSTEMZ_REG_V2: Type = 37;
    pub const SYSTEMZ_REG_V3: Type = 38;
    pub const SYSTEMZ_REG_V4: Type = 39;
    pub const SYSTEMZ_REG_V5: Type = 40;
    pub const SYSTEMZ_REG_V6: Type = 41;
    pub const SYSTEMZ_REG_V7: Type = 42;
    pub const SYSTEMZ_REG_V8: Type = 43;
    pub const SYSTEMZ_REG_V9: Type = 44;
    pub const SYSTEMZ_REG_V10: Type = 45;
    pub const SYSTEMZ_REG_V11: Type = 46;
    pub const SYSTEMZ_REG_V12: Type = 47;
    pub const SYSTEMZ_REG_V13: Type = 48;
    pub const SYSTEMZ_REG_V14: Type = 49;
    pub const SYSTEMZ_REG_V15: Type = 50;
    pub const SYSTEMZ_REG_V16: Type = 51;
    pub const SYSTEMZ_REG_V17: Type = 52;
    pub const SYSTEMZ_REG_V18: Type = 53;
    pub const SYSTEMZ_REG_V19: Type = 54;
    pub const SYSTEMZ_REG_V20: Type = 55;
    pub const SYSTEMZ_REG_V21: Type = 56;
    pub const SYSTEMZ_REG_V22: Type = 57;
    pub const SYSTEMZ_REG_V23: Type = 58;
    pub const SYSTEMZ_REG_V24: Type = 59;
    pub const SYSTEMZ_REG_V25: Type = 60;
    pub const SYSTEMZ_REG_V26: Type = 61;
    pub const SYSTEMZ_REG_V27: Type = 62;
    pub const SYSTEMZ_REG_V28: Type = 63;
    pub const SYSTEMZ_REG_V29: Type = 64;
    pub const SYSTEMZ_REG_V30: Type = 65;
    pub const SYSTEMZ_REG_V31: Type = 66;
    pub const SYSTEMZ_REG_F0D: Type = 67;
    pub const SYSTEMZ_REG_F1D: Type = 68;
    pub const SYSTEMZ_REG_F2D: Type = 69;
    pub const SYSTEMZ_REG_F3D: Type = 70;
    pub const SYSTEMZ_REG_F4D: Type = 71;
    pub const SYSTEMZ_REG_F5D: Type = 72;
    pub const SYSTEMZ_REG_F6D: Type = 73;
    pub const SYSTEMZ_REG_F7D: Type = 74;
    pub const SYSTEMZ_REG_F8D: Type = 75;
    pub const SYSTEMZ_REG_F9D: Type = 76;
    pub const SYSTEMZ_REG_F10D: Type = 77;
    pub const SYSTEMZ_REG_F11D: Type = 78;
    pub const SYSTEMZ_REG_F12D: Type = 79;
    pub const SYSTEMZ_REG_F13D: Type = 80;
    pub const SYSTEMZ_REG_F14D: Type = 81;
    pub const SYSTEMZ_REG_F15D: Type = 82;
    pub const SYSTEMZ_REG_F16D: Type = 83;
    pub const SYSTEMZ_REG_F17D: Type = 84;
    pub const SYSTEMZ_REG_F18D: Type = 85;
    pub const SYSTEMZ_REG_F19D: Type = 86;
    pub const SYSTEMZ_REG_F20D: Type = 87;
    pub const SYSTEMZ_REG_F21D: Type = 88;
    pub const SYSTEMZ_REG_F22D: Type = 89;
    pub const SYSTEMZ_REG_F23D: Type = 90;
    pub const SYSTEMZ_REG_F24D: Type = 91;
    pub const SYSTEMZ_REG_F25D: Type = 92;
    pub const SYSTEMZ_REG_F26D: Type = 93;
    pub const SYSTEMZ_REG_F27D: Type = 94;
    pub const SYSTEMZ_REG_F28D: Type = 95;
    pub const SYSTEMZ_REG_F29D: Type = 96;
    pub const SYSTEMZ_REG_F30D: Type = 97;
    pub const SYSTEMZ_REG_F31D: Type = 98;
    pub const SYSTEMZ_REG_F0Q: Type = 99;
    pub const SYSTEMZ_REG_F1Q: Type = 100;
    pub const SYSTEMZ_REG_F4Q: Type = 101;
    pub const SYSTEMZ_REG_F5Q: Type = 102;
    pub const SYSTEMZ_REG_F8Q: Type = 103;
    pub const SYSTEMZ_REG_F9Q: Type = 104;
    pub const SYSTEMZ_REG_F12Q: Type = 105;
    pub const SYSTEMZ_REG_F13Q: Type = 106;
    pub const SYSTEMZ_REG_F0S: Type = 107;
    pub const SYSTEMZ_REG_F1S: Type = 108;
    pub const SYSTEMZ_REG_F2S: Type = 109;
    pub const SYSTEMZ_REG_F3S: Type = 110;
    pub const SYSTEMZ_REG_F4S: Type = 111;
    pub const SYSTEMZ_REG_F5S: Type = 112;
    pub const SYSTEMZ_REG_F6S: Type = 113;
    pub const SYSTEMZ_REG_F7S: Type = 114;
    pub const SYSTEMZ_REG_F8S: Type = 115;
    pub const SYSTEMZ_REG_F9S: Type = 116;
    pub const SYSTEMZ_REG_F10S: Type = 117;
    pub const SYSTEMZ_REG_F11S: Type = 118;
    pub const SYSTEMZ_REG_F12S: Type = 119;
    pub const SYSTEMZ_REG_F13S: Type = 120;
    pub const SYSTEMZ_REG_F14S: Type = 121;
    pub const SYSTEMZ_REG_F15S: Type = 122;
    pub const SYSTEMZ_REG_F16S: Type = 123;
    pub const SYSTEMZ_REG_F17S: Type = 124;
    pub const SYSTEMZ_REG_F18S: Type = 125;
    pub const SYSTEMZ_REG_F19S: Type = 126;
    pub const SYSTEMZ_REG_F20S: Type = 127;
    pub const SYSTEMZ_REG_F21S: Type = 128;
    pub const SYSTEMZ_REG_F22S: Type = 129;
    pub const SYSTEMZ_REG_F23S: Type = 130;
    pub const SYSTEMZ_REG_F24S: Type = 131;
    pub const SYSTEMZ_REG_F25S: Type = 132;
    pub const SYSTEMZ_REG_F26S: Type = 133;
    pub const SYSTEMZ_REG_F27S: Type = 134;
    pub const SYSTEMZ_REG_F28S: Type = 135;
    pub const SYSTEMZ_REG_F29S: Type = 136;
    pub const SYSTEMZ_REG_F30S: Type = 137;
    pub const SYSTEMZ_REG_F31S: Type = 138;
    pub const SYSTEMZ_REG_R0D: Type = 139;
    pub const SYSTEMZ_REG_R1D: Type = 140;
    pub const SYSTEMZ_REG_R2D: Type = 141;
    pub const SYSTEMZ_REG_R3D: Type = 142;
    pub const SYSTEMZ_REG_R4D: Type = 143;
    pub const SYSTEMZ_REG_R5D: Type = 144;
    pub const SYSTEMZ_REG_R6D: Type = 145;
    pub const SYSTEMZ_REG_R7D: Type = 146;
    pub const SYSTEMZ_REG_R8D: Type = 147;
    pub const SYSTEMZ_REG_R9D: Type = 148;
    pub const SYSTEMZ_REG_R10D: Type = 149;
    pub const SYSTEMZ_REG_R11D: Type = 150;
    pub const SYSTEMZ_REG_R12D: Type = 151;
    pub const SYSTEMZ_REG_R13D: Type = 152;
    pub const SYSTEMZ_REG_R14D: Type = 153;
    pub const SYSTEMZ_REG_R15D: Type = 154;
    pub const SYSTEMZ_REG_R0H: Type = 155;
    pub const SYSTEMZ_REG_R1H: Type = 156;
    pub const SYSTEMZ_REG_R2H: Type = 157;
    pub const SYSTEMZ_REG_R3H: Type = 158;
    pub const SYSTEMZ_REG_R4H: Type = 159;
    pub const SYSTEMZ_REG_R5H: Type = 160;
    pub const SYSTEMZ_REG_R6H: Type = 161;
    pub const SYSTEMZ_REG_R7H: Type = 162;
    pub const SYSTEMZ_REG_R8H: Type = 163;
    pub const SYSTEMZ_REG_R9H: Type = 164;
    pub const SYSTEMZ_REG_R10H: Type = 165;
    pub const SYSTEMZ_REG_R11H: Type = 166;
    pub const SYSTEMZ_REG_R12H: Type = 167;
    pub const SYSTEMZ_REG_R13H: Type = 168;
    pub const SYSTEMZ_REG_R14H: Type = 169;
    pub const SYSTEMZ_REG_R15H: Type = 170;
    pub const SYSTEMZ_REG_R0L: Type = 171;
    pub const SYSTEMZ_REG_R1L: Type = 172;
    pub const SYSTEMZ_REG_R2L: Type = 173;
    pub const SYSTEMZ_REG_R3L: Type = 174;
    pub const SYSTEMZ_REG_R4L: Type = 175;
    pub const SYSTEMZ_REG_R5L: Type = 176;
    pub const SYSTEMZ_REG_R6L: Type = 177;
    pub const SYSTEMZ_REG_R7L: Type = 178;
    pub const SYSTEMZ_REG_R8L: Type = 179;
    pub const SYSTEMZ_REG_R9L: Type = 180;
    pub const SYSTEMZ_REG_R10L: Type = 181;
    pub const SYSTEMZ_REG_R11L: Type = 182;
    pub const SYSTEMZ_REG_R12L: Type = 183;
    pub const SYSTEMZ_REG_R13L: Type = 184;
    pub const SYSTEMZ_REG_R14L: Type = 185;
    pub const SYSTEMZ_REG_R15L: Type = 186;
    pub const SYSTEMZ_REG_R0Q: Type = 187;
    pub const SYSTEMZ_REG_R2Q: Type = 188;
    pub const SYSTEMZ_REG_R4Q: Type = 189;
    pub const SYSTEMZ_REG_R6Q: Type = 190;
    pub const SYSTEMZ_REG_R8Q: Type = 191;
    pub const SYSTEMZ_REG_R10Q: Type = 192;
    pub const SYSTEMZ_REG_R12Q: Type = 193;
    pub const SYSTEMZ_REG_R14Q: Type = 194;
    pub const SYSTEMZ_REG_ENDING: Type = 195;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum systemz_insn_form {
    SYSTEMZ_INSN_FORM_INVALID = 0,
    SYSTEMZ_INSN_FORM_INSTRXA = 1,
    SYSTEMZ_INSN_FORM_INSTRXE = 2,
    SYSTEMZ_INSN_FORM_INSTRRE = 3,
    SYSTEMZ_INSN_FORM_INSTRR = 4,
    SYSTEMZ_INSN_FORM_INSTRRFA = 5,
    SYSTEMZ_INSN_FORM_INSTRILA = 6,
    SYSTEMZ_INSN_FORM_INSTRXYA = 7,
    SYSTEMZ_INSN_FORM_INSTRIA = 8,
    SYSTEMZ_INSN_FORM_INSTRIED = 9,
    SYSTEMZ_INSN_FORM_INSTSIY = 10,
    SYSTEMZ_INSN_FORM_INSTSSB = 11,
    SYSTEMZ_INSN_FORM_INSTRXB = 12,
    SYSTEMZ_INSN_FORM_INSTRXYB = 13,
    SYSTEMZ_INSN_FORM_INSTSMI = 14,
    SYSTEMZ_INSN_FORM_INSTMII = 15,
    SYSTEMZ_INSN_FORM_INSTRIB = 16,
    SYSTEMZ_INSN_FORM_INSTRILB = 17,
    SYSTEMZ_INSN_FORM_INSTRIC = 18,
    SYSTEMZ_INSN_FORM_INSTRILC = 19,
    SYSTEMZ_INSN_FORM_INSTRSI = 20,
    SYSTEMZ_INSN_FORM_INSTRIEE = 21,
    SYSTEMZ_INSN_FORM_INSTRSA = 22,
    SYSTEMZ_INSN_FORM_INSTRSYA = 23,
    SYSTEMZ_INSN_FORM_INSTRRFE = 24,
    SYSTEMZ_INSN_FORM_INSTRSLB = 25,
    SYSTEMZ_INSN_FORM_INSTS = 26,
    SYSTEMZ_INSN_FORM_INSTSIL = 27,
    SYSTEMZ_INSN_FORM_INSTRIS = 28,
    SYSTEMZ_INSN_FORM_INSTRIEC = 29,
    SYSTEMZ_INSN_FORM_INSTRIEA = 30,
    SYSTEMZ_INSN_FORM_INSTRRS = 31,
    SYSTEMZ_INSN_FORM_INSTRIEB = 32,
    SYSTEMZ_INSN_FORM_INSTRRFC = 33,
    SYSTEMZ_INSN_FORM_INSTSSA = 34,
    SYSTEMZ_INSN_FORM_INSTRSYB = 35,
    SYSTEMZ_INSN_FORM_INSTSI = 36,
    SYSTEMZ_INSN_FORM_INSTRSB = 37,
    SYSTEMZ_INSN_FORM_INSTRRFB = 38,
    SYSTEMZ_INSN_FORM_INSTRRFD = 39,
    SYSTEMZ_INSN_FORM_INSTSSF = 40,
    SYSTEMZ_INSN_FORM_INSTSSE = 41,
    SYSTEMZ_INSN_FORM_INSTRIEG = 42,
    SYSTEMZ_INSN_FORM_INSTRXF = 43,
    SYSTEMZ_INSN_FORM_INSTRRD = 44,
    SYSTEMZ_INSN_FORM_INSTSSD = 45,
    SYSTEMZ_INSN_FORM_INSTIE = 46,
    SYSTEMZ_INSN_FORM_INSTE = 47,
    SYSTEMZ_INSN_FORM_INSTRIEF = 48,
    SYSTEMZ_INSN_FORM_INSTSSC = 49,
    SYSTEMZ_INSN_FORM_INSTI = 50,
    SYSTEMZ_INSN_FORM_INSTRSLA = 51,
    SYSTEMZ_INSN_FORM_INSTVRRC = 52,
    SYSTEMZ_INSN_FORM_INSTVRRD = 53,
    SYSTEMZ_INSN_FORM_INSTVRIF = 54,
    SYSTEMZ_INSN_FORM_INSTVRRA = 55,
    SYSTEMZ_INSN_FORM_INSTVRRB = 56,
    SYSTEMZ_INSN_FORM_INSTVRRK = 57,
    SYSTEMZ_INSN_FORM_INSTVRRH = 58,
    SYSTEMZ_INSN_FORM_INSTVRRJ = 59,
    SYSTEMZ_INSN_FORM_INSTVRRI = 60,
    SYSTEMZ_INSN_FORM_INSTVRII = 61,
    SYSTEMZ_INSN_FORM_INSTVRID = 62,
    SYSTEMZ_INSN_FORM_INSTVRSA = 63,
    SYSTEMZ_INSN_FORM_INSTVRRE = 64,
    SYSTEMZ_INSN_FORM_INSTVRIE = 65,
    SYSTEMZ_INSN_FORM_INSTVRIA = 66,
    SYSTEMZ_INSN_FORM_INSTVRV = 67,
    SYSTEMZ_INSN_FORM_INSTVRIB = 68,
    SYSTEMZ_INSN_FORM_INSTVRX = 69,
    SYSTEMZ_INSN_FORM_INSTVRSC = 70,
    SYSTEMZ_INSN_FORM_INSTVRIH = 71,
    SYSTEMZ_INSN_FORM_INSTVRSB = 72,
    SYSTEMZ_INSN_FORM_INSTVSI = 73,
    SYSTEMZ_INSN_FORM_INSTVRSD = 74,
    SYSTEMZ_INSN_FORM_INSTVRRF = 75,
    SYSTEMZ_INSN_FORM_INSTVRIG = 76,
    SYSTEMZ_INSN_FORM_INSTVRIC = 77,
    SYSTEMZ_INSN_FORM_INSTVRRG = 78,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum systemz_addr_mode {
    SYSTEMZ_AM_INVALID = 0,
    #[doc = "< Base and displacement are set."]
    SYSTEMZ_AM_BD = 1,
    #[doc = "< Base, displacement and index register are set."]
    SYSTEMZ_AM_BDX = 2,
    #[doc = "< Base, displacement and length (immediate) are set."]
    SYSTEMZ_AM_BDL = 3,
    #[doc = "< Base, displacement and length (register) are set."]
    SYSTEMZ_AM_BDR = 4,
    #[doc = "< Base, displacement and index vector register are set."]
    SYSTEMZ_AM_BDV = 5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct systemz_suppl_info {
    pub form: systemz_insn_form,
}
#[doc = " Instruction's operand referring to memory\n This is associated with SYSTEMZ_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct systemz_op_mem {
    #[doc = "< Address mode. Indicates which field below are set."]
    pub am: systemz_addr_mode,
    #[doc = "< base register, can be safely interpreted as\n< a value of type `systemz_reg`, but it is only\n< one byte wide"]
    pub base: u8,
    #[doc = "< Index register, same conditions apply here"]
    pub index: u8,
    #[doc = "< Length component. Can be a register or immediate."]
    pub length: u64,
    #[doc = "< displacement/offset value"]
    pub disp: i64,
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_systemz_op {
    #[doc = "< operand type"]
    pub type_: systemz_op_type,
    pub __bindgen_anon_1: cs_systemz_op__bindgen_ty_1,
    #[doc = "< R/W access of the operand."]
    pub access: cs_ac_type,
    #[doc = "< Bit width of the immediate. 0 if not specified."]
    pub imm_width: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_systemz_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: systemz_reg::Type,
    #[doc = "< immediate value for IMM operand"]
    pub imm: i64,
    #[doc = "< base/disp value for MEM operand"]
    pub mem: systemz_op_mem,
}
impl ::core::fmt::Debug for cs_systemz_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_systemz_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_systemz_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_systemz_op {{ type: {:?}, __bindgen_anon_1: {:?}, access: {:?} }}",
            self.type_, self.__bindgen_anon_1, self.access
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_systemz {
    #[doc = "< Code condition"]
    pub cc: systemz_cc,
    #[doc = "< The instruction format."]
    pub format: systemz_insn_form,
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_systemz_op; 6usize],
}
impl ::core::fmt::Debug for cs_systemz {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_systemz {{ cc: {:?}, format: {:?}, operands: {:?} }}",
            self.cc, self.format, self.operands
        )
    }
}
#[repr(u32)]
#[doc = " SystemZ instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum systemz_insn {
    SYSTEMZ_INS_INVALID = 0,
    SYSTEMZ_INS_A = 1,
    SYSTEMZ_INS_AD = 2,
    SYSTEMZ_INS_ADB = 3,
    SYSTEMZ_INS_ADBR = 4,
    SYSTEMZ_INS_ADR = 5,
    SYSTEMZ_INS_ADTR = 6,
    SYSTEMZ_INS_ADTRA = 7,
    SYSTEMZ_INS_AE = 8,
    SYSTEMZ_INS_AEB = 9,
    SYSTEMZ_INS_AEBR = 10,
    SYSTEMZ_INS_AER = 11,
    SYSTEMZ_INS_AFI = 12,
    SYSTEMZ_INS_AG = 13,
    SYSTEMZ_INS_AGF = 14,
    SYSTEMZ_INS_AGFI = 15,
    SYSTEMZ_INS_AGFR = 16,
    SYSTEMZ_INS_AGH = 17,
    SYSTEMZ_INS_AGHI = 18,
    SYSTEMZ_INS_AGHIK = 19,
    SYSTEMZ_INS_AGR = 20,
    SYSTEMZ_INS_AGRK = 21,
    SYSTEMZ_INS_AGSI = 22,
    SYSTEMZ_INS_AH = 23,
    SYSTEMZ_INS_AHHHR = 24,
    SYSTEMZ_INS_AHHLR = 25,
    SYSTEMZ_INS_AHI = 26,
    SYSTEMZ_INS_AHIK = 27,
    SYSTEMZ_INS_AHY = 28,
    SYSTEMZ_INS_AIH = 29,
    SYSTEMZ_INS_AL = 30,
    SYSTEMZ_INS_ALC = 31,
    SYSTEMZ_INS_ALCG = 32,
    SYSTEMZ_INS_ALCGR = 33,
    SYSTEMZ_INS_ALCR = 34,
    SYSTEMZ_INS_ALFI = 35,
    SYSTEMZ_INS_ALG = 36,
    SYSTEMZ_INS_ALGF = 37,
    SYSTEMZ_INS_ALGFI = 38,
    SYSTEMZ_INS_ALGFR = 39,
    SYSTEMZ_INS_ALGHSIK = 40,
    SYSTEMZ_INS_ALGR = 41,
    SYSTEMZ_INS_ALGRK = 42,
    SYSTEMZ_INS_ALGSI = 43,
    SYSTEMZ_INS_ALHHHR = 44,
    SYSTEMZ_INS_ALHHLR = 45,
    SYSTEMZ_INS_ALHSIK = 46,
    SYSTEMZ_INS_ALR = 47,
    SYSTEMZ_INS_ALRK = 48,
    SYSTEMZ_INS_ALSI = 49,
    SYSTEMZ_INS_ALSIH = 50,
    SYSTEMZ_INS_ALSIHN = 51,
    SYSTEMZ_INS_ALY = 52,
    SYSTEMZ_INS_AP = 53,
    SYSTEMZ_INS_AR = 54,
    SYSTEMZ_INS_ARK = 55,
    SYSTEMZ_INS_ASI = 56,
    SYSTEMZ_INS_AU = 57,
    SYSTEMZ_INS_AUR = 58,
    SYSTEMZ_INS_AW = 59,
    SYSTEMZ_INS_AWR = 60,
    SYSTEMZ_INS_AXBR = 61,
    SYSTEMZ_INS_AXR = 62,
    SYSTEMZ_INS_AXTR = 63,
    SYSTEMZ_INS_AXTRA = 64,
    SYSTEMZ_INS_AY = 65,
    SYSTEMZ_INS_B = 66,
    SYSTEMZ_INS_BAKR = 67,
    SYSTEMZ_INS_BAL = 68,
    SYSTEMZ_INS_BALR = 69,
    SYSTEMZ_INS_BAS = 70,
    SYSTEMZ_INS_BASR = 71,
    SYSTEMZ_INS_BASSM = 72,
    SYSTEMZ_INS_BE = 73,
    SYSTEMZ_INS_BH = 74,
    SYSTEMZ_INS_BHE = 75,
    SYSTEMZ_INS_BL = 76,
    SYSTEMZ_INS_BLE = 77,
    SYSTEMZ_INS_BLH = 78,
    SYSTEMZ_INS_BM = 79,
    SYSTEMZ_INS_BNE = 80,
    SYSTEMZ_INS_BNH = 81,
    SYSTEMZ_INS_BNHE = 82,
    SYSTEMZ_INS_BNL = 83,
    SYSTEMZ_INS_BNLE = 84,
    SYSTEMZ_INS_BNLH = 85,
    SYSTEMZ_INS_BNM = 86,
    SYSTEMZ_INS_BNO = 87,
    SYSTEMZ_INS_BNP = 88,
    SYSTEMZ_INS_BNZ = 89,
    SYSTEMZ_INS_BO = 90,
    SYSTEMZ_INS_BP = 91,
    SYSTEMZ_INS_BZ = 92,
    SYSTEMZ_INS_BC = 93,
    SYSTEMZ_INS_BCR = 94,
    SYSTEMZ_INS_BCT = 95,
    SYSTEMZ_INS_BCTG = 96,
    SYSTEMZ_INS_BCTGR = 97,
    SYSTEMZ_INS_BCTR = 98,
    SYSTEMZ_INS_BI = 99,
    SYSTEMZ_INS_BIE = 100,
    SYSTEMZ_INS_BIH = 101,
    SYSTEMZ_INS_BIHE = 102,
    SYSTEMZ_INS_BIL = 103,
    SYSTEMZ_INS_BILE = 104,
    SYSTEMZ_INS_BILH = 105,
    SYSTEMZ_INS_BIM = 106,
    SYSTEMZ_INS_BINE = 107,
    SYSTEMZ_INS_BINH = 108,
    SYSTEMZ_INS_BINHE = 109,
    SYSTEMZ_INS_BINL = 110,
    SYSTEMZ_INS_BINLE = 111,
    SYSTEMZ_INS_BINLH = 112,
    SYSTEMZ_INS_BINM = 113,
    SYSTEMZ_INS_BINO = 114,
    SYSTEMZ_INS_BINP = 115,
    SYSTEMZ_INS_BINZ = 116,
    SYSTEMZ_INS_BIO = 117,
    SYSTEMZ_INS_BIP = 118,
    SYSTEMZ_INS_BIZ = 119,
    SYSTEMZ_INS_BIC = 120,
    SYSTEMZ_INS_BPP = 121,
    SYSTEMZ_INS_BPRP = 122,
    SYSTEMZ_INS_BR = 123,
    SYSTEMZ_INS_BRAS = 124,
    SYSTEMZ_INS_BRASL = 125,
    SYSTEMZ_INS_BER = 126,
    SYSTEMZ_INS_BHR = 127,
    SYSTEMZ_INS_BHER = 128,
    SYSTEMZ_INS_BLR = 129,
    SYSTEMZ_INS_BLER = 130,
    SYSTEMZ_INS_BLHR = 131,
    SYSTEMZ_INS_BMR = 132,
    SYSTEMZ_INS_BNER = 133,
    SYSTEMZ_INS_BNHR = 134,
    SYSTEMZ_INS_BNHER = 135,
    SYSTEMZ_INS_BNLR = 136,
    SYSTEMZ_INS_BNLER = 137,
    SYSTEMZ_INS_BNLHR = 138,
    SYSTEMZ_INS_BNMR = 139,
    SYSTEMZ_INS_BNOR = 140,
    SYSTEMZ_INS_BNPR = 141,
    SYSTEMZ_INS_BNZR = 142,
    SYSTEMZ_INS_BOR = 143,
    SYSTEMZ_INS_BPR = 144,
    SYSTEMZ_INS_BZR = 145,
    SYSTEMZ_INS_BRC = 146,
    SYSTEMZ_INS_BRCL = 147,
    SYSTEMZ_INS_BRCT = 148,
    SYSTEMZ_INS_BRCTG = 149,
    SYSTEMZ_INS_BRCTH = 150,
    SYSTEMZ_INS_BRXH = 151,
    SYSTEMZ_INS_BRXHG = 152,
    SYSTEMZ_INS_BRXLE = 153,
    SYSTEMZ_INS_BRXLG = 154,
    SYSTEMZ_INS_BSA = 155,
    SYSTEMZ_INS_BSG = 156,
    SYSTEMZ_INS_BSM = 157,
    SYSTEMZ_INS_BXH = 158,
    SYSTEMZ_INS_BXHG = 159,
    SYSTEMZ_INS_BXLE = 160,
    SYSTEMZ_INS_BXLEG = 161,
    SYSTEMZ_INS_C = 162,
    SYSTEMZ_INS_CD = 163,
    SYSTEMZ_INS_CDB = 164,
    SYSTEMZ_INS_CDBR = 165,
    SYSTEMZ_INS_CDFBR = 166,
    SYSTEMZ_INS_CDFBRA = 167,
    SYSTEMZ_INS_CDFR = 168,
    SYSTEMZ_INS_CDFTR = 169,
    SYSTEMZ_INS_CDGBR = 170,
    SYSTEMZ_INS_CDGBRA = 171,
    SYSTEMZ_INS_CDGR = 172,
    SYSTEMZ_INS_CDGTR = 173,
    SYSTEMZ_INS_CDGTRA = 174,
    SYSTEMZ_INS_CDLFBR = 175,
    SYSTEMZ_INS_CDLFTR = 176,
    SYSTEMZ_INS_CDLGBR = 177,
    SYSTEMZ_INS_CDLGTR = 178,
    SYSTEMZ_INS_CDPT = 179,
    SYSTEMZ_INS_CDR = 180,
    SYSTEMZ_INS_CDS = 181,
    SYSTEMZ_INS_CDSG = 182,
    SYSTEMZ_INS_CDSTR = 183,
    SYSTEMZ_INS_CDSY = 184,
    SYSTEMZ_INS_CDTR = 185,
    SYSTEMZ_INS_CDUTR = 186,
    SYSTEMZ_INS_CDZT = 187,
    SYSTEMZ_INS_CE = 188,
    SYSTEMZ_INS_CEB = 189,
    SYSTEMZ_INS_CEBR = 190,
    SYSTEMZ_INS_CEDTR = 191,
    SYSTEMZ_INS_CEFBR = 192,
    SYSTEMZ_INS_CEFBRA = 193,
    SYSTEMZ_INS_CEFR = 194,
    SYSTEMZ_INS_CEGBR = 195,
    SYSTEMZ_INS_CEGBRA = 196,
    SYSTEMZ_INS_CEGR = 197,
    SYSTEMZ_INS_CELFBR = 198,
    SYSTEMZ_INS_CELGBR = 199,
    SYSTEMZ_INS_CER = 200,
    SYSTEMZ_INS_CEXTR = 201,
    SYSTEMZ_INS_CFC = 202,
    SYSTEMZ_INS_CFDBR = 203,
    SYSTEMZ_INS_CFDBRA = 204,
    SYSTEMZ_INS_CFDR = 205,
    SYSTEMZ_INS_CFDTR = 206,
    SYSTEMZ_INS_CFEBR = 207,
    SYSTEMZ_INS_CFEBRA = 208,
    SYSTEMZ_INS_CFER = 209,
    SYSTEMZ_INS_CFI = 210,
    SYSTEMZ_INS_CFXBR = 211,
    SYSTEMZ_INS_CFXBRA = 212,
    SYSTEMZ_INS_CFXR = 213,
    SYSTEMZ_INS_CFXTR = 214,
    SYSTEMZ_INS_CG = 215,
    SYSTEMZ_INS_CGDBR = 216,
    SYSTEMZ_INS_CGDBRA = 217,
    SYSTEMZ_INS_CGDR = 218,
    SYSTEMZ_INS_CGDTR = 219,
    SYSTEMZ_INS_CGDTRA = 220,
    SYSTEMZ_INS_CGEBR = 221,
    SYSTEMZ_INS_CGEBRA = 222,
    SYSTEMZ_INS_CGER = 223,
    SYSTEMZ_INS_CGF = 224,
    SYSTEMZ_INS_CGFI = 225,
    SYSTEMZ_INS_CGFR = 226,
    SYSTEMZ_INS_CGFRL = 227,
    SYSTEMZ_INS_CGH = 228,
    SYSTEMZ_INS_CGHI = 229,
    SYSTEMZ_INS_CGHRL = 230,
    SYSTEMZ_INS_CGHSI = 231,
    SYSTEMZ_INS_CGIB = 232,
    SYSTEMZ_INS_CGIBE = 233,
    SYSTEMZ_INS_CGIBH = 234,
    SYSTEMZ_INS_CGIBHE = 235,
    SYSTEMZ_INS_CGIBL = 236,
    SYSTEMZ_INS_CGIBLE = 237,
    SYSTEMZ_INS_CGIBLH = 238,
    SYSTEMZ_INS_CGIBNE = 239,
    SYSTEMZ_INS_CGIBNH = 240,
    SYSTEMZ_INS_CGIBNHE = 241,
    SYSTEMZ_INS_CGIBNL = 242,
    SYSTEMZ_INS_CGIBNLE = 243,
    SYSTEMZ_INS_CGIBNLH = 244,
    SYSTEMZ_INS_CGIJ = 245,
    SYSTEMZ_INS_CGIJE = 246,
    SYSTEMZ_INS_CGIJH = 247,
    SYSTEMZ_INS_CGIJHE = 248,
    SYSTEMZ_INS_CGIJL = 249,
    SYSTEMZ_INS_CGIJLE = 250,
    SYSTEMZ_INS_CGIJLH = 251,
    SYSTEMZ_INS_CGIJNE = 252,
    SYSTEMZ_INS_CGIJNH = 253,
    SYSTEMZ_INS_CGIJNHE = 254,
    SYSTEMZ_INS_CGIJNL = 255,
    SYSTEMZ_INS_CGIJNLE = 256,
    SYSTEMZ_INS_CGIJNLH = 257,
    SYSTEMZ_INS_CGIT = 258,
    SYSTEMZ_INS_CGITE = 259,
    SYSTEMZ_INS_CGITH = 260,
    SYSTEMZ_INS_CGITHE = 261,
    SYSTEMZ_INS_CGITL = 262,
    SYSTEMZ_INS_CGITLE = 263,
    SYSTEMZ_INS_CGITLH = 264,
    SYSTEMZ_INS_CGITNE = 265,
    SYSTEMZ_INS_CGITNH = 266,
    SYSTEMZ_INS_CGITNHE = 267,
    SYSTEMZ_INS_CGITNL = 268,
    SYSTEMZ_INS_CGITNLE = 269,
    SYSTEMZ_INS_CGITNLH = 270,
    SYSTEMZ_INS_CGR = 271,
    SYSTEMZ_INS_CGRB = 272,
    SYSTEMZ_INS_CGRBE = 273,
    SYSTEMZ_INS_CGRBH = 274,
    SYSTEMZ_INS_CGRBHE = 275,
    SYSTEMZ_INS_CGRBL = 276,
    SYSTEMZ_INS_CGRBLE = 277,
    SYSTEMZ_INS_CGRBLH = 278,
    SYSTEMZ_INS_CGRBNE = 279,
    SYSTEMZ_INS_CGRBNH = 280,
    SYSTEMZ_INS_CGRBNHE = 281,
    SYSTEMZ_INS_CGRBNL = 282,
    SYSTEMZ_INS_CGRBNLE = 283,
    SYSTEMZ_INS_CGRBNLH = 284,
    SYSTEMZ_INS_CGRJ = 285,
    SYSTEMZ_INS_CGRJE = 286,
    SYSTEMZ_INS_CGRJH = 287,
    SYSTEMZ_INS_CGRJHE = 288,
    SYSTEMZ_INS_CGRJL = 289,
    SYSTEMZ_INS_CGRJLE = 290,
    SYSTEMZ_INS_CGRJLH = 291,
    SYSTEMZ_INS_CGRJNE = 292,
    SYSTEMZ_INS_CGRJNH = 293,
    SYSTEMZ_INS_CGRJNHE = 294,
    SYSTEMZ_INS_CGRJNL = 295,
    SYSTEMZ_INS_CGRJNLE = 296,
    SYSTEMZ_INS_CGRJNLH = 297,
    SYSTEMZ_INS_CGRL = 298,
    SYSTEMZ_INS_CGRT = 299,
    SYSTEMZ_INS_CGRTE = 300,
    SYSTEMZ_INS_CGRTH = 301,
    SYSTEMZ_INS_CGRTHE = 302,
    SYSTEMZ_INS_CGRTL = 303,
    SYSTEMZ_INS_CGRTLE = 304,
    SYSTEMZ_INS_CGRTLH = 305,
    SYSTEMZ_INS_CGRTNE = 306,
    SYSTEMZ_INS_CGRTNH = 307,
    SYSTEMZ_INS_CGRTNHE = 308,
    SYSTEMZ_INS_CGRTNL = 309,
    SYSTEMZ_INS_CGRTNLE = 310,
    SYSTEMZ_INS_CGRTNLH = 311,
    SYSTEMZ_INS_CGXBR = 312,
    SYSTEMZ_INS_CGXBRA = 313,
    SYSTEMZ_INS_CGXR = 314,
    SYSTEMZ_INS_CGXTR = 315,
    SYSTEMZ_INS_CGXTRA = 316,
    SYSTEMZ_INS_CH = 317,
    SYSTEMZ_INS_CHF = 318,
    SYSTEMZ_INS_CHHR = 319,
    SYSTEMZ_INS_CHHSI = 320,
    SYSTEMZ_INS_CHI = 321,
    SYSTEMZ_INS_CHLR = 322,
    SYSTEMZ_INS_CHRL = 323,
    SYSTEMZ_INS_CHSI = 324,
    SYSTEMZ_INS_CHY = 325,
    SYSTEMZ_INS_CIB = 326,
    SYSTEMZ_INS_CIBE = 327,
    SYSTEMZ_INS_CIBH = 328,
    SYSTEMZ_INS_CIBHE = 329,
    SYSTEMZ_INS_CIBL = 330,
    SYSTEMZ_INS_CIBLE = 331,
    SYSTEMZ_INS_CIBLH = 332,
    SYSTEMZ_INS_CIBNE = 333,
    SYSTEMZ_INS_CIBNH = 334,
    SYSTEMZ_INS_CIBNHE = 335,
    SYSTEMZ_INS_CIBNL = 336,
    SYSTEMZ_INS_CIBNLE = 337,
    SYSTEMZ_INS_CIBNLH = 338,
    SYSTEMZ_INS_CIH = 339,
    SYSTEMZ_INS_CIJ = 340,
    SYSTEMZ_INS_CIJE = 341,
    SYSTEMZ_INS_CIJH = 342,
    SYSTEMZ_INS_CIJHE = 343,
    SYSTEMZ_INS_CIJL = 344,
    SYSTEMZ_INS_CIJLE = 345,
    SYSTEMZ_INS_CIJLH = 346,
    SYSTEMZ_INS_CIJNE = 347,
    SYSTEMZ_INS_CIJNH = 348,
    SYSTEMZ_INS_CIJNHE = 349,
    SYSTEMZ_INS_CIJNL = 350,
    SYSTEMZ_INS_CIJNLE = 351,
    SYSTEMZ_INS_CIJNLH = 352,
    SYSTEMZ_INS_CIT = 353,
    SYSTEMZ_INS_CITE = 354,
    SYSTEMZ_INS_CITH = 355,
    SYSTEMZ_INS_CITHE = 356,
    SYSTEMZ_INS_CITL = 357,
    SYSTEMZ_INS_CITLE = 358,
    SYSTEMZ_INS_CITLH = 359,
    SYSTEMZ_INS_CITNE = 360,
    SYSTEMZ_INS_CITNH = 361,
    SYSTEMZ_INS_CITNHE = 362,
    SYSTEMZ_INS_CITNL = 363,
    SYSTEMZ_INS_CITNLE = 364,
    SYSTEMZ_INS_CITNLH = 365,
    SYSTEMZ_INS_CKSM = 366,
    SYSTEMZ_INS_CL = 367,
    SYSTEMZ_INS_CLC = 368,
    SYSTEMZ_INS_CLCL = 369,
    SYSTEMZ_INS_CLCLE = 370,
    SYSTEMZ_INS_CLCLU = 371,
    SYSTEMZ_INS_CLFDBR = 372,
    SYSTEMZ_INS_CLFDTR = 373,
    SYSTEMZ_INS_CLFEBR = 374,
    SYSTEMZ_INS_CLFHSI = 375,
    SYSTEMZ_INS_CLFI = 376,
    SYSTEMZ_INS_CLFIT = 377,
    SYSTEMZ_INS_CLFITE = 378,
    SYSTEMZ_INS_CLFITH = 379,
    SYSTEMZ_INS_CLFITHE = 380,
    SYSTEMZ_INS_CLFITL = 381,
    SYSTEMZ_INS_CLFITLE = 382,
    SYSTEMZ_INS_CLFITLH = 383,
    SYSTEMZ_INS_CLFITNE = 384,
    SYSTEMZ_INS_CLFITNH = 385,
    SYSTEMZ_INS_CLFITNHE = 386,
    SYSTEMZ_INS_CLFITNL = 387,
    SYSTEMZ_INS_CLFITNLE = 388,
    SYSTEMZ_INS_CLFITNLH = 389,
    SYSTEMZ_INS_CLFXBR = 390,
    SYSTEMZ_INS_CLFXTR = 391,
    SYSTEMZ_INS_CLG = 392,
    SYSTEMZ_INS_CLGDBR = 393,
    SYSTEMZ_INS_CLGDTR = 394,
    SYSTEMZ_INS_CLGEBR = 395,
    SYSTEMZ_INS_CLGF = 396,
    SYSTEMZ_INS_CLGFI = 397,
    SYSTEMZ_INS_CLGFR = 398,
    SYSTEMZ_INS_CLGFRL = 399,
    SYSTEMZ_INS_CLGHRL = 400,
    SYSTEMZ_INS_CLGHSI = 401,
    SYSTEMZ_INS_CLGIB = 402,
    SYSTEMZ_INS_CLGIBE = 403,
    SYSTEMZ_INS_CLGIBH = 404,
    SYSTEMZ_INS_CLGIBHE = 405,
    SYSTEMZ_INS_CLGIBL = 406,
    SYSTEMZ_INS_CLGIBLE = 407,
    SYSTEMZ_INS_CLGIBLH = 408,
    SYSTEMZ_INS_CLGIBNE = 409,
    SYSTEMZ_INS_CLGIBNH = 410,
    SYSTEMZ_INS_CLGIBNHE = 411,
    SYSTEMZ_INS_CLGIBNL = 412,
    SYSTEMZ_INS_CLGIBNLE = 413,
    SYSTEMZ_INS_CLGIBNLH = 414,
    SYSTEMZ_INS_CLGIJ = 415,
    SYSTEMZ_INS_CLGIJE = 416,
    SYSTEMZ_INS_CLGIJH = 417,
    SYSTEMZ_INS_CLGIJHE = 418,
    SYSTEMZ_INS_CLGIJL = 419,
    SYSTEMZ_INS_CLGIJLE = 420,
    SYSTEMZ_INS_CLGIJLH = 421,
    SYSTEMZ_INS_CLGIJNE = 422,
    SYSTEMZ_INS_CLGIJNH = 423,
    SYSTEMZ_INS_CLGIJNHE = 424,
    SYSTEMZ_INS_CLGIJNL = 425,
    SYSTEMZ_INS_CLGIJNLE = 426,
    SYSTEMZ_INS_CLGIJNLH = 427,
    SYSTEMZ_INS_CLGIT = 428,
    SYSTEMZ_INS_CLGITE = 429,
    SYSTEMZ_INS_CLGITH = 430,
    SYSTEMZ_INS_CLGITHE = 431,
    SYSTEMZ_INS_CLGITL = 432,
    SYSTEMZ_INS_CLGITLE = 433,
    SYSTEMZ_INS_CLGITLH = 434,
    SYSTEMZ_INS_CLGITNE = 435,
    SYSTEMZ_INS_CLGITNH = 436,
    SYSTEMZ_INS_CLGITNHE = 437,
    SYSTEMZ_INS_CLGITNL = 438,
    SYSTEMZ_INS_CLGITNLE = 439,
    SYSTEMZ_INS_CLGITNLH = 440,
    SYSTEMZ_INS_CLGR = 441,
    SYSTEMZ_INS_CLGRB = 442,
    SYSTEMZ_INS_CLGRBE = 443,
    SYSTEMZ_INS_CLGRBH = 444,
    SYSTEMZ_INS_CLGRBHE = 445,
    SYSTEMZ_INS_CLGRBL = 446,
    SYSTEMZ_INS_CLGRBLE = 447,
    SYSTEMZ_INS_CLGRBLH = 448,
    SYSTEMZ_INS_CLGRBNE = 449,
    SYSTEMZ_INS_CLGRBNH = 450,
    SYSTEMZ_INS_CLGRBNHE = 451,
    SYSTEMZ_INS_CLGRBNL = 452,
    SYSTEMZ_INS_CLGRBNLE = 453,
    SYSTEMZ_INS_CLGRBNLH = 454,
    SYSTEMZ_INS_CLGRJ = 455,
    SYSTEMZ_INS_CLGRJE = 456,
    SYSTEMZ_INS_CLGRJH = 457,
    SYSTEMZ_INS_CLGRJHE = 458,
    SYSTEMZ_INS_CLGRJL = 459,
    SYSTEMZ_INS_CLGRJLE = 460,
    SYSTEMZ_INS_CLGRJLH = 461,
    SYSTEMZ_INS_CLGRJNE = 462,
    SYSTEMZ_INS_CLGRJNH = 463,
    SYSTEMZ_INS_CLGRJNHE = 464,
    SYSTEMZ_INS_CLGRJNL = 465,
    SYSTEMZ_INS_CLGRJNLE = 466,
    SYSTEMZ_INS_CLGRJNLH = 467,
    SYSTEMZ_INS_CLGRL = 468,
    SYSTEMZ_INS_CLGRT = 469,
    SYSTEMZ_INS_CLGRTE = 470,
    SYSTEMZ_INS_CLGRTH = 471,
    SYSTEMZ_INS_CLGRTHE = 472,
    SYSTEMZ_INS_CLGRTL = 473,
    SYSTEMZ_INS_CLGRTLE = 474,
    SYSTEMZ_INS_CLGRTLH = 475,
    SYSTEMZ_INS_CLGRTNE = 476,
    SYSTEMZ_INS_CLGRTNH = 477,
    SYSTEMZ_INS_CLGRTNHE = 478,
    SYSTEMZ_INS_CLGRTNL = 479,
    SYSTEMZ_INS_CLGRTNLE = 480,
    SYSTEMZ_INS_CLGRTNLH = 481,
    SYSTEMZ_INS_CLGT = 482,
    SYSTEMZ_INS_CLGTE = 483,
    SYSTEMZ_INS_CLGTH = 484,
    SYSTEMZ_INS_CLGTHE = 485,
    SYSTEMZ_INS_CLGTL = 486,
    SYSTEMZ_INS_CLGTLE = 487,
    SYSTEMZ_INS_CLGTLH = 488,
    SYSTEMZ_INS_CLGTNE = 489,
    SYSTEMZ_INS_CLGTNH = 490,
    SYSTEMZ_INS_CLGTNHE = 491,
    SYSTEMZ_INS_CLGTNL = 492,
    SYSTEMZ_INS_CLGTNLE = 493,
    SYSTEMZ_INS_CLGTNLH = 494,
    SYSTEMZ_INS_CLGXBR = 495,
    SYSTEMZ_INS_CLGXTR = 496,
    SYSTEMZ_INS_CLHF = 497,
    SYSTEMZ_INS_CLHHR = 498,
    SYSTEMZ_INS_CLHHSI = 499,
    SYSTEMZ_INS_CLHLR = 500,
    SYSTEMZ_INS_CLHRL = 501,
    SYSTEMZ_INS_CLI = 502,
    SYSTEMZ_INS_CLIB = 503,
    SYSTEMZ_INS_CLIBE = 504,
    SYSTEMZ_INS_CLIBH = 505,
    SYSTEMZ_INS_CLIBHE = 506,
    SYSTEMZ_INS_CLIBL = 507,
    SYSTEMZ_INS_CLIBLE = 508,
    SYSTEMZ_INS_CLIBLH = 509,
    SYSTEMZ_INS_CLIBNE = 510,
    SYSTEMZ_INS_CLIBNH = 511,
    SYSTEMZ_INS_CLIBNHE = 512,
    SYSTEMZ_INS_CLIBNL = 513,
    SYSTEMZ_INS_CLIBNLE = 514,
    SYSTEMZ_INS_CLIBNLH = 515,
    SYSTEMZ_INS_CLIH = 516,
    SYSTEMZ_INS_CLIJ = 517,
    SYSTEMZ_INS_CLIJE = 518,
    SYSTEMZ_INS_CLIJH = 519,
    SYSTEMZ_INS_CLIJHE = 520,
    SYSTEMZ_INS_CLIJL = 521,
    SYSTEMZ_INS_CLIJLE = 522,
    SYSTEMZ_INS_CLIJLH = 523,
    SYSTEMZ_INS_CLIJNE = 524,
    SYSTEMZ_INS_CLIJNH = 525,
    SYSTEMZ_INS_CLIJNHE = 526,
    SYSTEMZ_INS_CLIJNL = 527,
    SYSTEMZ_INS_CLIJNLE = 528,
    SYSTEMZ_INS_CLIJNLH = 529,
    SYSTEMZ_INS_CLIY = 530,
    SYSTEMZ_INS_CLM = 531,
    SYSTEMZ_INS_CLMH = 532,
    SYSTEMZ_INS_CLMY = 533,
    SYSTEMZ_INS_CLR = 534,
    SYSTEMZ_INS_CLRB = 535,
    SYSTEMZ_INS_CLRBE = 536,
    SYSTEMZ_INS_CLRBH = 537,
    SYSTEMZ_INS_CLRBHE = 538,
    SYSTEMZ_INS_CLRBL = 539,
    SYSTEMZ_INS_CLRBLE = 540,
    SYSTEMZ_INS_CLRBLH = 541,
    SYSTEMZ_INS_CLRBNE = 542,
    SYSTEMZ_INS_CLRBNH = 543,
    SYSTEMZ_INS_CLRBNHE = 544,
    SYSTEMZ_INS_CLRBNL = 545,
    SYSTEMZ_INS_CLRBNLE = 546,
    SYSTEMZ_INS_CLRBNLH = 547,
    SYSTEMZ_INS_CLRJ = 548,
    SYSTEMZ_INS_CLRJE = 549,
    SYSTEMZ_INS_CLRJH = 550,
    SYSTEMZ_INS_CLRJHE = 551,
    SYSTEMZ_INS_CLRJL = 552,
    SYSTEMZ_INS_CLRJLE = 553,
    SYSTEMZ_INS_CLRJLH = 554,
    SYSTEMZ_INS_CLRJNE = 555,
    SYSTEMZ_INS_CLRJNH = 556,
    SYSTEMZ_INS_CLRJNHE = 557,
    SYSTEMZ_INS_CLRJNL = 558,
    SYSTEMZ_INS_CLRJNLE = 559,
    SYSTEMZ_INS_CLRJNLH = 560,
    SYSTEMZ_INS_CLRL = 561,
    SYSTEMZ_INS_CLRT = 562,
    SYSTEMZ_INS_CLRTE = 563,
    SYSTEMZ_INS_CLRTH = 564,
    SYSTEMZ_INS_CLRTHE = 565,
    SYSTEMZ_INS_CLRTL = 566,
    SYSTEMZ_INS_CLRTLE = 567,
    SYSTEMZ_INS_CLRTLH = 568,
    SYSTEMZ_INS_CLRTNE = 569,
    SYSTEMZ_INS_CLRTNH = 570,
    SYSTEMZ_INS_CLRTNHE = 571,
    SYSTEMZ_INS_CLRTNL = 572,
    SYSTEMZ_INS_CLRTNLE = 573,
    SYSTEMZ_INS_CLRTNLH = 574,
    SYSTEMZ_INS_CLST = 575,
    SYSTEMZ_INS_CLT = 576,
    SYSTEMZ_INS_CLTE = 577,
    SYSTEMZ_INS_CLTH = 578,
    SYSTEMZ_INS_CLTHE = 579,
    SYSTEMZ_INS_CLTL = 580,
    SYSTEMZ_INS_CLTLE = 581,
    SYSTEMZ_INS_CLTLH = 582,
    SYSTEMZ_INS_CLTNE = 583,
    SYSTEMZ_INS_CLTNH = 584,
    SYSTEMZ_INS_CLTNHE = 585,
    SYSTEMZ_INS_CLTNL = 586,
    SYSTEMZ_INS_CLTNLE = 587,
    SYSTEMZ_INS_CLTNLH = 588,
    SYSTEMZ_INS_CLY = 589,
    SYSTEMZ_INS_CMPSC = 590,
    SYSTEMZ_INS_CP = 591,
    SYSTEMZ_INS_CPDT = 592,
    SYSTEMZ_INS_CPSDR = 593,
    SYSTEMZ_INS_CPXT = 594,
    SYSTEMZ_INS_CPYA = 595,
    SYSTEMZ_INS_CR = 596,
    SYSTEMZ_INS_CRB = 597,
    SYSTEMZ_INS_CRBE = 598,
    SYSTEMZ_INS_CRBH = 599,
    SYSTEMZ_INS_CRBHE = 600,
    SYSTEMZ_INS_CRBL = 601,
    SYSTEMZ_INS_CRBLE = 602,
    SYSTEMZ_INS_CRBLH = 603,
    SYSTEMZ_INS_CRBNE = 604,
    SYSTEMZ_INS_CRBNH = 605,
    SYSTEMZ_INS_CRBNHE = 606,
    SYSTEMZ_INS_CRBNL = 607,
    SYSTEMZ_INS_CRBNLE = 608,
    SYSTEMZ_INS_CRBNLH = 609,
    SYSTEMZ_INS_CRDTE = 610,
    SYSTEMZ_INS_CRJ = 611,
    SYSTEMZ_INS_CRJE = 612,
    SYSTEMZ_INS_CRJH = 613,
    SYSTEMZ_INS_CRJHE = 614,
    SYSTEMZ_INS_CRJL = 615,
    SYSTEMZ_INS_CRJLE = 616,
    SYSTEMZ_INS_CRJLH = 617,
    SYSTEMZ_INS_CRJNE = 618,
    SYSTEMZ_INS_CRJNH = 619,
    SYSTEMZ_INS_CRJNHE = 620,
    SYSTEMZ_INS_CRJNL = 621,
    SYSTEMZ_INS_CRJNLE = 622,
    SYSTEMZ_INS_CRJNLH = 623,
    SYSTEMZ_INS_CRL = 624,
    SYSTEMZ_INS_CRT = 625,
    SYSTEMZ_INS_CRTE = 626,
    SYSTEMZ_INS_CRTH = 627,
    SYSTEMZ_INS_CRTHE = 628,
    SYSTEMZ_INS_CRTL = 629,
    SYSTEMZ_INS_CRTLE = 630,
    SYSTEMZ_INS_CRTLH = 631,
    SYSTEMZ_INS_CRTNE = 632,
    SYSTEMZ_INS_CRTNH = 633,
    SYSTEMZ_INS_CRTNHE = 634,
    SYSTEMZ_INS_CRTNL = 635,
    SYSTEMZ_INS_CRTNLE = 636,
    SYSTEMZ_INS_CRTNLH = 637,
    SYSTEMZ_INS_CS = 638,
    SYSTEMZ_INS_CSCH = 639,
    SYSTEMZ_INS_CSDTR = 640,
    SYSTEMZ_INS_CSG = 641,
    SYSTEMZ_INS_CSP = 642,
    SYSTEMZ_INS_CSPG = 643,
    SYSTEMZ_INS_CSST = 644,
    SYSTEMZ_INS_CSXTR = 645,
    SYSTEMZ_INS_CSY = 646,
    SYSTEMZ_INS_CU12 = 647,
    SYSTEMZ_INS_CU14 = 648,
    SYSTEMZ_INS_CU21 = 649,
    SYSTEMZ_INS_CU24 = 650,
    SYSTEMZ_INS_CU41 = 651,
    SYSTEMZ_INS_CU42 = 652,
    SYSTEMZ_INS_CUDTR = 653,
    SYSTEMZ_INS_CUSE = 654,
    SYSTEMZ_INS_CUTFU = 655,
    SYSTEMZ_INS_CUUTF = 656,
    SYSTEMZ_INS_CUXTR = 657,
    SYSTEMZ_INS_CVB = 658,
    SYSTEMZ_INS_CVBG = 659,
    SYSTEMZ_INS_CVBY = 660,
    SYSTEMZ_INS_CVD = 661,
    SYSTEMZ_INS_CVDG = 662,
    SYSTEMZ_INS_CVDY = 663,
    SYSTEMZ_INS_CXBR = 664,
    SYSTEMZ_INS_CXFBR = 665,
    SYSTEMZ_INS_CXFBRA = 666,
    SYSTEMZ_INS_CXFR = 667,
    SYSTEMZ_INS_CXFTR = 668,
    SYSTEMZ_INS_CXGBR = 669,
    SYSTEMZ_INS_CXGBRA = 670,
    SYSTEMZ_INS_CXGR = 671,
    SYSTEMZ_INS_CXGTR = 672,
    SYSTEMZ_INS_CXGTRA = 673,
    SYSTEMZ_INS_CXLFBR = 674,
    SYSTEMZ_INS_CXLFTR = 675,
    SYSTEMZ_INS_CXLGBR = 676,
    SYSTEMZ_INS_CXLGTR = 677,
    SYSTEMZ_INS_CXPT = 678,
    SYSTEMZ_INS_CXR = 679,
    SYSTEMZ_INS_CXSTR = 680,
    SYSTEMZ_INS_CXTR = 681,
    SYSTEMZ_INS_CXUTR = 682,
    SYSTEMZ_INS_CXZT = 683,
    SYSTEMZ_INS_CY = 684,
    SYSTEMZ_INS_CZDT = 685,
    SYSTEMZ_INS_CZXT = 686,
    SYSTEMZ_INS_D = 687,
    SYSTEMZ_INS_DD = 688,
    SYSTEMZ_INS_DDB = 689,
    SYSTEMZ_INS_DDBR = 690,
    SYSTEMZ_INS_DDR = 691,
    SYSTEMZ_INS_DDTR = 692,
    SYSTEMZ_INS_DDTRA = 693,
    SYSTEMZ_INS_DE = 694,
    SYSTEMZ_INS_DEB = 695,
    SYSTEMZ_INS_DEBR = 696,
    SYSTEMZ_INS_DER = 697,
    SYSTEMZ_INS_DFLTCC = 698,
    SYSTEMZ_INS_DIAG = 699,
    SYSTEMZ_INS_DIDBR = 700,
    SYSTEMZ_INS_DIEBR = 701,
    SYSTEMZ_INS_DL = 702,
    SYSTEMZ_INS_DLG = 703,
    SYSTEMZ_INS_DLGR = 704,
    SYSTEMZ_INS_DLR = 705,
    SYSTEMZ_INS_DP = 706,
    SYSTEMZ_INS_DR = 707,
    SYSTEMZ_INS_DSG = 708,
    SYSTEMZ_INS_DSGF = 709,
    SYSTEMZ_INS_DSGFR = 710,
    SYSTEMZ_INS_DSGR = 711,
    SYSTEMZ_INS_DXBR = 712,
    SYSTEMZ_INS_DXR = 713,
    SYSTEMZ_INS_DXTR = 714,
    SYSTEMZ_INS_DXTRA = 715,
    SYSTEMZ_INS_EAR = 716,
    SYSTEMZ_INS_ECAG = 717,
    SYSTEMZ_INS_ECCTR = 718,
    SYSTEMZ_INS_ECPGA = 719,
    SYSTEMZ_INS_ECTG = 720,
    SYSTEMZ_INS_ED = 721,
    SYSTEMZ_INS_EDMK = 722,
    SYSTEMZ_INS_EEDTR = 723,
    SYSTEMZ_INS_EEXTR = 724,
    SYSTEMZ_INS_EFPC = 725,
    SYSTEMZ_INS_EPAIR = 726,
    SYSTEMZ_INS_EPAR = 727,
    SYSTEMZ_INS_EPCTR = 728,
    SYSTEMZ_INS_EPSW = 729,
    SYSTEMZ_INS_EREG = 730,
    SYSTEMZ_INS_EREGG = 731,
    SYSTEMZ_INS_ESAIR = 732,
    SYSTEMZ_INS_ESAR = 733,
    SYSTEMZ_INS_ESDTR = 734,
    SYSTEMZ_INS_ESEA = 735,
    SYSTEMZ_INS_ESTA = 736,
    SYSTEMZ_INS_ESXTR = 737,
    SYSTEMZ_INS_ETND = 738,
    SYSTEMZ_INS_EX = 739,
    SYSTEMZ_INS_EXRL = 740,
    SYSTEMZ_INS_FIDBR = 741,
    SYSTEMZ_INS_FIDBRA = 742,
    SYSTEMZ_INS_FIDR = 743,
    SYSTEMZ_INS_FIDTR = 744,
    SYSTEMZ_INS_FIEBR = 745,
    SYSTEMZ_INS_FIEBRA = 746,
    SYSTEMZ_INS_FIER = 747,
    SYSTEMZ_INS_FIXBR = 748,
    SYSTEMZ_INS_FIXBRA = 749,
    SYSTEMZ_INS_FIXR = 750,
    SYSTEMZ_INS_FIXTR = 751,
    SYSTEMZ_INS_FLOGR = 752,
    SYSTEMZ_INS_HDR = 753,
    SYSTEMZ_INS_HER = 754,
    SYSTEMZ_INS_HSCH = 755,
    SYSTEMZ_INS_IAC = 756,
    SYSTEMZ_INS_IC = 757,
    SYSTEMZ_INS_ICM = 758,
    SYSTEMZ_INS_ICMH = 759,
    SYSTEMZ_INS_ICMY = 760,
    SYSTEMZ_INS_ICY = 761,
    SYSTEMZ_INS_IDTE = 762,
    SYSTEMZ_INS_IEDTR = 763,
    SYSTEMZ_INS_IEXTR = 764,
    SYSTEMZ_INS_IIHF = 765,
    SYSTEMZ_INS_IIHH = 766,
    SYSTEMZ_INS_IIHL = 767,
    SYSTEMZ_INS_IILF = 768,
    SYSTEMZ_INS_IILH = 769,
    SYSTEMZ_INS_IILL = 770,
    SYSTEMZ_INS_IPK = 771,
    SYSTEMZ_INS_IPM = 772,
    SYSTEMZ_INS_IPTE = 773,
    SYSTEMZ_INS_IRBM = 774,
    SYSTEMZ_INS_ISKE = 775,
    SYSTEMZ_INS_IVSK = 776,
    SYSTEMZ_INS_J = 777,
    SYSTEMZ_INS_JE = 778,
    SYSTEMZ_INS_JH = 779,
    SYSTEMZ_INS_JHE = 780,
    SYSTEMZ_INS_JL = 781,
    SYSTEMZ_INS_JLE = 782,
    SYSTEMZ_INS_JLH = 783,
    SYSTEMZ_INS_JM = 784,
    SYSTEMZ_INS_JNE = 785,
    SYSTEMZ_INS_JNH = 786,
    SYSTEMZ_INS_JNHE = 787,
    SYSTEMZ_INS_JNL = 788,
    SYSTEMZ_INS_JNLE = 789,
    SYSTEMZ_INS_JNLH = 790,
    SYSTEMZ_INS_JNM = 791,
    SYSTEMZ_INS_JNO = 792,
    SYSTEMZ_INS_JNP = 793,
    SYSTEMZ_INS_JNZ = 794,
    SYSTEMZ_INS_JO = 795,
    SYSTEMZ_INS_JP = 796,
    SYSTEMZ_INS_JZ = 797,
    SYSTEMZ_INS_J_G_LU_ = 798,
    SYSTEMZ_INS_J_G_L_E = 799,
    SYSTEMZ_INS_J_G_L_H = 800,
    SYSTEMZ_INS_J_G_L_HE = 801,
    SYSTEMZ_INS_J_G_L_L = 802,
    SYSTEMZ_INS_J_G_L_LE = 803,
    SYSTEMZ_INS_J_G_L_LH = 804,
    SYSTEMZ_INS_J_G_L_M = 805,
    SYSTEMZ_INS_J_G_L_NE = 806,
    SYSTEMZ_INS_J_G_L_NH = 807,
    SYSTEMZ_INS_J_G_L_NHE = 808,
    SYSTEMZ_INS_J_G_L_NL = 809,
    SYSTEMZ_INS_J_G_L_NLE = 810,
    SYSTEMZ_INS_J_G_L_NLH = 811,
    SYSTEMZ_INS_J_G_L_NM = 812,
    SYSTEMZ_INS_J_G_L_NO = 813,
    SYSTEMZ_INS_J_G_L_NP = 814,
    SYSTEMZ_INS_J_G_L_NZ = 815,
    SYSTEMZ_INS_J_G_L_O = 816,
    SYSTEMZ_INS_J_G_L_P = 817,
    SYSTEMZ_INS_J_G_L_Z = 818,
    SYSTEMZ_INS_KDB = 819,
    SYSTEMZ_INS_KDBR = 820,
    SYSTEMZ_INS_KDSA = 821,
    SYSTEMZ_INS_KDTR = 822,
    SYSTEMZ_INS_KEB = 823,
    SYSTEMZ_INS_KEBR = 824,
    SYSTEMZ_INS_KIMD = 825,
    SYSTEMZ_INS_KLMD = 826,
    SYSTEMZ_INS_KM = 827,
    SYSTEMZ_INS_KMA = 828,
    SYSTEMZ_INS_KMAC = 829,
    SYSTEMZ_INS_KMC = 830,
    SYSTEMZ_INS_KMCTR = 831,
    SYSTEMZ_INS_KMF = 832,
    SYSTEMZ_INS_KMO = 833,
    SYSTEMZ_INS_KXBR = 834,
    SYSTEMZ_INS_KXTR = 835,
    SYSTEMZ_INS_L = 836,
    SYSTEMZ_INS_LA = 837,
    SYSTEMZ_INS_LAA = 838,
    SYSTEMZ_INS_LAAG = 839,
    SYSTEMZ_INS_LAAL = 840,
    SYSTEMZ_INS_LAALG = 841,
    SYSTEMZ_INS_LAE = 842,
    SYSTEMZ_INS_LAEY = 843,
    SYSTEMZ_INS_LAM = 844,
    SYSTEMZ_INS_LAMY = 845,
    SYSTEMZ_INS_LAN = 846,
    SYSTEMZ_INS_LANG = 847,
    SYSTEMZ_INS_LAO = 848,
    SYSTEMZ_INS_LAOG = 849,
    SYSTEMZ_INS_LARL = 850,
    SYSTEMZ_INS_LASP = 851,
    SYSTEMZ_INS_LAT = 852,
    SYSTEMZ_INS_LAX = 853,
    SYSTEMZ_INS_LAXG = 854,
    SYSTEMZ_INS_LAY = 855,
    SYSTEMZ_INS_LB = 856,
    SYSTEMZ_INS_LBEAR = 857,
    SYSTEMZ_INS_LBH = 858,
    SYSTEMZ_INS_LBR = 859,
    SYSTEMZ_INS_LCBB = 860,
    SYSTEMZ_INS_LCCTL = 861,
    SYSTEMZ_INS_LCDBR = 862,
    SYSTEMZ_INS_LCDFR = 863,
    SYSTEMZ_INS_LCDR = 864,
    SYSTEMZ_INS_LCEBR = 865,
    SYSTEMZ_INS_LCER = 866,
    SYSTEMZ_INS_LCGFR = 867,
    SYSTEMZ_INS_LCGR = 868,
    SYSTEMZ_INS_LCR = 869,
    SYSTEMZ_INS_LCTL = 870,
    SYSTEMZ_INS_LCTLG = 871,
    SYSTEMZ_INS_LCXBR = 872,
    SYSTEMZ_INS_LCXR = 873,
    SYSTEMZ_INS_LD = 874,
    SYSTEMZ_INS_LDE = 875,
    SYSTEMZ_INS_LDEB = 876,
    SYSTEMZ_INS_LDEBR = 877,
    SYSTEMZ_INS_LDER = 878,
    SYSTEMZ_INS_LDETR = 879,
    SYSTEMZ_INS_LDGR = 880,
    SYSTEMZ_INS_LDR = 881,
    SYSTEMZ_INS_LDXBR = 882,
    SYSTEMZ_INS_LDXBRA = 883,
    SYSTEMZ_INS_LDXR = 884,
    SYSTEMZ_INS_LDXTR = 885,
    SYSTEMZ_INS_LDY = 886,
    SYSTEMZ_INS_LE = 887,
    SYSTEMZ_INS_LEDBR = 888,
    SYSTEMZ_INS_LEDBRA = 889,
    SYSTEMZ_INS_LEDR = 890,
    SYSTEMZ_INS_LEDTR = 891,
    SYSTEMZ_INS_LER = 892,
    SYSTEMZ_INS_LEXBR = 893,
    SYSTEMZ_INS_LEXBRA = 894,
    SYSTEMZ_INS_LEXR = 895,
    SYSTEMZ_INS_LEY = 896,
    SYSTEMZ_INS_LFAS = 897,
    SYSTEMZ_INS_LFH = 898,
    SYSTEMZ_INS_LFHAT = 899,
    SYSTEMZ_INS_LFPC = 900,
    SYSTEMZ_INS_LG = 901,
    SYSTEMZ_INS_LGAT = 902,
    SYSTEMZ_INS_LGB = 903,
    SYSTEMZ_INS_LGBR = 904,
    SYSTEMZ_INS_LGDR = 905,
    SYSTEMZ_INS_LGF = 906,
    SYSTEMZ_INS_LGFI = 907,
    SYSTEMZ_INS_LGFR = 908,
    SYSTEMZ_INS_LGFRL = 909,
    SYSTEMZ_INS_LGG = 910,
    SYSTEMZ_INS_LGH = 911,
    SYSTEMZ_INS_LGHI = 912,
    SYSTEMZ_INS_LGHR = 913,
    SYSTEMZ_INS_LGHRL = 914,
    SYSTEMZ_INS_LGR = 915,
    SYSTEMZ_INS_LGRL = 916,
    SYSTEMZ_INS_LGSC = 917,
    SYSTEMZ_INS_LH = 918,
    SYSTEMZ_INS_LHH = 919,
    SYSTEMZ_INS_LHI = 920,
    SYSTEMZ_INS_LHR = 921,
    SYSTEMZ_INS_LHRL = 922,
    SYSTEMZ_INS_LHY = 923,
    SYSTEMZ_INS_LLC = 924,
    SYSTEMZ_INS_LLCH = 925,
    SYSTEMZ_INS_LLCR = 926,
    SYSTEMZ_INS_LLGC = 927,
    SYSTEMZ_INS_LLGCR = 928,
    SYSTEMZ_INS_LLGF = 929,
    SYSTEMZ_INS_LLGFAT = 930,
    SYSTEMZ_INS_LLGFR = 931,
    SYSTEMZ_INS_LLGFRL = 932,
    SYSTEMZ_INS_LLGFSG = 933,
    SYSTEMZ_INS_LLGH = 934,
    SYSTEMZ_INS_LLGHR = 935,
    SYSTEMZ_INS_LLGHRL = 936,
    SYSTEMZ_INS_LLGT = 937,
    SYSTEMZ_INS_LLGTAT = 938,
    SYSTEMZ_INS_LLGTR = 939,
    SYSTEMZ_INS_LLH = 940,
    SYSTEMZ_INS_LLHH = 941,
    SYSTEMZ_INS_LLHR = 942,
    SYSTEMZ_INS_LLHRL = 943,
    SYSTEMZ_INS_LLIHF = 944,
    SYSTEMZ_INS_LLIHH = 945,
    SYSTEMZ_INS_LLIHL = 946,
    SYSTEMZ_INS_LLILF = 947,
    SYSTEMZ_INS_LLILH = 948,
    SYSTEMZ_INS_LLILL = 949,
    SYSTEMZ_INS_LLZRGF = 950,
    SYSTEMZ_INS_LM = 951,
    SYSTEMZ_INS_LMD = 952,
    SYSTEMZ_INS_LMG = 953,
    SYSTEMZ_INS_LMH = 954,
    SYSTEMZ_INS_LMY = 955,
    SYSTEMZ_INS_LNDBR = 956,
    SYSTEMZ_INS_LNDFR = 957,
    SYSTEMZ_INS_LNDR = 958,
    SYSTEMZ_INS_LNEBR = 959,
    SYSTEMZ_INS_LNER = 960,
    SYSTEMZ_INS_LNGFR = 961,
    SYSTEMZ_INS_LNGR = 962,
    SYSTEMZ_INS_LNR = 963,
    SYSTEMZ_INS_LNXBR = 964,
    SYSTEMZ_INS_LNXR = 965,
    SYSTEMZ_INS_LOC = 966,
    SYSTEMZ_INS_LOCE = 967,
    SYSTEMZ_INS_LOCH = 968,
    SYSTEMZ_INS_LOCHE = 969,
    SYSTEMZ_INS_LOCL = 970,
    SYSTEMZ_INS_LOCLE = 971,
    SYSTEMZ_INS_LOCLH = 972,
    SYSTEMZ_INS_LOCM = 973,
    SYSTEMZ_INS_LOCNE = 974,
    SYSTEMZ_INS_LOCNH = 975,
    SYSTEMZ_INS_LOCNHE = 976,
    SYSTEMZ_INS_LOCNL = 977,
    SYSTEMZ_INS_LOCNLE = 978,
    SYSTEMZ_INS_LOCNLH = 979,
    SYSTEMZ_INS_LOCNM = 980,
    SYSTEMZ_INS_LOCNO = 981,
    SYSTEMZ_INS_LOCNP = 982,
    SYSTEMZ_INS_LOCNZ = 983,
    SYSTEMZ_INS_LOCO = 984,
    SYSTEMZ_INS_LOCP = 985,
    SYSTEMZ_INS_LOCZ = 986,
    SYSTEMZ_INS_LOCFH = 987,
    SYSTEMZ_INS_LOCFHE = 988,
    SYSTEMZ_INS_LOCFHH = 989,
    SYSTEMZ_INS_LOCFHHE = 990,
    SYSTEMZ_INS_LOCFHL = 991,
    SYSTEMZ_INS_LOCFHLE = 992,
    SYSTEMZ_INS_LOCFHLH = 993,
    SYSTEMZ_INS_LOCFHM = 994,
    SYSTEMZ_INS_LOCFHNE = 995,
    SYSTEMZ_INS_LOCFHNH = 996,
    SYSTEMZ_INS_LOCFHNHE = 997,
    SYSTEMZ_INS_LOCFHNL = 998,
    SYSTEMZ_INS_LOCFHNLE = 999,
    SYSTEMZ_INS_LOCFHNLH = 1000,
    SYSTEMZ_INS_LOCFHNM = 1001,
    SYSTEMZ_INS_LOCFHNO = 1002,
    SYSTEMZ_INS_LOCFHNP = 1003,
    SYSTEMZ_INS_LOCFHNZ = 1004,
    SYSTEMZ_INS_LOCFHO = 1005,
    SYSTEMZ_INS_LOCFHP = 1006,
    SYSTEMZ_INS_LOCFHZ = 1007,
    SYSTEMZ_INS_LOCFHR = 1008,
    SYSTEMZ_INS_LOCFHRE = 1009,
    SYSTEMZ_INS_LOCFHRH = 1010,
    SYSTEMZ_INS_LOCFHRHE = 1011,
    SYSTEMZ_INS_LOCFHRL = 1012,
    SYSTEMZ_INS_LOCFHRLE = 1013,
    SYSTEMZ_INS_LOCFHRLH = 1014,
    SYSTEMZ_INS_LOCFHRM = 1015,
    SYSTEMZ_INS_LOCFHRNE = 1016,
    SYSTEMZ_INS_LOCFHRNH = 1017,
    SYSTEMZ_INS_LOCFHRNHE = 1018,
    SYSTEMZ_INS_LOCFHRNL = 1019,
    SYSTEMZ_INS_LOCFHRNLE = 1020,
    SYSTEMZ_INS_LOCFHRNLH = 1021,
    SYSTEMZ_INS_LOCFHRNM = 1022,
    SYSTEMZ_INS_LOCFHRNO = 1023,
    SYSTEMZ_INS_LOCFHRNP = 1024,
    SYSTEMZ_INS_LOCFHRNZ = 1025,
    SYSTEMZ_INS_LOCFHRO = 1026,
    SYSTEMZ_INS_LOCFHRP = 1027,
    SYSTEMZ_INS_LOCFHRZ = 1028,
    SYSTEMZ_INS_LOCG = 1029,
    SYSTEMZ_INS_LOCGE = 1030,
    SYSTEMZ_INS_LOCGH = 1031,
    SYSTEMZ_INS_LOCGHE = 1032,
    SYSTEMZ_INS_LOCGL = 1033,
    SYSTEMZ_INS_LOCGLE = 1034,
    SYSTEMZ_INS_LOCGLH = 1035,
    SYSTEMZ_INS_LOCGM = 1036,
    SYSTEMZ_INS_LOCGNE = 1037,
    SYSTEMZ_INS_LOCGNH = 1038,
    SYSTEMZ_INS_LOCGNHE = 1039,
    SYSTEMZ_INS_LOCGNL = 1040,
    SYSTEMZ_INS_LOCGNLE = 1041,
    SYSTEMZ_INS_LOCGNLH = 1042,
    SYSTEMZ_INS_LOCGNM = 1043,
    SYSTEMZ_INS_LOCGNO = 1044,
    SYSTEMZ_INS_LOCGNP = 1045,
    SYSTEMZ_INS_LOCGNZ = 1046,
    SYSTEMZ_INS_LOCGO = 1047,
    SYSTEMZ_INS_LOCGP = 1048,
    SYSTEMZ_INS_LOCGZ = 1049,
    SYSTEMZ_INS_LOCGHI = 1050,
    SYSTEMZ_INS_LOCGHIE = 1051,
    SYSTEMZ_INS_LOCGHIH = 1052,
    SYSTEMZ_INS_LOCGHIHE = 1053,
    SYSTEMZ_INS_LOCGHIL = 1054,
    SYSTEMZ_INS_LOCGHILE = 1055,
    SYSTEMZ_INS_LOCGHILH = 1056,
    SYSTEMZ_INS_LOCGHIM = 1057,
    SYSTEMZ_INS_LOCGHINE = 1058,
    SYSTEMZ_INS_LOCGHINH = 1059,
    SYSTEMZ_INS_LOCGHINHE = 1060,
    SYSTEMZ_INS_LOCGHINL = 1061,
    SYSTEMZ_INS_LOCGHINLE = 1062,
    SYSTEMZ_INS_LOCGHINLH = 1063,
    SYSTEMZ_INS_LOCGHINM = 1064,
    SYSTEMZ_INS_LOCGHINO = 1065,
    SYSTEMZ_INS_LOCGHINP = 1066,
    SYSTEMZ_INS_LOCGHINZ = 1067,
    SYSTEMZ_INS_LOCGHIO = 1068,
    SYSTEMZ_INS_LOCGHIP = 1069,
    SYSTEMZ_INS_LOCGHIZ = 1070,
    SYSTEMZ_INS_LOCGR = 1071,
    SYSTEMZ_INS_LOCGRE = 1072,
    SYSTEMZ_INS_LOCGRH = 1073,
    SYSTEMZ_INS_LOCGRHE = 1074,
    SYSTEMZ_INS_LOCGRL = 1075,
    SYSTEMZ_INS_LOCGRLE = 1076,
    SYSTEMZ_INS_LOCGRLH = 1077,
    SYSTEMZ_INS_LOCGRM = 1078,
    SYSTEMZ_INS_LOCGRNE = 1079,
    SYSTEMZ_INS_LOCGRNH = 1080,
    SYSTEMZ_INS_LOCGRNHE = 1081,
    SYSTEMZ_INS_LOCGRNL = 1082,
    SYSTEMZ_INS_LOCGRNLE = 1083,
    SYSTEMZ_INS_LOCGRNLH = 1084,
    SYSTEMZ_INS_LOCGRNM = 1085,
    SYSTEMZ_INS_LOCGRNO = 1086,
    SYSTEMZ_INS_LOCGRNP = 1087,
    SYSTEMZ_INS_LOCGRNZ = 1088,
    SYSTEMZ_INS_LOCGRO = 1089,
    SYSTEMZ_INS_LOCGRP = 1090,
    SYSTEMZ_INS_LOCGRZ = 1091,
    SYSTEMZ_INS_LOCHHI = 1092,
    SYSTEMZ_INS_LOCHHIE = 1093,
    SYSTEMZ_INS_LOCHHIH = 1094,
    SYSTEMZ_INS_LOCHHIHE = 1095,
    SYSTEMZ_INS_LOCHHIL = 1096,
    SYSTEMZ_INS_LOCHHILE = 1097,
    SYSTEMZ_INS_LOCHHILH = 1098,
    SYSTEMZ_INS_LOCHHIM = 1099,
    SYSTEMZ_INS_LOCHHINE = 1100,
    SYSTEMZ_INS_LOCHHINH = 1101,
    SYSTEMZ_INS_LOCHHINHE = 1102,
    SYSTEMZ_INS_LOCHHINL = 1103,
    SYSTEMZ_INS_LOCHHINLE = 1104,
    SYSTEMZ_INS_LOCHHINLH = 1105,
    SYSTEMZ_INS_LOCHHINM = 1106,
    SYSTEMZ_INS_LOCHHINO = 1107,
    SYSTEMZ_INS_LOCHHINP = 1108,
    SYSTEMZ_INS_LOCHHINZ = 1109,
    SYSTEMZ_INS_LOCHHIO = 1110,
    SYSTEMZ_INS_LOCHHIP = 1111,
    SYSTEMZ_INS_LOCHHIZ = 1112,
    SYSTEMZ_INS_LOCHI = 1113,
    SYSTEMZ_INS_LOCHIE = 1114,
    SYSTEMZ_INS_LOCHIH = 1115,
    SYSTEMZ_INS_LOCHIHE = 1116,
    SYSTEMZ_INS_LOCHIL = 1117,
    SYSTEMZ_INS_LOCHILE = 1118,
    SYSTEMZ_INS_LOCHILH = 1119,
    SYSTEMZ_INS_LOCHIM = 1120,
    SYSTEMZ_INS_LOCHINE = 1121,
    SYSTEMZ_INS_LOCHINH = 1122,
    SYSTEMZ_INS_LOCHINHE = 1123,
    SYSTEMZ_INS_LOCHINL = 1124,
    SYSTEMZ_INS_LOCHINLE = 1125,
    SYSTEMZ_INS_LOCHINLH = 1126,
    SYSTEMZ_INS_LOCHINM = 1127,
    SYSTEMZ_INS_LOCHINO = 1128,
    SYSTEMZ_INS_LOCHINP = 1129,
    SYSTEMZ_INS_LOCHINZ = 1130,
    SYSTEMZ_INS_LOCHIO = 1131,
    SYSTEMZ_INS_LOCHIP = 1132,
    SYSTEMZ_INS_LOCHIZ = 1133,
    SYSTEMZ_INS_LOCR = 1134,
    SYSTEMZ_INS_LOCRE = 1135,
    SYSTEMZ_INS_LOCRH = 1136,
    SYSTEMZ_INS_LOCRHE = 1137,
    SYSTEMZ_INS_LOCRL = 1138,
    SYSTEMZ_INS_LOCRLE = 1139,
    SYSTEMZ_INS_LOCRLH = 1140,
    SYSTEMZ_INS_LOCRM = 1141,
    SYSTEMZ_INS_LOCRNE = 1142,
    SYSTEMZ_INS_LOCRNH = 1143,
    SYSTEMZ_INS_LOCRNHE = 1144,
    SYSTEMZ_INS_LOCRNL = 1145,
    SYSTEMZ_INS_LOCRNLE = 1146,
    SYSTEMZ_INS_LOCRNLH = 1147,
    SYSTEMZ_INS_LOCRNM = 1148,
    SYSTEMZ_INS_LOCRNO = 1149,
    SYSTEMZ_INS_LOCRNP = 1150,
    SYSTEMZ_INS_LOCRNZ = 1151,
    SYSTEMZ_INS_LOCRO = 1152,
    SYSTEMZ_INS_LOCRP = 1153,
    SYSTEMZ_INS_LOCRZ = 1154,
    SYSTEMZ_INS_LPCTL = 1155,
    SYSTEMZ_INS_LPD = 1156,
    SYSTEMZ_INS_LPDBR = 1157,
    SYSTEMZ_INS_LPDFR = 1158,
    SYSTEMZ_INS_LPDG = 1159,
    SYSTEMZ_INS_LPDR = 1160,
    SYSTEMZ_INS_LPEBR = 1161,
    SYSTEMZ_INS_LPER = 1162,
    SYSTEMZ_INS_LPGFR = 1163,
    SYSTEMZ_INS_LPGR = 1164,
    SYSTEMZ_INS_LPP = 1165,
    SYSTEMZ_INS_LPQ = 1166,
    SYSTEMZ_INS_LPR = 1167,
    SYSTEMZ_INS_LPSW = 1168,
    SYSTEMZ_INS_LPSWE = 1169,
    SYSTEMZ_INS_LPSWEY = 1170,
    SYSTEMZ_INS_LPTEA = 1171,
    SYSTEMZ_INS_LPXBR = 1172,
    SYSTEMZ_INS_LPXR = 1173,
    SYSTEMZ_INS_LR = 1174,
    SYSTEMZ_INS_LRA = 1175,
    SYSTEMZ_INS_LRAG = 1176,
    SYSTEMZ_INS_LRAY = 1177,
    SYSTEMZ_INS_LRDR = 1178,
    SYSTEMZ_INS_LRER = 1179,
    SYSTEMZ_INS_LRL = 1180,
    SYSTEMZ_INS_LRV = 1181,
    SYSTEMZ_INS_LRVG = 1182,
    SYSTEMZ_INS_LRVGR = 1183,
    SYSTEMZ_INS_LRVH = 1184,
    SYSTEMZ_INS_LRVR = 1185,
    SYSTEMZ_INS_LSCTL = 1186,
    SYSTEMZ_INS_LT = 1187,
    SYSTEMZ_INS_LTDBR = 1188,
    SYSTEMZ_INS_LTDR = 1189,
    SYSTEMZ_INS_LTDTR = 1190,
    SYSTEMZ_INS_LTEBR = 1191,
    SYSTEMZ_INS_LTER = 1192,
    SYSTEMZ_INS_LTG = 1193,
    SYSTEMZ_INS_LTGF = 1194,
    SYSTEMZ_INS_LTGFR = 1195,
    SYSTEMZ_INS_LTGR = 1196,
    SYSTEMZ_INS_LTR = 1197,
    SYSTEMZ_INS_LTXBR = 1198,
    SYSTEMZ_INS_LTXR = 1199,
    SYSTEMZ_INS_LTXTR = 1200,
    SYSTEMZ_INS_LURA = 1201,
    SYSTEMZ_INS_LURAG = 1202,
    SYSTEMZ_INS_LXD = 1203,
    SYSTEMZ_INS_LXDB = 1204,
    SYSTEMZ_INS_LXDBR = 1205,
    SYSTEMZ_INS_LXDR = 1206,
    SYSTEMZ_INS_LXDTR = 1207,
    SYSTEMZ_INS_LXE = 1208,
    SYSTEMZ_INS_LXEB = 1209,
    SYSTEMZ_INS_LXEBR = 1210,
    SYSTEMZ_INS_LXER = 1211,
    SYSTEMZ_INS_LXR = 1212,
    SYSTEMZ_INS_LY = 1213,
    SYSTEMZ_INS_LZDR = 1214,
    SYSTEMZ_INS_LZER = 1215,
    SYSTEMZ_INS_LZRF = 1216,
    SYSTEMZ_INS_LZRG = 1217,
    SYSTEMZ_INS_LZXR = 1218,
    SYSTEMZ_INS_M = 1219,
    SYSTEMZ_INS_MAD = 1220,
    SYSTEMZ_INS_MADB = 1221,
    SYSTEMZ_INS_MADBR = 1222,
    SYSTEMZ_INS_MADR = 1223,
    SYSTEMZ_INS_MAE = 1224,
    SYSTEMZ_INS_MAEB = 1225,
    SYSTEMZ_INS_MAEBR = 1226,
    SYSTEMZ_INS_MAER = 1227,
    SYSTEMZ_INS_MAY = 1228,
    SYSTEMZ_INS_MAYH = 1229,
    SYSTEMZ_INS_MAYHR = 1230,
    SYSTEMZ_INS_MAYL = 1231,
    SYSTEMZ_INS_MAYLR = 1232,
    SYSTEMZ_INS_MAYR = 1233,
    SYSTEMZ_INS_MC = 1234,
    SYSTEMZ_INS_MD = 1235,
    SYSTEMZ_INS_MDB = 1236,
    SYSTEMZ_INS_MDBR = 1237,
    SYSTEMZ_INS_MDE = 1238,
    SYSTEMZ_INS_MDEB = 1239,
    SYSTEMZ_INS_MDEBR = 1240,
    SYSTEMZ_INS_MDER = 1241,
    SYSTEMZ_INS_MDR = 1242,
    SYSTEMZ_INS_MDTR = 1243,
    SYSTEMZ_INS_MDTRA = 1244,
    SYSTEMZ_INS_ME = 1245,
    SYSTEMZ_INS_MEE = 1246,
    SYSTEMZ_INS_MEEB = 1247,
    SYSTEMZ_INS_MEEBR = 1248,
    SYSTEMZ_INS_MEER = 1249,
    SYSTEMZ_INS_MER = 1250,
    SYSTEMZ_INS_MFY = 1251,
    SYSTEMZ_INS_MG = 1252,
    SYSTEMZ_INS_MGH = 1253,
    SYSTEMZ_INS_MGHI = 1254,
    SYSTEMZ_INS_MGRK = 1255,
    SYSTEMZ_INS_MH = 1256,
    SYSTEMZ_INS_MHI = 1257,
    SYSTEMZ_INS_MHY = 1258,
    SYSTEMZ_INS_ML = 1259,
    SYSTEMZ_INS_MLG = 1260,
    SYSTEMZ_INS_MLGR = 1261,
    SYSTEMZ_INS_MLR = 1262,
    SYSTEMZ_INS_MP = 1263,
    SYSTEMZ_INS_MR = 1264,
    SYSTEMZ_INS_MS = 1265,
    SYSTEMZ_INS_MSC = 1266,
    SYSTEMZ_INS_MSCH = 1267,
    SYSTEMZ_INS_MSD = 1268,
    SYSTEMZ_INS_MSDB = 1269,
    SYSTEMZ_INS_MSDBR = 1270,
    SYSTEMZ_INS_MSDR = 1271,
    SYSTEMZ_INS_MSE = 1272,
    SYSTEMZ_INS_MSEB = 1273,
    SYSTEMZ_INS_MSEBR = 1274,
    SYSTEMZ_INS_MSER = 1275,
    SYSTEMZ_INS_MSFI = 1276,
    SYSTEMZ_INS_MSG = 1277,
    SYSTEMZ_INS_MSGC = 1278,
    SYSTEMZ_INS_MSGF = 1279,
    SYSTEMZ_INS_MSGFI = 1280,
    SYSTEMZ_INS_MSGFR = 1281,
    SYSTEMZ_INS_MSGR = 1282,
    SYSTEMZ_INS_MSGRKC = 1283,
    SYSTEMZ_INS_MSR = 1284,
    SYSTEMZ_INS_MSRKC = 1285,
    SYSTEMZ_INS_MSTA = 1286,
    SYSTEMZ_INS_MSY = 1287,
    SYSTEMZ_INS_MVC = 1288,
    SYSTEMZ_INS_MVCDK = 1289,
    SYSTEMZ_INS_MVCIN = 1290,
    SYSTEMZ_INS_MVCK = 1291,
    SYSTEMZ_INS_MVCL = 1292,
    SYSTEMZ_INS_MVCLE = 1293,
    SYSTEMZ_INS_MVCLU = 1294,
    SYSTEMZ_INS_MVCOS = 1295,
    SYSTEMZ_INS_MVCP = 1296,
    SYSTEMZ_INS_MVCRL = 1297,
    SYSTEMZ_INS_MVCS = 1298,
    SYSTEMZ_INS_MVCSK = 1299,
    SYSTEMZ_INS_MVGHI = 1300,
    SYSTEMZ_INS_MVHHI = 1301,
    SYSTEMZ_INS_MVHI = 1302,
    SYSTEMZ_INS_MVI = 1303,
    SYSTEMZ_INS_MVIY = 1304,
    SYSTEMZ_INS_MVN = 1305,
    SYSTEMZ_INS_MVO = 1306,
    SYSTEMZ_INS_MVPG = 1307,
    SYSTEMZ_INS_MVST = 1308,
    SYSTEMZ_INS_MVZ = 1309,
    SYSTEMZ_INS_MXBR = 1310,
    SYSTEMZ_INS_MXD = 1311,
    SYSTEMZ_INS_MXDB = 1312,
    SYSTEMZ_INS_MXDBR = 1313,
    SYSTEMZ_INS_MXDR = 1314,
    SYSTEMZ_INS_MXR = 1315,
    SYSTEMZ_INS_MXTR = 1316,
    SYSTEMZ_INS_MXTRA = 1317,
    SYSTEMZ_INS_MY = 1318,
    SYSTEMZ_INS_MYH = 1319,
    SYSTEMZ_INS_MYHR = 1320,
    SYSTEMZ_INS_MYL = 1321,
    SYSTEMZ_INS_MYLR = 1322,
    SYSTEMZ_INS_MYR = 1323,
    SYSTEMZ_INS_N = 1324,
    SYSTEMZ_INS_NC = 1325,
    SYSTEMZ_INS_NCGRK = 1326,
    SYSTEMZ_INS_NCRK = 1327,
    SYSTEMZ_INS_NG = 1328,
    SYSTEMZ_INS_NGR = 1329,
    SYSTEMZ_INS_NGRK = 1330,
    SYSTEMZ_INS_NI = 1331,
    SYSTEMZ_INS_NIAI = 1332,
    SYSTEMZ_INS_NIHF = 1333,
    SYSTEMZ_INS_NIHH = 1334,
    SYSTEMZ_INS_NIHL = 1335,
    SYSTEMZ_INS_NILF = 1336,
    SYSTEMZ_INS_NILH = 1337,
    SYSTEMZ_INS_NILL = 1338,
    SYSTEMZ_INS_NIY = 1339,
    SYSTEMZ_INS_NNGRK = 1340,
    SYSTEMZ_INS_NNPA = 1341,
    SYSTEMZ_INS_NNRK = 1342,
    SYSTEMZ_INS_NOGRK = 1343,
    SYSTEMZ_INS_NOP = 1344,
    SYSTEMZ_INS_NORK = 1345,
    SYSTEMZ_INS_NR = 1346,
    SYSTEMZ_INS_NRK = 1347,
    SYSTEMZ_INS_NTSTG = 1348,
    SYSTEMZ_INS_NXGRK = 1349,
    SYSTEMZ_INS_NXRK = 1350,
    SYSTEMZ_INS_NY = 1351,
    SYSTEMZ_INS_O = 1352,
    SYSTEMZ_INS_OC = 1353,
    SYSTEMZ_INS_OCGRK = 1354,
    SYSTEMZ_INS_OCRK = 1355,
    SYSTEMZ_INS_OG = 1356,
    SYSTEMZ_INS_OGR = 1357,
    SYSTEMZ_INS_OGRK = 1358,
    SYSTEMZ_INS_OI = 1359,
    SYSTEMZ_INS_OIHF = 1360,
    SYSTEMZ_INS_OIHH = 1361,
    SYSTEMZ_INS_OIHL = 1362,
    SYSTEMZ_INS_OILF = 1363,
    SYSTEMZ_INS_OILH = 1364,
    SYSTEMZ_INS_OILL = 1365,
    SYSTEMZ_INS_OIY = 1366,
    SYSTEMZ_INS_OR = 1367,
    SYSTEMZ_INS_ORK = 1368,
    SYSTEMZ_INS_OY = 1369,
    SYSTEMZ_INS_PACK = 1370,
    SYSTEMZ_INS_PALB = 1371,
    SYSTEMZ_INS_PC = 1372,
    SYSTEMZ_INS_PCC = 1373,
    SYSTEMZ_INS_PCKMO = 1374,
    SYSTEMZ_INS_PFD = 1375,
    SYSTEMZ_INS_PFDRL = 1376,
    SYSTEMZ_INS_PFMF = 1377,
    SYSTEMZ_INS_PFPO = 1378,
    SYSTEMZ_INS_PGIN = 1379,
    SYSTEMZ_INS_PGOUT = 1380,
    SYSTEMZ_INS_PKA = 1381,
    SYSTEMZ_INS_PKU = 1382,
    SYSTEMZ_INS_PLO = 1383,
    SYSTEMZ_INS_POPCNT = 1384,
    SYSTEMZ_INS_PPA = 1385,
    SYSTEMZ_INS_PPNO = 1386,
    SYSTEMZ_INS_PR = 1387,
    SYSTEMZ_INS_PRNO = 1388,
    SYSTEMZ_INS_PT = 1389,
    SYSTEMZ_INS_PTF = 1390,
    SYSTEMZ_INS_PTFF = 1391,
    SYSTEMZ_INS_PTI = 1392,
    SYSTEMZ_INS_PTLB = 1393,
    SYSTEMZ_INS_QADTR = 1394,
    SYSTEMZ_INS_QAXTR = 1395,
    SYSTEMZ_INS_QCTRI = 1396,
    SYSTEMZ_INS_QPACI = 1397,
    SYSTEMZ_INS_QSI = 1398,
    SYSTEMZ_INS_RCHP = 1399,
    SYSTEMZ_INS_RDP = 1400,
    SYSTEMZ_INS_RISBG = 1401,
    SYSTEMZ_INS_RISBGN = 1402,
    SYSTEMZ_INS_RISBHG = 1403,
    SYSTEMZ_INS_RISBLG = 1404,
    SYSTEMZ_INS_RLL = 1405,
    SYSTEMZ_INS_RLLG = 1406,
    SYSTEMZ_INS_RNSBG = 1407,
    SYSTEMZ_INS_ROSBG = 1408,
    SYSTEMZ_INS_RP = 1409,
    SYSTEMZ_INS_RRBE = 1410,
    SYSTEMZ_INS_RRBM = 1411,
    SYSTEMZ_INS_RRDTR = 1412,
    SYSTEMZ_INS_RRXTR = 1413,
    SYSTEMZ_INS_RSCH = 1414,
    SYSTEMZ_INS_RXSBG = 1415,
    SYSTEMZ_INS_S = 1416,
    SYSTEMZ_INS_SAC = 1417,
    SYSTEMZ_INS_SACF = 1418,
    SYSTEMZ_INS_SAL = 1419,
    SYSTEMZ_INS_SAM24 = 1420,
    SYSTEMZ_INS_SAM31 = 1421,
    SYSTEMZ_INS_SAM64 = 1422,
    SYSTEMZ_INS_SAR = 1423,
    SYSTEMZ_INS_SCCTR = 1424,
    SYSTEMZ_INS_SCHM = 1425,
    SYSTEMZ_INS_SCK = 1426,
    SYSTEMZ_INS_SCKC = 1427,
    SYSTEMZ_INS_SCKPF = 1428,
    SYSTEMZ_INS_SD = 1429,
    SYSTEMZ_INS_SDB = 1430,
    SYSTEMZ_INS_SDBR = 1431,
    SYSTEMZ_INS_SDR = 1432,
    SYSTEMZ_INS_SDTR = 1433,
    SYSTEMZ_INS_SDTRA = 1434,
    SYSTEMZ_INS_SE = 1435,
    SYSTEMZ_INS_SEB = 1436,
    SYSTEMZ_INS_SEBR = 1437,
    SYSTEMZ_INS_SELFHR = 1438,
    SYSTEMZ_INS_SELFHRE = 1439,
    SYSTEMZ_INS_SELFHRH = 1440,
    SYSTEMZ_INS_SELFHRHE = 1441,
    SYSTEMZ_INS_SELFHRL = 1442,
    SYSTEMZ_INS_SELFHRLE = 1443,
    SYSTEMZ_INS_SELFHRLH = 1444,
    SYSTEMZ_INS_SELFHRM = 1445,
    SYSTEMZ_INS_SELFHRNE = 1446,
    SYSTEMZ_INS_SELFHRNH = 1447,
    SYSTEMZ_INS_SELFHRNHE = 1448,
    SYSTEMZ_INS_SELFHRNL = 1449,
    SYSTEMZ_INS_SELFHRNLE = 1450,
    SYSTEMZ_INS_SELFHRNLH = 1451,
    SYSTEMZ_INS_SELFHRNM = 1452,
    SYSTEMZ_INS_SELFHRNO = 1453,
    SYSTEMZ_INS_SELFHRNP = 1454,
    SYSTEMZ_INS_SELFHRNZ = 1455,
    SYSTEMZ_INS_SELFHRO = 1456,
    SYSTEMZ_INS_SELFHRP = 1457,
    SYSTEMZ_INS_SELFHRZ = 1458,
    SYSTEMZ_INS_SELGR = 1459,
    SYSTEMZ_INS_SELGRE = 1460,
    SYSTEMZ_INS_SELGRH = 1461,
    SYSTEMZ_INS_SELGRHE = 1462,
    SYSTEMZ_INS_SELGRL = 1463,
    SYSTEMZ_INS_SELGRLE = 1464,
    SYSTEMZ_INS_SELGRLH = 1465,
    SYSTEMZ_INS_SELGRM = 1466,
    SYSTEMZ_INS_SELGRNE = 1467,
    SYSTEMZ_INS_SELGRNH = 1468,
    SYSTEMZ_INS_SELGRNHE = 1469,
    SYSTEMZ_INS_SELGRNL = 1470,
    SYSTEMZ_INS_SELGRNLE = 1471,
    SYSTEMZ_INS_SELGRNLH = 1472,
    SYSTEMZ_INS_SELGRNM = 1473,
    SYSTEMZ_INS_SELGRNO = 1474,
    SYSTEMZ_INS_SELGRNP = 1475,
    SYSTEMZ_INS_SELGRNZ = 1476,
    SYSTEMZ_INS_SELGRO = 1477,
    SYSTEMZ_INS_SELGRP = 1478,
    SYSTEMZ_INS_SELGRZ = 1479,
    SYSTEMZ_INS_SELR = 1480,
    SYSTEMZ_INS_SELRE = 1481,
    SYSTEMZ_INS_SELRH = 1482,
    SYSTEMZ_INS_SELRHE = 1483,
    SYSTEMZ_INS_SELRL = 1484,
    SYSTEMZ_INS_SELRLE = 1485,
    SYSTEMZ_INS_SELRLH = 1486,
    SYSTEMZ_INS_SELRM = 1487,
    SYSTEMZ_INS_SELRNE = 1488,
    SYSTEMZ_INS_SELRNH = 1489,
    SYSTEMZ_INS_SELRNHE = 1490,
    SYSTEMZ_INS_SELRNL = 1491,
    SYSTEMZ_INS_SELRNLE = 1492,
    SYSTEMZ_INS_SELRNLH = 1493,
    SYSTEMZ_INS_SELRNM = 1494,
    SYSTEMZ_INS_SELRNO = 1495,
    SYSTEMZ_INS_SELRNP = 1496,
    SYSTEMZ_INS_SELRNZ = 1497,
    SYSTEMZ_INS_SELRO = 1498,
    SYSTEMZ_INS_SELRP = 1499,
    SYSTEMZ_INS_SELRZ = 1500,
    SYSTEMZ_INS_SER = 1501,
    SYSTEMZ_INS_SFASR = 1502,
    SYSTEMZ_INS_SFPC = 1503,
    SYSTEMZ_INS_SG = 1504,
    SYSTEMZ_INS_SGF = 1505,
    SYSTEMZ_INS_SGFR = 1506,
    SYSTEMZ_INS_SGH = 1507,
    SYSTEMZ_INS_SGR = 1508,
    SYSTEMZ_INS_SGRK = 1509,
    SYSTEMZ_INS_SH = 1510,
    SYSTEMZ_INS_SHHHR = 1511,
    SYSTEMZ_INS_SHHLR = 1512,
    SYSTEMZ_INS_SHY = 1513,
    SYSTEMZ_INS_SIE = 1514,
    SYSTEMZ_INS_SIGA = 1515,
    SYSTEMZ_INS_SIGP = 1516,
    SYSTEMZ_INS_SL = 1517,
    SYSTEMZ_INS_SLA = 1518,
    SYSTEMZ_INS_SLAG = 1519,
    SYSTEMZ_INS_SLAK = 1520,
    SYSTEMZ_INS_SLB = 1521,
    SYSTEMZ_INS_SLBG = 1522,
    SYSTEMZ_INS_SLBGR = 1523,
    SYSTEMZ_INS_SLBR = 1524,
    SYSTEMZ_INS_SLDA = 1525,
    SYSTEMZ_INS_SLDL = 1526,
    SYSTEMZ_INS_SLDT = 1527,
    SYSTEMZ_INS_SLFI = 1528,
    SYSTEMZ_INS_SLG = 1529,
    SYSTEMZ_INS_SLGF = 1530,
    SYSTEMZ_INS_SLGFI = 1531,
    SYSTEMZ_INS_SLGFR = 1532,
    SYSTEMZ_INS_SLGR = 1533,
    SYSTEMZ_INS_SLGRK = 1534,
    SYSTEMZ_INS_SLHHHR = 1535,
    SYSTEMZ_INS_SLHHLR = 1536,
    SYSTEMZ_INS_SLL = 1537,
    SYSTEMZ_INS_SLLG = 1538,
    SYSTEMZ_INS_SLLK = 1539,
    SYSTEMZ_INS_SLR = 1540,
    SYSTEMZ_INS_SLRK = 1541,
    SYSTEMZ_INS_SLXT = 1542,
    SYSTEMZ_INS_SLY = 1543,
    SYSTEMZ_INS_SORTL = 1544,
    SYSTEMZ_INS_SP = 1545,
    SYSTEMZ_INS_SPCTR = 1546,
    SYSTEMZ_INS_SPKA = 1547,
    SYSTEMZ_INS_SPM = 1548,
    SYSTEMZ_INS_SPT = 1549,
    SYSTEMZ_INS_SPX = 1550,
    SYSTEMZ_INS_SQD = 1551,
    SYSTEMZ_INS_SQDB = 1552,
    SYSTEMZ_INS_SQDBR = 1553,
    SYSTEMZ_INS_SQDR = 1554,
    SYSTEMZ_INS_SQE = 1555,
    SYSTEMZ_INS_SQEB = 1556,
    SYSTEMZ_INS_SQEBR = 1557,
    SYSTEMZ_INS_SQER = 1558,
    SYSTEMZ_INS_SQXBR = 1559,
    SYSTEMZ_INS_SQXR = 1560,
    SYSTEMZ_INS_SR = 1561,
    SYSTEMZ_INS_SRA = 1562,
    SYSTEMZ_INS_SRAG = 1563,
    SYSTEMZ_INS_SRAK = 1564,
    SYSTEMZ_INS_SRDA = 1565,
    SYSTEMZ_INS_SRDL = 1566,
    SYSTEMZ_INS_SRDT = 1567,
    SYSTEMZ_INS_SRK = 1568,
    SYSTEMZ_INS_SRL = 1569,
    SYSTEMZ_INS_SRLG = 1570,
    SYSTEMZ_INS_SRLK = 1571,
    SYSTEMZ_INS_SRNM = 1572,
    SYSTEMZ_INS_SRNMB = 1573,
    SYSTEMZ_INS_SRNMT = 1574,
    SYSTEMZ_INS_SRP = 1575,
    SYSTEMZ_INS_SRST = 1576,
    SYSTEMZ_INS_SRSTU = 1577,
    SYSTEMZ_INS_SRXT = 1578,
    SYSTEMZ_INS_SSAIR = 1579,
    SYSTEMZ_INS_SSAR = 1580,
    SYSTEMZ_INS_SSCH = 1581,
    SYSTEMZ_INS_SSKE = 1582,
    SYSTEMZ_INS_SSM = 1583,
    SYSTEMZ_INS_ST = 1584,
    SYSTEMZ_INS_STAM = 1585,
    SYSTEMZ_INS_STAMY = 1586,
    SYSTEMZ_INS_STAP = 1587,
    SYSTEMZ_INS_STBEAR = 1588,
    SYSTEMZ_INS_STC = 1589,
    SYSTEMZ_INS_STCH = 1590,
    SYSTEMZ_INS_STCK = 1591,
    SYSTEMZ_INS_STCKC = 1592,
    SYSTEMZ_INS_STCKE = 1593,
    SYSTEMZ_INS_STCKF = 1594,
    SYSTEMZ_INS_STCM = 1595,
    SYSTEMZ_INS_STCMH = 1596,
    SYSTEMZ_INS_STCMY = 1597,
    SYSTEMZ_INS_STCPS = 1598,
    SYSTEMZ_INS_STCRW = 1599,
    SYSTEMZ_INS_STCTG = 1600,
    SYSTEMZ_INS_STCTL = 1601,
    SYSTEMZ_INS_STCY = 1602,
    SYSTEMZ_INS_STD = 1603,
    SYSTEMZ_INS_STDY = 1604,
    SYSTEMZ_INS_STE = 1605,
    SYSTEMZ_INS_STEY = 1606,
    SYSTEMZ_INS_STFH = 1607,
    SYSTEMZ_INS_STFL = 1608,
    SYSTEMZ_INS_STFLE = 1609,
    SYSTEMZ_INS_STFPC = 1610,
    SYSTEMZ_INS_STG = 1611,
    SYSTEMZ_INS_STGRL = 1612,
    SYSTEMZ_INS_STGSC = 1613,
    SYSTEMZ_INS_STH = 1614,
    SYSTEMZ_INS_STHH = 1615,
    SYSTEMZ_INS_STHRL = 1616,
    SYSTEMZ_INS_STHY = 1617,
    SYSTEMZ_INS_STIDP = 1618,
    SYSTEMZ_INS_STM = 1619,
    SYSTEMZ_INS_STMG = 1620,
    SYSTEMZ_INS_STMH = 1621,
    SYSTEMZ_INS_STMY = 1622,
    SYSTEMZ_INS_STNSM = 1623,
    SYSTEMZ_INS_STOC = 1624,
    SYSTEMZ_INS_STOCE = 1625,
    SYSTEMZ_INS_STOCH = 1626,
    SYSTEMZ_INS_STOCHE = 1627,
    SYSTEMZ_INS_STOCL = 1628,
    SYSTEMZ_INS_STOCLE = 1629,
    SYSTEMZ_INS_STOCLH = 1630,
    SYSTEMZ_INS_STOCM = 1631,
    SYSTEMZ_INS_STOCNE = 1632,
    SYSTEMZ_INS_STOCNH = 1633,
    SYSTEMZ_INS_STOCNHE = 1634,
    SYSTEMZ_INS_STOCNL = 1635,
    SYSTEMZ_INS_STOCNLE = 1636,
    SYSTEMZ_INS_STOCNLH = 1637,
    SYSTEMZ_INS_STOCNM = 1638,
    SYSTEMZ_INS_STOCNO = 1639,
    SYSTEMZ_INS_STOCNP = 1640,
    SYSTEMZ_INS_STOCNZ = 1641,
    SYSTEMZ_INS_STOCO = 1642,
    SYSTEMZ_INS_STOCP = 1643,
    SYSTEMZ_INS_STOCZ = 1644,
    SYSTEMZ_INS_STOCFH = 1645,
    SYSTEMZ_INS_STOCFHE = 1646,
    SYSTEMZ_INS_STOCFHH = 1647,
    SYSTEMZ_INS_STOCFHHE = 1648,
    SYSTEMZ_INS_STOCFHL = 1649,
    SYSTEMZ_INS_STOCFHLE = 1650,
    SYSTEMZ_INS_STOCFHLH = 1651,
    SYSTEMZ_INS_STOCFHM = 1652,
    SYSTEMZ_INS_STOCFHNE = 1653,
    SYSTEMZ_INS_STOCFHNH = 1654,
    SYSTEMZ_INS_STOCFHNHE = 1655,
    SYSTEMZ_INS_STOCFHNL = 1656,
    SYSTEMZ_INS_STOCFHNLE = 1657,
    SYSTEMZ_INS_STOCFHNLH = 1658,
    SYSTEMZ_INS_STOCFHNM = 1659,
    SYSTEMZ_INS_STOCFHNO = 1660,
    SYSTEMZ_INS_STOCFHNP = 1661,
    SYSTEMZ_INS_STOCFHNZ = 1662,
    SYSTEMZ_INS_STOCFHO = 1663,
    SYSTEMZ_INS_STOCFHP = 1664,
    SYSTEMZ_INS_STOCFHZ = 1665,
    SYSTEMZ_INS_STOCG = 1666,
    SYSTEMZ_INS_STOCGE = 1667,
    SYSTEMZ_INS_STOCGH = 1668,
    SYSTEMZ_INS_STOCGHE = 1669,
    SYSTEMZ_INS_STOCGL = 1670,
    SYSTEMZ_INS_STOCGLE = 1671,
    SYSTEMZ_INS_STOCGLH = 1672,
    SYSTEMZ_INS_STOCGM = 1673,
    SYSTEMZ_INS_STOCGNE = 1674,
    SYSTEMZ_INS_STOCGNH = 1675,
    SYSTEMZ_INS_STOCGNHE = 1676,
    SYSTEMZ_INS_STOCGNL = 1677,
    SYSTEMZ_INS_STOCGNLE = 1678,
    SYSTEMZ_INS_STOCGNLH = 1679,
    SYSTEMZ_INS_STOCGNM = 1680,
    SYSTEMZ_INS_STOCGNO = 1681,
    SYSTEMZ_INS_STOCGNP = 1682,
    SYSTEMZ_INS_STOCGNZ = 1683,
    SYSTEMZ_INS_STOCGO = 1684,
    SYSTEMZ_INS_STOCGP = 1685,
    SYSTEMZ_INS_STOCGZ = 1686,
    SYSTEMZ_INS_STOSM = 1687,
    SYSTEMZ_INS_STPQ = 1688,
    SYSTEMZ_INS_STPT = 1689,
    SYSTEMZ_INS_STPX = 1690,
    SYSTEMZ_INS_STRAG = 1691,
    SYSTEMZ_INS_STRL = 1692,
    SYSTEMZ_INS_STRV = 1693,
    SYSTEMZ_INS_STRVG = 1694,
    SYSTEMZ_INS_STRVH = 1695,
    SYSTEMZ_INS_STSCH = 1696,
    SYSTEMZ_INS_STSI = 1697,
    SYSTEMZ_INS_STURA = 1698,
    SYSTEMZ_INS_STURG = 1699,
    SYSTEMZ_INS_STY = 1700,
    SYSTEMZ_INS_SU = 1701,
    SYSTEMZ_INS_SUR = 1702,
    SYSTEMZ_INS_SVC = 1703,
    SYSTEMZ_INS_SW = 1704,
    SYSTEMZ_INS_SWR = 1705,
    SYSTEMZ_INS_SXBR = 1706,
    SYSTEMZ_INS_SXR = 1707,
    SYSTEMZ_INS_SXTR = 1708,
    SYSTEMZ_INS_SXTRA = 1709,
    SYSTEMZ_INS_SY = 1710,
    SYSTEMZ_INS_TABORT = 1711,
    SYSTEMZ_INS_TAM = 1712,
    SYSTEMZ_INS_TAR = 1713,
    SYSTEMZ_INS_TB = 1714,
    SYSTEMZ_INS_TBDR = 1715,
    SYSTEMZ_INS_TBEDR = 1716,
    SYSTEMZ_INS_TBEGIN = 1717,
    SYSTEMZ_INS_TBEGINC = 1718,
    SYSTEMZ_INS_TCDB = 1719,
    SYSTEMZ_INS_TCEB = 1720,
    SYSTEMZ_INS_TCXB = 1721,
    SYSTEMZ_INS_TDCDT = 1722,
    SYSTEMZ_INS_TDCET = 1723,
    SYSTEMZ_INS_TDCXT = 1724,
    SYSTEMZ_INS_TDGDT = 1725,
    SYSTEMZ_INS_TDGET = 1726,
    SYSTEMZ_INS_TDGXT = 1727,
    SYSTEMZ_INS_TEND = 1728,
    SYSTEMZ_INS_THDER = 1729,
    SYSTEMZ_INS_THDR = 1730,
    SYSTEMZ_INS_TM = 1731,
    SYSTEMZ_INS_TMHH = 1732,
    SYSTEMZ_INS_TMHL = 1733,
    SYSTEMZ_INS_TMLH = 1734,
    SYSTEMZ_INS_TMLL = 1735,
    SYSTEMZ_INS_TMY = 1736,
    SYSTEMZ_INS_TP = 1737,
    SYSTEMZ_INS_TPI = 1738,
    SYSTEMZ_INS_TPROT = 1739,
    SYSTEMZ_INS_TR = 1740,
    SYSTEMZ_INS_TRACE = 1741,
    SYSTEMZ_INS_TRACG = 1742,
    SYSTEMZ_INS_TRAP2 = 1743,
    SYSTEMZ_INS_TRAP4 = 1744,
    SYSTEMZ_INS_TRE = 1745,
    SYSTEMZ_INS_TROO = 1746,
    SYSTEMZ_INS_TROT = 1747,
    SYSTEMZ_INS_TRT = 1748,
    SYSTEMZ_INS_TRTE = 1749,
    SYSTEMZ_INS_TRTO = 1750,
    SYSTEMZ_INS_TRTR = 1751,
    SYSTEMZ_INS_TRTRE = 1752,
    SYSTEMZ_INS_TRTT = 1753,
    SYSTEMZ_INS_TS = 1754,
    SYSTEMZ_INS_TSCH = 1755,
    SYSTEMZ_INS_UNPK = 1756,
    SYSTEMZ_INS_UNPKA = 1757,
    SYSTEMZ_INS_UNPKU = 1758,
    SYSTEMZ_INS_UPT = 1759,
    SYSTEMZ_INS_VA = 1760,
    SYSTEMZ_INS_VAB = 1761,
    SYSTEMZ_INS_VAC = 1762,
    SYSTEMZ_INS_VACC = 1763,
    SYSTEMZ_INS_VACCB = 1764,
    SYSTEMZ_INS_VACCC = 1765,
    SYSTEMZ_INS_VACCCQ = 1766,
    SYSTEMZ_INS_VACCF = 1767,
    SYSTEMZ_INS_VACCG = 1768,
    SYSTEMZ_INS_VACCH = 1769,
    SYSTEMZ_INS_VACCQ = 1770,
    SYSTEMZ_INS_VACQ = 1771,
    SYSTEMZ_INS_VAF = 1772,
    SYSTEMZ_INS_VAG = 1773,
    SYSTEMZ_INS_VAH = 1774,
    SYSTEMZ_INS_VAP = 1775,
    SYSTEMZ_INS_VAQ = 1776,
    SYSTEMZ_INS_VAVG = 1777,
    SYSTEMZ_INS_VAVGB = 1778,
    SYSTEMZ_INS_VAVGF = 1779,
    SYSTEMZ_INS_VAVGG = 1780,
    SYSTEMZ_INS_VAVGH = 1781,
    SYSTEMZ_INS_VAVGL = 1782,
    SYSTEMZ_INS_VAVGLB = 1783,
    SYSTEMZ_INS_VAVGLF = 1784,
    SYSTEMZ_INS_VAVGLG = 1785,
    SYSTEMZ_INS_VAVGLH = 1786,
    SYSTEMZ_INS_VBPERM = 1787,
    SYSTEMZ_INS_VCDG = 1788,
    SYSTEMZ_INS_VCDGB = 1789,
    SYSTEMZ_INS_VCDLG = 1790,
    SYSTEMZ_INS_VCDLGB = 1791,
    SYSTEMZ_INS_VCEFB = 1792,
    SYSTEMZ_INS_VCELFB = 1793,
    SYSTEMZ_INS_VCEQ = 1794,
    SYSTEMZ_INS_VCEQB = 1795,
    SYSTEMZ_INS_VCEQBS = 1796,
    SYSTEMZ_INS_VCEQF = 1797,
    SYSTEMZ_INS_VCEQFS = 1798,
    SYSTEMZ_INS_VCEQG = 1799,
    SYSTEMZ_INS_VCEQGS = 1800,
    SYSTEMZ_INS_VCEQH = 1801,
    SYSTEMZ_INS_VCEQHS = 1802,
    SYSTEMZ_INS_VCFEB = 1803,
    SYSTEMZ_INS_VCFN = 1804,
    SYSTEMZ_INS_VCFPL = 1805,
    SYSTEMZ_INS_VCFPS = 1806,
    SYSTEMZ_INS_VCGD = 1807,
    SYSTEMZ_INS_VCGDB = 1808,
    SYSTEMZ_INS_VCH = 1809,
    SYSTEMZ_INS_VCHB = 1810,
    SYSTEMZ_INS_VCHBS = 1811,
    SYSTEMZ_INS_VCHF = 1812,
    SYSTEMZ_INS_VCHFS = 1813,
    SYSTEMZ_INS_VCHG = 1814,
    SYSTEMZ_INS_VCHGS = 1815,
    SYSTEMZ_INS_VCHH = 1816,
    SYSTEMZ_INS_VCHHS = 1817,
    SYSTEMZ_INS_VCHL = 1818,
    SYSTEMZ_INS_VCHLB = 1819,
    SYSTEMZ_INS_VCHLBS = 1820,
    SYSTEMZ_INS_VCHLF = 1821,
    SYSTEMZ_INS_VCHLFS = 1822,
    SYSTEMZ_INS_VCHLG = 1823,
    SYSTEMZ_INS_VCHLGS = 1824,
    SYSTEMZ_INS_VCHLH = 1825,
    SYSTEMZ_INS_VCHLHS = 1826,
    SYSTEMZ_INS_VCKSM = 1827,
    SYSTEMZ_INS_VCLFEB = 1828,
    SYSTEMZ_INS_VCLFNH = 1829,
    SYSTEMZ_INS_VCLFNL = 1830,
    SYSTEMZ_INS_VCLFP = 1831,
    SYSTEMZ_INS_VCLGD = 1832,
    SYSTEMZ_INS_VCLGDB = 1833,
    SYSTEMZ_INS_VCLZ = 1834,
    SYSTEMZ_INS_VCLZB = 1835,
    SYSTEMZ_INS_VCLZDP = 1836,
    SYSTEMZ_INS_VCLZF = 1837,
    SYSTEMZ_INS_VCLZG = 1838,
    SYSTEMZ_INS_VCLZH = 1839,
    SYSTEMZ_INS_VCNF = 1840,
    SYSTEMZ_INS_VCP = 1841,
    SYSTEMZ_INS_VCRNF = 1842,
    SYSTEMZ_INS_VCSFP = 1843,
    SYSTEMZ_INS_VCSPH = 1844,
    SYSTEMZ_INS_VCTZ = 1845,
    SYSTEMZ_INS_VCTZB = 1846,
    SYSTEMZ_INS_VCTZF = 1847,
    SYSTEMZ_INS_VCTZG = 1848,
    SYSTEMZ_INS_VCTZH = 1849,
    SYSTEMZ_INS_VCVB = 1850,
    SYSTEMZ_INS_VCVBG = 1851,
    SYSTEMZ_INS_VCVD = 1852,
    SYSTEMZ_INS_VCVDG = 1853,
    SYSTEMZ_INS_VDP = 1854,
    SYSTEMZ_INS_VEC = 1855,
    SYSTEMZ_INS_VECB = 1856,
    SYSTEMZ_INS_VECF = 1857,
    SYSTEMZ_INS_VECG = 1858,
    SYSTEMZ_INS_VECH = 1859,
    SYSTEMZ_INS_VECL = 1860,
    SYSTEMZ_INS_VECLB = 1861,
    SYSTEMZ_INS_VECLF = 1862,
    SYSTEMZ_INS_VECLG = 1863,
    SYSTEMZ_INS_VECLH = 1864,
    SYSTEMZ_INS_VERIM = 1865,
    SYSTEMZ_INS_VERIMB = 1866,
    SYSTEMZ_INS_VERIMF = 1867,
    SYSTEMZ_INS_VERIMG = 1868,
    SYSTEMZ_INS_VERIMH = 1869,
    SYSTEMZ_INS_VERLL = 1870,
    SYSTEMZ_INS_VERLLB = 1871,
    SYSTEMZ_INS_VERLLF = 1872,
    SYSTEMZ_INS_VERLLG = 1873,
    SYSTEMZ_INS_VERLLH = 1874,
    SYSTEMZ_INS_VERLLV = 1875,
    SYSTEMZ_INS_VERLLVB = 1876,
    SYSTEMZ_INS_VERLLVF = 1877,
    SYSTEMZ_INS_VERLLVG = 1878,
    SYSTEMZ_INS_VERLLVH = 1879,
    SYSTEMZ_INS_VESL = 1880,
    SYSTEMZ_INS_VESLB = 1881,
    SYSTEMZ_INS_VESLF = 1882,
    SYSTEMZ_INS_VESLG = 1883,
    SYSTEMZ_INS_VESLH = 1884,
    SYSTEMZ_INS_VESLV = 1885,
    SYSTEMZ_INS_VESLVB = 1886,
    SYSTEMZ_INS_VESLVF = 1887,
    SYSTEMZ_INS_VESLVG = 1888,
    SYSTEMZ_INS_VESLVH = 1889,
    SYSTEMZ_INS_VESRA = 1890,
    SYSTEMZ_INS_VESRAB = 1891,
    SYSTEMZ_INS_VESRAF = 1892,
    SYSTEMZ_INS_VESRAG = 1893,
    SYSTEMZ_INS_VESRAH = 1894,
    SYSTEMZ_INS_VESRAV = 1895,
    SYSTEMZ_INS_VESRAVB = 1896,
    SYSTEMZ_INS_VESRAVF = 1897,
    SYSTEMZ_INS_VESRAVG = 1898,
    SYSTEMZ_INS_VESRAVH = 1899,
    SYSTEMZ_INS_VESRL = 1900,
    SYSTEMZ_INS_VESRLB = 1901,
    SYSTEMZ_INS_VESRLF = 1902,
    SYSTEMZ_INS_VESRLG = 1903,
    SYSTEMZ_INS_VESRLH = 1904,
    SYSTEMZ_INS_VESRLV = 1905,
    SYSTEMZ_INS_VESRLVB = 1906,
    SYSTEMZ_INS_VESRLVF = 1907,
    SYSTEMZ_INS_VESRLVG = 1908,
    SYSTEMZ_INS_VESRLVH = 1909,
    SYSTEMZ_INS_VFA = 1910,
    SYSTEMZ_INS_VFADB = 1911,
    SYSTEMZ_INS_VFAE = 1912,
    SYSTEMZ_INS_VFAEB = 1913,
    SYSTEMZ_INS_VFAEBS = 1914,
    SYSTEMZ_INS_VFAEF = 1915,
    SYSTEMZ_INS_VFAEFS = 1916,
    SYSTEMZ_INS_VFAEH = 1917,
    SYSTEMZ_INS_VFAEHS = 1918,
    SYSTEMZ_INS_VFAEZB = 1919,
    SYSTEMZ_INS_VFAEZBS = 1920,
    SYSTEMZ_INS_VFAEZF = 1921,
    SYSTEMZ_INS_VFAEZFS = 1922,
    SYSTEMZ_INS_VFAEZH = 1923,
    SYSTEMZ_INS_VFAEZHS = 1924,
    SYSTEMZ_INS_VFASB = 1925,
    SYSTEMZ_INS_VFCE = 1926,
    SYSTEMZ_INS_VFCEDB = 1927,
    SYSTEMZ_INS_VFCEDBS = 1928,
    SYSTEMZ_INS_VFCESB = 1929,
    SYSTEMZ_INS_VFCESBS = 1930,
    SYSTEMZ_INS_VFCH = 1931,
    SYSTEMZ_INS_VFCHDB = 1932,
    SYSTEMZ_INS_VFCHDBS = 1933,
    SYSTEMZ_INS_VFCHE = 1934,
    SYSTEMZ_INS_VFCHEDB = 1935,
    SYSTEMZ_INS_VFCHEDBS = 1936,
    SYSTEMZ_INS_VFCHESB = 1937,
    SYSTEMZ_INS_VFCHESBS = 1938,
    SYSTEMZ_INS_VFCHSB = 1939,
    SYSTEMZ_INS_VFCHSBS = 1940,
    SYSTEMZ_INS_VFD = 1941,
    SYSTEMZ_INS_VFDDB = 1942,
    SYSTEMZ_INS_VFDSB = 1943,
    SYSTEMZ_INS_VFEE = 1944,
    SYSTEMZ_INS_VFEEB = 1945,
    SYSTEMZ_INS_VFEEBS = 1946,
    SYSTEMZ_INS_VFEEF = 1947,
    SYSTEMZ_INS_VFEEFS = 1948,
    SYSTEMZ_INS_VFEEH = 1949,
    SYSTEMZ_INS_VFEEHS = 1950,
    SYSTEMZ_INS_VFEEZB = 1951,
    SYSTEMZ_INS_VFEEZBS = 1952,
    SYSTEMZ_INS_VFEEZF = 1953,
    SYSTEMZ_INS_VFEEZFS = 1954,
    SYSTEMZ_INS_VFEEZH = 1955,
    SYSTEMZ_INS_VFEEZHS = 1956,
    SYSTEMZ_INS_VFENE = 1957,
    SYSTEMZ_INS_VFENEB = 1958,
    SYSTEMZ_INS_VFENEBS = 1959,
    SYSTEMZ_INS_VFENEF = 1960,
    SYSTEMZ_INS_VFENEFS = 1961,
    SYSTEMZ_INS_VFENEH = 1962,
    SYSTEMZ_INS_VFENEHS = 1963,
    SYSTEMZ_INS_VFENEZB = 1964,
    SYSTEMZ_INS_VFENEZBS = 1965,
    SYSTEMZ_INS_VFENEZF = 1966,
    SYSTEMZ_INS_VFENEZFS = 1967,
    SYSTEMZ_INS_VFENEZH = 1968,
    SYSTEMZ_INS_VFENEZHS = 1969,
    SYSTEMZ_INS_VFI = 1970,
    SYSTEMZ_INS_VFIDB = 1971,
    SYSTEMZ_INS_VFISB = 1972,
    SYSTEMZ_INS_VFKEDB = 1973,
    SYSTEMZ_INS_VFKEDBS = 1974,
    SYSTEMZ_INS_VFKESB = 1975,
    SYSTEMZ_INS_VFKESBS = 1976,
    SYSTEMZ_INS_VFKHDB = 1977,
    SYSTEMZ_INS_VFKHDBS = 1978,
    SYSTEMZ_INS_VFKHEDB = 1979,
    SYSTEMZ_INS_VFKHEDBS = 1980,
    SYSTEMZ_INS_VFKHESB = 1981,
    SYSTEMZ_INS_VFKHESBS = 1982,
    SYSTEMZ_INS_VFKHSB = 1983,
    SYSTEMZ_INS_VFKHSBS = 1984,
    SYSTEMZ_INS_VFLCDB = 1985,
    SYSTEMZ_INS_VFLCSB = 1986,
    SYSTEMZ_INS_VFLL = 1987,
    SYSTEMZ_INS_VFLLS = 1988,
    SYSTEMZ_INS_VFLNDB = 1989,
    SYSTEMZ_INS_VFLNSB = 1990,
    SYSTEMZ_INS_VFLPDB = 1991,
    SYSTEMZ_INS_VFLPSB = 1992,
    SYSTEMZ_INS_VFLR = 1993,
    SYSTEMZ_INS_VFLRD = 1994,
    SYSTEMZ_INS_VFM = 1995,
    SYSTEMZ_INS_VFMA = 1996,
    SYSTEMZ_INS_VFMADB = 1997,
    SYSTEMZ_INS_VFMASB = 1998,
    SYSTEMZ_INS_VFMAX = 1999,
    SYSTEMZ_INS_VFMAXDB = 2000,
    SYSTEMZ_INS_VFMAXSB = 2001,
    SYSTEMZ_INS_VFMDB = 2002,
    SYSTEMZ_INS_VFMIN = 2003,
    SYSTEMZ_INS_VFMINDB = 2004,
    SYSTEMZ_INS_VFMINSB = 2005,
    SYSTEMZ_INS_VFMS = 2006,
    SYSTEMZ_INS_VFMSB = 2007,
    SYSTEMZ_INS_VFMSDB = 2008,
    SYSTEMZ_INS_VFMSSB = 2009,
    SYSTEMZ_INS_VFNMA = 2010,
    SYSTEMZ_INS_VFNMADB = 2011,
    SYSTEMZ_INS_VFNMASB = 2012,
    SYSTEMZ_INS_VFNMS = 2013,
    SYSTEMZ_INS_VFNMSDB = 2014,
    SYSTEMZ_INS_VFNMSSB = 2015,
    SYSTEMZ_INS_VFPSO = 2016,
    SYSTEMZ_INS_VFPSODB = 2017,
    SYSTEMZ_INS_VFPSOSB = 2018,
    SYSTEMZ_INS_VFS = 2019,
    SYSTEMZ_INS_VFSDB = 2020,
    SYSTEMZ_INS_VFSQ = 2021,
    SYSTEMZ_INS_VFSQDB = 2022,
    SYSTEMZ_INS_VFSQSB = 2023,
    SYSTEMZ_INS_VFSSB = 2024,
    SYSTEMZ_INS_VFTCI = 2025,
    SYSTEMZ_INS_VFTCIDB = 2026,
    SYSTEMZ_INS_VFTCISB = 2027,
    SYSTEMZ_INS_VGBM = 2028,
    SYSTEMZ_INS_VGEF = 2029,
    SYSTEMZ_INS_VGEG = 2030,
    SYSTEMZ_INS_VGFM = 2031,
    SYSTEMZ_INS_VGFMA = 2032,
    SYSTEMZ_INS_VGFMAB = 2033,
    SYSTEMZ_INS_VGFMAF = 2034,
    SYSTEMZ_INS_VGFMAG = 2035,
    SYSTEMZ_INS_VGFMAH = 2036,
    SYSTEMZ_INS_VGFMB = 2037,
    SYSTEMZ_INS_VGFMF = 2038,
    SYSTEMZ_INS_VGFMG = 2039,
    SYSTEMZ_INS_VGFMH = 2040,
    SYSTEMZ_INS_VGM = 2041,
    SYSTEMZ_INS_VGMB = 2042,
    SYSTEMZ_INS_VGMF = 2043,
    SYSTEMZ_INS_VGMG = 2044,
    SYSTEMZ_INS_VGMH = 2045,
    SYSTEMZ_INS_VISTR = 2046,
    SYSTEMZ_INS_VISTRB = 2047,
    SYSTEMZ_INS_VISTRBS = 2048,
    SYSTEMZ_INS_VISTRF = 2049,
    SYSTEMZ_INS_VISTRFS = 2050,
    SYSTEMZ_INS_VISTRH = 2051,
    SYSTEMZ_INS_VISTRHS = 2052,
    SYSTEMZ_INS_VL = 2053,
    SYSTEMZ_INS_VLBB = 2054,
    SYSTEMZ_INS_VLBR = 2055,
    SYSTEMZ_INS_VLBRF = 2056,
    SYSTEMZ_INS_VLBRG = 2057,
    SYSTEMZ_INS_VLBRH = 2058,
    SYSTEMZ_INS_VLBRQ = 2059,
    SYSTEMZ_INS_VLBRREP = 2060,
    SYSTEMZ_INS_VLBRREPF = 2061,
    SYSTEMZ_INS_VLBRREPG = 2062,
    SYSTEMZ_INS_VLBRREPH = 2063,
    SYSTEMZ_INS_VLC = 2064,
    SYSTEMZ_INS_VLCB = 2065,
    SYSTEMZ_INS_VLCF = 2066,
    SYSTEMZ_INS_VLCG = 2067,
    SYSTEMZ_INS_VLCH = 2068,
    SYSTEMZ_INS_VLDE = 2069,
    SYSTEMZ_INS_VLDEB = 2070,
    SYSTEMZ_INS_VLEB = 2071,
    SYSTEMZ_INS_VLEBRF = 2072,
    SYSTEMZ_INS_VLEBRG = 2073,
    SYSTEMZ_INS_VLEBRH = 2074,
    SYSTEMZ_INS_VLED = 2075,
    SYSTEMZ_INS_VLEDB = 2076,
    SYSTEMZ_INS_VLEF = 2077,
    SYSTEMZ_INS_VLEG = 2078,
    SYSTEMZ_INS_VLEH = 2079,
    SYSTEMZ_INS_VLEIB = 2080,
    SYSTEMZ_INS_VLEIF = 2081,
    SYSTEMZ_INS_VLEIG = 2082,
    SYSTEMZ_INS_VLEIH = 2083,
    SYSTEMZ_INS_VLER = 2084,
    SYSTEMZ_INS_VLERF = 2085,
    SYSTEMZ_INS_VLERG = 2086,
    SYSTEMZ_INS_VLERH = 2087,
    SYSTEMZ_INS_VLGV = 2088,
    SYSTEMZ_INS_VLGVB = 2089,
    SYSTEMZ_INS_VLGVF = 2090,
    SYSTEMZ_INS_VLGVG = 2091,
    SYSTEMZ_INS_VLGVH = 2092,
    SYSTEMZ_INS_VLIP = 2093,
    SYSTEMZ_INS_VLL = 2094,
    SYSTEMZ_INS_VLLEBRZ = 2095,
    SYSTEMZ_INS_VLLEBRZE = 2096,
    SYSTEMZ_INS_VLLEBRZF = 2097,
    SYSTEMZ_INS_VLLEBRZG = 2098,
    SYSTEMZ_INS_VLLEBRZH = 2099,
    SYSTEMZ_INS_VLLEZ = 2100,
    SYSTEMZ_INS_VLLEZB = 2101,
    SYSTEMZ_INS_VLLEZF = 2102,
    SYSTEMZ_INS_VLLEZG = 2103,
    SYSTEMZ_INS_VLLEZH = 2104,
    SYSTEMZ_INS_VLLEZLF = 2105,
    SYSTEMZ_INS_VLM = 2106,
    SYSTEMZ_INS_VLP = 2107,
    SYSTEMZ_INS_VLPB = 2108,
    SYSTEMZ_INS_VLPF = 2109,
    SYSTEMZ_INS_VLPG = 2110,
    SYSTEMZ_INS_VLPH = 2111,
    SYSTEMZ_INS_VLR = 2112,
    SYSTEMZ_INS_VLREP = 2113,
    SYSTEMZ_INS_VLREPB = 2114,
    SYSTEMZ_INS_VLREPF = 2115,
    SYSTEMZ_INS_VLREPG = 2116,
    SYSTEMZ_INS_VLREPH = 2117,
    SYSTEMZ_INS_VLRL = 2118,
    SYSTEMZ_INS_VLRLR = 2119,
    SYSTEMZ_INS_VLVG = 2120,
    SYSTEMZ_INS_VLVGB = 2121,
    SYSTEMZ_INS_VLVGF = 2122,
    SYSTEMZ_INS_VLVGG = 2123,
    SYSTEMZ_INS_VLVGH = 2124,
    SYSTEMZ_INS_VLVGP = 2125,
    SYSTEMZ_INS_VMAE = 2126,
    SYSTEMZ_INS_VMAEB = 2127,
    SYSTEMZ_INS_VMAEF = 2128,
    SYSTEMZ_INS_VMAEH = 2129,
    SYSTEMZ_INS_VMAH = 2130,
    SYSTEMZ_INS_VMAHB = 2131,
    SYSTEMZ_INS_VMAHF = 2132,
    SYSTEMZ_INS_VMAHH = 2133,
    SYSTEMZ_INS_VMAL = 2134,
    SYSTEMZ_INS_VMALB = 2135,
    SYSTEMZ_INS_VMALE = 2136,
    SYSTEMZ_INS_VMALEB = 2137,
    SYSTEMZ_INS_VMALEF = 2138,
    SYSTEMZ_INS_VMALEH = 2139,
    SYSTEMZ_INS_VMALF = 2140,
    SYSTEMZ_INS_VMALH = 2141,
    SYSTEMZ_INS_VMALHB = 2142,
    SYSTEMZ_INS_VMALHF = 2143,
    SYSTEMZ_INS_VMALHH = 2144,
    SYSTEMZ_INS_VMALHW = 2145,
    SYSTEMZ_INS_VMALO = 2146,
    SYSTEMZ_INS_VMALOB = 2147,
    SYSTEMZ_INS_VMALOF = 2148,
    SYSTEMZ_INS_VMALOH = 2149,
    SYSTEMZ_INS_VMAO = 2150,
    SYSTEMZ_INS_VMAOB = 2151,
    SYSTEMZ_INS_VMAOF = 2152,
    SYSTEMZ_INS_VMAOH = 2153,
    SYSTEMZ_INS_VME = 2154,
    SYSTEMZ_INS_VMEB = 2155,
    SYSTEMZ_INS_VMEF = 2156,
    SYSTEMZ_INS_VMEH = 2157,
    SYSTEMZ_INS_VMH = 2158,
    SYSTEMZ_INS_VMHB = 2159,
    SYSTEMZ_INS_VMHF = 2160,
    SYSTEMZ_INS_VMHH = 2161,
    SYSTEMZ_INS_VML = 2162,
    SYSTEMZ_INS_VMLB = 2163,
    SYSTEMZ_INS_VMLE = 2164,
    SYSTEMZ_INS_VMLEB = 2165,
    SYSTEMZ_INS_VMLEF = 2166,
    SYSTEMZ_INS_VMLEH = 2167,
    SYSTEMZ_INS_VMLF = 2168,
    SYSTEMZ_INS_VMLH = 2169,
    SYSTEMZ_INS_VMLHB = 2170,
    SYSTEMZ_INS_VMLHF = 2171,
    SYSTEMZ_INS_VMLHH = 2172,
    SYSTEMZ_INS_VMLHW = 2173,
    SYSTEMZ_INS_VMLO = 2174,
    SYSTEMZ_INS_VMLOB = 2175,
    SYSTEMZ_INS_VMLOF = 2176,
    SYSTEMZ_INS_VMLOH = 2177,
    SYSTEMZ_INS_VMN = 2178,
    SYSTEMZ_INS_VMNB = 2179,
    SYSTEMZ_INS_VMNF = 2180,
    SYSTEMZ_INS_VMNG = 2181,
    SYSTEMZ_INS_VMNH = 2182,
    SYSTEMZ_INS_VMNL = 2183,
    SYSTEMZ_INS_VMNLB = 2184,
    SYSTEMZ_INS_VMNLF = 2185,
    SYSTEMZ_INS_VMNLG = 2186,
    SYSTEMZ_INS_VMNLH = 2187,
    SYSTEMZ_INS_VMO = 2188,
    SYSTEMZ_INS_VMOB = 2189,
    SYSTEMZ_INS_VMOF = 2190,
    SYSTEMZ_INS_VMOH = 2191,
    SYSTEMZ_INS_VMP = 2192,
    SYSTEMZ_INS_VMRH = 2193,
    SYSTEMZ_INS_VMRHB = 2194,
    SYSTEMZ_INS_VMRHF = 2195,
    SYSTEMZ_INS_VMRHG = 2196,
    SYSTEMZ_INS_VMRHH = 2197,
    SYSTEMZ_INS_VMRL = 2198,
    SYSTEMZ_INS_VMRLB = 2199,
    SYSTEMZ_INS_VMRLF = 2200,
    SYSTEMZ_INS_VMRLG = 2201,
    SYSTEMZ_INS_VMRLH = 2202,
    SYSTEMZ_INS_VMSL = 2203,
    SYSTEMZ_INS_VMSLG = 2204,
    SYSTEMZ_INS_VMSP = 2205,
    SYSTEMZ_INS_VMX = 2206,
    SYSTEMZ_INS_VMXB = 2207,
    SYSTEMZ_INS_VMXF = 2208,
    SYSTEMZ_INS_VMXG = 2209,
    SYSTEMZ_INS_VMXH = 2210,
    SYSTEMZ_INS_VMXL = 2211,
    SYSTEMZ_INS_VMXLB = 2212,
    SYSTEMZ_INS_VMXLF = 2213,
    SYSTEMZ_INS_VMXLG = 2214,
    SYSTEMZ_INS_VMXLH = 2215,
    SYSTEMZ_INS_VN = 2216,
    SYSTEMZ_INS_VNC = 2217,
    SYSTEMZ_INS_VNN = 2218,
    SYSTEMZ_INS_VNO = 2219,
    SYSTEMZ_INS_VNX = 2220,
    SYSTEMZ_INS_VO = 2221,
    SYSTEMZ_INS_VOC = 2222,
    SYSTEMZ_INS_VONE = 2223,
    SYSTEMZ_INS_VPDI = 2224,
    SYSTEMZ_INS_VPERM = 2225,
    SYSTEMZ_INS_VPK = 2226,
    SYSTEMZ_INS_VPKF = 2227,
    SYSTEMZ_INS_VPKG = 2228,
    SYSTEMZ_INS_VPKH = 2229,
    SYSTEMZ_INS_VPKLS = 2230,
    SYSTEMZ_INS_VPKLSF = 2231,
    SYSTEMZ_INS_VPKLSFS = 2232,
    SYSTEMZ_INS_VPKLSG = 2233,
    SYSTEMZ_INS_VPKLSGS = 2234,
    SYSTEMZ_INS_VPKLSH = 2235,
    SYSTEMZ_INS_VPKLSHS = 2236,
    SYSTEMZ_INS_VPKS = 2237,
    SYSTEMZ_INS_VPKSF = 2238,
    SYSTEMZ_INS_VPKSFS = 2239,
    SYSTEMZ_INS_VPKSG = 2240,
    SYSTEMZ_INS_VPKSGS = 2241,
    SYSTEMZ_INS_VPKSH = 2242,
    SYSTEMZ_INS_VPKSHS = 2243,
    SYSTEMZ_INS_VPKZ = 2244,
    SYSTEMZ_INS_VPKZR = 2245,
    SYSTEMZ_INS_VPOPCT = 2246,
    SYSTEMZ_INS_VPOPCTB = 2247,
    SYSTEMZ_INS_VPOPCTF = 2248,
    SYSTEMZ_INS_VPOPCTG = 2249,
    SYSTEMZ_INS_VPOPCTH = 2250,
    SYSTEMZ_INS_VPSOP = 2251,
    SYSTEMZ_INS_VREP = 2252,
    SYSTEMZ_INS_VREPB = 2253,
    SYSTEMZ_INS_VREPF = 2254,
    SYSTEMZ_INS_VREPG = 2255,
    SYSTEMZ_INS_VREPH = 2256,
    SYSTEMZ_INS_VREPI = 2257,
    SYSTEMZ_INS_VREPIB = 2258,
    SYSTEMZ_INS_VREPIF = 2259,
    SYSTEMZ_INS_VREPIG = 2260,
    SYSTEMZ_INS_VREPIH = 2261,
    SYSTEMZ_INS_VRP = 2262,
    SYSTEMZ_INS_VS = 2263,
    SYSTEMZ_INS_VSB = 2264,
    SYSTEMZ_INS_VSBCBI = 2265,
    SYSTEMZ_INS_VSBCBIQ = 2266,
    SYSTEMZ_INS_VSBI = 2267,
    SYSTEMZ_INS_VSBIQ = 2268,
    SYSTEMZ_INS_VSCBI = 2269,
    SYSTEMZ_INS_VSCBIB = 2270,
    SYSTEMZ_INS_VSCBIF = 2271,
    SYSTEMZ_INS_VSCBIG = 2272,
    SYSTEMZ_INS_VSCBIH = 2273,
    SYSTEMZ_INS_VSCBIQ = 2274,
    SYSTEMZ_INS_VSCEF = 2275,
    SYSTEMZ_INS_VSCEG = 2276,
    SYSTEMZ_INS_VSCHDP = 2277,
    SYSTEMZ_INS_VSCHP = 2278,
    SYSTEMZ_INS_VSCHSP = 2279,
    SYSTEMZ_INS_VSCHXP = 2280,
    SYSTEMZ_INS_VSCSHP = 2281,
    SYSTEMZ_INS_VSDP = 2282,
    SYSTEMZ_INS_VSEG = 2283,
    SYSTEMZ_INS_VSEGB = 2284,
    SYSTEMZ_INS_VSEGF = 2285,
    SYSTEMZ_INS_VSEGH = 2286,
    SYSTEMZ_INS_VSEL = 2287,
    SYSTEMZ_INS_VSF = 2288,
    SYSTEMZ_INS_VSG = 2289,
    SYSTEMZ_INS_VSH = 2290,
    SYSTEMZ_INS_VSL = 2291,
    SYSTEMZ_INS_VSLB = 2292,
    SYSTEMZ_INS_VSLD = 2293,
    SYSTEMZ_INS_VSLDB = 2294,
    SYSTEMZ_INS_VSP = 2295,
    SYSTEMZ_INS_VSQ = 2296,
    SYSTEMZ_INS_VSRA = 2297,
    SYSTEMZ_INS_VSRAB = 2298,
    SYSTEMZ_INS_VSRD = 2299,
    SYSTEMZ_INS_VSRL = 2300,
    SYSTEMZ_INS_VSRLB = 2301,
    SYSTEMZ_INS_VSRP = 2302,
    SYSTEMZ_INS_VSRPR = 2303,
    SYSTEMZ_INS_VST = 2304,
    SYSTEMZ_INS_VSTBR = 2305,
    SYSTEMZ_INS_VSTBRF = 2306,
    SYSTEMZ_INS_VSTBRG = 2307,
    SYSTEMZ_INS_VSTBRH = 2308,
    SYSTEMZ_INS_VSTBRQ = 2309,
    SYSTEMZ_INS_VSTEB = 2310,
    SYSTEMZ_INS_VSTEBRF = 2311,
    SYSTEMZ_INS_VSTEBRG = 2312,
    SYSTEMZ_INS_VSTEBRH = 2313,
    SYSTEMZ_INS_VSTEF = 2314,
    SYSTEMZ_INS_VSTEG = 2315,
    SYSTEMZ_INS_VSTEH = 2316,
    SYSTEMZ_INS_VSTER = 2317,
    SYSTEMZ_INS_VSTERF = 2318,
    SYSTEMZ_INS_VSTERG = 2319,
    SYSTEMZ_INS_VSTERH = 2320,
    SYSTEMZ_INS_VSTL = 2321,
    SYSTEMZ_INS_VSTM = 2322,
    SYSTEMZ_INS_VSTRC = 2323,
    SYSTEMZ_INS_VSTRCB = 2324,
    SYSTEMZ_INS_VSTRCBS = 2325,
    SYSTEMZ_INS_VSTRCF = 2326,
    SYSTEMZ_INS_VSTRCFS = 2327,
    SYSTEMZ_INS_VSTRCH = 2328,
    SYSTEMZ_INS_VSTRCHS = 2329,
    SYSTEMZ_INS_VSTRCZB = 2330,
    SYSTEMZ_INS_VSTRCZBS = 2331,
    SYSTEMZ_INS_VSTRCZF = 2332,
    SYSTEMZ_INS_VSTRCZFS = 2333,
    SYSTEMZ_INS_VSTRCZH = 2334,
    SYSTEMZ_INS_VSTRCZHS = 2335,
    SYSTEMZ_INS_VSTRL = 2336,
    SYSTEMZ_INS_VSTRLR = 2337,
    SYSTEMZ_INS_VSTRS = 2338,
    SYSTEMZ_INS_VSTRSB = 2339,
    SYSTEMZ_INS_VSTRSF = 2340,
    SYSTEMZ_INS_VSTRSH = 2341,
    SYSTEMZ_INS_VSTRSZB = 2342,
    SYSTEMZ_INS_VSTRSZF = 2343,
    SYSTEMZ_INS_VSTRSZH = 2344,
    SYSTEMZ_INS_VSUM = 2345,
    SYSTEMZ_INS_VSUMB = 2346,
    SYSTEMZ_INS_VSUMG = 2347,
    SYSTEMZ_INS_VSUMGF = 2348,
    SYSTEMZ_INS_VSUMGH = 2349,
    SYSTEMZ_INS_VSUMH = 2350,
    SYSTEMZ_INS_VSUMQ = 2351,
    SYSTEMZ_INS_VSUMQF = 2352,
    SYSTEMZ_INS_VSUMQG = 2353,
    SYSTEMZ_INS_VTM = 2354,
    SYSTEMZ_INS_VTP = 2355,
    SYSTEMZ_INS_VUPH = 2356,
    SYSTEMZ_INS_VUPHB = 2357,
    SYSTEMZ_INS_VUPHF = 2358,
    SYSTEMZ_INS_VUPHH = 2359,
    SYSTEMZ_INS_VUPKZ = 2360,
    SYSTEMZ_INS_VUPKZH = 2361,
    SYSTEMZ_INS_VUPKZL = 2362,
    SYSTEMZ_INS_VUPL = 2363,
    SYSTEMZ_INS_VUPLB = 2364,
    SYSTEMZ_INS_VUPLF = 2365,
    SYSTEMZ_INS_VUPLH = 2366,
    SYSTEMZ_INS_VUPLHB = 2367,
    SYSTEMZ_INS_VUPLHF = 2368,
    SYSTEMZ_INS_VUPLHH = 2369,
    SYSTEMZ_INS_VUPLHW = 2370,
    SYSTEMZ_INS_VUPLL = 2371,
    SYSTEMZ_INS_VUPLLB = 2372,
    SYSTEMZ_INS_VUPLLF = 2373,
    SYSTEMZ_INS_VUPLLH = 2374,
    SYSTEMZ_INS_VX = 2375,
    SYSTEMZ_INS_VZERO = 2376,
    SYSTEMZ_INS_WCDGB = 2377,
    SYSTEMZ_INS_WCDLGB = 2378,
    SYSTEMZ_INS_WCEFB = 2379,
    SYSTEMZ_INS_WCELFB = 2380,
    SYSTEMZ_INS_WCFEB = 2381,
    SYSTEMZ_INS_WCGDB = 2382,
    SYSTEMZ_INS_WCLFEB = 2383,
    SYSTEMZ_INS_WCLGDB = 2384,
    SYSTEMZ_INS_WFADB = 2385,
    SYSTEMZ_INS_WFASB = 2386,
    SYSTEMZ_INS_WFAXB = 2387,
    SYSTEMZ_INS_WFC = 2388,
    SYSTEMZ_INS_WFCDB = 2389,
    SYSTEMZ_INS_WFCEDB = 2390,
    SYSTEMZ_INS_WFCEDBS = 2391,
    SYSTEMZ_INS_WFCESB = 2392,
    SYSTEMZ_INS_WFCESBS = 2393,
    SYSTEMZ_INS_WFCEXB = 2394,
    SYSTEMZ_INS_WFCEXBS = 2395,
    SYSTEMZ_INS_WFCHDB = 2396,
    SYSTEMZ_INS_WFCHDBS = 2397,
    SYSTEMZ_INS_WFCHEDB = 2398,
    SYSTEMZ_INS_WFCHEDBS = 2399,
    SYSTEMZ_INS_WFCHESB = 2400,
    SYSTEMZ_INS_WFCHESBS = 2401,
    SYSTEMZ_INS_WFCHEXB = 2402,
    SYSTEMZ_INS_WFCHEXBS = 2403,
    SYSTEMZ_INS_WFCHSB = 2404,
    SYSTEMZ_INS_WFCHSBS = 2405,
    SYSTEMZ_INS_WFCHXB = 2406,
    SYSTEMZ_INS_WFCHXBS = 2407,
    SYSTEMZ_INS_WFCSB = 2408,
    SYSTEMZ_INS_WFCXB = 2409,
    SYSTEMZ_INS_WFDDB = 2410,
    SYSTEMZ_INS_WFDSB = 2411,
    SYSTEMZ_INS_WFDXB = 2412,
    SYSTEMZ_INS_WFIDB = 2413,
    SYSTEMZ_INS_WFISB = 2414,
    SYSTEMZ_INS_WFIXB = 2415,
    SYSTEMZ_INS_WFK = 2416,
    SYSTEMZ_INS_WFKDB = 2417,
    SYSTEMZ_INS_WFKEDB = 2418,
    SYSTEMZ_INS_WFKEDBS = 2419,
    SYSTEMZ_INS_WFKESB = 2420,
    SYSTEMZ_INS_WFKESBS = 2421,
    SYSTEMZ_INS_WFKEXB = 2422,
    SYSTEMZ_INS_WFKEXBS = 2423,
    SYSTEMZ_INS_WFKHDB = 2424,
    SYSTEMZ_INS_WFKHDBS = 2425,
    SYSTEMZ_INS_WFKHEDB = 2426,
    SYSTEMZ_INS_WFKHEDBS = 2427,
    SYSTEMZ_INS_WFKHESB = 2428,
    SYSTEMZ_INS_WFKHESBS = 2429,
    SYSTEMZ_INS_WFKHEXB = 2430,
    SYSTEMZ_INS_WFKHEXBS = 2431,
    SYSTEMZ_INS_WFKHSB = 2432,
    SYSTEMZ_INS_WFKHSBS = 2433,
    SYSTEMZ_INS_WFKHXB = 2434,
    SYSTEMZ_INS_WFKHXBS = 2435,
    SYSTEMZ_INS_WFKSB = 2436,
    SYSTEMZ_INS_WFKXB = 2437,
    SYSTEMZ_INS_WFLCDB = 2438,
    SYSTEMZ_INS_WFLCSB = 2439,
    SYSTEMZ_INS_WFLCXB = 2440,
    SYSTEMZ_INS_WFLLD = 2441,
    SYSTEMZ_INS_WFLLS = 2442,
    SYSTEMZ_INS_WFLNDB = 2443,
    SYSTEMZ_INS_WFLNSB = 2444,
    SYSTEMZ_INS_WFLNXB = 2445,
    SYSTEMZ_INS_WFLPDB = 2446,
    SYSTEMZ_INS_WFLPSB = 2447,
    SYSTEMZ_INS_WFLPXB = 2448,
    SYSTEMZ_INS_WFLRD = 2449,
    SYSTEMZ_INS_WFLRX = 2450,
    SYSTEMZ_INS_WFMADB = 2451,
    SYSTEMZ_INS_WFMASB = 2452,
    SYSTEMZ_INS_WFMAXB = 2453,
    SYSTEMZ_INS_WFMAXDB = 2454,
    SYSTEMZ_INS_WFMAXSB = 2455,
    SYSTEMZ_INS_WFMAXXB = 2456,
    SYSTEMZ_INS_WFMDB = 2457,
    SYSTEMZ_INS_WFMINDB = 2458,
    SYSTEMZ_INS_WFMINSB = 2459,
    SYSTEMZ_INS_WFMINXB = 2460,
    SYSTEMZ_INS_WFMSB = 2461,
    SYSTEMZ_INS_WFMSDB = 2462,
    SYSTEMZ_INS_WFMSSB = 2463,
    SYSTEMZ_INS_WFMSXB = 2464,
    SYSTEMZ_INS_WFMXB = 2465,
    SYSTEMZ_INS_WFNMADB = 2466,
    SYSTEMZ_INS_WFNMASB = 2467,
    SYSTEMZ_INS_WFNMAXB = 2468,
    SYSTEMZ_INS_WFNMSDB = 2469,
    SYSTEMZ_INS_WFNMSSB = 2470,
    SYSTEMZ_INS_WFNMSXB = 2471,
    SYSTEMZ_INS_WFPSODB = 2472,
    SYSTEMZ_INS_WFPSOSB = 2473,
    SYSTEMZ_INS_WFPSOXB = 2474,
    SYSTEMZ_INS_WFSDB = 2475,
    SYSTEMZ_INS_WFSQDB = 2476,
    SYSTEMZ_INS_WFSQSB = 2477,
    SYSTEMZ_INS_WFSQXB = 2478,
    SYSTEMZ_INS_WFSSB = 2479,
    SYSTEMZ_INS_WFSXB = 2480,
    SYSTEMZ_INS_WFTCIDB = 2481,
    SYSTEMZ_INS_WFTCISB = 2482,
    SYSTEMZ_INS_WFTCIXB = 2483,
    SYSTEMZ_INS_WLDEB = 2484,
    SYSTEMZ_INS_WLEDB = 2485,
    SYSTEMZ_INS_X = 2486,
    SYSTEMZ_INS_XC = 2487,
    SYSTEMZ_INS_XG = 2488,
    SYSTEMZ_INS_XGR = 2489,
    SYSTEMZ_INS_XGRK = 2490,
    SYSTEMZ_INS_XI = 2491,
    SYSTEMZ_INS_XIHF = 2492,
    SYSTEMZ_INS_XILF = 2493,
    SYSTEMZ_INS_XIY = 2494,
    SYSTEMZ_INS_XR = 2495,
    SYSTEMZ_INS_XRK = 2496,
    SYSTEMZ_INS_XSCH = 2497,
    SYSTEMZ_INS_XY = 2498,
    SYSTEMZ_INS_ZAP = 2499,
    SYSTEMZ_INS_ENDING = 2500,
    SYSTEMZ_INS_ALIAS_BEGIN = 2501,
    SYSTEMZ_INS_ALIAS_VISTRB = 2502,
    SYSTEMZ_INS_ALIAS_VISTR = 2503,
    SYSTEMZ_INS_ALIAS_VFEEB = 2504,
    SYSTEMZ_INS_ALIAS_VFEE = 2505,
    SYSTEMZ_INS_ALIAS_VFAEB = 2506,
    SYSTEMZ_INS_ALIAS_VFAEBS = 2507,
    SYSTEMZ_INS_ALIAS_VFAE = 2508,
    SYSTEMZ_INS_ALIAS_VSTRSB = 2509,
    SYSTEMZ_INS_ALIAS_VSTRS = 2510,
    SYSTEMZ_INS_ALIAS_VSTRCB = 2511,
    SYSTEMZ_INS_ALIAS_VSTRCBS = 2512,
    SYSTEMZ_INS_ALIAS_VSTRC = 2513,
    SYSTEMZ_INS_ALIAS_VFAEH = 2514,
    SYSTEMZ_INS_ALIAS_VFAEHS = 2515,
    SYSTEMZ_INS_ALIAS_VFAEF = 2516,
    SYSTEMZ_INS_ALIAS_VFAEFS = 2517,
    SYSTEMZ_INS_ALIAS_VFAEZB = 2518,
    SYSTEMZ_INS_ALIAS_VFAEZBS = 2519,
    SYSTEMZ_INS_ALIAS_VFAEZH = 2520,
    SYSTEMZ_INS_ALIAS_VFAEZHS = 2521,
    SYSTEMZ_INS_ALIAS_VFAEZF = 2522,
    SYSTEMZ_INS_ALIAS_VFAEZFS = 2523,
    SYSTEMZ_INS_ALIAS_VFEEH = 2524,
    SYSTEMZ_INS_ALIAS_VFEEF = 2525,
    SYSTEMZ_INS_ALIAS_VFENE = 2526,
    SYSTEMZ_INS_ALIAS_VFENEB = 2527,
    SYSTEMZ_INS_ALIAS_VFENEH = 2528,
    SYSTEMZ_INS_ALIAS_VFENEF = 2529,
    SYSTEMZ_INS_ALIAS_VISTRH = 2530,
    SYSTEMZ_INS_ALIAS_VISTRF = 2531,
    SYSTEMZ_INS_ALIAS_VSTRCH = 2532,
    SYSTEMZ_INS_ALIAS_VSTRCHS = 2533,
    SYSTEMZ_INS_ALIAS_VSTRCF = 2534,
    SYSTEMZ_INS_ALIAS_VSTRCFS = 2535,
    SYSTEMZ_INS_ALIAS_VSTRCZB = 2536,
    SYSTEMZ_INS_ALIAS_VSTRCZBS = 2537,
    SYSTEMZ_INS_ALIAS_VSTRCZH = 2538,
    SYSTEMZ_INS_ALIAS_VSTRCZHS = 2539,
    SYSTEMZ_INS_ALIAS_VSTRCZF = 2540,
    SYSTEMZ_INS_ALIAS_VSTRCZFS = 2541,
    SYSTEMZ_INS_ALIAS_VSTRSH = 2542,
    SYSTEMZ_INS_ALIAS_VSTRSF = 2543,
    SYSTEMZ_INS_ALIAS_END = 2544,
}
pub mod systemz_insn_group {
    #[doc = " Group of SystemZ instructions"]
    pub type Type = libc::c_uint;
    #[doc = "< = CS_GRP_INVALID"]
    pub const SYSTEMZ_GRP_INVALID: Type = 0;
    #[doc = "< = CS_GRP_JUMP"]
    pub const SYSTEMZ_GRP_JUMP: Type = 1;
    #[doc = "< CS_GRP_CALL"]
    pub const SYSTEMZ_GRP_CALL: Type = 2;
    #[doc = "< CS_GRP_RET"]
    pub const SYSTEMZ_GRP_RET: Type = 3;
    #[doc = "< CS_GRP_INT"]
    pub const SYSTEMZ_GRP_INT: Type = 4;
    #[doc = "< CS_GRP_IRET"]
    pub const SYSTEMZ_GRP_IRET: Type = 5;
    #[doc = "< CS_GRP_PRIVILEGE"]
    pub const SYSTEMZ_GRP_PRIVILEGE: Type = 6;
    #[doc = "< CS_GRP_BRANCH_RELATIVE"]
    pub const SYSTEMZ_GRP_BRANCH_RELATIVE: Type = 7;
    pub const SYSTEMZ_FEATURE_FEATURESOFTFLOAT: Type = 128;
    pub const SYSTEMZ_FEATURE_FEATUREBACKCHAIN: Type = 129;
    pub const SYSTEMZ_FEATURE_FEATUREDISTINCTOPS: Type = 130;
    pub const SYSTEMZ_FEATURE_FEATUREFASTSERIALIZATION: Type = 131;
    pub const SYSTEMZ_FEATURE_FEATUREFPEXTENSION: Type = 132;
    pub const SYSTEMZ_FEATURE_FEATUREHIGHWORD: Type = 133;
    pub const SYSTEMZ_FEATURE_FEATUREINTERLOCKEDACCESS1: Type = 134;
    pub const SYSTEMZ_FEATURE_FEATURELOADSTOREONCOND: Type = 135;
    pub const SYSTEMZ_FEATURE_FEATUREPOPULATIONCOUNT: Type = 136;
    pub const SYSTEMZ_FEATURE_FEATUREMESSAGESECURITYASSIST3: Type = 137;
    pub const SYSTEMZ_FEATURE_FEATUREMESSAGESECURITYASSIST4: Type = 138;
    pub const SYSTEMZ_FEATURE_FEATURERESETREFERENCEBITSMULTIPLE: Type = 139;
    pub const SYSTEMZ_FEATURE_FEATUREEXECUTIONHINT: Type = 140;
    pub const SYSTEMZ_FEATURE_FEATURELOADANDTRAP: Type = 141;
    pub const SYSTEMZ_FEATURE_FEATUREMISCELLANEOUSEXTENSIONS: Type = 142;
    pub const SYSTEMZ_FEATURE_FEATUREPROCESSORASSIST: Type = 143;
    pub const SYSTEMZ_FEATURE_FEATURETRANSACTIONALEXECUTION: Type = 144;
    pub const SYSTEMZ_FEATURE_FEATUREDFPZONEDCONVERSION: Type = 145;
    pub const SYSTEMZ_FEATURE_FEATUREENHANCEDDAT2: Type = 146;
    pub const SYSTEMZ_FEATURE_FEATURELOADANDZERORIGHTMOSTBYTE: Type = 147;
    pub const SYSTEMZ_FEATURE_FEATURELOADSTOREONCOND2: Type = 148;
    pub const SYSTEMZ_FEATURE_FEATUREMESSAGESECURITYASSIST5: Type = 149;
    pub const SYSTEMZ_FEATURE_FEATUREDFPPACKEDCONVERSION: Type = 150;
    pub const SYSTEMZ_FEATURE_FEATUREVECTOR: Type = 151;
    pub const SYSTEMZ_FEATURE_FEATUREMISCELLANEOUSEXTENSIONS2: Type = 152;
    pub const SYSTEMZ_FEATURE_FEATUREGUARDEDSTORAGE: Type = 153;
    pub const SYSTEMZ_FEATURE_FEATUREMESSAGESECURITYASSIST7: Type = 154;
    pub const SYSTEMZ_FEATURE_FEATUREMESSAGESECURITYASSIST8: Type = 155;
    pub const SYSTEMZ_FEATURE_FEATUREVECTORENHANCEMENTS1: Type = 156;
    pub const SYSTEMZ_FEATURE_FEATUREVECTORPACKEDDECIMAL: Type = 157;
    pub const SYSTEMZ_FEATURE_FEATUREINSERTREFERENCEBITSMULTIPLE: Type = 158;
    pub const SYSTEMZ_FEATURE_FEATUREMISCELLANEOUSEXTENSIONS3: Type = 159;
    pub const SYSTEMZ_FEATURE_FEATUREMESSAGESECURITYASSIST9: Type = 160;
    pub const SYSTEMZ_FEATURE_FEATUREVECTORENHANCEMENTS2: Type = 161;
    pub const SYSTEMZ_FEATURE_FEATUREVECTORPACKEDDECIMALENHANCEMENT: Type = 162;
    pub const SYSTEMZ_FEATURE_FEATUREENHANCEDSORT: Type = 163;
    pub const SYSTEMZ_FEATURE_FEATUREDEFLATECONVERSION: Type = 164;
    pub const SYSTEMZ_FEATURE_FEATUREVECTORPACKEDDECIMALENHANCEMENT2: Type = 165;
    pub const SYSTEMZ_FEATURE_FEATURENNPASSIST: Type = 166;
    pub const SYSTEMZ_FEATURE_FEATUREBEARENHANCEMENT: Type = 167;
    pub const SYSTEMZ_FEATURE_FEATURERESETDATPROTECTION: Type = 168;
    pub const SYSTEMZ_FEATURE_FEATUREPROCESSORACTIVITYINSTRUMENTATION: Type = 169;
    pub const SYSTEMZ_GRP_ENDING: Type = 170;
}
pub mod x86_reg {
    #[doc = " X86 registers"]
    pub type Type = libc::c_uint;
    pub const X86_REG_INVALID: Type = 0;
    pub const X86_REG_AH: Type = 1;
    pub const X86_REG_AL: Type = 2;
    pub const X86_REG_AX: Type = 3;
    pub const X86_REG_BH: Type = 4;
    pub const X86_REG_BL: Type = 5;
    pub const X86_REG_BP: Type = 6;
    pub const X86_REG_BPL: Type = 7;
    pub const X86_REG_BX: Type = 8;
    pub const X86_REG_CH: Type = 9;
    pub const X86_REG_CL: Type = 10;
    pub const X86_REG_CS: Type = 11;
    pub const X86_REG_CX: Type = 12;
    pub const X86_REG_DH: Type = 13;
    pub const X86_REG_DI: Type = 14;
    pub const X86_REG_DIL: Type = 15;
    pub const X86_REG_DL: Type = 16;
    pub const X86_REG_DS: Type = 17;
    pub const X86_REG_DX: Type = 18;
    pub const X86_REG_EAX: Type = 19;
    pub const X86_REG_EBP: Type = 20;
    pub const X86_REG_EBX: Type = 21;
    pub const X86_REG_ECX: Type = 22;
    pub const X86_REG_EDI: Type = 23;
    pub const X86_REG_EDX: Type = 24;
    pub const X86_REG_EFLAGS: Type = 25;
    pub const X86_REG_EIP: Type = 26;
    pub const X86_REG_EIZ: Type = 27;
    pub const X86_REG_ES: Type = 28;
    pub const X86_REG_ESI: Type = 29;
    pub const X86_REG_ESP: Type = 30;
    pub const X86_REG_FPSW: Type = 31;
    pub const X86_REG_FS: Type = 32;
    pub const X86_REG_GS: Type = 33;
    pub const X86_REG_IP: Type = 34;
    pub const X86_REG_RAX: Type = 35;
    pub const X86_REG_RBP: Type = 36;
    pub const X86_REG_RBX: Type = 37;
    pub const X86_REG_RCX: Type = 38;
    pub const X86_REG_RDI: Type = 39;
    pub const X86_REG_RDX: Type = 40;
    pub const X86_REG_RIP: Type = 41;
    pub const X86_REG_RIZ: Type = 42;
    pub const X86_REG_RSI: Type = 43;
    pub const X86_REG_RSP: Type = 44;
    pub const X86_REG_SI: Type = 45;
    pub const X86_REG_SIL: Type = 46;
    pub const X86_REG_SP: Type = 47;
    pub const X86_REG_SPL: Type = 48;
    pub const X86_REG_SS: Type = 49;
    pub const X86_REG_CR0: Type = 50;
    pub const X86_REG_CR1: Type = 51;
    pub const X86_REG_CR2: Type = 52;
    pub const X86_REG_CR3: Type = 53;
    pub const X86_REG_CR4: Type = 54;
    pub const X86_REG_CR5: Type = 55;
    pub const X86_REG_CR6: Type = 56;
    pub const X86_REG_CR7: Type = 57;
    pub const X86_REG_CR8: Type = 58;
    pub const X86_REG_CR9: Type = 59;
    pub const X86_REG_CR10: Type = 60;
    pub const X86_REG_CR11: Type = 61;
    pub const X86_REG_CR12: Type = 62;
    pub const X86_REG_CR13: Type = 63;
    pub const X86_REG_CR14: Type = 64;
    pub const X86_REG_CR15: Type = 65;
    pub const X86_REG_DR0: Type = 66;
    pub const X86_REG_DR1: Type = 67;
    pub const X86_REG_DR2: Type = 68;
    pub const X86_REG_DR3: Type = 69;
    pub const X86_REG_DR4: Type = 70;
    pub const X86_REG_DR5: Type = 71;
    pub const X86_REG_DR6: Type = 72;
    pub const X86_REG_DR7: Type = 73;
    pub const X86_REG_DR8: Type = 74;
    pub const X86_REG_DR9: Type = 75;
    pub const X86_REG_DR10: Type = 76;
    pub const X86_REG_DR11: Type = 77;
    pub const X86_REG_DR12: Type = 78;
    pub const X86_REG_DR13: Type = 79;
    pub const X86_REG_DR14: Type = 80;
    pub const X86_REG_DR15: Type = 81;
    pub const X86_REG_FP0: Type = 82;
    pub const X86_REG_FP1: Type = 83;
    pub const X86_REG_FP2: Type = 84;
    pub const X86_REG_FP3: Type = 85;
    pub const X86_REG_FP4: Type = 86;
    pub const X86_REG_FP5: Type = 87;
    pub const X86_REG_FP6: Type = 88;
    pub const X86_REG_FP7: Type = 89;
    pub const X86_REG_K0: Type = 90;
    pub const X86_REG_K1: Type = 91;
    pub const X86_REG_K2: Type = 92;
    pub const X86_REG_K3: Type = 93;
    pub const X86_REG_K4: Type = 94;
    pub const X86_REG_K5: Type = 95;
    pub const X86_REG_K6: Type = 96;
    pub const X86_REG_K7: Type = 97;
    pub const X86_REG_MM0: Type = 98;
    pub const X86_REG_MM1: Type = 99;
    pub const X86_REG_MM2: Type = 100;
    pub const X86_REG_MM3: Type = 101;
    pub const X86_REG_MM4: Type = 102;
    pub const X86_REG_MM5: Type = 103;
    pub const X86_REG_MM6: Type = 104;
    pub const X86_REG_MM7: Type = 105;
    pub const X86_REG_R8: Type = 106;
    pub const X86_REG_R9: Type = 107;
    pub const X86_REG_R10: Type = 108;
    pub const X86_REG_R11: Type = 109;
    pub const X86_REG_R12: Type = 110;
    pub const X86_REG_R13: Type = 111;
    pub const X86_REG_R14: Type = 112;
    pub const X86_REG_R15: Type = 113;
    pub const X86_REG_ST0: Type = 114;
    pub const X86_REG_ST1: Type = 115;
    pub const X86_REG_ST2: Type = 116;
    pub const X86_REG_ST3: Type = 117;
    pub const X86_REG_ST4: Type = 118;
    pub const X86_REG_ST5: Type = 119;
    pub const X86_REG_ST6: Type = 120;
    pub const X86_REG_ST7: Type = 121;
    pub const X86_REG_XMM0: Type = 122;
    pub const X86_REG_XMM1: Type = 123;
    pub const X86_REG_XMM2: Type = 124;
    pub const X86_REG_XMM3: Type = 125;
    pub const X86_REG_XMM4: Type = 126;
    pub const X86_REG_XMM5: Type = 127;
    pub const X86_REG_XMM6: Type = 128;
    pub const X86_REG_XMM7: Type = 129;
    pub const X86_REG_XMM8: Type = 130;
    pub const X86_REG_XMM9: Type = 131;
    pub const X86_REG_XMM10: Type = 132;
    pub const X86_REG_XMM11: Type = 133;
    pub const X86_REG_XMM12: Type = 134;
    pub const X86_REG_XMM13: Type = 135;
    pub const X86_REG_XMM14: Type = 136;
    pub const X86_REG_XMM15: Type = 137;
    pub const X86_REG_XMM16: Type = 138;
    pub const X86_REG_XMM17: Type = 139;
    pub const X86_REG_XMM18: Type = 140;
    pub const X86_REG_XMM19: Type = 141;
    pub const X86_REG_XMM20: Type = 142;
    pub const X86_REG_XMM21: Type = 143;
    pub const X86_REG_XMM22: Type = 144;
    pub const X86_REG_XMM23: Type = 145;
    pub const X86_REG_XMM24: Type = 146;
    pub const X86_REG_XMM25: Type = 147;
    pub const X86_REG_XMM26: Type = 148;
    pub const X86_REG_XMM27: Type = 149;
    pub const X86_REG_XMM28: Type = 150;
    pub const X86_REG_XMM29: Type = 151;
    pub const X86_REG_XMM30: Type = 152;
    pub const X86_REG_XMM31: Type = 153;
    pub const X86_REG_YMM0: Type = 154;
    pub const X86_REG_YMM1: Type = 155;
    pub const X86_REG_YMM2: Type = 156;
    pub const X86_REG_YMM3: Type = 157;
    pub const X86_REG_YMM4: Type = 158;
    pub const X86_REG_YMM5: Type = 159;
    pub const X86_REG_YMM6: Type = 160;
    pub const X86_REG_YMM7: Type = 161;
    pub const X86_REG_YMM8: Type = 162;
    pub const X86_REG_YMM9: Type = 163;
    pub const X86_REG_YMM10: Type = 164;
    pub const X86_REG_YMM11: Type = 165;
    pub const X86_REG_YMM12: Type = 166;
    pub const X86_REG_YMM13: Type = 167;
    pub const X86_REG_YMM14: Type = 168;
    pub const X86_REG_YMM15: Type = 169;
    pub const X86_REG_YMM16: Type = 170;
    pub const X86_REG_YMM17: Type = 171;
    pub const X86_REG_YMM18: Type = 172;
    pub const X86_REG_YMM19: Type = 173;
    pub const X86_REG_YMM20: Type = 174;
    pub const X86_REG_YMM21: Type = 175;
    pub const X86_REG_YMM22: Type = 176;
    pub const X86_REG_YMM23: Type = 177;
    pub const X86_REG_YMM24: Type = 178;
    pub const X86_REG_YMM25: Type = 179;
    pub const X86_REG_YMM26: Type = 180;
    pub const X86_REG_YMM27: Type = 181;
    pub const X86_REG_YMM28: Type = 182;
    pub const X86_REG_YMM29: Type = 183;
    pub const X86_REG_YMM30: Type = 184;
    pub const X86_REG_YMM31: Type = 185;
    pub const X86_REG_ZMM0: Type = 186;
    pub const X86_REG_ZMM1: Type = 187;
    pub const X86_REG_ZMM2: Type = 188;
    pub const X86_REG_ZMM3: Type = 189;
    pub const X86_REG_ZMM4: Type = 190;
    pub const X86_REG_ZMM5: Type = 191;
    pub const X86_REG_ZMM6: Type = 192;
    pub const X86_REG_ZMM7: Type = 193;
    pub const X86_REG_ZMM8: Type = 194;
    pub const X86_REG_ZMM9: Type = 195;
    pub const X86_REG_ZMM10: Type = 196;
    pub const X86_REG_ZMM11: Type = 197;
    pub const X86_REG_ZMM12: Type = 198;
    pub const X86_REG_ZMM13: Type = 199;
    pub const X86_REG_ZMM14: Type = 200;
    pub const X86_REG_ZMM15: Type = 201;
    pub const X86_REG_ZMM16: Type = 202;
    pub const X86_REG_ZMM17: Type = 203;
    pub const X86_REG_ZMM18: Type = 204;
    pub const X86_REG_ZMM19: Type = 205;
    pub const X86_REG_ZMM20: Type = 206;
    pub const X86_REG_ZMM21: Type = 207;
    pub const X86_REG_ZMM22: Type = 208;
    pub const X86_REG_ZMM23: Type = 209;
    pub const X86_REG_ZMM24: Type = 210;
    pub const X86_REG_ZMM25: Type = 211;
    pub const X86_REG_ZMM26: Type = 212;
    pub const X86_REG_ZMM27: Type = 213;
    pub const X86_REG_ZMM28: Type = 214;
    pub const X86_REG_ZMM29: Type = 215;
    pub const X86_REG_ZMM30: Type = 216;
    pub const X86_REG_ZMM31: Type = 217;
    pub const X86_REG_R8B: Type = 218;
    pub const X86_REG_R9B: Type = 219;
    pub const X86_REG_R10B: Type = 220;
    pub const X86_REG_R11B: Type = 221;
    pub const X86_REG_R12B: Type = 222;
    pub const X86_REG_R13B: Type = 223;
    pub const X86_REG_R14B: Type = 224;
    pub const X86_REG_R15B: Type = 225;
    pub const X86_REG_R8D: Type = 226;
    pub const X86_REG_R9D: Type = 227;
    pub const X86_REG_R10D: Type = 228;
    pub const X86_REG_R11D: Type = 229;
    pub const X86_REG_R12D: Type = 230;
    pub const X86_REG_R13D: Type = 231;
    pub const X86_REG_R14D: Type = 232;
    pub const X86_REG_R15D: Type = 233;
    pub const X86_REG_R8W: Type = 234;
    pub const X86_REG_R9W: Type = 235;
    pub const X86_REG_R10W: Type = 236;
    pub const X86_REG_R11W: Type = 237;
    pub const X86_REG_R12W: Type = 238;
    pub const X86_REG_R13W: Type = 239;
    pub const X86_REG_R14W: Type = 240;
    pub const X86_REG_R15W: Type = 241;
    pub const X86_REG_BND0: Type = 242;
    pub const X86_REG_BND1: Type = 243;
    pub const X86_REG_BND2: Type = 244;
    pub const X86_REG_BND3: Type = 245;
    pub const X86_REG_ENDING: Type = 246;
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum x86_op_type {
    #[doc = "< = CS_OP_INVALID (Uninitialized)."]
    X86_OP_INVALID = 0,
    #[doc = "< = CS_OP_REG (Register operand)."]
    X86_OP_REG = 1,
    #[doc = "< = CS_OP_IMM (Immediate operand)."]
    X86_OP_IMM = 2,
    #[doc = "< = CS_OP_MEM (Memory operand)."]
    X86_OP_MEM = 128,
}
#[repr(u32)]
#[doc = " XOP Code Condition type"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum x86_xop_cc {
    #[doc = "< Uninitialized."]
    X86_XOP_CC_INVALID = 0,
    X86_XOP_CC_LT = 1,
    X86_XOP_CC_LE = 2,
    X86_XOP_CC_GT = 3,
    X86_XOP_CC_GE = 4,
    X86_XOP_CC_EQ = 5,
    X86_XOP_CC_NEQ = 6,
    X86_XOP_CC_FALSE = 7,
    X86_XOP_CC_TRUE = 8,
}
#[repr(u32)]
#[doc = " AVX broadcast type"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum x86_avx_bcast {
    #[doc = "< Uninitialized."]
    X86_AVX_BCAST_INVALID = 0,
    #[doc = "< AVX512 broadcast type {1to2}"]
    X86_AVX_BCAST_2 = 1,
    #[doc = "< AVX512 broadcast type {1to4}"]
    X86_AVX_BCAST_4 = 2,
    #[doc = "< AVX512 broadcast type {1to8}"]
    X86_AVX_BCAST_8 = 3,
    #[doc = "< AVX512 broadcast type {1to16}"]
    X86_AVX_BCAST_16 = 4,
}
#[repr(u32)]
#[doc = " SSE Code Condition type"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum x86_sse_cc {
    #[doc = "< Uninitialized."]
    X86_SSE_CC_INVALID = 0,
    X86_SSE_CC_EQ = 1,
    X86_SSE_CC_LT = 2,
    X86_SSE_CC_LE = 3,
    X86_SSE_CC_UNORD = 4,
    X86_SSE_CC_NEQ = 5,
    X86_SSE_CC_NLT = 6,
    X86_SSE_CC_NLE = 7,
    X86_SSE_CC_ORD = 8,
}
#[repr(u32)]
#[doc = " AVX Code Condition type"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum x86_avx_cc {
    #[doc = "< Uninitialized."]
    X86_AVX_CC_INVALID = 0,
    X86_AVX_CC_EQ = 1,
    X86_AVX_CC_LT = 2,
    X86_AVX_CC_LE = 3,
    X86_AVX_CC_UNORD = 4,
    X86_AVX_CC_NEQ = 5,
    X86_AVX_CC_NLT = 6,
    X86_AVX_CC_NLE = 7,
    X86_AVX_CC_ORD = 8,
    X86_AVX_CC_EQ_UQ = 9,
    X86_AVX_CC_NGE = 10,
    X86_AVX_CC_NGT = 11,
    X86_AVX_CC_FALSE = 12,
    X86_AVX_CC_NEQ_OQ = 13,
    X86_AVX_CC_GE = 14,
    X86_AVX_CC_GT = 15,
    X86_AVX_CC_TRUE = 16,
    X86_AVX_CC_EQ_OS = 17,
    X86_AVX_CC_LT_OQ = 18,
    X86_AVX_CC_LE_OQ = 19,
    X86_AVX_CC_UNORD_S = 20,
    X86_AVX_CC_NEQ_US = 21,
    X86_AVX_CC_NLT_UQ = 22,
    X86_AVX_CC_NLE_UQ = 23,
    X86_AVX_CC_ORD_S = 24,
    X86_AVX_CC_EQ_US = 25,
    X86_AVX_CC_NGE_UQ = 26,
    X86_AVX_CC_NGT_UQ = 27,
    X86_AVX_CC_FALSE_OS = 28,
    X86_AVX_CC_NEQ_OS = 29,
    X86_AVX_CC_GE_OQ = 30,
    X86_AVX_CC_GT_OQ = 31,
    X86_AVX_CC_TRUE_US = 32,
}
#[repr(u32)]
#[doc = " AVX static rounding mode type"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum x86_avx_rm {
    #[doc = "< Uninitialized."]
    X86_AVX_RM_INVALID = 0,
    #[doc = "< Round to nearest"]
    X86_AVX_RM_RN = 1,
    #[doc = "< Round down"]
    X86_AVX_RM_RD = 2,
    #[doc = "< Round up"]
    X86_AVX_RM_RU = 3,
    #[doc = "< Round toward zero"]
    X86_AVX_RM_RZ = 4,
}
impl x86_prefix {
    pub const X86_PREFIX_REPE: x86_prefix = x86_prefix::X86_PREFIX_REP;
}
#[repr(u32)]
#[doc = " Instruction prefixes - to be used in cs_x86.prefix[]"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum x86_prefix {
    X86_PREFIX_0 = 0,
    #[doc = "< lock (cs_x86.prefix[0]"]
    X86_PREFIX_LOCK = 240,
    #[doc = "< rep (cs_x86.prefix[0]"]
    X86_PREFIX_REP = 243,
    #[doc = "< repne/repnz (cs_x86.prefix[0]"]
    X86_PREFIX_REPNE = 242,
    #[doc = "< segment override CS (cs_x86.prefix[1]"]
    X86_PREFIX_CS = 46,
    #[doc = "< segment override SS (cs_x86.prefix[1]"]
    X86_PREFIX_SS = 54,
    #[doc = "< segment override DS (cs_x86.prefix[1]"]
    X86_PREFIX_DS = 62,
    #[doc = "< segment override ES (cs_x86.prefix[1]"]
    X86_PREFIX_ES = 38,
    #[doc = "< segment override FS (cs_x86.prefix[1]"]
    X86_PREFIX_FS = 100,
    #[doc = "< segment override GS (cs_x86.prefix[1]"]
    X86_PREFIX_GS = 101,
    #[doc = "< operand-size override (cs_x86.prefix[2]"]
    X86_PREFIX_OPSIZE = 102,
    #[doc = "< address-size override (cs_x86.prefix[3]"]
    X86_PREFIX_ADDRSIZE = 103,
}
#[doc = " Instruction's operand referring to memory\n This is associated with X86_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_op_mem {
    #[doc = "< segment register (or X86_REG_INVALID if irrelevant)"]
    pub segment: x86_reg::Type,
    #[doc = "< base register (or X86_REG_INVALID if irrelevant)"]
    pub base: x86_reg::Type,
    #[doc = "< index register (or X86_REG_INVALID if irrelevant)"]
    pub index: x86_reg::Type,
    #[doc = "< scale for index register"]
    pub scale: libc::c_int,
    #[doc = "< displacement value"]
    pub disp: i64,
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_x86_op {
    #[doc = "< operand type"]
    pub type_: x86_op_type,
    pub __bindgen_anon_1: cs_x86_op__bindgen_ty_1,
    #[doc = " size of this operand (in bytes)."]
    pub size: u8,
    #[doc = " How is this operand accessed? (READ, WRITE or READ|WRITE)\n This field is combined of cs_ac_type.\n NOTE: this field is irrelevant if engine is compiled in DIET mode."]
    pub access: u8,
    #[doc = " AVX broadcast type, or 0 if irrelevant"]
    pub avx_bcast: x86_avx_bcast,
    #[doc = " AVX zero opmask {z}"]
    pub avx_zero_opmask: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_x86_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: x86_reg::Type,
    #[doc = "< immediate value for IMM operand"]
    pub imm: i64,
    #[doc = "< base/index/scale/disp value for MEM operand"]
    pub mem: x86_op_mem,
}
impl ::core::fmt::Debug for cs_x86_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_x86_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_x86_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "cs_x86_op {{ type: {:?}, __bindgen_anon_1: {:?}, avx_bcast: {:?}, avx_zero_opmask: {:?} }}" , self . type_ , self . __bindgen_anon_1 , self . avx_bcast , self . avx_zero_opmask)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_x86_encoding {
    #[doc = " ModR/M offset, or 0 when irrelevant"]
    pub modrm_offset: u8,
    #[doc = " Displacement offset, or 0 when irrelevant."]
    pub disp_offset: u8,
    pub disp_size: u8,
    #[doc = " Immediate offset, or 0 when irrelevant."]
    pub imm_offset: u8,
    pub imm_size: u8,
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_x86 {
    #[doc = " Instruction prefix, which can be up to 4 bytes.\n A prefix byte gets value 0 when irrelevant.\n prefix[0] indicates REP/REPNE/LOCK prefix (See X86_PREFIX_REP/REPNE/LOCK above)\n prefix[1] indicates segment override (irrelevant for x86_64):\n See X86_PREFIX_CS/SS/DS/ES/FS/GS above.\n prefix[2] indicates operand-size override (X86_PREFIX_OPSIZE)\n prefix[3] indicates address-size override (X86_PREFIX_ADDRSIZE)"]
    pub prefix: [u8; 4usize],
    #[doc = " Instruction opcode, which can be from 1 to 4 bytes in size.\n This contains VEX opcode as well.\n An trailing opcode byte gets value 0 when irrelevant."]
    pub opcode: [u8; 4usize],
    #[doc = " REX prefix: only a non-zero value is relevant for x86_64"]
    pub rex: u8,
    #[doc = " Address size, which can be overridden with above prefix[5]."]
    pub addr_size: u8,
    #[doc = " ModR/M byte"]
    pub modrm: u8,
    #[doc = " SIB value, or 0 when irrelevant."]
    pub sib: u8,
    #[doc = " Displacement value, valid if encoding.disp_offset != 0"]
    pub disp: i64,
    #[doc = " SIB index register, or X86_REG_INVALID when irrelevant."]
    pub sib_index: x86_reg::Type,
    #[doc = " SIB scale, only applicable if sib_index is valid."]
    pub sib_scale: i8,
    #[doc = " SIB base register, or X86_REG_INVALID when irrelevant."]
    pub sib_base: x86_reg::Type,
    #[doc = " XOP Code Condition"]
    pub xop_cc: x86_xop_cc,
    #[doc = " SSE Code Condition"]
    pub sse_cc: x86_sse_cc,
    #[doc = " AVX Code Condition"]
    pub avx_cc: x86_avx_cc,
    #[doc = " AVX Suppress all Exception"]
    pub avx_sae: bool,
    #[doc = " AVX static rounding mode"]
    pub avx_rm: x86_avx_rm,
    pub __bindgen_anon_1: cs_x86__bindgen_ty_1,
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_x86_op; 8usize],
    #[doc = "< encoding information"]
    pub encoding: cs_x86_encoding,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_x86__bindgen_ty_1 {
    #[doc = " EFLAGS updated by this instruction.\n This can be formed from OR combination of X86_EFLAGS_* symbols in x86.h"]
    pub eflags: u64,
    #[doc = " FPU_FLAGS updated by this instruction.\n This can be formed from OR combination of X86_FPU_FLAGS_* symbols in x86.h"]
    pub fpu_flags: u64,
}
impl ::core::fmt::Debug for cs_x86__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_x86__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_x86 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "cs_x86 {{ prefix: {:?}, opcode: {:?}, sib_index: {:?}, sib_base: {:?}, xop_cc: {:?}, sse_cc: {:?}, avx_cc: {:?}, avx_sae: {:?}, avx_rm: {:?}, __bindgen_anon_1: {:?}, operands: {:?}, encoding: {:?} }}" , self . prefix , self . opcode , self . sib_index , self . sib_base , self . xop_cc , self . sse_cc , self . avx_cc , self . avx_sae , self . avx_rm , self . __bindgen_anon_1 , self . operands , self . encoding)
    }
}
#[repr(u32)]
#[doc = " X86 instructions"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum x86_insn {
    X86_INS_INVALID = 0,
    X86_INS_AAA = 1,
    X86_INS_AAD = 2,
    X86_INS_AAM = 3,
    X86_INS_AAS = 4,
    X86_INS_FABS = 5,
    X86_INS_ADC = 6,
    X86_INS_ADCX = 7,
    X86_INS_ADD = 8,
    X86_INS_ADDPD = 9,
    X86_INS_ADDPS = 10,
    X86_INS_ADDSD = 11,
    X86_INS_ADDSS = 12,
    X86_INS_ADDSUBPD = 13,
    X86_INS_ADDSUBPS = 14,
    X86_INS_FADD = 15,
    X86_INS_FIADD = 16,
    X86_INS_ADOX = 17,
    X86_INS_AESDECLAST = 18,
    X86_INS_AESDEC = 19,
    X86_INS_AESENCLAST = 20,
    X86_INS_AESENC = 21,
    X86_INS_AESIMC = 22,
    X86_INS_AESKEYGENASSIST = 23,
    X86_INS_AND = 24,
    X86_INS_ANDN = 25,
    X86_INS_ANDNPD = 26,
    X86_INS_ANDNPS = 27,
    X86_INS_ANDPD = 28,
    X86_INS_ANDPS = 29,
    X86_INS_ARPL = 30,
    X86_INS_BEXTR = 31,
    X86_INS_BLCFILL = 32,
    X86_INS_BLCI = 33,
    X86_INS_BLCIC = 34,
    X86_INS_BLCMSK = 35,
    X86_INS_BLCS = 36,
    X86_INS_BLENDPD = 37,
    X86_INS_BLENDPS = 38,
    X86_INS_BLENDVPD = 39,
    X86_INS_BLENDVPS = 40,
    X86_INS_BLSFILL = 41,
    X86_INS_BLSI = 42,
    X86_INS_BLSIC = 43,
    X86_INS_BLSMSK = 44,
    X86_INS_BLSR = 45,
    X86_INS_BNDCL = 46,
    X86_INS_BNDCN = 47,
    X86_INS_BNDCU = 48,
    X86_INS_BNDLDX = 49,
    X86_INS_BNDMK = 50,
    X86_INS_BNDMOV = 51,
    X86_INS_BNDSTX = 52,
    X86_INS_BOUND = 53,
    X86_INS_BSF = 54,
    X86_INS_BSR = 55,
    X86_INS_BSWAP = 56,
    X86_INS_BT = 57,
    X86_INS_BTC = 58,
    X86_INS_BTR = 59,
    X86_INS_BTS = 60,
    X86_INS_BZHI = 61,
    X86_INS_CALL = 62,
    X86_INS_CBW = 63,
    X86_INS_CDQ = 64,
    X86_INS_CDQE = 65,
    X86_INS_FCHS = 66,
    X86_INS_CLAC = 67,
    X86_INS_CLC = 68,
    X86_INS_CLD = 69,
    X86_INS_CLDEMOTE = 70,
    X86_INS_CLFLUSH = 71,
    X86_INS_CLFLUSHOPT = 72,
    X86_INS_CLGI = 73,
    X86_INS_CLI = 74,
    X86_INS_CLRSSBSY = 75,
    X86_INS_CLTS = 76,
    X86_INS_CLWB = 77,
    X86_INS_CLZERO = 78,
    X86_INS_CMC = 79,
    X86_INS_CMOVA = 80,
    X86_INS_CMOVAE = 81,
    X86_INS_CMOVB = 82,
    X86_INS_CMOVBE = 83,
    X86_INS_FCMOVBE = 84,
    X86_INS_FCMOVB = 85,
    X86_INS_CMOVE = 86,
    X86_INS_FCMOVE = 87,
    X86_INS_CMOVG = 88,
    X86_INS_CMOVGE = 89,
    X86_INS_CMOVL = 90,
    X86_INS_CMOVLE = 91,
    X86_INS_FCMOVNBE = 92,
    X86_INS_FCMOVNB = 93,
    X86_INS_CMOVNE = 94,
    X86_INS_FCMOVNE = 95,
    X86_INS_CMOVNO = 96,
    X86_INS_CMOVNP = 97,
    X86_INS_FCMOVNU = 98,
    X86_INS_FCMOVNP = 99,
    X86_INS_CMOVNS = 100,
    X86_INS_CMOVO = 101,
    X86_INS_CMOVP = 102,
    X86_INS_FCMOVU = 103,
    X86_INS_CMOVS = 104,
    X86_INS_CMP = 105,
    X86_INS_CMPPD = 106,
    X86_INS_CMPPS = 107,
    X86_INS_CMPSB = 108,
    X86_INS_CMPSD = 109,
    X86_INS_CMPSQ = 110,
    X86_INS_CMPSS = 111,
    X86_INS_CMPSW = 112,
    X86_INS_CMPXCHG16B = 113,
    X86_INS_CMPXCHG = 114,
    X86_INS_CMPXCHG8B = 115,
    X86_INS_COMISD = 116,
    X86_INS_COMISS = 117,
    X86_INS_FCOMP = 118,
    X86_INS_FCOMPI = 119,
    X86_INS_FCOMI = 120,
    X86_INS_FCOM = 121,
    X86_INS_FCOS = 122,
    X86_INS_CPUID = 123,
    X86_INS_CQO = 124,
    X86_INS_CRC32 = 125,
    X86_INS_CVTDQ2PD = 126,
    X86_INS_CVTDQ2PS = 127,
    X86_INS_CVTPD2DQ = 128,
    X86_INS_CVTPD2PS = 129,
    X86_INS_CVTPS2DQ = 130,
    X86_INS_CVTPS2PD = 131,
    X86_INS_CVTSD2SI = 132,
    X86_INS_CVTSD2SS = 133,
    X86_INS_CVTSI2SD = 134,
    X86_INS_CVTSI2SS = 135,
    X86_INS_CVTSS2SD = 136,
    X86_INS_CVTSS2SI = 137,
    X86_INS_CVTTPD2DQ = 138,
    X86_INS_CVTTPS2DQ = 139,
    X86_INS_CVTTSD2SI = 140,
    X86_INS_CVTTSS2SI = 141,
    X86_INS_CWD = 142,
    X86_INS_CWDE = 143,
    X86_INS_DAA = 144,
    X86_INS_DAS = 145,
    X86_INS_DATA16 = 146,
    X86_INS_DEC = 147,
    X86_INS_DIV = 148,
    X86_INS_DIVPD = 149,
    X86_INS_DIVPS = 150,
    X86_INS_FDIVR = 151,
    X86_INS_FIDIVR = 152,
    X86_INS_FDIVRP = 153,
    X86_INS_DIVSD = 154,
    X86_INS_DIVSS = 155,
    X86_INS_FDIV = 156,
    X86_INS_FIDIV = 157,
    X86_INS_FDIVP = 158,
    X86_INS_DPPD = 159,
    X86_INS_DPPS = 160,
    X86_INS_ENCLS = 161,
    X86_INS_ENCLU = 162,
    X86_INS_ENCLV = 163,
    X86_INS_ENDBR32 = 164,
    X86_INS_ENDBR64 = 165,
    X86_INS_ENTER = 166,
    X86_INS_EXTRACTPS = 167,
    X86_INS_EXTRQ = 168,
    X86_INS_F2XM1 = 169,
    X86_INS_LCALL = 170,
    X86_INS_LJMP = 171,
    X86_INS_JMP = 172,
    X86_INS_FBLD = 173,
    X86_INS_FBSTP = 174,
    X86_INS_FCOMPP = 175,
    X86_INS_FDECSTP = 176,
    X86_INS_FDISI8087_NOP = 177,
    X86_INS_FEMMS = 178,
    X86_INS_FENI8087_NOP = 179,
    X86_INS_FFREE = 180,
    X86_INS_FFREEP = 181,
    X86_INS_FICOM = 182,
    X86_INS_FICOMP = 183,
    X86_INS_FINCSTP = 184,
    X86_INS_FLDCW = 185,
    X86_INS_FLDENV = 186,
    X86_INS_FLDL2E = 187,
    X86_INS_FLDL2T = 188,
    X86_INS_FLDLG2 = 189,
    X86_INS_FLDLN2 = 190,
    X86_INS_FLDPI = 191,
    X86_INS_FNCLEX = 192,
    X86_INS_FNINIT = 193,
    X86_INS_FNOP = 194,
    X86_INS_FNSTCW = 195,
    X86_INS_FNSTSW = 196,
    X86_INS_FPATAN = 197,
    X86_INS_FSTPNCE = 198,
    X86_INS_FPREM = 199,
    X86_INS_FPREM1 = 200,
    X86_INS_FPTAN = 201,
    X86_INS_FRNDINT = 202,
    X86_INS_FRSTOR = 203,
    X86_INS_FNSAVE = 204,
    X86_INS_FSCALE = 205,
    X86_INS_FSETPM = 206,
    X86_INS_FSINCOS = 207,
    X86_INS_FNSTENV = 208,
    X86_INS_FXAM = 209,
    X86_INS_FXRSTOR = 210,
    X86_INS_FXRSTOR64 = 211,
    X86_INS_FXSAVE = 212,
    X86_INS_FXSAVE64 = 213,
    X86_INS_FXTRACT = 214,
    X86_INS_FYL2X = 215,
    X86_INS_FYL2XP1 = 216,
    X86_INS_GETSEC = 217,
    X86_INS_GF2P8AFFINEINVQB = 218,
    X86_INS_GF2P8AFFINEQB = 219,
    X86_INS_GF2P8MULB = 220,
    X86_INS_HADDPD = 221,
    X86_INS_HADDPS = 222,
    X86_INS_HLT = 223,
    X86_INS_HSUBPD = 224,
    X86_INS_HSUBPS = 225,
    X86_INS_IDIV = 226,
    X86_INS_FILD = 227,
    X86_INS_IMUL = 228,
    X86_INS_IN = 229,
    X86_INS_INC = 230,
    X86_INS_INCSSPD = 231,
    X86_INS_INCSSPQ = 232,
    X86_INS_INSB = 233,
    X86_INS_INSERTPS = 234,
    X86_INS_INSERTQ = 235,
    X86_INS_INSD = 236,
    X86_INS_INSW = 237,
    X86_INS_INT = 238,
    X86_INS_INT1 = 239,
    X86_INS_INT3 = 240,
    X86_INS_INTO = 241,
    X86_INS_INVD = 242,
    X86_INS_INVEPT = 243,
    X86_INS_INVLPG = 244,
    X86_INS_INVLPGA = 245,
    X86_INS_INVPCID = 246,
    X86_INS_INVVPID = 247,
    X86_INS_IRET = 248,
    X86_INS_IRETD = 249,
    X86_INS_IRETQ = 250,
    X86_INS_FISTTP = 251,
    X86_INS_FIST = 252,
    X86_INS_FISTP = 253,
    X86_INS_JAE = 254,
    X86_INS_JA = 255,
    X86_INS_JBE = 256,
    X86_INS_JB = 257,
    X86_INS_JCXZ = 258,
    X86_INS_JECXZ = 259,
    X86_INS_JE = 260,
    X86_INS_JGE = 261,
    X86_INS_JG = 262,
    X86_INS_JLE = 263,
    X86_INS_JL = 264,
    X86_INS_JNE = 265,
    X86_INS_JNO = 266,
    X86_INS_JNP = 267,
    X86_INS_JNS = 268,
    X86_INS_JO = 269,
    X86_INS_JP = 270,
    X86_INS_JRCXZ = 271,
    X86_INS_JS = 272,
    X86_INS_KADDB = 273,
    X86_INS_KADDD = 274,
    X86_INS_KADDQ = 275,
    X86_INS_KADDW = 276,
    X86_INS_KANDB = 277,
    X86_INS_KANDD = 278,
    X86_INS_KANDNB = 279,
    X86_INS_KANDND = 280,
    X86_INS_KANDNQ = 281,
    X86_INS_KANDNW = 282,
    X86_INS_KANDQ = 283,
    X86_INS_KANDW = 284,
    X86_INS_KMOVB = 285,
    X86_INS_KMOVD = 286,
    X86_INS_KMOVQ = 287,
    X86_INS_KMOVW = 288,
    X86_INS_KNOTB = 289,
    X86_INS_KNOTD = 290,
    X86_INS_KNOTQ = 291,
    X86_INS_KNOTW = 292,
    X86_INS_KORB = 293,
    X86_INS_KORD = 294,
    X86_INS_KORQ = 295,
    X86_INS_KORTESTB = 296,
    X86_INS_KORTESTD = 297,
    X86_INS_KORTESTQ = 298,
    X86_INS_KORTESTW = 299,
    X86_INS_KORW = 300,
    X86_INS_KSHIFTLB = 301,
    X86_INS_KSHIFTLD = 302,
    X86_INS_KSHIFTLQ = 303,
    X86_INS_KSHIFTLW = 304,
    X86_INS_KSHIFTRB = 305,
    X86_INS_KSHIFTRD = 306,
    X86_INS_KSHIFTRQ = 307,
    X86_INS_KSHIFTRW = 308,
    X86_INS_KTESTB = 309,
    X86_INS_KTESTD = 310,
    X86_INS_KTESTQ = 311,
    X86_INS_KTESTW = 312,
    X86_INS_KUNPCKBW = 313,
    X86_INS_KUNPCKDQ = 314,
    X86_INS_KUNPCKWD = 315,
    X86_INS_KXNORB = 316,
    X86_INS_KXNORD = 317,
    X86_INS_KXNORQ = 318,
    X86_INS_KXNORW = 319,
    X86_INS_KXORB = 320,
    X86_INS_KXORD = 321,
    X86_INS_KXORQ = 322,
    X86_INS_KXORW = 323,
    X86_INS_LAHF = 324,
    X86_INS_LAR = 325,
    X86_INS_LDDQU = 326,
    X86_INS_LDMXCSR = 327,
    X86_INS_LDS = 328,
    X86_INS_FLDZ = 329,
    X86_INS_FLD1 = 330,
    X86_INS_FLD = 331,
    X86_INS_LEA = 332,
    X86_INS_LEAVE = 333,
    X86_INS_LES = 334,
    X86_INS_LFENCE = 335,
    X86_INS_LFS = 336,
    X86_INS_LGDT = 337,
    X86_INS_LGS = 338,
    X86_INS_LIDT = 339,
    X86_INS_LLDT = 340,
    X86_INS_LLWPCB = 341,
    X86_INS_LMSW = 342,
    X86_INS_LOCK = 343,
    X86_INS_LODSB = 344,
    X86_INS_LODSD = 345,
    X86_INS_LODSQ = 346,
    X86_INS_LODSW = 347,
    X86_INS_LOOP = 348,
    X86_INS_LOOPE = 349,
    X86_INS_LOOPNE = 350,
    X86_INS_RETF = 351,
    X86_INS_RETFQ = 352,
    X86_INS_LSL = 353,
    X86_INS_LSS = 354,
    X86_INS_LTR = 355,
    X86_INS_LWPINS = 356,
    X86_INS_LWPVAL = 357,
    X86_INS_LZCNT = 358,
    X86_INS_MASKMOVDQU = 359,
    X86_INS_MAXPD = 360,
    X86_INS_MAXPS = 361,
    X86_INS_MAXSD = 362,
    X86_INS_MAXSS = 363,
    X86_INS_MFENCE = 364,
    X86_INS_MINPD = 365,
    X86_INS_MINPS = 366,
    X86_INS_MINSD = 367,
    X86_INS_MINSS = 368,
    X86_INS_CVTPD2PI = 369,
    X86_INS_CVTPI2PD = 370,
    X86_INS_CVTPI2PS = 371,
    X86_INS_CVTPS2PI = 372,
    X86_INS_CVTTPD2PI = 373,
    X86_INS_CVTTPS2PI = 374,
    X86_INS_EMMS = 375,
    X86_INS_MASKMOVQ = 376,
    X86_INS_MOVD = 377,
    X86_INS_MOVQ = 378,
    X86_INS_MOVDQ2Q = 379,
    X86_INS_MOVNTQ = 380,
    X86_INS_MOVQ2DQ = 381,
    X86_INS_PABSB = 382,
    X86_INS_PABSD = 383,
    X86_INS_PABSW = 384,
    X86_INS_PACKSSDW = 385,
    X86_INS_PACKSSWB = 386,
    X86_INS_PACKUSWB = 387,
    X86_INS_PADDB = 388,
    X86_INS_PADDD = 389,
    X86_INS_PADDQ = 390,
    X86_INS_PADDSB = 391,
    X86_INS_PADDSW = 392,
    X86_INS_PADDUSB = 393,
    X86_INS_PADDUSW = 394,
    X86_INS_PADDW = 395,
    X86_INS_PALIGNR = 396,
    X86_INS_PANDN = 397,
    X86_INS_PAND = 398,
    X86_INS_PAVGB = 399,
    X86_INS_PAVGW = 400,
    X86_INS_PCMPEQB = 401,
    X86_INS_PCMPEQD = 402,
    X86_INS_PCMPEQW = 403,
    X86_INS_PCMPGTB = 404,
    X86_INS_PCMPGTD = 405,
    X86_INS_PCMPGTW = 406,
    X86_INS_PEXTRW = 407,
    X86_INS_PHADDD = 408,
    X86_INS_PHADDSW = 409,
    X86_INS_PHADDW = 410,
    X86_INS_PHSUBD = 411,
    X86_INS_PHSUBSW = 412,
    X86_INS_PHSUBW = 413,
    X86_INS_PINSRW = 414,
    X86_INS_PMADDUBSW = 415,
    X86_INS_PMADDWD = 416,
    X86_INS_PMAXSW = 417,
    X86_INS_PMAXUB = 418,
    X86_INS_PMINSW = 419,
    X86_INS_PMINUB = 420,
    X86_INS_PMOVMSKB = 421,
    X86_INS_PMULHRSW = 422,
    X86_INS_PMULHUW = 423,
    X86_INS_PMULHW = 424,
    X86_INS_PMULLW = 425,
    X86_INS_PMULUDQ = 426,
    X86_INS_POR = 427,
    X86_INS_PSADBW = 428,
    X86_INS_PSHUFB = 429,
    X86_INS_PSHUFW = 430,
    X86_INS_PSIGNB = 431,
    X86_INS_PSIGND = 432,
    X86_INS_PSIGNW = 433,
    X86_INS_PSLLD = 434,
    X86_INS_PSLLQ = 435,
    X86_INS_PSLLW = 436,
    X86_INS_PSRAD = 437,
    X86_INS_PSRAW = 438,
    X86_INS_PSRLD = 439,
    X86_INS_PSRLQ = 440,
    X86_INS_PSRLW = 441,
    X86_INS_PSUBB = 442,
    X86_INS_PSUBD = 443,
    X86_INS_PSUBQ = 444,
    X86_INS_PSUBSB = 445,
    X86_INS_PSUBSW = 446,
    X86_INS_PSUBUSB = 447,
    X86_INS_PSUBUSW = 448,
    X86_INS_PSUBW = 449,
    X86_INS_PUNPCKHBW = 450,
    X86_INS_PUNPCKHDQ = 451,
    X86_INS_PUNPCKHWD = 452,
    X86_INS_PUNPCKLBW = 453,
    X86_INS_PUNPCKLDQ = 454,
    X86_INS_PUNPCKLWD = 455,
    X86_INS_PXOR = 456,
    X86_INS_MONITORX = 457,
    X86_INS_MONITOR = 458,
    X86_INS_MONTMUL = 459,
    X86_INS_MOV = 460,
    X86_INS_MOVABS = 461,
    X86_INS_MOVAPD = 462,
    X86_INS_MOVAPS = 463,
    X86_INS_MOVBE = 464,
    X86_INS_MOVDDUP = 465,
    X86_INS_MOVDIR64B = 466,
    X86_INS_MOVDIRI = 467,
    X86_INS_MOVDQA = 468,
    X86_INS_MOVDQU = 469,
    X86_INS_MOVHLPS = 470,
    X86_INS_MOVHPD = 471,
    X86_INS_MOVHPS = 472,
    X86_INS_MOVLHPS = 473,
    X86_INS_MOVLPD = 474,
    X86_INS_MOVLPS = 475,
    X86_INS_MOVMSKPD = 476,
    X86_INS_MOVMSKPS = 477,
    X86_INS_MOVNTDQA = 478,
    X86_INS_MOVNTDQ = 479,
    X86_INS_MOVNTI = 480,
    X86_INS_MOVNTPD = 481,
    X86_INS_MOVNTPS = 482,
    X86_INS_MOVNTSD = 483,
    X86_INS_MOVNTSS = 484,
    X86_INS_MOVSB = 485,
    X86_INS_MOVSD = 486,
    X86_INS_MOVSHDUP = 487,
    X86_INS_MOVSLDUP = 488,
    X86_INS_MOVSQ = 489,
    X86_INS_MOVSS = 490,
    X86_INS_MOVSW = 491,
    X86_INS_MOVSX = 492,
    X86_INS_MOVSXD = 493,
    X86_INS_MOVUPD = 494,
    X86_INS_MOVUPS = 495,
    X86_INS_MOVZX = 496,
    X86_INS_MPSADBW = 497,
    X86_INS_MUL = 498,
    X86_INS_MULPD = 499,
    X86_INS_MULPS = 500,
    X86_INS_MULSD = 501,
    X86_INS_MULSS = 502,
    X86_INS_MULX = 503,
    X86_INS_FMUL = 504,
    X86_INS_FIMUL = 505,
    X86_INS_FMULP = 506,
    X86_INS_MWAITX = 507,
    X86_INS_MWAIT = 508,
    X86_INS_NEG = 509,
    X86_INS_NOP = 510,
    X86_INS_NOT = 511,
    X86_INS_OR = 512,
    X86_INS_ORPD = 513,
    X86_INS_ORPS = 514,
    X86_INS_OUT = 515,
    X86_INS_OUTSB = 516,
    X86_INS_OUTSD = 517,
    X86_INS_OUTSW = 518,
    X86_INS_PACKUSDW = 519,
    X86_INS_PAUSE = 520,
    X86_INS_PAVGUSB = 521,
    X86_INS_PBLENDVB = 522,
    X86_INS_PBLENDW = 523,
    X86_INS_PCLMULQDQ = 524,
    X86_INS_PCMPEQQ = 525,
    X86_INS_PCMPESTRI = 526,
    X86_INS_PCMPESTRM = 527,
    X86_INS_PCMPGTQ = 528,
    X86_INS_PCMPISTRI = 529,
    X86_INS_PCMPISTRM = 530,
    X86_INS_PCONFIG = 531,
    X86_INS_PDEP = 532,
    X86_INS_PEXT = 533,
    X86_INS_PEXTRB = 534,
    X86_INS_PEXTRD = 535,
    X86_INS_PEXTRQ = 536,
    X86_INS_PF2ID = 537,
    X86_INS_PF2IW = 538,
    X86_INS_PFACC = 539,
    X86_INS_PFADD = 540,
    X86_INS_PFCMPEQ = 541,
    X86_INS_PFCMPGE = 542,
    X86_INS_PFCMPGT = 543,
    X86_INS_PFMAX = 544,
    X86_INS_PFMIN = 545,
    X86_INS_PFMUL = 546,
    X86_INS_PFNACC = 547,
    X86_INS_PFPNACC = 548,
    X86_INS_PFRCPIT1 = 549,
    X86_INS_PFRCPIT2 = 550,
    X86_INS_PFRCP = 551,
    X86_INS_PFRSQIT1 = 552,
    X86_INS_PFRSQRT = 553,
    X86_INS_PFSUBR = 554,
    X86_INS_PFSUB = 555,
    X86_INS_PHMINPOSUW = 556,
    X86_INS_PI2FD = 557,
    X86_INS_PI2FW = 558,
    X86_INS_PINSRB = 559,
    X86_INS_PINSRD = 560,
    X86_INS_PINSRQ = 561,
    X86_INS_PMAXSB = 562,
    X86_INS_PMAXSD = 563,
    X86_INS_PMAXUD = 564,
    X86_INS_PMAXUW = 565,
    X86_INS_PMINSB = 566,
    X86_INS_PMINSD = 567,
    X86_INS_PMINUD = 568,
    X86_INS_PMINUW = 569,
    X86_INS_PMOVSXBD = 570,
    X86_INS_PMOVSXBQ = 571,
    X86_INS_PMOVSXBW = 572,
    X86_INS_PMOVSXDQ = 573,
    X86_INS_PMOVSXWD = 574,
    X86_INS_PMOVSXWQ = 575,
    X86_INS_PMOVZXBD = 576,
    X86_INS_PMOVZXBQ = 577,
    X86_INS_PMOVZXBW = 578,
    X86_INS_PMOVZXDQ = 579,
    X86_INS_PMOVZXWD = 580,
    X86_INS_PMOVZXWQ = 581,
    X86_INS_PMULDQ = 582,
    X86_INS_PMULHRW = 583,
    X86_INS_PMULLD = 584,
    X86_INS_POP = 585,
    X86_INS_POPAW = 586,
    X86_INS_POPAL = 587,
    X86_INS_POPCNT = 588,
    X86_INS_POPF = 589,
    X86_INS_POPFD = 590,
    X86_INS_POPFQ = 591,
    X86_INS_PREFETCH = 592,
    X86_INS_PREFETCHNTA = 593,
    X86_INS_PREFETCHT0 = 594,
    X86_INS_PREFETCHT1 = 595,
    X86_INS_PREFETCHT2 = 596,
    X86_INS_PREFETCHW = 597,
    X86_INS_PREFETCHWT1 = 598,
    X86_INS_PSHUFD = 599,
    X86_INS_PSHUFHW = 600,
    X86_INS_PSHUFLW = 601,
    X86_INS_PSLLDQ = 602,
    X86_INS_PSRLDQ = 603,
    X86_INS_PSWAPD = 604,
    X86_INS_PTEST = 605,
    X86_INS_PTWRITE = 606,
    X86_INS_PUNPCKHQDQ = 607,
    X86_INS_PUNPCKLQDQ = 608,
    X86_INS_PUSH = 609,
    X86_INS_PUSHAW = 610,
    X86_INS_PUSHAL = 611,
    X86_INS_PUSHF = 612,
    X86_INS_PUSHFD = 613,
    X86_INS_PUSHFQ = 614,
    X86_INS_RCL = 615,
    X86_INS_RCPPS = 616,
    X86_INS_RCPSS = 617,
    X86_INS_RCR = 618,
    X86_INS_RDFSBASE = 619,
    X86_INS_RDGSBASE = 620,
    X86_INS_RDMSR = 621,
    X86_INS_RDPID = 622,
    X86_INS_RDPKRU = 623,
    X86_INS_RDPMC = 624,
    X86_INS_RDRAND = 625,
    X86_INS_RDSEED = 626,
    X86_INS_RDSSPD = 627,
    X86_INS_RDSSPQ = 628,
    X86_INS_RDTSC = 629,
    X86_INS_RDTSCP = 630,
    X86_INS_REPNE = 631,
    X86_INS_REP = 632,
    X86_INS_RET = 633,
    X86_INS_REX64 = 634,
    X86_INS_ROL = 635,
    X86_INS_ROR = 636,
    X86_INS_RORX = 637,
    X86_INS_ROUNDPD = 638,
    X86_INS_ROUNDPS = 639,
    X86_INS_ROUNDSD = 640,
    X86_INS_ROUNDSS = 641,
    X86_INS_RSM = 642,
    X86_INS_RSQRTPS = 643,
    X86_INS_RSQRTSS = 644,
    X86_INS_RSTORSSP = 645,
    X86_INS_SAHF = 646,
    X86_INS_SAL = 647,
    X86_INS_SALC = 648,
    X86_INS_SAR = 649,
    X86_INS_SARX = 650,
    X86_INS_SAVEPREVSSP = 651,
    X86_INS_SBB = 652,
    X86_INS_SCASB = 653,
    X86_INS_SCASD = 654,
    X86_INS_SCASQ = 655,
    X86_INS_SCASW = 656,
    X86_INS_SETAE = 657,
    X86_INS_SETA = 658,
    X86_INS_SETBE = 659,
    X86_INS_SETB = 660,
    X86_INS_SETE = 661,
    X86_INS_SETGE = 662,
    X86_INS_SETG = 663,
    X86_INS_SETLE = 664,
    X86_INS_SETL = 665,
    X86_INS_SETNE = 666,
    X86_INS_SETNO = 667,
    X86_INS_SETNP = 668,
    X86_INS_SETNS = 669,
    X86_INS_SETO = 670,
    X86_INS_SETP = 671,
    X86_INS_SETSSBSY = 672,
    X86_INS_SETS = 673,
    X86_INS_SFENCE = 674,
    X86_INS_SGDT = 675,
    X86_INS_SHA1MSG1 = 676,
    X86_INS_SHA1MSG2 = 677,
    X86_INS_SHA1NEXTE = 678,
    X86_INS_SHA1RNDS4 = 679,
    X86_INS_SHA256MSG1 = 680,
    X86_INS_SHA256MSG2 = 681,
    X86_INS_SHA256RNDS2 = 682,
    X86_INS_SHL = 683,
    X86_INS_SHLD = 684,
    X86_INS_SHLX = 685,
    X86_INS_SHR = 686,
    X86_INS_SHRD = 687,
    X86_INS_SHRX = 688,
    X86_INS_SHUFPD = 689,
    X86_INS_SHUFPS = 690,
    X86_INS_SIDT = 691,
    X86_INS_FSIN = 692,
    X86_INS_SKINIT = 693,
    X86_INS_SLDT = 694,
    X86_INS_SLWPCB = 695,
    X86_INS_SMSW = 696,
    X86_INS_SQRTPD = 697,
    X86_INS_SQRTPS = 698,
    X86_INS_SQRTSD = 699,
    X86_INS_SQRTSS = 700,
    X86_INS_FSQRT = 701,
    X86_INS_STAC = 702,
    X86_INS_STC = 703,
    X86_INS_STD = 704,
    X86_INS_STGI = 705,
    X86_INS_STI = 706,
    X86_INS_STMXCSR = 707,
    X86_INS_STOSB = 708,
    X86_INS_STOSD = 709,
    X86_INS_STOSQ = 710,
    X86_INS_STOSW = 711,
    X86_INS_STR = 712,
    X86_INS_FST = 713,
    X86_INS_FSTP = 714,
    X86_INS_SUB = 715,
    X86_INS_SUBPD = 716,
    X86_INS_SUBPS = 717,
    X86_INS_FSUBR = 718,
    X86_INS_FISUBR = 719,
    X86_INS_FSUBRP = 720,
    X86_INS_SUBSD = 721,
    X86_INS_SUBSS = 722,
    X86_INS_FSUB = 723,
    X86_INS_FISUB = 724,
    X86_INS_FSUBP = 725,
    X86_INS_SWAPGS = 726,
    X86_INS_SYSCALL = 727,
    X86_INS_SYSENTER = 728,
    X86_INS_SYSEXIT = 729,
    X86_INS_SYSEXITQ = 730,
    X86_INS_SYSRET = 731,
    X86_INS_SYSRETQ = 732,
    X86_INS_T1MSKC = 733,
    X86_INS_TEST = 734,
    X86_INS_TPAUSE = 735,
    X86_INS_FTST = 736,
    X86_INS_TZCNT = 737,
    X86_INS_TZMSK = 738,
    X86_INS_UCOMISD = 739,
    X86_INS_UCOMISS = 740,
    X86_INS_FUCOMPI = 741,
    X86_INS_FUCOMI = 742,
    X86_INS_FUCOMPP = 743,
    X86_INS_FUCOMP = 744,
    X86_INS_FUCOM = 745,
    X86_INS_UD0 = 746,
    X86_INS_UD1 = 747,
    X86_INS_UD2 = 748,
    X86_INS_UMONITOR = 749,
    X86_INS_UMWAIT = 750,
    X86_INS_UNPCKHPD = 751,
    X86_INS_UNPCKHPS = 752,
    X86_INS_UNPCKLPD = 753,
    X86_INS_UNPCKLPS = 754,
    X86_INS_V4FMADDPS = 755,
    X86_INS_V4FMADDSS = 756,
    X86_INS_V4FNMADDPS = 757,
    X86_INS_V4FNMADDSS = 758,
    X86_INS_VADDPD = 759,
    X86_INS_VADDPS = 760,
    X86_INS_VADDSD = 761,
    X86_INS_VADDSS = 762,
    X86_INS_VADDSUBPD = 763,
    X86_INS_VADDSUBPS = 764,
    X86_INS_VAESDECLAST = 765,
    X86_INS_VAESDEC = 766,
    X86_INS_VAESENCLAST = 767,
    X86_INS_VAESENC = 768,
    X86_INS_VAESIMC = 769,
    X86_INS_VAESKEYGENASSIST = 770,
    X86_INS_VALIGND = 771,
    X86_INS_VALIGNQ = 772,
    X86_INS_VANDNPD = 773,
    X86_INS_VANDNPS = 774,
    X86_INS_VANDPD = 775,
    X86_INS_VANDPS = 776,
    X86_INS_VBLENDMPD = 777,
    X86_INS_VBLENDMPS = 778,
    X86_INS_VBLENDPD = 779,
    X86_INS_VBLENDPS = 780,
    X86_INS_VBLENDVPD = 781,
    X86_INS_VBLENDVPS = 782,
    X86_INS_VBROADCASTF128 = 783,
    X86_INS_VBROADCASTF32X2 = 784,
    X86_INS_VBROADCASTF32X4 = 785,
    X86_INS_VBROADCASTF32X8 = 786,
    X86_INS_VBROADCASTF64X2 = 787,
    X86_INS_VBROADCASTF64X4 = 788,
    X86_INS_VBROADCASTI128 = 789,
    X86_INS_VBROADCASTI32X2 = 790,
    X86_INS_VBROADCASTI32X4 = 791,
    X86_INS_VBROADCASTI32X8 = 792,
    X86_INS_VBROADCASTI64X2 = 793,
    X86_INS_VBROADCASTI64X4 = 794,
    X86_INS_VBROADCASTSD = 795,
    X86_INS_VBROADCASTSS = 796,
    X86_INS_VCMP = 797,
    X86_INS_VCMPPD = 798,
    X86_INS_VCMPPS = 799,
    X86_INS_VCMPSD = 800,
    X86_INS_VCMPSS = 801,
    X86_INS_VCOMISD = 802,
    X86_INS_VCOMISS = 803,
    X86_INS_VCOMPRESSPD = 804,
    X86_INS_VCOMPRESSPS = 805,
    X86_INS_VCVTDQ2PD = 806,
    X86_INS_VCVTDQ2PS = 807,
    X86_INS_VCVTPD2DQ = 808,
    X86_INS_VCVTPD2PS = 809,
    X86_INS_VCVTPD2QQ = 810,
    X86_INS_VCVTPD2UDQ = 811,
    X86_INS_VCVTPD2UQQ = 812,
    X86_INS_VCVTPH2PS = 813,
    X86_INS_VCVTPS2DQ = 814,
    X86_INS_VCVTPS2PD = 815,
    X86_INS_VCVTPS2PH = 816,
    X86_INS_VCVTPS2QQ = 817,
    X86_INS_VCVTPS2UDQ = 818,
    X86_INS_VCVTPS2UQQ = 819,
    X86_INS_VCVTQQ2PD = 820,
    X86_INS_VCVTQQ2PS = 821,
    X86_INS_VCVTSD2SI = 822,
    X86_INS_VCVTSD2SS = 823,
    X86_INS_VCVTSD2USI = 824,
    X86_INS_VCVTSI2SD = 825,
    X86_INS_VCVTSI2SS = 826,
    X86_INS_VCVTSS2SD = 827,
    X86_INS_VCVTSS2SI = 828,
    X86_INS_VCVTSS2USI = 829,
    X86_INS_VCVTTPD2DQ = 830,
    X86_INS_VCVTTPD2QQ = 831,
    X86_INS_VCVTTPD2UDQ = 832,
    X86_INS_VCVTTPD2UQQ = 833,
    X86_INS_VCVTTPS2DQ = 834,
    X86_INS_VCVTTPS2QQ = 835,
    X86_INS_VCVTTPS2UDQ = 836,
    X86_INS_VCVTTPS2UQQ = 837,
    X86_INS_VCVTTSD2SI = 838,
    X86_INS_VCVTTSD2USI = 839,
    X86_INS_VCVTTSS2SI = 840,
    X86_INS_VCVTTSS2USI = 841,
    X86_INS_VCVTUDQ2PD = 842,
    X86_INS_VCVTUDQ2PS = 843,
    X86_INS_VCVTUQQ2PD = 844,
    X86_INS_VCVTUQQ2PS = 845,
    X86_INS_VCVTUSI2SD = 846,
    X86_INS_VCVTUSI2SS = 847,
    X86_INS_VDBPSADBW = 848,
    X86_INS_VDIVPD = 849,
    X86_INS_VDIVPS = 850,
    X86_INS_VDIVSD = 851,
    X86_INS_VDIVSS = 852,
    X86_INS_VDPPD = 853,
    X86_INS_VDPPS = 854,
    X86_INS_VERR = 855,
    X86_INS_VERW = 856,
    X86_INS_VEXP2PD = 857,
    X86_INS_VEXP2PS = 858,
    X86_INS_VEXPANDPD = 859,
    X86_INS_VEXPANDPS = 860,
    X86_INS_VEXTRACTF128 = 861,
    X86_INS_VEXTRACTF32X4 = 862,
    X86_INS_VEXTRACTF32X8 = 863,
    X86_INS_VEXTRACTF64X2 = 864,
    X86_INS_VEXTRACTF64X4 = 865,
    X86_INS_VEXTRACTI128 = 866,
    X86_INS_VEXTRACTI32X4 = 867,
    X86_INS_VEXTRACTI32X8 = 868,
    X86_INS_VEXTRACTI64X2 = 869,
    X86_INS_VEXTRACTI64X4 = 870,
    X86_INS_VEXTRACTPS = 871,
    X86_INS_VFIXUPIMMPD = 872,
    X86_INS_VFIXUPIMMPS = 873,
    X86_INS_VFIXUPIMMSD = 874,
    X86_INS_VFIXUPIMMSS = 875,
    X86_INS_VFMADD132PD = 876,
    X86_INS_VFMADD132PS = 877,
    X86_INS_VFMADD132SD = 878,
    X86_INS_VFMADD132SS = 879,
    X86_INS_VFMADD213PD = 880,
    X86_INS_VFMADD213PS = 881,
    X86_INS_VFMADD213SD = 882,
    X86_INS_VFMADD213SS = 883,
    X86_INS_VFMADD231PD = 884,
    X86_INS_VFMADD231PS = 885,
    X86_INS_VFMADD231SD = 886,
    X86_INS_VFMADD231SS = 887,
    X86_INS_VFMADDPD = 888,
    X86_INS_VFMADDPS = 889,
    X86_INS_VFMADDSD = 890,
    X86_INS_VFMADDSS = 891,
    X86_INS_VFMADDSUB132PD = 892,
    X86_INS_VFMADDSUB132PS = 893,
    X86_INS_VFMADDSUB213PD = 894,
    X86_INS_VFMADDSUB213PS = 895,
    X86_INS_VFMADDSUB231PD = 896,
    X86_INS_VFMADDSUB231PS = 897,
    X86_INS_VFMADDSUBPD = 898,
    X86_INS_VFMADDSUBPS = 899,
    X86_INS_VFMSUB132PD = 900,
    X86_INS_VFMSUB132PS = 901,
    X86_INS_VFMSUB132SD = 902,
    X86_INS_VFMSUB132SS = 903,
    X86_INS_VFMSUB213PD = 904,
    X86_INS_VFMSUB213PS = 905,
    X86_INS_VFMSUB213SD = 906,
    X86_INS_VFMSUB213SS = 907,
    X86_INS_VFMSUB231PD = 908,
    X86_INS_VFMSUB231PS = 909,
    X86_INS_VFMSUB231SD = 910,
    X86_INS_VFMSUB231SS = 911,
    X86_INS_VFMSUBADD132PD = 912,
    X86_INS_VFMSUBADD132PS = 913,
    X86_INS_VFMSUBADD213PD = 914,
    X86_INS_VFMSUBADD213PS = 915,
    X86_INS_VFMSUBADD231PD = 916,
    X86_INS_VFMSUBADD231PS = 917,
    X86_INS_VFMSUBADDPD = 918,
    X86_INS_VFMSUBADDPS = 919,
    X86_INS_VFMSUBPD = 920,
    X86_INS_VFMSUBPS = 921,
    X86_INS_VFMSUBSD = 922,
    X86_INS_VFMSUBSS = 923,
    X86_INS_VFNMADD132PD = 924,
    X86_INS_VFNMADD132PS = 925,
    X86_INS_VFNMADD132SD = 926,
    X86_INS_VFNMADD132SS = 927,
    X86_INS_VFNMADD213PD = 928,
    X86_INS_VFNMADD213PS = 929,
    X86_INS_VFNMADD213SD = 930,
    X86_INS_VFNMADD213SS = 931,
    X86_INS_VFNMADD231PD = 932,
    X86_INS_VFNMADD231PS = 933,
    X86_INS_VFNMADD231SD = 934,
    X86_INS_VFNMADD231SS = 935,
    X86_INS_VFNMADDPD = 936,
    X86_INS_VFNMADDPS = 937,
    X86_INS_VFNMADDSD = 938,
    X86_INS_VFNMADDSS = 939,
    X86_INS_VFNMSUB132PD = 940,
    X86_INS_VFNMSUB132PS = 941,
    X86_INS_VFNMSUB132SD = 942,
    X86_INS_VFNMSUB132SS = 943,
    X86_INS_VFNMSUB213PD = 944,
    X86_INS_VFNMSUB213PS = 945,
    X86_INS_VFNMSUB213SD = 946,
    X86_INS_VFNMSUB213SS = 947,
    X86_INS_VFNMSUB231PD = 948,
    X86_INS_VFNMSUB231PS = 949,
    X86_INS_VFNMSUB231SD = 950,
    X86_INS_VFNMSUB231SS = 951,
    X86_INS_VFNMSUBPD = 952,
    X86_INS_VFNMSUBPS = 953,
    X86_INS_VFNMSUBSD = 954,
    X86_INS_VFNMSUBSS = 955,
    X86_INS_VFPCLASSPD = 956,
    X86_INS_VFPCLASSPS = 957,
    X86_INS_VFPCLASSSD = 958,
    X86_INS_VFPCLASSSS = 959,
    X86_INS_VFRCZPD = 960,
    X86_INS_VFRCZPS = 961,
    X86_INS_VFRCZSD = 962,
    X86_INS_VFRCZSS = 963,
    X86_INS_VGATHERDPD = 964,
    X86_INS_VGATHERDPS = 965,
    X86_INS_VGATHERPF0DPD = 966,
    X86_INS_VGATHERPF0DPS = 967,
    X86_INS_VGATHERPF0QPD = 968,
    X86_INS_VGATHERPF0QPS = 969,
    X86_INS_VGATHERPF1DPD = 970,
    X86_INS_VGATHERPF1DPS = 971,
    X86_INS_VGATHERPF1QPD = 972,
    X86_INS_VGATHERPF1QPS = 973,
    X86_INS_VGATHERQPD = 974,
    X86_INS_VGATHERQPS = 975,
    X86_INS_VGETEXPPD = 976,
    X86_INS_VGETEXPPS = 977,
    X86_INS_VGETEXPSD = 978,
    X86_INS_VGETEXPSS = 979,
    X86_INS_VGETMANTPD = 980,
    X86_INS_VGETMANTPS = 981,
    X86_INS_VGETMANTSD = 982,
    X86_INS_VGETMANTSS = 983,
    X86_INS_VGF2P8AFFINEINVQB = 984,
    X86_INS_VGF2P8AFFINEQB = 985,
    X86_INS_VGF2P8MULB = 986,
    X86_INS_VHADDPD = 987,
    X86_INS_VHADDPS = 988,
    X86_INS_VHSUBPD = 989,
    X86_INS_VHSUBPS = 990,
    X86_INS_VINSERTF128 = 991,
    X86_INS_VINSERTF32X4 = 992,
    X86_INS_VINSERTF32X8 = 993,
    X86_INS_VINSERTF64X2 = 994,
    X86_INS_VINSERTF64X4 = 995,
    X86_INS_VINSERTI128 = 996,
    X86_INS_VINSERTI32X4 = 997,
    X86_INS_VINSERTI32X8 = 998,
    X86_INS_VINSERTI64X2 = 999,
    X86_INS_VINSERTI64X4 = 1000,
    X86_INS_VINSERTPS = 1001,
    X86_INS_VLDDQU = 1002,
    X86_INS_VLDMXCSR = 1003,
    X86_INS_VMASKMOVDQU = 1004,
    X86_INS_VMASKMOVPD = 1005,
    X86_INS_VMASKMOVPS = 1006,
    X86_INS_VMAXPD = 1007,
    X86_INS_VMAXPS = 1008,
    X86_INS_VMAXSD = 1009,
    X86_INS_VMAXSS = 1010,
    X86_INS_VMCALL = 1011,
    X86_INS_VMCLEAR = 1012,
    X86_INS_VMFUNC = 1013,
    X86_INS_VMINPD = 1014,
    X86_INS_VMINPS = 1015,
    X86_INS_VMINSD = 1016,
    X86_INS_VMINSS = 1017,
    X86_INS_VMLAUNCH = 1018,
    X86_INS_VMLOAD = 1019,
    X86_INS_VMMCALL = 1020,
    X86_INS_VMOVQ = 1021,
    X86_INS_VMOVAPD = 1022,
    X86_INS_VMOVAPS = 1023,
    X86_INS_VMOVDDUP = 1024,
    X86_INS_VMOVD = 1025,
    X86_INS_VMOVDQA32 = 1026,
    X86_INS_VMOVDQA64 = 1027,
    X86_INS_VMOVDQA = 1028,
    X86_INS_VMOVDQU16 = 1029,
    X86_INS_VMOVDQU32 = 1030,
    X86_INS_VMOVDQU64 = 1031,
    X86_INS_VMOVDQU8 = 1032,
    X86_INS_VMOVDQU = 1033,
    X86_INS_VMOVHLPS = 1034,
    X86_INS_VMOVHPD = 1035,
    X86_INS_VMOVHPS = 1036,
    X86_INS_VMOVLHPS = 1037,
    X86_INS_VMOVLPD = 1038,
    X86_INS_VMOVLPS = 1039,
    X86_INS_VMOVMSKPD = 1040,
    X86_INS_VMOVMSKPS = 1041,
    X86_INS_VMOVNTDQA = 1042,
    X86_INS_VMOVNTDQ = 1043,
    X86_INS_VMOVNTPD = 1044,
    X86_INS_VMOVNTPS = 1045,
    X86_INS_VMOVSD = 1046,
    X86_INS_VMOVSHDUP = 1047,
    X86_INS_VMOVSLDUP = 1048,
    X86_INS_VMOVSS = 1049,
    X86_INS_VMOVUPD = 1050,
    X86_INS_VMOVUPS = 1051,
    X86_INS_VMPSADBW = 1052,
    X86_INS_VMPTRLD = 1053,
    X86_INS_VMPTRST = 1054,
    X86_INS_VMREAD = 1055,
    X86_INS_VMRESUME = 1056,
    X86_INS_VMRUN = 1057,
    X86_INS_VMSAVE = 1058,
    X86_INS_VMULPD = 1059,
    X86_INS_VMULPS = 1060,
    X86_INS_VMULSD = 1061,
    X86_INS_VMULSS = 1062,
    X86_INS_VMWRITE = 1063,
    X86_INS_VMXOFF = 1064,
    X86_INS_VMXON = 1065,
    X86_INS_VORPD = 1066,
    X86_INS_VORPS = 1067,
    X86_INS_VP4DPWSSDS = 1068,
    X86_INS_VP4DPWSSD = 1069,
    X86_INS_VPABSB = 1070,
    X86_INS_VPABSD = 1071,
    X86_INS_VPABSQ = 1072,
    X86_INS_VPABSW = 1073,
    X86_INS_VPACKSSDW = 1074,
    X86_INS_VPACKSSWB = 1075,
    X86_INS_VPACKUSDW = 1076,
    X86_INS_VPACKUSWB = 1077,
    X86_INS_VPADDB = 1078,
    X86_INS_VPADDD = 1079,
    X86_INS_VPADDQ = 1080,
    X86_INS_VPADDSB = 1081,
    X86_INS_VPADDSW = 1082,
    X86_INS_VPADDUSB = 1083,
    X86_INS_VPADDUSW = 1084,
    X86_INS_VPADDW = 1085,
    X86_INS_VPALIGNR = 1086,
    X86_INS_VPANDD = 1087,
    X86_INS_VPANDND = 1088,
    X86_INS_VPANDNQ = 1089,
    X86_INS_VPANDN = 1090,
    X86_INS_VPANDQ = 1091,
    X86_INS_VPAND = 1092,
    X86_INS_VPAVGB = 1093,
    X86_INS_VPAVGW = 1094,
    X86_INS_VPBLENDD = 1095,
    X86_INS_VPBLENDMB = 1096,
    X86_INS_VPBLENDMD = 1097,
    X86_INS_VPBLENDMQ = 1098,
    X86_INS_VPBLENDMW = 1099,
    X86_INS_VPBLENDVB = 1100,
    X86_INS_VPBLENDW = 1101,
    X86_INS_VPBROADCASTB = 1102,
    X86_INS_VPBROADCASTD = 1103,
    X86_INS_VPBROADCASTMB2Q = 1104,
    X86_INS_VPBROADCASTMW2D = 1105,
    X86_INS_VPBROADCASTQ = 1106,
    X86_INS_VPBROADCASTW = 1107,
    X86_INS_VPCLMULQDQ = 1108,
    X86_INS_VPCMOV = 1109,
    X86_INS_VPCMP = 1110,
    X86_INS_VPCMPB = 1111,
    X86_INS_VPCMPD = 1112,
    X86_INS_VPCMPEQB = 1113,
    X86_INS_VPCMPEQD = 1114,
    X86_INS_VPCMPEQQ = 1115,
    X86_INS_VPCMPEQW = 1116,
    X86_INS_VPCMPESTRI = 1117,
    X86_INS_VPCMPESTRM = 1118,
    X86_INS_VPCMPGTB = 1119,
    X86_INS_VPCMPGTD = 1120,
    X86_INS_VPCMPGTQ = 1121,
    X86_INS_VPCMPGTW = 1122,
    X86_INS_VPCMPISTRI = 1123,
    X86_INS_VPCMPISTRM = 1124,
    X86_INS_VPCMPQ = 1125,
    X86_INS_VPCMPUB = 1126,
    X86_INS_VPCMPUD = 1127,
    X86_INS_VPCMPUQ = 1128,
    X86_INS_VPCMPUW = 1129,
    X86_INS_VPCMPW = 1130,
    X86_INS_VPCOM = 1131,
    X86_INS_VPCOMB = 1132,
    X86_INS_VPCOMD = 1133,
    X86_INS_VPCOMPRESSB = 1134,
    X86_INS_VPCOMPRESSD = 1135,
    X86_INS_VPCOMPRESSQ = 1136,
    X86_INS_VPCOMPRESSW = 1137,
    X86_INS_VPCOMQ = 1138,
    X86_INS_VPCOMUB = 1139,
    X86_INS_VPCOMUD = 1140,
    X86_INS_VPCOMUQ = 1141,
    X86_INS_VPCOMUW = 1142,
    X86_INS_VPCOMW = 1143,
    X86_INS_VPCONFLICTD = 1144,
    X86_INS_VPCONFLICTQ = 1145,
    X86_INS_VPDPBUSDS = 1146,
    X86_INS_VPDPBUSD = 1147,
    X86_INS_VPDPWSSDS = 1148,
    X86_INS_VPDPWSSD = 1149,
    X86_INS_VPERM2F128 = 1150,
    X86_INS_VPERM2I128 = 1151,
    X86_INS_VPERMB = 1152,
    X86_INS_VPERMD = 1153,
    X86_INS_VPERMI2B = 1154,
    X86_INS_VPERMI2D = 1155,
    X86_INS_VPERMI2PD = 1156,
    X86_INS_VPERMI2PS = 1157,
    X86_INS_VPERMI2Q = 1158,
    X86_INS_VPERMI2W = 1159,
    X86_INS_VPERMIL2PD = 1160,
    X86_INS_VPERMILPD = 1161,
    X86_INS_VPERMIL2PS = 1162,
    X86_INS_VPERMILPS = 1163,
    X86_INS_VPERMPD = 1164,
    X86_INS_VPERMPS = 1165,
    X86_INS_VPERMQ = 1166,
    X86_INS_VPERMT2B = 1167,
    X86_INS_VPERMT2D = 1168,
    X86_INS_VPERMT2PD = 1169,
    X86_INS_VPERMT2PS = 1170,
    X86_INS_VPERMT2Q = 1171,
    X86_INS_VPERMT2W = 1172,
    X86_INS_VPERMW = 1173,
    X86_INS_VPEXPANDB = 1174,
    X86_INS_VPEXPANDD = 1175,
    X86_INS_VPEXPANDQ = 1176,
    X86_INS_VPEXPANDW = 1177,
    X86_INS_VPEXTRB = 1178,
    X86_INS_VPEXTRD = 1179,
    X86_INS_VPEXTRQ = 1180,
    X86_INS_VPEXTRW = 1181,
    X86_INS_VPGATHERDD = 1182,
    X86_INS_VPGATHERDQ = 1183,
    X86_INS_VPGATHERQD = 1184,
    X86_INS_VPGATHERQQ = 1185,
    X86_INS_VPHADDBD = 1186,
    X86_INS_VPHADDBQ = 1187,
    X86_INS_VPHADDBW = 1188,
    X86_INS_VPHADDDQ = 1189,
    X86_INS_VPHADDD = 1190,
    X86_INS_VPHADDSW = 1191,
    X86_INS_VPHADDUBD = 1192,
    X86_INS_VPHADDUBQ = 1193,
    X86_INS_VPHADDUBW = 1194,
    X86_INS_VPHADDUDQ = 1195,
    X86_INS_VPHADDUWD = 1196,
    X86_INS_VPHADDUWQ = 1197,
    X86_INS_VPHADDWD = 1198,
    X86_INS_VPHADDWQ = 1199,
    X86_INS_VPHADDW = 1200,
    X86_INS_VPHMINPOSUW = 1201,
    X86_INS_VPHSUBBW = 1202,
    X86_INS_VPHSUBDQ = 1203,
    X86_INS_VPHSUBD = 1204,
    X86_INS_VPHSUBSW = 1205,
    X86_INS_VPHSUBWD = 1206,
    X86_INS_VPHSUBW = 1207,
    X86_INS_VPINSRB = 1208,
    X86_INS_VPINSRD = 1209,
    X86_INS_VPINSRQ = 1210,
    X86_INS_VPINSRW = 1211,
    X86_INS_VPLZCNTD = 1212,
    X86_INS_VPLZCNTQ = 1213,
    X86_INS_VPMACSDD = 1214,
    X86_INS_VPMACSDQH = 1215,
    X86_INS_VPMACSDQL = 1216,
    X86_INS_VPMACSSDD = 1217,
    X86_INS_VPMACSSDQH = 1218,
    X86_INS_VPMACSSDQL = 1219,
    X86_INS_VPMACSSWD = 1220,
    X86_INS_VPMACSSWW = 1221,
    X86_INS_VPMACSWD = 1222,
    X86_INS_VPMACSWW = 1223,
    X86_INS_VPMADCSSWD = 1224,
    X86_INS_VPMADCSWD = 1225,
    X86_INS_VPMADD52HUQ = 1226,
    X86_INS_VPMADD52LUQ = 1227,
    X86_INS_VPMADDUBSW = 1228,
    X86_INS_VPMADDWD = 1229,
    X86_INS_VPMASKMOVD = 1230,
    X86_INS_VPMASKMOVQ = 1231,
    X86_INS_VPMAXSB = 1232,
    X86_INS_VPMAXSD = 1233,
    X86_INS_VPMAXSQ = 1234,
    X86_INS_VPMAXSW = 1235,
    X86_INS_VPMAXUB = 1236,
    X86_INS_VPMAXUD = 1237,
    X86_INS_VPMAXUQ = 1238,
    X86_INS_VPMAXUW = 1239,
    X86_INS_VPMINSB = 1240,
    X86_INS_VPMINSD = 1241,
    X86_INS_VPMINSQ = 1242,
    X86_INS_VPMINSW = 1243,
    X86_INS_VPMINUB = 1244,
    X86_INS_VPMINUD = 1245,
    X86_INS_VPMINUQ = 1246,
    X86_INS_VPMINUW = 1247,
    X86_INS_VPMOVB2M = 1248,
    X86_INS_VPMOVD2M = 1249,
    X86_INS_VPMOVDB = 1250,
    X86_INS_VPMOVDW = 1251,
    X86_INS_VPMOVM2B = 1252,
    X86_INS_VPMOVM2D = 1253,
    X86_INS_VPMOVM2Q = 1254,
    X86_INS_VPMOVM2W = 1255,
    X86_INS_VPMOVMSKB = 1256,
    X86_INS_VPMOVQ2M = 1257,
    X86_INS_VPMOVQB = 1258,
    X86_INS_VPMOVQD = 1259,
    X86_INS_VPMOVQW = 1260,
    X86_INS_VPMOVSDB = 1261,
    X86_INS_VPMOVSDW = 1262,
    X86_INS_VPMOVSQB = 1263,
    X86_INS_VPMOVSQD = 1264,
    X86_INS_VPMOVSQW = 1265,
    X86_INS_VPMOVSWB = 1266,
    X86_INS_VPMOVSXBD = 1267,
    X86_INS_VPMOVSXBQ = 1268,
    X86_INS_VPMOVSXBW = 1269,
    X86_INS_VPMOVSXDQ = 1270,
    X86_INS_VPMOVSXWD = 1271,
    X86_INS_VPMOVSXWQ = 1272,
    X86_INS_VPMOVUSDB = 1273,
    X86_INS_VPMOVUSDW = 1274,
    X86_INS_VPMOVUSQB = 1275,
    X86_INS_VPMOVUSQD = 1276,
    X86_INS_VPMOVUSQW = 1277,
    X86_INS_VPMOVUSWB = 1278,
    X86_INS_VPMOVW2M = 1279,
    X86_INS_VPMOVWB = 1280,
    X86_INS_VPMOVZXBD = 1281,
    X86_INS_VPMOVZXBQ = 1282,
    X86_INS_VPMOVZXBW = 1283,
    X86_INS_VPMOVZXDQ = 1284,
    X86_INS_VPMOVZXWD = 1285,
    X86_INS_VPMOVZXWQ = 1286,
    X86_INS_VPMULDQ = 1287,
    X86_INS_VPMULHRSW = 1288,
    X86_INS_VPMULHUW = 1289,
    X86_INS_VPMULHW = 1290,
    X86_INS_VPMULLD = 1291,
    X86_INS_VPMULLQ = 1292,
    X86_INS_VPMULLW = 1293,
    X86_INS_VPMULTISHIFTQB = 1294,
    X86_INS_VPMULUDQ = 1295,
    X86_INS_VPOPCNTB = 1296,
    X86_INS_VPOPCNTD = 1297,
    X86_INS_VPOPCNTQ = 1298,
    X86_INS_VPOPCNTW = 1299,
    X86_INS_VPORD = 1300,
    X86_INS_VPORQ = 1301,
    X86_INS_VPOR = 1302,
    X86_INS_VPPERM = 1303,
    X86_INS_VPROLD = 1304,
    X86_INS_VPROLQ = 1305,
    X86_INS_VPROLVD = 1306,
    X86_INS_VPROLVQ = 1307,
    X86_INS_VPRORD = 1308,
    X86_INS_VPRORQ = 1309,
    X86_INS_VPRORVD = 1310,
    X86_INS_VPRORVQ = 1311,
    X86_INS_VPROTB = 1312,
    X86_INS_VPROTD = 1313,
    X86_INS_VPROTQ = 1314,
    X86_INS_VPROTW = 1315,
    X86_INS_VPSADBW = 1316,
    X86_INS_VPSCATTERDD = 1317,
    X86_INS_VPSCATTERDQ = 1318,
    X86_INS_VPSCATTERQD = 1319,
    X86_INS_VPSCATTERQQ = 1320,
    X86_INS_VPSHAB = 1321,
    X86_INS_VPSHAD = 1322,
    X86_INS_VPSHAQ = 1323,
    X86_INS_VPSHAW = 1324,
    X86_INS_VPSHLB = 1325,
    X86_INS_VPSHLDD = 1326,
    X86_INS_VPSHLDQ = 1327,
    X86_INS_VPSHLDVD = 1328,
    X86_INS_VPSHLDVQ = 1329,
    X86_INS_VPSHLDVW = 1330,
    X86_INS_VPSHLDW = 1331,
    X86_INS_VPSHLD = 1332,
    X86_INS_VPSHLQ = 1333,
    X86_INS_VPSHLW = 1334,
    X86_INS_VPSHRDD = 1335,
    X86_INS_VPSHRDQ = 1336,
    X86_INS_VPSHRDVD = 1337,
    X86_INS_VPSHRDVQ = 1338,
    X86_INS_VPSHRDVW = 1339,
    X86_INS_VPSHRDW = 1340,
    X86_INS_VPSHUFBITQMB = 1341,
    X86_INS_VPSHUFB = 1342,
    X86_INS_VPSHUFD = 1343,
    X86_INS_VPSHUFHW = 1344,
    X86_INS_VPSHUFLW = 1345,
    X86_INS_VPSIGNB = 1346,
    X86_INS_VPSIGND = 1347,
    X86_INS_VPSIGNW = 1348,
    X86_INS_VPSLLDQ = 1349,
    X86_INS_VPSLLD = 1350,
    X86_INS_VPSLLQ = 1351,
    X86_INS_VPSLLVD = 1352,
    X86_INS_VPSLLVQ = 1353,
    X86_INS_VPSLLVW = 1354,
    X86_INS_VPSLLW = 1355,
    X86_INS_VPSRAD = 1356,
    X86_INS_VPSRAQ = 1357,
    X86_INS_VPSRAVD = 1358,
    X86_INS_VPSRAVQ = 1359,
    X86_INS_VPSRAVW = 1360,
    X86_INS_VPSRAW = 1361,
    X86_INS_VPSRLDQ = 1362,
    X86_INS_VPSRLD = 1363,
    X86_INS_VPSRLQ = 1364,
    X86_INS_VPSRLVD = 1365,
    X86_INS_VPSRLVQ = 1366,
    X86_INS_VPSRLVW = 1367,
    X86_INS_VPSRLW = 1368,
    X86_INS_VPSUBB = 1369,
    X86_INS_VPSUBD = 1370,
    X86_INS_VPSUBQ = 1371,
    X86_INS_VPSUBSB = 1372,
    X86_INS_VPSUBSW = 1373,
    X86_INS_VPSUBUSB = 1374,
    X86_INS_VPSUBUSW = 1375,
    X86_INS_VPSUBW = 1376,
    X86_INS_VPTERNLOGD = 1377,
    X86_INS_VPTERNLOGQ = 1378,
    X86_INS_VPTESTMB = 1379,
    X86_INS_VPTESTMD = 1380,
    X86_INS_VPTESTMQ = 1381,
    X86_INS_VPTESTMW = 1382,
    X86_INS_VPTESTNMB = 1383,
    X86_INS_VPTESTNMD = 1384,
    X86_INS_VPTESTNMQ = 1385,
    X86_INS_VPTESTNMW = 1386,
    X86_INS_VPTEST = 1387,
    X86_INS_VPUNPCKHBW = 1388,
    X86_INS_VPUNPCKHDQ = 1389,
    X86_INS_VPUNPCKHQDQ = 1390,
    X86_INS_VPUNPCKHWD = 1391,
    X86_INS_VPUNPCKLBW = 1392,
    X86_INS_VPUNPCKLDQ = 1393,
    X86_INS_VPUNPCKLQDQ = 1394,
    X86_INS_VPUNPCKLWD = 1395,
    X86_INS_VPXORD = 1396,
    X86_INS_VPXORQ = 1397,
    X86_INS_VPXOR = 1398,
    X86_INS_VRANGEPD = 1399,
    X86_INS_VRANGEPS = 1400,
    X86_INS_VRANGESD = 1401,
    X86_INS_VRANGESS = 1402,
    X86_INS_VRCP14PD = 1403,
    X86_INS_VRCP14PS = 1404,
    X86_INS_VRCP14SD = 1405,
    X86_INS_VRCP14SS = 1406,
    X86_INS_VRCP28PD = 1407,
    X86_INS_VRCP28PS = 1408,
    X86_INS_VRCP28SD = 1409,
    X86_INS_VRCP28SS = 1410,
    X86_INS_VRCPPS = 1411,
    X86_INS_VRCPSS = 1412,
    X86_INS_VREDUCEPD = 1413,
    X86_INS_VREDUCEPS = 1414,
    X86_INS_VREDUCESD = 1415,
    X86_INS_VREDUCESS = 1416,
    X86_INS_VRNDSCALEPD = 1417,
    X86_INS_VRNDSCALEPS = 1418,
    X86_INS_VRNDSCALESD = 1419,
    X86_INS_VRNDSCALESS = 1420,
    X86_INS_VROUNDPD = 1421,
    X86_INS_VROUNDPS = 1422,
    X86_INS_VROUNDSD = 1423,
    X86_INS_VROUNDSS = 1424,
    X86_INS_VRSQRT14PD = 1425,
    X86_INS_VRSQRT14PS = 1426,
    X86_INS_VRSQRT14SD = 1427,
    X86_INS_VRSQRT14SS = 1428,
    X86_INS_VRSQRT28PD = 1429,
    X86_INS_VRSQRT28PS = 1430,
    X86_INS_VRSQRT28SD = 1431,
    X86_INS_VRSQRT28SS = 1432,
    X86_INS_VRSQRTPS = 1433,
    X86_INS_VRSQRTSS = 1434,
    X86_INS_VSCALEFPD = 1435,
    X86_INS_VSCALEFPS = 1436,
    X86_INS_VSCALEFSD = 1437,
    X86_INS_VSCALEFSS = 1438,
    X86_INS_VSCATTERDPD = 1439,
    X86_INS_VSCATTERDPS = 1440,
    X86_INS_VSCATTERPF0DPD = 1441,
    X86_INS_VSCATTERPF0DPS = 1442,
    X86_INS_VSCATTERPF0QPD = 1443,
    X86_INS_VSCATTERPF0QPS = 1444,
    X86_INS_VSCATTERPF1DPD = 1445,
    X86_INS_VSCATTERPF1DPS = 1446,
    X86_INS_VSCATTERPF1QPD = 1447,
    X86_INS_VSCATTERPF1QPS = 1448,
    X86_INS_VSCATTERQPD = 1449,
    X86_INS_VSCATTERQPS = 1450,
    X86_INS_VSHUFF32X4 = 1451,
    X86_INS_VSHUFF64X2 = 1452,
    X86_INS_VSHUFI32X4 = 1453,
    X86_INS_VSHUFI64X2 = 1454,
    X86_INS_VSHUFPD = 1455,
    X86_INS_VSHUFPS = 1456,
    X86_INS_VSQRTPD = 1457,
    X86_INS_VSQRTPS = 1458,
    X86_INS_VSQRTSD = 1459,
    X86_INS_VSQRTSS = 1460,
    X86_INS_VSTMXCSR = 1461,
    X86_INS_VSUBPD = 1462,
    X86_INS_VSUBPS = 1463,
    X86_INS_VSUBSD = 1464,
    X86_INS_VSUBSS = 1465,
    X86_INS_VTESTPD = 1466,
    X86_INS_VTESTPS = 1467,
    X86_INS_VUCOMISD = 1468,
    X86_INS_VUCOMISS = 1469,
    X86_INS_VUNPCKHPD = 1470,
    X86_INS_VUNPCKHPS = 1471,
    X86_INS_VUNPCKLPD = 1472,
    X86_INS_VUNPCKLPS = 1473,
    X86_INS_VXORPD = 1474,
    X86_INS_VXORPS = 1475,
    X86_INS_VZEROALL = 1476,
    X86_INS_VZEROUPPER = 1477,
    X86_INS_WAIT = 1478,
    X86_INS_WBINVD = 1479,
    X86_INS_WBNOINVD = 1480,
    X86_INS_WRFSBASE = 1481,
    X86_INS_WRGSBASE = 1482,
    X86_INS_WRMSR = 1483,
    X86_INS_WRPKRU = 1484,
    X86_INS_WRSSD = 1485,
    X86_INS_WRSSQ = 1486,
    X86_INS_WRUSSD = 1487,
    X86_INS_WRUSSQ = 1488,
    X86_INS_XABORT = 1489,
    X86_INS_XACQUIRE = 1490,
    X86_INS_XADD = 1491,
    X86_INS_XBEGIN = 1492,
    X86_INS_XCHG = 1493,
    X86_INS_FXCH = 1494,
    X86_INS_XCRYPTCBC = 1495,
    X86_INS_XCRYPTCFB = 1496,
    X86_INS_XCRYPTCTR = 1497,
    X86_INS_XCRYPTECB = 1498,
    X86_INS_XCRYPTOFB = 1499,
    X86_INS_XEND = 1500,
    X86_INS_XGETBV = 1501,
    X86_INS_XLATB = 1502,
    X86_INS_XOR = 1503,
    X86_INS_XORPD = 1504,
    X86_INS_XORPS = 1505,
    X86_INS_XRELEASE = 1506,
    X86_INS_XRSTOR = 1507,
    X86_INS_XRSTOR64 = 1508,
    X86_INS_XRSTORS = 1509,
    X86_INS_XRSTORS64 = 1510,
    X86_INS_XSAVE = 1511,
    X86_INS_XSAVE64 = 1512,
    X86_INS_XSAVEC = 1513,
    X86_INS_XSAVEC64 = 1514,
    X86_INS_XSAVEOPT = 1515,
    X86_INS_XSAVEOPT64 = 1516,
    X86_INS_XSAVES = 1517,
    X86_INS_XSAVES64 = 1518,
    X86_INS_XSETBV = 1519,
    X86_INS_XSHA1 = 1520,
    X86_INS_XSHA256 = 1521,
    X86_INS_XSTORE = 1522,
    X86_INS_XTEST = 1523,
    X86_INS_ENDING = 1524,
}
pub mod x86_insn_group {
    #[doc = " Group of X86 instructions"]
    pub type Type = libc::c_uint;
    #[doc = "< = CS_GRP_INVALID"]
    pub const X86_GRP_INVALID: Type = 0;
    #[doc = "< = CS_GRP_JUMP"]
    pub const X86_GRP_JUMP: Type = 1;
    #[doc = "< = CS_GRP_CALL"]
    pub const X86_GRP_CALL: Type = 2;
    #[doc = "< = CS_GRP_RET"]
    pub const X86_GRP_RET: Type = 3;
    #[doc = "< = CS_GRP_INT"]
    pub const X86_GRP_INT: Type = 4;
    #[doc = "< = CS_GRP_IRET"]
    pub const X86_GRP_IRET: Type = 5;
    #[doc = "< = CS_GRP_PRIVILEGE"]
    pub const X86_GRP_PRIVILEGE: Type = 6;
    #[doc = "< = CS_GRP_BRANCH_RELATIVE"]
    pub const X86_GRP_BRANCH_RELATIVE: Type = 7;
    #[doc = "< all virtualization instructions (VT-x + AMD-V)"]
    pub const X86_GRP_VM: Type = 128;
    pub const X86_GRP_3DNOW: Type = 129;
    pub const X86_GRP_AES: Type = 130;
    pub const X86_GRP_ADX: Type = 131;
    pub const X86_GRP_AVX: Type = 132;
    pub const X86_GRP_AVX2: Type = 133;
    pub const X86_GRP_AVX512: Type = 134;
    pub const X86_GRP_BMI: Type = 135;
    pub const X86_GRP_BMI2: Type = 136;
    pub const X86_GRP_CMOV: Type = 137;
    pub const X86_GRP_F16C: Type = 138;
    pub const X86_GRP_FMA: Type = 139;
    pub const X86_GRP_FMA4: Type = 140;
    pub const X86_GRP_FSGSBASE: Type = 141;
    pub const X86_GRP_HLE: Type = 142;
    pub const X86_GRP_MMX: Type = 143;
    pub const X86_GRP_MODE32: Type = 144;
    pub const X86_GRP_MODE64: Type = 145;
    pub const X86_GRP_RTM: Type = 146;
    pub const X86_GRP_SHA: Type = 147;
    pub const X86_GRP_SSE1: Type = 148;
    pub const X86_GRP_SSE2: Type = 149;
    pub const X86_GRP_SSE3: Type = 150;
    pub const X86_GRP_SSE41: Type = 151;
    pub const X86_GRP_SSE42: Type = 152;
    pub const X86_GRP_SSE4A: Type = 153;
    pub const X86_GRP_SSSE3: Type = 154;
    pub const X86_GRP_PCLMUL: Type = 155;
    pub const X86_GRP_XOP: Type = 156;
    pub const X86_GRP_CDI: Type = 157;
    pub const X86_GRP_ERI: Type = 158;
    pub const X86_GRP_TBM: Type = 159;
    pub const X86_GRP_16BITMODE: Type = 160;
    pub const X86_GRP_NOT64BITMODE: Type = 161;
    pub const X86_GRP_SGX: Type = 162;
    pub const X86_GRP_DQI: Type = 163;
    pub const X86_GRP_BWI: Type = 164;
    pub const X86_GRP_PFI: Type = 165;
    pub const X86_GRP_VLX: Type = 166;
    pub const X86_GRP_SMAP: Type = 167;
    pub const X86_GRP_NOVLX: Type = 168;
    pub const X86_GRP_FPU: Type = 169;
    pub const X86_GRP_ENDING: Type = 170;
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum xcore_op_type {
    #[doc = "< = CS_OP_INVALID (Uninitialized)."]
    XCORE_OP_INVALID = 0,
    #[doc = "< = CS_OP_REG (Register operand)."]
    XCORE_OP_REG = 1,
    #[doc = "< = CS_OP_IMM (Immediate operand)."]
    XCORE_OP_IMM = 2,
    #[doc = "< = CS_OP_MEM (Memory operand)."]
    XCORE_OP_MEM = 128,
}
pub mod xcore_reg {
    #[doc = " XCore registers"]
    pub type Type = libc::c_uint;
    pub const XCORE_REG_INVALID: Type = 0;
    pub const XCORE_REG_CP: Type = 1;
    pub const XCORE_REG_DP: Type = 2;
    pub const XCORE_REG_LR: Type = 3;
    pub const XCORE_REG_SP: Type = 4;
    pub const XCORE_REG_R0: Type = 5;
    pub const XCORE_REG_R1: Type = 6;
    pub const XCORE_REG_R2: Type = 7;
    pub const XCORE_REG_R3: Type = 8;
    pub const XCORE_REG_R4: Type = 9;
    pub const XCORE_REG_R5: Type = 10;
    pub const XCORE_REG_R6: Type = 11;
    pub const XCORE_REG_R7: Type = 12;
    pub const XCORE_REG_R8: Type = 13;
    pub const XCORE_REG_R9: Type = 14;
    pub const XCORE_REG_R10: Type = 15;
    pub const XCORE_REG_R11: Type = 16;
    #[doc = "< pc"]
    pub const XCORE_REG_PC: Type = 17;
    #[doc = "< save pc"]
    pub const XCORE_REG_SCP: Type = 18;
    pub const XCORE_REG_SSR: Type = 19;
    pub const XCORE_REG_ET: Type = 20;
    pub const XCORE_REG_ED: Type = 21;
    pub const XCORE_REG_SED: Type = 22;
    pub const XCORE_REG_KEP: Type = 23;
    pub const XCORE_REG_KSP: Type = 24;
    pub const XCORE_REG_ID: Type = 25;
    pub const XCORE_REG_ENDING: Type = 26;
}
#[doc = " Instruction's operand referring to memory\n This is associated with XCORE_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcore_op_mem {
    #[doc = "< base register, can be safely interpreted as\n< a value of type `xcore_reg`, but it is only\n< one byte wide"]
    pub base: u8,
    #[doc = "< index register, same conditions apply here"]
    pub index: u8,
    #[doc = "< displacement/offset value"]
    pub disp: i32,
    #[doc = "< +1: forward, -1: backward"]
    pub direct: libc::c_int,
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_xcore_op {
    #[doc = "< operand type"]
    pub type_: xcore_op_type,
    pub __bindgen_anon_1: cs_xcore_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_xcore_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: xcore_reg::Type,
    #[doc = "< immediate value for IMM operand"]
    pub imm: i32,
    #[doc = "< base/disp value for MEM operand"]
    pub mem: xcore_op_mem,
}
impl ::core::fmt::Debug for cs_xcore_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_xcore_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_xcore_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_xcore_op {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_xcore {
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_xcore_op; 8usize],
}
impl ::core::fmt::Debug for cs_xcore {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_xcore {{ operands: {:?} }}", self.operands)
    }
}
#[repr(u32)]
#[doc = " XCore instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum xcore_insn {
    XCORE_INS_INVALID = 0,
    XCORE_INS_ADD = 1,
    XCORE_INS_ANDNOT = 2,
    XCORE_INS_AND = 3,
    XCORE_INS_ASHR = 4,
    XCORE_INS_BAU = 5,
    XCORE_INS_BITREV = 6,
    XCORE_INS_BLA = 7,
    XCORE_INS_BLAT = 8,
    XCORE_INS_BL = 9,
    XCORE_INS_BF = 10,
    XCORE_INS_BT = 11,
    XCORE_INS_BU = 12,
    XCORE_INS_BRU = 13,
    XCORE_INS_BYTEREV = 14,
    XCORE_INS_CHKCT = 15,
    XCORE_INS_CLRE = 16,
    XCORE_INS_CLRPT = 17,
    XCORE_INS_CLRSR = 18,
    XCORE_INS_CLZ = 19,
    XCORE_INS_CRC8 = 20,
    XCORE_INS_CRC32 = 21,
    XCORE_INS_DCALL = 22,
    XCORE_INS_DENTSP = 23,
    XCORE_INS_DGETREG = 24,
    XCORE_INS_DIVS = 25,
    XCORE_INS_DIVU = 26,
    XCORE_INS_DRESTSP = 27,
    XCORE_INS_DRET = 28,
    XCORE_INS_ECALLF = 29,
    XCORE_INS_ECALLT = 30,
    XCORE_INS_EDU = 31,
    XCORE_INS_EEF = 32,
    XCORE_INS_EET = 33,
    XCORE_INS_EEU = 34,
    XCORE_INS_ENDIN = 35,
    XCORE_INS_ENTSP = 36,
    XCORE_INS_EQ = 37,
    XCORE_INS_EXTDP = 38,
    XCORE_INS_EXTSP = 39,
    XCORE_INS_FREER = 40,
    XCORE_INS_FREET = 41,
    XCORE_INS_GETD = 42,
    XCORE_INS_GET = 43,
    XCORE_INS_GETN = 44,
    XCORE_INS_GETR = 45,
    XCORE_INS_GETSR = 46,
    XCORE_INS_GETST = 47,
    XCORE_INS_GETTS = 48,
    XCORE_INS_INCT = 49,
    XCORE_INS_INIT = 50,
    XCORE_INS_INPW = 51,
    XCORE_INS_INSHR = 52,
    XCORE_INS_INT = 53,
    XCORE_INS_IN = 54,
    XCORE_INS_KCALL = 55,
    XCORE_INS_KENTSP = 56,
    XCORE_INS_KRESTSP = 57,
    XCORE_INS_KRET = 58,
    XCORE_INS_LADD = 59,
    XCORE_INS_LD16S = 60,
    XCORE_INS_LD8U = 61,
    XCORE_INS_LDA16 = 62,
    XCORE_INS_LDAP = 63,
    XCORE_INS_LDAW = 64,
    XCORE_INS_LDC = 65,
    XCORE_INS_LDW = 66,
    XCORE_INS_LDIVU = 67,
    XCORE_INS_LMUL = 68,
    XCORE_INS_LSS = 69,
    XCORE_INS_LSUB = 70,
    XCORE_INS_LSU = 71,
    XCORE_INS_MACCS = 72,
    XCORE_INS_MACCU = 73,
    XCORE_INS_MJOIN = 74,
    XCORE_INS_MKMSK = 75,
    XCORE_INS_MSYNC = 76,
    XCORE_INS_MUL = 77,
    XCORE_INS_NEG = 78,
    XCORE_INS_NOT = 79,
    XCORE_INS_OR = 80,
    XCORE_INS_OUTCT = 81,
    XCORE_INS_OUTPW = 82,
    XCORE_INS_OUTSHR = 83,
    XCORE_INS_OUTT = 84,
    XCORE_INS_OUT = 85,
    XCORE_INS_PEEK = 86,
    XCORE_INS_REMS = 87,
    XCORE_INS_REMU = 88,
    XCORE_INS_RETSP = 89,
    XCORE_INS_SETCLK = 90,
    XCORE_INS_SET = 91,
    XCORE_INS_SETC = 92,
    XCORE_INS_SETD = 93,
    XCORE_INS_SETEV = 94,
    XCORE_INS_SETN = 95,
    XCORE_INS_SETPSC = 96,
    XCORE_INS_SETPT = 97,
    XCORE_INS_SETRDY = 98,
    XCORE_INS_SETSR = 99,
    XCORE_INS_SETTW = 100,
    XCORE_INS_SETV = 101,
    XCORE_INS_SEXT = 102,
    XCORE_INS_SHL = 103,
    XCORE_INS_SHR = 104,
    XCORE_INS_SSYNC = 105,
    XCORE_INS_ST16 = 106,
    XCORE_INS_ST8 = 107,
    XCORE_INS_STW = 108,
    XCORE_INS_SUB = 109,
    XCORE_INS_SYNCR = 110,
    XCORE_INS_TESTCT = 111,
    XCORE_INS_TESTLCL = 112,
    XCORE_INS_TESTWCT = 113,
    XCORE_INS_TSETMR = 114,
    XCORE_INS_START = 115,
    XCORE_INS_WAITEF = 116,
    XCORE_INS_WAITET = 117,
    XCORE_INS_WAITEU = 118,
    XCORE_INS_XOR = 119,
    XCORE_INS_ZEXT = 120,
    XCORE_INS_ENDING = 121,
}
pub mod xcore_insn_group {
    #[doc = " Group of XCore instructions"]
    pub type Type = libc::c_uint;
    #[doc = "< = CS_GRP_INVALID"]
    pub const XCORE_GRP_INVALID: Type = 0;
    #[doc = "< = CS_GRP_JUMP"]
    pub const XCORE_GRP_JUMP: Type = 1;
    pub const XCORE_GRP_ENDING: Type = 2;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum tms320c64x_op_type {
    #[doc = "< = CS_OP_INVALID (Uninitialized)."]
    TMS320C64X_OP_INVALID = 0,
    #[doc = "< = CS_OP_REG (Register operand)."]
    TMS320C64X_OP_REG = 1,
    #[doc = "< = CS_OP_IMM (Immediate operand)."]
    TMS320C64X_OP_IMM = 2,
    #[doc = "< Register pair for double word ops"]
    TMS320C64X_OP_REGPAIR = 16,
    #[doc = "< = CS_OP_MEM (Memory operand)."]
    TMS320C64X_OP_MEM = 128,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum tms320c64x_mem_disp {
    TMS320C64X_MEM_DISP_INVALID = 0,
    TMS320C64X_MEM_DISP_CONSTANT = 1,
    TMS320C64X_MEM_DISP_REGISTER = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum tms320c64x_mem_dir {
    TMS320C64X_MEM_DIR_INVALID = 0,
    TMS320C64X_MEM_DIR_FW = 1,
    TMS320C64X_MEM_DIR_BW = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum tms320c64x_mem_mod {
    TMS320C64X_MEM_MOD_INVALID = 0,
    TMS320C64X_MEM_MOD_NO = 1,
    TMS320C64X_MEM_MOD_PRE = 2,
    TMS320C64X_MEM_MOD_POST = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tms320c64x_op_mem {
    #[doc = "< base register"]
    pub base: libc::c_uint,
    #[doc = "< displacement/offset value"]
    pub disp: libc::c_uint,
    #[doc = "< unit of base and offset register"]
    pub unit: libc::c_uint,
    #[doc = "< offset scaled"]
    pub scaled: libc::c_uint,
    #[doc = "< displacement type"]
    pub disptype: libc::c_uint,
    #[doc = "< direction"]
    pub direction: libc::c_uint,
    #[doc = "< modification"]
    pub modify: libc::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_tms320c64x_op {
    #[doc = "< operand type"]
    pub type_: tms320c64x_op_type,
    pub __bindgen_anon_1: cs_tms320c64x_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_tms320c64x_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand or first register for REGPAIR operand"]
    pub reg: libc::c_uint,
    #[doc = "< immediate value for IMM operand"]
    pub imm: i32,
    #[doc = "< base/disp value for MEM operand"]
    pub mem: tms320c64x_op_mem,
}
impl ::core::fmt::Debug for cs_tms320c64x_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_tms320c64x_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_tms320c64x_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_tms320c64x_op {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_tms320c64x {
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_tms320c64x_op; 8usize],
    pub condition: cs_tms320c64x__bindgen_ty_1,
    pub funit: cs_tms320c64x__bindgen_ty_2,
    pub parallel: libc::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_tms320c64x__bindgen_ty_1 {
    pub reg: libc::c_uint,
    pub zero: libc::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_tms320c64x__bindgen_ty_2 {
    pub unit: libc::c_uint,
    pub side: libc::c_uint,
    pub crosspath: libc::c_uint,
}
impl ::core::fmt::Debug for cs_tms320c64x {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_tms320c64x {{ operands: {:?}, condition: {:?}, funit: {:?}, parallel: {:?} }}",
            self.operands, self.condition, self.funit, self.parallel
        )
    }
}
pub mod tms320c64x_reg {
    pub type Type = libc::c_uint;
    pub const TMS320C64X_REG_INVALID: Type = 0;
    pub const TMS320C64X_REG_AMR: Type = 1;
    pub const TMS320C64X_REG_CSR: Type = 2;
    pub const TMS320C64X_REG_DIER: Type = 3;
    pub const TMS320C64X_REG_DNUM: Type = 4;
    pub const TMS320C64X_REG_ECR: Type = 5;
    pub const TMS320C64X_REG_GFPGFR: Type = 6;
    pub const TMS320C64X_REG_GPLYA: Type = 7;
    pub const TMS320C64X_REG_GPLYB: Type = 8;
    pub const TMS320C64X_REG_ICR: Type = 9;
    pub const TMS320C64X_REG_IER: Type = 10;
    pub const TMS320C64X_REG_IERR: Type = 11;
    pub const TMS320C64X_REG_ILC: Type = 12;
    pub const TMS320C64X_REG_IRP: Type = 13;
    pub const TMS320C64X_REG_ISR: Type = 14;
    pub const TMS320C64X_REG_ISTP: Type = 15;
    pub const TMS320C64X_REG_ITSR: Type = 16;
    pub const TMS320C64X_REG_NRP: Type = 17;
    pub const TMS320C64X_REG_NTSR: Type = 18;
    pub const TMS320C64X_REG_REP: Type = 19;
    pub const TMS320C64X_REG_RILC: Type = 20;
    pub const TMS320C64X_REG_SSR: Type = 21;
    pub const TMS320C64X_REG_TSCH: Type = 22;
    pub const TMS320C64X_REG_TSCL: Type = 23;
    pub const TMS320C64X_REG_TSR: Type = 24;
    pub const TMS320C64X_REG_A0: Type = 25;
    pub const TMS320C64X_REG_A1: Type = 26;
    pub const TMS320C64X_REG_A2: Type = 27;
    pub const TMS320C64X_REG_A3: Type = 28;
    pub const TMS320C64X_REG_A4: Type = 29;
    pub const TMS320C64X_REG_A5: Type = 30;
    pub const TMS320C64X_REG_A6: Type = 31;
    pub const TMS320C64X_REG_A7: Type = 32;
    pub const TMS320C64X_REG_A8: Type = 33;
    pub const TMS320C64X_REG_A9: Type = 34;
    pub const TMS320C64X_REG_A10: Type = 35;
    pub const TMS320C64X_REG_A11: Type = 36;
    pub const TMS320C64X_REG_A12: Type = 37;
    pub const TMS320C64X_REG_A13: Type = 38;
    pub const TMS320C64X_REG_A14: Type = 39;
    pub const TMS320C64X_REG_A15: Type = 40;
    pub const TMS320C64X_REG_A16: Type = 41;
    pub const TMS320C64X_REG_A17: Type = 42;
    pub const TMS320C64X_REG_A18: Type = 43;
    pub const TMS320C64X_REG_A19: Type = 44;
    pub const TMS320C64X_REG_A20: Type = 45;
    pub const TMS320C64X_REG_A21: Type = 46;
    pub const TMS320C64X_REG_A22: Type = 47;
    pub const TMS320C64X_REG_A23: Type = 48;
    pub const TMS320C64X_REG_A24: Type = 49;
    pub const TMS320C64X_REG_A25: Type = 50;
    pub const TMS320C64X_REG_A26: Type = 51;
    pub const TMS320C64X_REG_A27: Type = 52;
    pub const TMS320C64X_REG_A28: Type = 53;
    pub const TMS320C64X_REG_A29: Type = 54;
    pub const TMS320C64X_REG_A30: Type = 55;
    pub const TMS320C64X_REG_A31: Type = 56;
    pub const TMS320C64X_REG_B0: Type = 57;
    pub const TMS320C64X_REG_B1: Type = 58;
    pub const TMS320C64X_REG_B2: Type = 59;
    pub const TMS320C64X_REG_B3: Type = 60;
    pub const TMS320C64X_REG_B4: Type = 61;
    pub const TMS320C64X_REG_B5: Type = 62;
    pub const TMS320C64X_REG_B6: Type = 63;
    pub const TMS320C64X_REG_B7: Type = 64;
    pub const TMS320C64X_REG_B8: Type = 65;
    pub const TMS320C64X_REG_B9: Type = 66;
    pub const TMS320C64X_REG_B10: Type = 67;
    pub const TMS320C64X_REG_B11: Type = 68;
    pub const TMS320C64X_REG_B12: Type = 69;
    pub const TMS320C64X_REG_B13: Type = 70;
    pub const TMS320C64X_REG_B14: Type = 71;
    pub const TMS320C64X_REG_B15: Type = 72;
    pub const TMS320C64X_REG_B16: Type = 73;
    pub const TMS320C64X_REG_B17: Type = 74;
    pub const TMS320C64X_REG_B18: Type = 75;
    pub const TMS320C64X_REG_B19: Type = 76;
    pub const TMS320C64X_REG_B20: Type = 77;
    pub const TMS320C64X_REG_B21: Type = 78;
    pub const TMS320C64X_REG_B22: Type = 79;
    pub const TMS320C64X_REG_B23: Type = 80;
    pub const TMS320C64X_REG_B24: Type = 81;
    pub const TMS320C64X_REG_B25: Type = 82;
    pub const TMS320C64X_REG_B26: Type = 83;
    pub const TMS320C64X_REG_B27: Type = 84;
    pub const TMS320C64X_REG_B28: Type = 85;
    pub const TMS320C64X_REG_B29: Type = 86;
    pub const TMS320C64X_REG_B30: Type = 87;
    pub const TMS320C64X_REG_B31: Type = 88;
    pub const TMS320C64X_REG_PCE1: Type = 89;
    pub const TMS320C64X_REG_ENDING: Type = 90;
    pub const TMS320C64X_REG_EFR: Type = 5;
    pub const TMS320C64X_REG_IFR: Type = 14;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum tms320c64x_insn {
    TMS320C64X_INS_INVALID = 0,
    TMS320C64X_INS_ABS = 1,
    TMS320C64X_INS_ABS2 = 2,
    TMS320C64X_INS_ADD = 3,
    TMS320C64X_INS_ADD2 = 4,
    TMS320C64X_INS_ADD4 = 5,
    TMS320C64X_INS_ADDAB = 6,
    TMS320C64X_INS_ADDAD = 7,
    TMS320C64X_INS_ADDAH = 8,
    TMS320C64X_INS_ADDAW = 9,
    TMS320C64X_INS_ADDK = 10,
    TMS320C64X_INS_ADDKPC = 11,
    TMS320C64X_INS_ADDU = 12,
    TMS320C64X_INS_AND = 13,
    TMS320C64X_INS_ANDN = 14,
    TMS320C64X_INS_AVG2 = 15,
    TMS320C64X_INS_AVGU4 = 16,
    TMS320C64X_INS_B = 17,
    TMS320C64X_INS_BDEC = 18,
    TMS320C64X_INS_BITC4 = 19,
    TMS320C64X_INS_BNOP = 20,
    TMS320C64X_INS_BPOS = 21,
    TMS320C64X_INS_CLR = 22,
    TMS320C64X_INS_CMPEQ = 23,
    TMS320C64X_INS_CMPEQ2 = 24,
    TMS320C64X_INS_CMPEQ4 = 25,
    TMS320C64X_INS_CMPGT = 26,
    TMS320C64X_INS_CMPGT2 = 27,
    TMS320C64X_INS_CMPGTU4 = 28,
    TMS320C64X_INS_CMPLT = 29,
    TMS320C64X_INS_CMPLTU = 30,
    TMS320C64X_INS_DEAL = 31,
    TMS320C64X_INS_DOTP2 = 32,
    TMS320C64X_INS_DOTPN2 = 33,
    TMS320C64X_INS_DOTPNRSU2 = 34,
    TMS320C64X_INS_DOTPRSU2 = 35,
    TMS320C64X_INS_DOTPSU4 = 36,
    TMS320C64X_INS_DOTPU4 = 37,
    TMS320C64X_INS_EXT = 38,
    TMS320C64X_INS_EXTU = 39,
    TMS320C64X_INS_GMPGTU = 40,
    TMS320C64X_INS_GMPY4 = 41,
    TMS320C64X_INS_LDB = 42,
    TMS320C64X_INS_LDBU = 43,
    TMS320C64X_INS_LDDW = 44,
    TMS320C64X_INS_LDH = 45,
    TMS320C64X_INS_LDHU = 46,
    TMS320C64X_INS_LDNDW = 47,
    TMS320C64X_INS_LDNW = 48,
    TMS320C64X_INS_LDW = 49,
    TMS320C64X_INS_LMBD = 50,
    TMS320C64X_INS_MAX2 = 51,
    TMS320C64X_INS_MAXU4 = 52,
    TMS320C64X_INS_MIN2 = 53,
    TMS320C64X_INS_MINU4 = 54,
    TMS320C64X_INS_MPY = 55,
    TMS320C64X_INS_MPY2 = 56,
    TMS320C64X_INS_MPYH = 57,
    TMS320C64X_INS_MPYHI = 58,
    TMS320C64X_INS_MPYHIR = 59,
    TMS320C64X_INS_MPYHL = 60,
    TMS320C64X_INS_MPYHLU = 61,
    TMS320C64X_INS_MPYHSLU = 62,
    TMS320C64X_INS_MPYHSU = 63,
    TMS320C64X_INS_MPYHU = 64,
    TMS320C64X_INS_MPYHULS = 65,
    TMS320C64X_INS_MPYHUS = 66,
    TMS320C64X_INS_MPYLH = 67,
    TMS320C64X_INS_MPYLHU = 68,
    TMS320C64X_INS_MPYLI = 69,
    TMS320C64X_INS_MPYLIR = 70,
    TMS320C64X_INS_MPYLSHU = 71,
    TMS320C64X_INS_MPYLUHS = 72,
    TMS320C64X_INS_MPYSU = 73,
    TMS320C64X_INS_MPYSU4 = 74,
    TMS320C64X_INS_MPYU = 75,
    TMS320C64X_INS_MPYU4 = 76,
    TMS320C64X_INS_MPYUS = 77,
    TMS320C64X_INS_MVC = 78,
    TMS320C64X_INS_MVD = 79,
    TMS320C64X_INS_MVK = 80,
    TMS320C64X_INS_MVKL = 81,
    TMS320C64X_INS_MVKLH = 82,
    TMS320C64X_INS_NOP = 83,
    TMS320C64X_INS_NORM = 84,
    TMS320C64X_INS_OR = 85,
    TMS320C64X_INS_PACK2 = 86,
    TMS320C64X_INS_PACKH2 = 87,
    TMS320C64X_INS_PACKH4 = 88,
    TMS320C64X_INS_PACKHL2 = 89,
    TMS320C64X_INS_PACKL4 = 90,
    TMS320C64X_INS_PACKLH2 = 91,
    TMS320C64X_INS_ROTL = 92,
    TMS320C64X_INS_SADD = 93,
    TMS320C64X_INS_SADD2 = 94,
    TMS320C64X_INS_SADDU4 = 95,
    TMS320C64X_INS_SADDUS2 = 96,
    TMS320C64X_INS_SAT = 97,
    TMS320C64X_INS_SET = 98,
    TMS320C64X_INS_SHFL = 99,
    TMS320C64X_INS_SHL = 100,
    TMS320C64X_INS_SHLMB = 101,
    TMS320C64X_INS_SHR = 102,
    TMS320C64X_INS_SHR2 = 103,
    TMS320C64X_INS_SHRMB = 104,
    TMS320C64X_INS_SHRU = 105,
    TMS320C64X_INS_SHRU2 = 106,
    TMS320C64X_INS_SMPY = 107,
    TMS320C64X_INS_SMPY2 = 108,
    TMS320C64X_INS_SMPYH = 109,
    TMS320C64X_INS_SMPYHL = 110,
    TMS320C64X_INS_SMPYLH = 111,
    TMS320C64X_INS_SPACK2 = 112,
    TMS320C64X_INS_SPACKU4 = 113,
    TMS320C64X_INS_SSHL = 114,
    TMS320C64X_INS_SSHVL = 115,
    TMS320C64X_INS_SSHVR = 116,
    TMS320C64X_INS_SSUB = 117,
    TMS320C64X_INS_STB = 118,
    TMS320C64X_INS_STDW = 119,
    TMS320C64X_INS_STH = 120,
    TMS320C64X_INS_STNDW = 121,
    TMS320C64X_INS_STNW = 122,
    TMS320C64X_INS_STW = 123,
    TMS320C64X_INS_SUB = 124,
    TMS320C64X_INS_SUB2 = 125,
    TMS320C64X_INS_SUB4 = 126,
    TMS320C64X_INS_SUBAB = 127,
    TMS320C64X_INS_SUBABS4 = 128,
    TMS320C64X_INS_SUBAH = 129,
    TMS320C64X_INS_SUBAW = 130,
    TMS320C64X_INS_SUBC = 131,
    TMS320C64X_INS_SUBU = 132,
    TMS320C64X_INS_SWAP4 = 133,
    TMS320C64X_INS_UNPKHU4 = 134,
    TMS320C64X_INS_UNPKLU4 = 135,
    TMS320C64X_INS_XOR = 136,
    TMS320C64X_INS_XPND2 = 137,
    TMS320C64X_INS_XPND4 = 138,
    TMS320C64X_INS_IDLE = 139,
    TMS320C64X_INS_MV = 140,
    TMS320C64X_INS_NEG = 141,
    TMS320C64X_INS_NOT = 142,
    TMS320C64X_INS_SWAP2 = 143,
    TMS320C64X_INS_ZERO = 144,
    TMS320C64X_INS_ENDING = 145,
}
pub mod tms320c64x_insn_group {
    pub type Type = libc::c_uint;
    #[doc = "< = CS_GRP_INVALID"]
    pub const TMS320C64X_GRP_INVALID: Type = 0;
    #[doc = "< = CS_GRP_JUMP"]
    pub const TMS320C64X_GRP_JUMP: Type = 1;
    pub const TMS320C64X_GRP_FUNIT_D: Type = 128;
    pub const TMS320C64X_GRP_FUNIT_L: Type = 129;
    pub const TMS320C64X_GRP_FUNIT_M: Type = 130;
    pub const TMS320C64X_GRP_FUNIT_S: Type = 131;
    pub const TMS320C64X_GRP_FUNIT_NO: Type = 132;
    pub const TMS320C64X_GRP_ENDING: Type = 133;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum tms320c64x_funit {
    TMS320C64X_FUNIT_INVALID = 0,
    TMS320C64X_FUNIT_D = 1,
    TMS320C64X_FUNIT_L = 2,
    TMS320C64X_FUNIT_M = 3,
    TMS320C64X_FUNIT_S = 4,
    TMS320C64X_FUNIT_NO = 5,
}
pub mod m680x_reg {
    #[doc = " M680X registers and special registers"]
    pub type Type = libc::c_uint;
    pub const M680X_REG_INVALID: Type = 0;
    #[doc = "< M6800/1/2/3/9, HD6301/9"]
    pub const M680X_REG_A: Type = 1;
    #[doc = "< M6800/1/2/3/9, HD6301/9"]
    pub const M680X_REG_B: Type = 2;
    #[doc = "< HD6309"]
    pub const M680X_REG_E: Type = 3;
    #[doc = "< HD6309"]
    pub const M680X_REG_F: Type = 4;
    #[doc = "< HD6309"]
    pub const M680X_REG_0: Type = 5;
    #[doc = "< M6801/3/9, HD6301/9"]
    pub const M680X_REG_D: Type = 6;
    #[doc = "< HD6309"]
    pub const M680X_REG_W: Type = 7;
    #[doc = "< M6800/1/2/3/9, M6301/9"]
    pub const M680X_REG_CC: Type = 8;
    #[doc = "< M6809/M6309"]
    pub const M680X_REG_DP: Type = 9;
    #[doc = "< M6309"]
    pub const M680X_REG_MD: Type = 10;
    #[doc = "< M6808"]
    pub const M680X_REG_HX: Type = 11;
    #[doc = "< M6808"]
    pub const M680X_REG_H: Type = 12;
    #[doc = "< M6800/1/2/3/9, M6301/9"]
    pub const M680X_REG_X: Type = 13;
    #[doc = "< M6809/M6309"]
    pub const M680X_REG_Y: Type = 14;
    #[doc = "< M6809/M6309"]
    pub const M680X_REG_S: Type = 15;
    #[doc = "< M6809/M6309"]
    pub const M680X_REG_U: Type = 16;
    #[doc = "< M6309"]
    pub const M680X_REG_V: Type = 17;
    #[doc = "< M6309"]
    pub const M680X_REG_Q: Type = 18;
    #[doc = "< M6800/1/2/3/9, M6301/9"]
    pub const M680X_REG_PC: Type = 19;
    #[doc = "< CPU12"]
    pub const M680X_REG_TMP2: Type = 20;
    #[doc = "< CPU12"]
    pub const M680X_REG_TMP3: Type = 21;
    #[doc = "< <-- mark the end of the list of registers"]
    pub const M680X_REG_ENDING: Type = 22;
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum m680x_op_type {
    #[doc = "< = CS_OP_INVALID (Uninitialized)."]
    M680X_OP_INVALID = 0,
    #[doc = "< = Register operand."]
    M680X_OP_REGISTER = 1,
    #[doc = "< = Immediate operand."]
    M680X_OP_IMMEDIATE = 2,
    #[doc = "< = Indexed addressing operand."]
    M680X_OP_INDEXED = 16,
    #[doc = "< = Extended addressing operand."]
    M680X_OP_EXTENDED = 17,
    #[doc = "< = Direct addressing operand."]
    M680X_OP_DIRECT = 18,
    #[doc = "< = Relative addressing operand."]
    M680X_OP_RELATIVE = 19,
    #[doc = "< = constant operand (Displayed as number only).\n< Used e.g. for a bit index or page number."]
    M680X_OP_CONSTANT = 20,
}
#[doc = " Instruction's operand referring to indexed addressing"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m680x_op_idx {
    #[doc = "< base register (or M680X_REG_INVALID if\n< irrelevant)"]
    pub base_reg: m680x_reg::Type,
    #[doc = "< offset register (or M680X_REG_INVALID if\n< irrelevant)"]
    pub offset_reg: m680x_reg::Type,
    #[doc = "< 5-,8- or 16-bit offset. See also offset_bits."]
    pub offset: i16,
    #[doc = "< = offset addr. if base_reg == M680X_REG_PC.\n< calculated as offset + PC"]
    pub offset_addr: u16,
    #[doc = "< offset width in bits for indexed addressing"]
    pub offset_bits: u8,
    #[doc = "< inc. or dec. value:\n<    0: no inc-/decrement\n<    1 .. 8: increment by 1 .. 8\n<    -1 .. -8: decrement by 1 .. 8\n< if flag M680X_IDX_POST_INC_DEC set it is post\n< inc-/decrement otherwise pre inc-/decrement"]
    pub inc_dec: i8,
    #[doc = "< 8-bit flags (see above)"]
    pub flags: u8,
}
#[doc = " Instruction's memory operand referring to relative addressing (Bcc/LBcc)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m680x_op_rel {
    #[doc = "< The absolute address.\n< calculated as PC + offset. PC is the first\n< address after the instruction."]
    pub address: u16,
    #[doc = "< the offset/displacement value"]
    pub offset: i16,
}
#[doc = " Instruction's operand referring to extended addressing"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m680x_op_ext {
    #[doc = "< The absolute address"]
    pub address: u16,
    #[doc = "< true if extended indirect addressing"]
    pub indirect: bool,
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_m680x_op {
    pub type_: m680x_op_type,
    pub __bindgen_anon_1: cs_m680x_op__bindgen_ty_1,
    #[doc = "< size of this operand (in bytes)"]
    pub size: u8,
    #[doc = " How is this operand accessed? (READ, WRITE or READ|WRITE)\n This field is combined of cs_ac_type.\n NOTE: this field is irrelevant if engine is compiled in DIET"]
    pub access: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_m680x_op__bindgen_ty_1 {
    #[doc = "< immediate value for IMM operand"]
    pub imm: i32,
    #[doc = "< register value for REG operand"]
    pub reg: m680x_reg::Type,
    #[doc = "< Indexed addressing operand"]
    pub idx: m680x_op_idx,
    #[doc = "< Relative address. operand (Bcc/LBcc)"]
    pub rel: m680x_op_rel,
    #[doc = "< Extended address"]
    pub ext: m680x_op_ext,
    #[doc = "<</ Direct address (lower 8-bit)"]
    pub direct_addr: u8,
    #[doc = "< constant value (bit index, page nr.)"]
    pub const_val: u8,
}
impl ::core::fmt::Debug for cs_m680x_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_m680x_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_m680x_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_m680x_op {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[repr(u32)]
#[doc = " Group of M680X instructions"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum m680x_group_type {
    M680X_GRP_INVALID = 0,
    #[doc = "< = CS_GRP_JUMP"]
    M680X_GRP_JUMP = 1,
    #[doc = "< = CS_GRP_CALL"]
    M680X_GRP_CALL = 2,
    #[doc = "< = CS_GRP_RET"]
    M680X_GRP_RET = 3,
    #[doc = "< = CS_GRP_INT"]
    M680X_GRP_INT = 4,
    #[doc = "< = CS_GRP_IRET"]
    M680X_GRP_IRET = 5,
    #[doc = "< = CS_GRP_PRIVILEDGE; not used"]
    M680X_GRP_PRIV = 6,
    #[doc = "< = CS_GRP_BRANCH_RELATIVE"]
    M680X_GRP_BRAREL = 7,
    M680X_GRP_ENDING = 8,
}
#[doc = " The M680X instruction and its operands"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_m680x {
    #[doc = "< See: M680X instruction flags"]
    pub flags: u8,
    #[doc = "< number of operands for the instruction or 0"]
    pub op_count: u8,
    #[doc = "< operands for this insn."]
    pub operands: [cs_m680x_op; 9usize],
}
impl ::core::fmt::Debug for cs_m680x {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_m680x {{ operands: {:?} }}", self.operands)
    }
}
#[repr(u32)]
#[doc = " M680X instruction IDs"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum m680x_insn {
    M680X_INS_INVLD = 0,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_ABA = 1,
    M680X_INS_ABX = 2,
    M680X_INS_ABY = 3,
    M680X_INS_ADC = 4,
    M680X_INS_ADCA = 5,
    M680X_INS_ADCB = 6,
    M680X_INS_ADCD = 7,
    M680X_INS_ADCR = 8,
    M680X_INS_ADD = 9,
    M680X_INS_ADDA = 10,
    M680X_INS_ADDB = 11,
    M680X_INS_ADDD = 12,
    M680X_INS_ADDE = 13,
    M680X_INS_ADDF = 14,
    M680X_INS_ADDR = 15,
    M680X_INS_ADDW = 16,
    M680X_INS_AIM = 17,
    M680X_INS_AIS = 18,
    M680X_INS_AIX = 19,
    M680X_INS_AND = 20,
    M680X_INS_ANDA = 21,
    M680X_INS_ANDB = 22,
    M680X_INS_ANDCC = 23,
    M680X_INS_ANDD = 24,
    M680X_INS_ANDR = 25,
    M680X_INS_ASL = 26,
    M680X_INS_ASLA = 27,
    M680X_INS_ASLB = 28,
    #[doc = "< or LSLD"]
    M680X_INS_ASLD = 29,
    M680X_INS_ASR = 30,
    M680X_INS_ASRA = 31,
    M680X_INS_ASRB = 32,
    M680X_INS_ASRD = 33,
    M680X_INS_ASRX = 34,
    M680X_INS_BAND = 35,
    #[doc = "< or BHS"]
    M680X_INS_BCC = 36,
    M680X_INS_BCLR = 37,
    #[doc = "< or BLO"]
    M680X_INS_BCS = 38,
    M680X_INS_BEOR = 39,
    M680X_INS_BEQ = 40,
    M680X_INS_BGE = 41,
    M680X_INS_BGND = 42,
    M680X_INS_BGT = 43,
    M680X_INS_BHCC = 44,
    M680X_INS_BHCS = 45,
    M680X_INS_BHI = 46,
    M680X_INS_BIAND = 47,
    M680X_INS_BIEOR = 48,
    M680X_INS_BIH = 49,
    M680X_INS_BIL = 50,
    M680X_INS_BIOR = 51,
    M680X_INS_BIT = 52,
    M680X_INS_BITA = 53,
    M680X_INS_BITB = 54,
    M680X_INS_BITD = 55,
    M680X_INS_BITMD = 56,
    M680X_INS_BLE = 57,
    M680X_INS_BLS = 58,
    M680X_INS_BLT = 59,
    M680X_INS_BMC = 60,
    M680X_INS_BMI = 61,
    M680X_INS_BMS = 62,
    M680X_INS_BNE = 63,
    M680X_INS_BOR = 64,
    M680X_INS_BPL = 65,
    M680X_INS_BRCLR = 66,
    M680X_INS_BRSET = 67,
    M680X_INS_BRA = 68,
    M680X_INS_BRN = 69,
    M680X_INS_BSET = 70,
    M680X_INS_BSR = 71,
    M680X_INS_BVC = 72,
    M680X_INS_BVS = 73,
    M680X_INS_CALL = 74,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_CBA = 75,
    M680X_INS_CBEQ = 76,
    M680X_INS_CBEQA = 77,
    M680X_INS_CBEQX = 78,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_CLC = 79,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_CLI = 80,
    M680X_INS_CLR = 81,
    M680X_INS_CLRA = 82,
    M680X_INS_CLRB = 83,
    M680X_INS_CLRD = 84,
    M680X_INS_CLRE = 85,
    M680X_INS_CLRF = 86,
    M680X_INS_CLRH = 87,
    M680X_INS_CLRW = 88,
    M680X_INS_CLRX = 89,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_CLV = 90,
    M680X_INS_CMP = 91,
    M680X_INS_CMPA = 92,
    M680X_INS_CMPB = 93,
    M680X_INS_CMPD = 94,
    M680X_INS_CMPE = 95,
    M680X_INS_CMPF = 96,
    M680X_INS_CMPR = 97,
    M680X_INS_CMPS = 98,
    M680X_INS_CMPU = 99,
    M680X_INS_CMPW = 100,
    M680X_INS_CMPX = 101,
    M680X_INS_CMPY = 102,
    M680X_INS_COM = 103,
    M680X_INS_COMA = 104,
    M680X_INS_COMB = 105,
    M680X_INS_COMD = 106,
    M680X_INS_COME = 107,
    M680X_INS_COMF = 108,
    M680X_INS_COMW = 109,
    M680X_INS_COMX = 110,
    M680X_INS_CPD = 111,
    M680X_INS_CPHX = 112,
    M680X_INS_CPS = 113,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_CPX = 114,
    M680X_INS_CPY = 115,
    M680X_INS_CWAI = 116,
    M680X_INS_DAA = 117,
    M680X_INS_DBEQ = 118,
    M680X_INS_DBNE = 119,
    M680X_INS_DBNZ = 120,
    M680X_INS_DBNZA = 121,
    M680X_INS_DBNZX = 122,
    M680X_INS_DEC = 123,
    M680X_INS_DECA = 124,
    M680X_INS_DECB = 125,
    M680X_INS_DECD = 126,
    M680X_INS_DECE = 127,
    M680X_INS_DECF = 128,
    M680X_INS_DECW = 129,
    M680X_INS_DECX = 130,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_DES = 131,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_DEX = 132,
    M680X_INS_DEY = 133,
    M680X_INS_DIV = 134,
    M680X_INS_DIVD = 135,
    M680X_INS_DIVQ = 136,
    M680X_INS_EDIV = 137,
    M680X_INS_EDIVS = 138,
    M680X_INS_EIM = 139,
    M680X_INS_EMACS = 140,
    M680X_INS_EMAXD = 141,
    M680X_INS_EMAXM = 142,
    M680X_INS_EMIND = 143,
    M680X_INS_EMINM = 144,
    M680X_INS_EMUL = 145,
    M680X_INS_EMULS = 146,
    M680X_INS_EOR = 147,
    M680X_INS_EORA = 148,
    M680X_INS_EORB = 149,
    M680X_INS_EORD = 150,
    M680X_INS_EORR = 151,
    M680X_INS_ETBL = 152,
    M680X_INS_EXG = 153,
    M680X_INS_FDIV = 154,
    M680X_INS_IBEQ = 155,
    M680X_INS_IBNE = 156,
    M680X_INS_IDIV = 157,
    M680X_INS_IDIVS = 158,
    M680X_INS_ILLGL = 159,
    M680X_INS_INC = 160,
    M680X_INS_INCA = 161,
    M680X_INS_INCB = 162,
    M680X_INS_INCD = 163,
    M680X_INS_INCE = 164,
    M680X_INS_INCF = 165,
    M680X_INS_INCW = 166,
    M680X_INS_INCX = 167,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_INS = 168,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_INX = 169,
    M680X_INS_INY = 170,
    M680X_INS_JMP = 171,
    M680X_INS_JSR = 172,
    #[doc = "< or LBHS"]
    M680X_INS_LBCC = 173,
    #[doc = "< or LBLO"]
    M680X_INS_LBCS = 174,
    M680X_INS_LBEQ = 175,
    M680X_INS_LBGE = 176,
    M680X_INS_LBGT = 177,
    M680X_INS_LBHI = 178,
    M680X_INS_LBLE = 179,
    M680X_INS_LBLS = 180,
    M680X_INS_LBLT = 181,
    M680X_INS_LBMI = 182,
    M680X_INS_LBNE = 183,
    M680X_INS_LBPL = 184,
    M680X_INS_LBRA = 185,
    M680X_INS_LBRN = 186,
    M680X_INS_LBSR = 187,
    M680X_INS_LBVC = 188,
    M680X_INS_LBVS = 189,
    M680X_INS_LDA = 190,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_LDAA = 191,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_LDAB = 192,
    M680X_INS_LDB = 193,
    M680X_INS_LDBT = 194,
    M680X_INS_LDD = 195,
    M680X_INS_LDE = 196,
    M680X_INS_LDF = 197,
    M680X_INS_LDHX = 198,
    M680X_INS_LDMD = 199,
    M680X_INS_LDQ = 200,
    M680X_INS_LDS = 201,
    M680X_INS_LDU = 202,
    M680X_INS_LDW = 203,
    M680X_INS_LDX = 204,
    M680X_INS_LDY = 205,
    M680X_INS_LEAS = 206,
    M680X_INS_LEAU = 207,
    M680X_INS_LEAX = 208,
    M680X_INS_LEAY = 209,
    M680X_INS_LSL = 210,
    M680X_INS_LSLA = 211,
    M680X_INS_LSLB = 212,
    M680X_INS_LSLD = 213,
    M680X_INS_LSLX = 214,
    M680X_INS_LSR = 215,
    M680X_INS_LSRA = 216,
    M680X_INS_LSRB = 217,
    #[doc = "< or ASRD"]
    M680X_INS_LSRD = 218,
    M680X_INS_LSRW = 219,
    M680X_INS_LSRX = 220,
    M680X_INS_MAXA = 221,
    M680X_INS_MAXM = 222,
    M680X_INS_MEM = 223,
    M680X_INS_MINA = 224,
    M680X_INS_MINM = 225,
    M680X_INS_MOV = 226,
    M680X_INS_MOVB = 227,
    M680X_INS_MOVW = 228,
    M680X_INS_MUL = 229,
    M680X_INS_MULD = 230,
    M680X_INS_NEG = 231,
    M680X_INS_NEGA = 232,
    M680X_INS_NEGB = 233,
    M680X_INS_NEGD = 234,
    M680X_INS_NEGX = 235,
    M680X_INS_NOP = 236,
    M680X_INS_NSA = 237,
    M680X_INS_OIM = 238,
    M680X_INS_ORA = 239,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_ORAA = 240,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_ORAB = 241,
    M680X_INS_ORB = 242,
    M680X_INS_ORCC = 243,
    M680X_INS_ORD = 244,
    M680X_INS_ORR = 245,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_PSHA = 246,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_PSHB = 247,
    M680X_INS_PSHC = 248,
    M680X_INS_PSHD = 249,
    M680X_INS_PSHH = 250,
    M680X_INS_PSHS = 251,
    M680X_INS_PSHSW = 252,
    M680X_INS_PSHU = 253,
    M680X_INS_PSHUW = 254,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_PSHX = 255,
    M680X_INS_PSHY = 256,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_PULA = 257,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_PULB = 258,
    M680X_INS_PULC = 259,
    M680X_INS_PULD = 260,
    M680X_INS_PULH = 261,
    M680X_INS_PULS = 262,
    M680X_INS_PULSW = 263,
    M680X_INS_PULU = 264,
    M680X_INS_PULUW = 265,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_PULX = 266,
    M680X_INS_PULY = 267,
    M680X_INS_REV = 268,
    M680X_INS_REVW = 269,
    M680X_INS_ROL = 270,
    M680X_INS_ROLA = 271,
    M680X_INS_ROLB = 272,
    M680X_INS_ROLD = 273,
    M680X_INS_ROLW = 274,
    M680X_INS_ROLX = 275,
    M680X_INS_ROR = 276,
    M680X_INS_RORA = 277,
    M680X_INS_RORB = 278,
    M680X_INS_RORD = 279,
    M680X_INS_RORW = 280,
    M680X_INS_RORX = 281,
    M680X_INS_RSP = 282,
    M680X_INS_RTC = 283,
    M680X_INS_RTI = 284,
    M680X_INS_RTS = 285,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_SBA = 286,
    M680X_INS_SBC = 287,
    M680X_INS_SBCA = 288,
    M680X_INS_SBCB = 289,
    M680X_INS_SBCD = 290,
    M680X_INS_SBCR = 291,
    M680X_INS_SEC = 292,
    M680X_INS_SEI = 293,
    M680X_INS_SEV = 294,
    M680X_INS_SEX = 295,
    M680X_INS_SEXW = 296,
    M680X_INS_SLP = 297,
    M680X_INS_STA = 298,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_STAA = 299,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_STAB = 300,
    M680X_INS_STB = 301,
    M680X_INS_STBT = 302,
    M680X_INS_STD = 303,
    M680X_INS_STE = 304,
    M680X_INS_STF = 305,
    M680X_INS_STOP = 306,
    M680X_INS_STHX = 307,
    M680X_INS_STQ = 308,
    M680X_INS_STS = 309,
    M680X_INS_STU = 310,
    M680X_INS_STW = 311,
    M680X_INS_STX = 312,
    M680X_INS_STY = 313,
    M680X_INS_SUB = 314,
    M680X_INS_SUBA = 315,
    M680X_INS_SUBB = 316,
    M680X_INS_SUBD = 317,
    M680X_INS_SUBE = 318,
    M680X_INS_SUBF = 319,
    M680X_INS_SUBR = 320,
    M680X_INS_SUBW = 321,
    M680X_INS_SWI = 322,
    M680X_INS_SWI2 = 323,
    M680X_INS_SWI3 = 324,
    M680X_INS_SYNC = 325,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_TAB = 326,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_TAP = 327,
    M680X_INS_TAX = 328,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_TBA = 329,
    M680X_INS_TBEQ = 330,
    M680X_INS_TBL = 331,
    M680X_INS_TBNE = 332,
    M680X_INS_TEST = 333,
    M680X_INS_TFM = 334,
    M680X_INS_TFR = 335,
    M680X_INS_TIM = 336,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_TPA = 337,
    M680X_INS_TST = 338,
    M680X_INS_TSTA = 339,
    M680X_INS_TSTB = 340,
    M680X_INS_TSTD = 341,
    M680X_INS_TSTE = 342,
    M680X_INS_TSTF = 343,
    M680X_INS_TSTW = 344,
    M680X_INS_TSTX = 345,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_TSX = 346,
    M680X_INS_TSY = 347,
    M680X_INS_TXA = 348,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_TXS = 349,
    M680X_INS_TYS = 350,
    #[doc = "< M6800/1/2/3"]
    M680X_INS_WAI = 351,
    M680X_INS_WAIT = 352,
    M680X_INS_WAV = 353,
    M680X_INS_WAVR = 354,
    #[doc = "< HD6301"]
    M680X_INS_XGDX = 355,
    M680X_INS_XGDY = 356,
    M680X_INS_ENDING = 357,
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_evm {
    #[doc = "< number of items popped from the stack"]
    pub pop: libc::c_uchar,
    #[doc = "< number of items pushed into the stack"]
    pub push: libc::c_uchar,
    #[doc = "< gas fee for the instruction"]
    pub fee: libc::c_uint,
}
#[repr(u32)]
#[doc = " EVM instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum evm_insn {
    EVM_INS_STOP = 0,
    EVM_INS_ADD = 1,
    EVM_INS_MUL = 2,
    EVM_INS_SUB = 3,
    EVM_INS_DIV = 4,
    EVM_INS_SDIV = 5,
    EVM_INS_MOD = 6,
    EVM_INS_SMOD = 7,
    EVM_INS_ADDMOD = 8,
    EVM_INS_MULMOD = 9,
    EVM_INS_EXP = 10,
    EVM_INS_SIGNEXTEND = 11,
    EVM_INS_LT = 16,
    EVM_INS_GT = 17,
    EVM_INS_SLT = 18,
    EVM_INS_SGT = 19,
    EVM_INS_EQ = 20,
    EVM_INS_ISZERO = 21,
    EVM_INS_AND = 22,
    EVM_INS_OR = 23,
    EVM_INS_XOR = 24,
    EVM_INS_NOT = 25,
    EVM_INS_BYTE = 26,
    EVM_INS_SHL = 27,
    EVM_INS_SHR = 28,
    EVM_INS_SAR = 29,
    EVM_INS_SHA3 = 32,
    EVM_INS_ADDRESS = 48,
    EVM_INS_BALANCE = 49,
    EVM_INS_ORIGIN = 50,
    EVM_INS_CALLER = 51,
    EVM_INS_CALLVALUE = 52,
    EVM_INS_CALLDATALOAD = 53,
    EVM_INS_CALLDATASIZE = 54,
    EVM_INS_CALLDATACOPY = 55,
    EVM_INS_CODESIZE = 56,
    EVM_INS_CODECOPY = 57,
    EVM_INS_GASPRICE = 58,
    EVM_INS_EXTCODESIZE = 59,
    EVM_INS_EXTCODECOPY = 60,
    EVM_INS_RETURNDATASIZE = 61,
    EVM_INS_RETURNDATACOPY = 62,
    EVM_INS_BLOCKHASH = 64,
    EVM_INS_COINBASE = 65,
    EVM_INS_TIMESTAMP = 66,
    EVM_INS_NUMBER = 67,
    EVM_INS_DIFFICULTY = 68,
    EVM_INS_GASLIMIT = 69,
    EVM_INS_CHAINID = 70,
    EVM_INS_SELFBALANCE = 71,
    EVM_INS_BASEFEE = 72,
    EVM_INS_BLOBHASH = 73,
    EVM_INS_BLOBBASEFEE = 74,
    EVM_INS_POP = 80,
    EVM_INS_MLOAD = 81,
    EVM_INS_MSTORE = 82,
    EVM_INS_MSTORE8 = 83,
    EVM_INS_SLOAD = 84,
    EVM_INS_SSTORE = 85,
    EVM_INS_JUMP = 86,
    EVM_INS_JUMPI = 87,
    EVM_INS_PC = 88,
    EVM_INS_MSIZE = 89,
    EVM_INS_GAS = 90,
    EVM_INS_JUMPDEST = 91,
    EVM_INS_TLOAD = 92,
    EVM_INS_TSTORE = 93,
    EVM_INS_MCOPY = 94,
    EVM_INS_PUSH0 = 95,
    EVM_INS_PUSH1 = 96,
    EVM_INS_PUSH2 = 97,
    EVM_INS_PUSH3 = 98,
    EVM_INS_PUSH4 = 99,
    EVM_INS_PUSH5 = 100,
    EVM_INS_PUSH6 = 101,
    EVM_INS_PUSH7 = 102,
    EVM_INS_PUSH8 = 103,
    EVM_INS_PUSH9 = 104,
    EVM_INS_PUSH10 = 105,
    EVM_INS_PUSH11 = 106,
    EVM_INS_PUSH12 = 107,
    EVM_INS_PUSH13 = 108,
    EVM_INS_PUSH14 = 109,
    EVM_INS_PUSH15 = 110,
    EVM_INS_PUSH16 = 111,
    EVM_INS_PUSH17 = 112,
    EVM_INS_PUSH18 = 113,
    EVM_INS_PUSH19 = 114,
    EVM_INS_PUSH20 = 115,
    EVM_INS_PUSH21 = 116,
    EVM_INS_PUSH22 = 117,
    EVM_INS_PUSH23 = 118,
    EVM_INS_PUSH24 = 119,
    EVM_INS_PUSH25 = 120,
    EVM_INS_PUSH26 = 121,
    EVM_INS_PUSH27 = 122,
    EVM_INS_PUSH28 = 123,
    EVM_INS_PUSH29 = 124,
    EVM_INS_PUSH30 = 125,
    EVM_INS_PUSH31 = 126,
    EVM_INS_PUSH32 = 127,
    EVM_INS_DUP1 = 128,
    EVM_INS_DUP2 = 129,
    EVM_INS_DUP3 = 130,
    EVM_INS_DUP4 = 131,
    EVM_INS_DUP5 = 132,
    EVM_INS_DUP6 = 133,
    EVM_INS_DUP7 = 134,
    EVM_INS_DUP8 = 135,
    EVM_INS_DUP9 = 136,
    EVM_INS_DUP10 = 137,
    EVM_INS_DUP11 = 138,
    EVM_INS_DUP12 = 139,
    EVM_INS_DUP13 = 140,
    EVM_INS_DUP14 = 141,
    EVM_INS_DUP15 = 142,
    EVM_INS_DUP16 = 143,
    EVM_INS_SWAP1 = 144,
    EVM_INS_SWAP2 = 145,
    EVM_INS_SWAP3 = 146,
    EVM_INS_SWAP4 = 147,
    EVM_INS_SWAP5 = 148,
    EVM_INS_SWAP6 = 149,
    EVM_INS_SWAP7 = 150,
    EVM_INS_SWAP8 = 151,
    EVM_INS_SWAP9 = 152,
    EVM_INS_SWAP10 = 153,
    EVM_INS_SWAP11 = 154,
    EVM_INS_SWAP12 = 155,
    EVM_INS_SWAP13 = 156,
    EVM_INS_SWAP14 = 157,
    EVM_INS_SWAP15 = 158,
    EVM_INS_SWAP16 = 159,
    EVM_INS_LOG0 = 160,
    EVM_INS_LOG1 = 161,
    EVM_INS_LOG2 = 162,
    EVM_INS_LOG3 = 163,
    EVM_INS_LOG4 = 164,
    EVM_INS_CREATE = 240,
    EVM_INS_CALL = 241,
    EVM_INS_CALLCODE = 242,
    EVM_INS_RETURN = 243,
    EVM_INS_DELEGATECALL = 244,
    EVM_INS_CREATE2 = 245,
    EVM_INS_STATICCALL = 250,
    EVM_INS_REVERT = 253,
    EVM_INS_INVALID = 254,
    EVM_INS_SELFDESTRUCT = 255,
    EVM_INS_ENDING = 256,
}
pub mod evm_insn_group {
    #[doc = " Group of EVM instructions"]
    pub type Type = libc::c_uint;
    #[doc = "< = CS_GRP_INVALID"]
    pub const EVM_GRP_INVALID: Type = 0;
    #[doc = "< all jump instructions"]
    pub const EVM_GRP_JUMP: Type = 1;
    #[doc = "< math instructions"]
    pub const EVM_GRP_MATH: Type = 8;
    #[doc = "< instructions write to stack"]
    pub const EVM_GRP_STACK_WRITE: Type = 9;
    #[doc = "< instructions read from stack"]
    pub const EVM_GRP_STACK_READ: Type = 10;
    #[doc = "< instructions write to memory"]
    pub const EVM_GRP_MEM_WRITE: Type = 11;
    #[doc = "< instructions read from memory"]
    pub const EVM_GRP_MEM_READ: Type = 12;
    #[doc = "< instructions write to storage"]
    pub const EVM_GRP_STORE_WRITE: Type = 13;
    #[doc = "< instructions read from storage"]
    pub const EVM_GRP_STORE_READ: Type = 14;
    #[doc = "< instructions halt execution"]
    pub const EVM_GRP_HALT: Type = 15;
    #[doc = "< <-- mark the end of the list of groups"]
    pub const EVM_GRP_ENDING: Type = 16;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum riscv_op_type {
    RISCV_OP_INVALID = 0,
    RISCV_OP_REG = 1,
    RISCV_OP_IMM = 2,
    RISCV_OP_MEM = 128,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct riscv_op_mem {
    pub base: libc::c_uint,
    pub disp: i64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_riscv_op {
    pub type_: riscv_op_type,
    pub __bindgen_anon_1: cs_riscv_op__bindgen_ty_1,
    #[doc = "< How is this operand accessed? (READ, WRITE or READ|WRITE)"]
    pub access: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_riscv_op__bindgen_ty_1 {
    pub reg: libc::c_uint,
    pub imm: i64,
    pub mem: riscv_op_mem,
}
impl ::core::fmt::Debug for cs_riscv_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_riscv_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_riscv_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_riscv_op {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_riscv {
    pub need_effective_addr: bool,
    pub op_count: u8,
    pub operands: [cs_riscv_op; 8usize],
}
impl ::core::fmt::Debug for cs_riscv {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_riscv {{ need_effective_addr: {:?}, operands: {:?} }}",
            self.need_effective_addr, self.operands
        )
    }
}
pub mod riscv_reg {
    pub type Type = libc::c_uint;
    pub const RISCV_REG_INVALID: Type = 0;
    pub const RISCV_REG_X0: Type = 1;
    pub const RISCV_REG_ZERO: Type = 1;
    pub const RISCV_REG_X1: Type = 2;
    pub const RISCV_REG_RA: Type = 2;
    pub const RISCV_REG_X2: Type = 3;
    pub const RISCV_REG_SP: Type = 3;
    pub const RISCV_REG_X3: Type = 4;
    pub const RISCV_REG_GP: Type = 4;
    pub const RISCV_REG_X4: Type = 5;
    pub const RISCV_REG_TP: Type = 5;
    pub const RISCV_REG_X5: Type = 6;
    pub const RISCV_REG_T0: Type = 6;
    pub const RISCV_REG_X6: Type = 7;
    pub const RISCV_REG_T1: Type = 7;
    pub const RISCV_REG_X7: Type = 8;
    pub const RISCV_REG_T2: Type = 8;
    pub const RISCV_REG_X8: Type = 9;
    pub const RISCV_REG_S0: Type = 9;
    pub const RISCV_REG_FP: Type = 9;
    pub const RISCV_REG_X9: Type = 10;
    pub const RISCV_REG_S1: Type = 10;
    pub const RISCV_REG_X10: Type = 11;
    pub const RISCV_REG_A0: Type = 11;
    pub const RISCV_REG_X11: Type = 12;
    pub const RISCV_REG_A1: Type = 12;
    pub const RISCV_REG_X12: Type = 13;
    pub const RISCV_REG_A2: Type = 13;
    pub const RISCV_REG_X13: Type = 14;
    pub const RISCV_REG_A3: Type = 14;
    pub const RISCV_REG_X14: Type = 15;
    pub const RISCV_REG_A4: Type = 15;
    pub const RISCV_REG_X15: Type = 16;
    pub const RISCV_REG_A5: Type = 16;
    pub const RISCV_REG_X16: Type = 17;
    pub const RISCV_REG_A6: Type = 17;
    pub const RISCV_REG_X17: Type = 18;
    pub const RISCV_REG_A7: Type = 18;
    pub const RISCV_REG_X18: Type = 19;
    pub const RISCV_REG_S2: Type = 19;
    pub const RISCV_REG_X19: Type = 20;
    pub const RISCV_REG_S3: Type = 20;
    pub const RISCV_REG_X20: Type = 21;
    pub const RISCV_REG_S4: Type = 21;
    pub const RISCV_REG_X21: Type = 22;
    pub const RISCV_REG_S5: Type = 22;
    pub const RISCV_REG_X22: Type = 23;
    pub const RISCV_REG_S6: Type = 23;
    pub const RISCV_REG_X23: Type = 24;
    pub const RISCV_REG_S7: Type = 24;
    pub const RISCV_REG_X24: Type = 25;
    pub const RISCV_REG_S8: Type = 25;
    pub const RISCV_REG_X25: Type = 26;
    pub const RISCV_REG_S9: Type = 26;
    pub const RISCV_REG_X26: Type = 27;
    pub const RISCV_REG_S10: Type = 27;
    pub const RISCV_REG_X27: Type = 28;
    pub const RISCV_REG_S11: Type = 28;
    pub const RISCV_REG_X28: Type = 29;
    pub const RISCV_REG_T3: Type = 29;
    pub const RISCV_REG_X29: Type = 30;
    pub const RISCV_REG_T4: Type = 30;
    pub const RISCV_REG_X30: Type = 31;
    pub const RISCV_REG_T5: Type = 31;
    pub const RISCV_REG_X31: Type = 32;
    pub const RISCV_REG_T6: Type = 32;
    pub const RISCV_REG_F0_32: Type = 33;
    pub const RISCV_REG_F0_64: Type = 34;
    pub const RISCV_REG_F1_32: Type = 35;
    pub const RISCV_REG_F1_64: Type = 36;
    pub const RISCV_REG_F2_32: Type = 37;
    pub const RISCV_REG_F2_64: Type = 38;
    pub const RISCV_REG_F3_32: Type = 39;
    pub const RISCV_REG_F3_64: Type = 40;
    pub const RISCV_REG_F4_32: Type = 41;
    pub const RISCV_REG_F4_64: Type = 42;
    pub const RISCV_REG_F5_32: Type = 43;
    pub const RISCV_REG_F5_64: Type = 44;
    pub const RISCV_REG_F6_32: Type = 45;
    pub const RISCV_REG_F6_64: Type = 46;
    pub const RISCV_REG_F7_32: Type = 47;
    pub const RISCV_REG_F7_64: Type = 48;
    pub const RISCV_REG_F8_32: Type = 49;
    pub const RISCV_REG_F8_64: Type = 50;
    pub const RISCV_REG_F9_32: Type = 51;
    pub const RISCV_REG_F9_64: Type = 52;
    pub const RISCV_REG_F10_32: Type = 53;
    pub const RISCV_REG_F10_64: Type = 54;
    pub const RISCV_REG_F11_32: Type = 55;
    pub const RISCV_REG_F11_64: Type = 56;
    pub const RISCV_REG_F12_32: Type = 57;
    pub const RISCV_REG_F12_64: Type = 58;
    pub const RISCV_REG_F13_32: Type = 59;
    pub const RISCV_REG_F13_64: Type = 60;
    pub const RISCV_REG_F14_32: Type = 61;
    pub const RISCV_REG_F14_64: Type = 62;
    pub const RISCV_REG_F15_32: Type = 63;
    pub const RISCV_REG_F15_64: Type = 64;
    pub const RISCV_REG_F16_32: Type = 65;
    pub const RISCV_REG_F16_64: Type = 66;
    pub const RISCV_REG_F17_32: Type = 67;
    pub const RISCV_REG_F17_64: Type = 68;
    pub const RISCV_REG_F18_32: Type = 69;
    pub const RISCV_REG_F18_64: Type = 70;
    pub const RISCV_REG_F19_32: Type = 71;
    pub const RISCV_REG_F19_64: Type = 72;
    pub const RISCV_REG_F20_32: Type = 73;
    pub const RISCV_REG_F20_64: Type = 74;
    pub const RISCV_REG_F21_32: Type = 75;
    pub const RISCV_REG_F21_64: Type = 76;
    pub const RISCV_REG_F22_32: Type = 77;
    pub const RISCV_REG_F22_64: Type = 78;
    pub const RISCV_REG_F23_32: Type = 79;
    pub const RISCV_REG_F23_64: Type = 80;
    pub const RISCV_REG_F24_32: Type = 81;
    pub const RISCV_REG_F24_64: Type = 82;
    pub const RISCV_REG_F25_32: Type = 83;
    pub const RISCV_REG_F25_64: Type = 84;
    pub const RISCV_REG_F26_32: Type = 85;
    pub const RISCV_REG_F26_64: Type = 86;
    pub const RISCV_REG_F27_32: Type = 87;
    pub const RISCV_REG_F27_64: Type = 88;
    pub const RISCV_REG_F28_32: Type = 89;
    pub const RISCV_REG_F28_64: Type = 90;
    pub const RISCV_REG_F29_32: Type = 91;
    pub const RISCV_REG_F29_64: Type = 92;
    pub const RISCV_REG_F30_32: Type = 93;
    pub const RISCV_REG_F30_64: Type = 94;
    pub const RISCV_REG_F31_32: Type = 95;
    pub const RISCV_REG_F31_64: Type = 96;
    pub const RISCV_REG_ENDING: Type = 97;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum riscv_insn {
    RISCV_INS_INVALID = 0,
    RISCV_INS_ADD = 1,
    RISCV_INS_ADDI = 2,
    RISCV_INS_ADDIW = 3,
    RISCV_INS_ADDW = 4,
    RISCV_INS_AMOADD_D = 5,
    RISCV_INS_AMOADD_D_AQ = 6,
    RISCV_INS_AMOADD_D_AQ_RL = 7,
    RISCV_INS_AMOADD_D_RL = 8,
    RISCV_INS_AMOADD_W = 9,
    RISCV_INS_AMOADD_W_AQ = 10,
    RISCV_INS_AMOADD_W_AQ_RL = 11,
    RISCV_INS_AMOADD_W_RL = 12,
    RISCV_INS_AMOAND_D = 13,
    RISCV_INS_AMOAND_D_AQ = 14,
    RISCV_INS_AMOAND_D_AQ_RL = 15,
    RISCV_INS_AMOAND_D_RL = 16,
    RISCV_INS_AMOAND_W = 17,
    RISCV_INS_AMOAND_W_AQ = 18,
    RISCV_INS_AMOAND_W_AQ_RL = 19,
    RISCV_INS_AMOAND_W_RL = 20,
    RISCV_INS_AMOMAXU_D = 21,
    RISCV_INS_AMOMAXU_D_AQ = 22,
    RISCV_INS_AMOMAXU_D_AQ_RL = 23,
    RISCV_INS_AMOMAXU_D_RL = 24,
    RISCV_INS_AMOMAXU_W = 25,
    RISCV_INS_AMOMAXU_W_AQ = 26,
    RISCV_INS_AMOMAXU_W_AQ_RL = 27,
    RISCV_INS_AMOMAXU_W_RL = 28,
    RISCV_INS_AMOMAX_D = 29,
    RISCV_INS_AMOMAX_D_AQ = 30,
    RISCV_INS_AMOMAX_D_AQ_RL = 31,
    RISCV_INS_AMOMAX_D_RL = 32,
    RISCV_INS_AMOMAX_W = 33,
    RISCV_INS_AMOMAX_W_AQ = 34,
    RISCV_INS_AMOMAX_W_AQ_RL = 35,
    RISCV_INS_AMOMAX_W_RL = 36,
    RISCV_INS_AMOMINU_D = 37,
    RISCV_INS_AMOMINU_D_AQ = 38,
    RISCV_INS_AMOMINU_D_AQ_RL = 39,
    RISCV_INS_AMOMINU_D_RL = 40,
    RISCV_INS_AMOMINU_W = 41,
    RISCV_INS_AMOMINU_W_AQ = 42,
    RISCV_INS_AMOMINU_W_AQ_RL = 43,
    RISCV_INS_AMOMINU_W_RL = 44,
    RISCV_INS_AMOMIN_D = 45,
    RISCV_INS_AMOMIN_D_AQ = 46,
    RISCV_INS_AMOMIN_D_AQ_RL = 47,
    RISCV_INS_AMOMIN_D_RL = 48,
    RISCV_INS_AMOMIN_W = 49,
    RISCV_INS_AMOMIN_W_AQ = 50,
    RISCV_INS_AMOMIN_W_AQ_RL = 51,
    RISCV_INS_AMOMIN_W_RL = 52,
    RISCV_INS_AMOOR_D = 53,
    RISCV_INS_AMOOR_D_AQ = 54,
    RISCV_INS_AMOOR_D_AQ_RL = 55,
    RISCV_INS_AMOOR_D_RL = 56,
    RISCV_INS_AMOOR_W = 57,
    RISCV_INS_AMOOR_W_AQ = 58,
    RISCV_INS_AMOOR_W_AQ_RL = 59,
    RISCV_INS_AMOOR_W_RL = 60,
    RISCV_INS_AMOSWAP_D = 61,
    RISCV_INS_AMOSWAP_D_AQ = 62,
    RISCV_INS_AMOSWAP_D_AQ_RL = 63,
    RISCV_INS_AMOSWAP_D_RL = 64,
    RISCV_INS_AMOSWAP_W = 65,
    RISCV_INS_AMOSWAP_W_AQ = 66,
    RISCV_INS_AMOSWAP_W_AQ_RL = 67,
    RISCV_INS_AMOSWAP_W_RL = 68,
    RISCV_INS_AMOXOR_D = 69,
    RISCV_INS_AMOXOR_D_AQ = 70,
    RISCV_INS_AMOXOR_D_AQ_RL = 71,
    RISCV_INS_AMOXOR_D_RL = 72,
    RISCV_INS_AMOXOR_W = 73,
    RISCV_INS_AMOXOR_W_AQ = 74,
    RISCV_INS_AMOXOR_W_AQ_RL = 75,
    RISCV_INS_AMOXOR_W_RL = 76,
    RISCV_INS_AND = 77,
    RISCV_INS_ANDI = 78,
    RISCV_INS_AUIPC = 79,
    RISCV_INS_BEQ = 80,
    RISCV_INS_BGE = 81,
    RISCV_INS_BGEU = 82,
    RISCV_INS_BLT = 83,
    RISCV_INS_BLTU = 84,
    RISCV_INS_BNE = 85,
    RISCV_INS_CSRRC = 86,
    RISCV_INS_CSRRCI = 87,
    RISCV_INS_CSRRS = 88,
    RISCV_INS_CSRRSI = 89,
    RISCV_INS_CSRRW = 90,
    RISCV_INS_CSRRWI = 91,
    RISCV_INS_C_ADD = 92,
    RISCV_INS_C_ADDI = 93,
    RISCV_INS_C_ADDI16SP = 94,
    RISCV_INS_C_ADDI4SPN = 95,
    RISCV_INS_C_ADDIW = 96,
    RISCV_INS_C_ADDW = 97,
    RISCV_INS_C_AND = 98,
    RISCV_INS_C_ANDI = 99,
    RISCV_INS_C_BEQZ = 100,
    RISCV_INS_C_BNEZ = 101,
    RISCV_INS_C_EBREAK = 102,
    RISCV_INS_C_FLD = 103,
    RISCV_INS_C_FLDSP = 104,
    RISCV_INS_C_FLW = 105,
    RISCV_INS_C_FLWSP = 106,
    RISCV_INS_C_FSD = 107,
    RISCV_INS_C_FSDSP = 108,
    RISCV_INS_C_FSW = 109,
    RISCV_INS_C_FSWSP = 110,
    RISCV_INS_C_J = 111,
    RISCV_INS_C_JAL = 112,
    RISCV_INS_C_JALR = 113,
    RISCV_INS_C_JR = 114,
    RISCV_INS_C_LD = 115,
    RISCV_INS_C_LDSP = 116,
    RISCV_INS_C_LI = 117,
    RISCV_INS_C_LUI = 118,
    RISCV_INS_C_LW = 119,
    RISCV_INS_C_LWSP = 120,
    RISCV_INS_C_MV = 121,
    RISCV_INS_C_NOP = 122,
    RISCV_INS_C_OR = 123,
    RISCV_INS_C_SD = 124,
    RISCV_INS_C_SDSP = 125,
    RISCV_INS_C_SLLI = 126,
    RISCV_INS_C_SRAI = 127,
    RISCV_INS_C_SRLI = 128,
    RISCV_INS_C_SUB = 129,
    RISCV_INS_C_SUBW = 130,
    RISCV_INS_C_SW = 131,
    RISCV_INS_C_SWSP = 132,
    RISCV_INS_C_UNIMP = 133,
    RISCV_INS_C_XOR = 134,
    RISCV_INS_DIV = 135,
    RISCV_INS_DIVU = 136,
    RISCV_INS_DIVUW = 137,
    RISCV_INS_DIVW = 138,
    RISCV_INS_EBREAK = 139,
    RISCV_INS_ECALL = 140,
    RISCV_INS_FADD_D = 141,
    RISCV_INS_FADD_S = 142,
    RISCV_INS_FCLASS_D = 143,
    RISCV_INS_FCLASS_S = 144,
    RISCV_INS_FCVT_D_L = 145,
    RISCV_INS_FCVT_D_LU = 146,
    RISCV_INS_FCVT_D_S = 147,
    RISCV_INS_FCVT_D_W = 148,
    RISCV_INS_FCVT_D_WU = 149,
    RISCV_INS_FCVT_LU_D = 150,
    RISCV_INS_FCVT_LU_S = 151,
    RISCV_INS_FCVT_L_D = 152,
    RISCV_INS_FCVT_L_S = 153,
    RISCV_INS_FCVT_S_D = 154,
    RISCV_INS_FCVT_S_L = 155,
    RISCV_INS_FCVT_S_LU = 156,
    RISCV_INS_FCVT_S_W = 157,
    RISCV_INS_FCVT_S_WU = 158,
    RISCV_INS_FCVT_WU_D = 159,
    RISCV_INS_FCVT_WU_S = 160,
    RISCV_INS_FCVT_W_D = 161,
    RISCV_INS_FCVT_W_S = 162,
    RISCV_INS_FDIV_D = 163,
    RISCV_INS_FDIV_S = 164,
    RISCV_INS_FENCE = 165,
    RISCV_INS_FENCE_I = 166,
    RISCV_INS_FENCE_TSO = 167,
    RISCV_INS_FEQ_D = 168,
    RISCV_INS_FEQ_S = 169,
    RISCV_INS_FLD = 170,
    RISCV_INS_FLE_D = 171,
    RISCV_INS_FLE_S = 172,
    RISCV_INS_FLT_D = 173,
    RISCV_INS_FLT_S = 174,
    RISCV_INS_FLW = 175,
    RISCV_INS_FMADD_D = 176,
    RISCV_INS_FMADD_S = 177,
    RISCV_INS_FMAX_D = 178,
    RISCV_INS_FMAX_S = 179,
    RISCV_INS_FMIN_D = 180,
    RISCV_INS_FMIN_S = 181,
    RISCV_INS_FMSUB_D = 182,
    RISCV_INS_FMSUB_S = 183,
    RISCV_INS_FMUL_D = 184,
    RISCV_INS_FMUL_S = 185,
    RISCV_INS_FMV_D_X = 186,
    RISCV_INS_FMV_W_X = 187,
    RISCV_INS_FMV_X_D = 188,
    RISCV_INS_FMV_X_W = 189,
    RISCV_INS_FNMADD_D = 190,
    RISCV_INS_FNMADD_S = 191,
    RISCV_INS_FNMSUB_D = 192,
    RISCV_INS_FNMSUB_S = 193,
    RISCV_INS_FSD = 194,
    RISCV_INS_FSGNJN_D = 195,
    RISCV_INS_FSGNJN_S = 196,
    RISCV_INS_FSGNJX_D = 197,
    RISCV_INS_FSGNJX_S = 198,
    RISCV_INS_FSGNJ_D = 199,
    RISCV_INS_FSGNJ_S = 200,
    RISCV_INS_FSQRT_D = 201,
    RISCV_INS_FSQRT_S = 202,
    RISCV_INS_FSUB_D = 203,
    RISCV_INS_FSUB_S = 204,
    RISCV_INS_FSW = 205,
    RISCV_INS_JAL = 206,
    RISCV_INS_JALR = 207,
    RISCV_INS_LB = 208,
    RISCV_INS_LBU = 209,
    RISCV_INS_LD = 210,
    RISCV_INS_LH = 211,
    RISCV_INS_LHU = 212,
    RISCV_INS_LR_D = 213,
    RISCV_INS_LR_D_AQ = 214,
    RISCV_INS_LR_D_AQ_RL = 215,
    RISCV_INS_LR_D_RL = 216,
    RISCV_INS_LR_W = 217,
    RISCV_INS_LR_W_AQ = 218,
    RISCV_INS_LR_W_AQ_RL = 219,
    RISCV_INS_LR_W_RL = 220,
    RISCV_INS_LUI = 221,
    RISCV_INS_LW = 222,
    RISCV_INS_LWU = 223,
    RISCV_INS_MRET = 224,
    RISCV_INS_MUL = 225,
    RISCV_INS_MULH = 226,
    RISCV_INS_MULHSU = 227,
    RISCV_INS_MULHU = 228,
    RISCV_INS_MULW = 229,
    RISCV_INS_OR = 230,
    RISCV_INS_ORI = 231,
    RISCV_INS_REM = 232,
    RISCV_INS_REMU = 233,
    RISCV_INS_REMUW = 234,
    RISCV_INS_REMW = 235,
    RISCV_INS_SB = 236,
    RISCV_INS_SC_D = 237,
    RISCV_INS_SC_D_AQ = 238,
    RISCV_INS_SC_D_AQ_RL = 239,
    RISCV_INS_SC_D_RL = 240,
    RISCV_INS_SC_W = 241,
    RISCV_INS_SC_W_AQ = 242,
    RISCV_INS_SC_W_AQ_RL = 243,
    RISCV_INS_SC_W_RL = 244,
    RISCV_INS_SD = 245,
    RISCV_INS_SFENCE_VMA = 246,
    RISCV_INS_SH = 247,
    RISCV_INS_SLL = 248,
    RISCV_INS_SLLI = 249,
    RISCV_INS_SLLIW = 250,
    RISCV_INS_SLLW = 251,
    RISCV_INS_SLT = 252,
    RISCV_INS_SLTI = 253,
    RISCV_INS_SLTIU = 254,
    RISCV_INS_SLTU = 255,
    RISCV_INS_SRA = 256,
    RISCV_INS_SRAI = 257,
    RISCV_INS_SRAIW = 258,
    RISCV_INS_SRAW = 259,
    RISCV_INS_SRET = 260,
    RISCV_INS_SRL = 261,
    RISCV_INS_SRLI = 262,
    RISCV_INS_SRLIW = 263,
    RISCV_INS_SRLW = 264,
    RISCV_INS_SUB = 265,
    RISCV_INS_SUBW = 266,
    RISCV_INS_SW = 267,
    RISCV_INS_UNIMP = 268,
    RISCV_INS_URET = 269,
    RISCV_INS_WFI = 270,
    RISCV_INS_XOR = 271,
    RISCV_INS_XORI = 272,
    RISCV_INS_ENDING = 273,
}
pub mod riscv_insn_group {
    pub type Type = libc::c_uint;
    #[doc = "< = CS_GRP_INVALID"]
    pub const RISCV_GRP_INVALID: Type = 0;
    #[doc = "< = CS_GRP_JUMP"]
    pub const RISCV_GRP_JUMP: Type = 1;
    #[doc = "< = CS_GRP_CALL"]
    pub const RISCV_GRP_CALL: Type = 2;
    #[doc = "< = CS_GRP_RET"]
    pub const RISCV_GRP_RET: Type = 3;
    #[doc = "< = CS_GRP_INT"]
    pub const RISCV_GRP_INT: Type = 4;
    #[doc = "< = CS_GRP_IRET"]
    pub const RISCV_GRP_IRET: Type = 5;
    #[doc = "< = CS_GRP_PRIVILEGE"]
    pub const RISCV_GRP_PRIVILEGE: Type = 6;
    #[doc = "< = CS_GRP_BRANCH_RELATIVE"]
    pub const RISCV_GRP_BRANCH_RELATIVE: Type = 7;
    pub const RISCV_GRP_ISRV32: Type = 128;
    pub const RISCV_GRP_ISRV64: Type = 129;
    pub const RISCV_GRP_HASSTDEXTA: Type = 130;
    pub const RISCV_GRP_HASSTDEXTC: Type = 131;
    pub const RISCV_GRP_HASSTDEXTD: Type = 132;
    pub const RISCV_GRP_HASSTDEXTF: Type = 133;
    pub const RISCV_GRP_HASSTDEXTM: Type = 134;
    pub const RISCV_GRP_ENDING: Type = 135;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum wasm_op_type {
    WASM_OP_INVALID = 0,
    WASM_OP_IMM = 2,
    WASM_OP_NONE = 16,
    WASM_OP_INT7 = 17,
    WASM_OP_VARUINT32 = 18,
    WASM_OP_VARUINT64 = 19,
    WASM_OP_UINT32 = 20,
    WASM_OP_UINT64 = 21,
    WASM_OP_BRTABLE = 22,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_wasm_brtable {
    pub length: u32,
    pub address: u64,
    pub default_target: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_wasm_op {
    pub type_: wasm_op_type,
    pub size: u32,
    pub __bindgen_anon_1: cs_wasm_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_wasm_op__bindgen_ty_1 {
    pub int7: i8,
    pub varuint32: u32,
    pub varuint64: u64,
    pub uint32: u32,
    pub uint64: u64,
    pub immediate: [u32; 2usize],
    pub brtable: cs_wasm_brtable,
}
impl ::core::fmt::Debug for cs_wasm_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_wasm_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_wasm_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_wasm_op {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_wasm {
    pub op_count: u8,
    pub operands: [cs_wasm_op; 2usize],
}
impl ::core::fmt::Debug for cs_wasm {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_wasm {{ operands: {:?} }}", self.operands)
    }
}
pub mod mos65xx_reg {
    #[doc = " MOS65XX registers and special registers"]
    pub type Type = libc::c_uint;
    pub const MOS65XX_REG_INVALID: Type = 0;
    #[doc = "< accumulator"]
    pub const MOS65XX_REG_ACC: Type = 1;
    #[doc = "< X index register"]
    pub const MOS65XX_REG_X: Type = 2;
    #[doc = "< Y index register"]
    pub const MOS65XX_REG_Y: Type = 3;
    #[doc = "< status register"]
    pub const MOS65XX_REG_P: Type = 4;
    #[doc = "< stack pointer register"]
    pub const MOS65XX_REG_SP: Type = 5;
    #[doc = "< direct page register"]
    pub const MOS65XX_REG_DP: Type = 6;
    #[doc = "< data bank register"]
    pub const MOS65XX_REG_B: Type = 7;
    #[doc = "< program bank register"]
    pub const MOS65XX_REG_K: Type = 8;
    pub const MOS65XX_REG_ENDING: Type = 9;
}
#[repr(u32)]
#[doc = " MOS65XX Addressing Modes"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mos65xx_address_mode {
    #[doc = "< No address mode."]
    MOS65XX_AM_NONE = 0,
    #[doc = "< implied addressing (no addressing mode)"]
    MOS65XX_AM_IMP = 1,
    #[doc = "< accumulator addressing"]
    MOS65XX_AM_ACC = 2,
    #[doc = "< 8/16 Bit immediate value"]
    MOS65XX_AM_IMM = 3,
    #[doc = "< relative addressing used by branches"]
    MOS65XX_AM_REL = 4,
    #[doc = "< interrupt addressing"]
    MOS65XX_AM_INT = 5,
    #[doc = "< memory block addressing"]
    MOS65XX_AM_BLOCK = 6,
    #[doc = "< zeropage addressing"]
    MOS65XX_AM_ZP = 7,
    #[doc = "< indexed zeropage addressing by the X index register"]
    MOS65XX_AM_ZP_X = 8,
    #[doc = "< indexed zeropage addressing by the Y index register"]
    MOS65XX_AM_ZP_Y = 9,
    #[doc = "< zero page address, branch relative address"]
    MOS65XX_AM_ZP_REL = 10,
    #[doc = "< indirect zeropage addressing"]
    MOS65XX_AM_ZP_IND = 11,
    #[doc = "< indexed zeropage indirect addressing by the X index register"]
    MOS65XX_AM_ZP_X_IND = 12,
    #[doc = "< indirect zeropage indexed addressing by the Y index register"]
    MOS65XX_AM_ZP_IND_Y = 13,
    #[doc = "< zeropage indirect long addressing"]
    MOS65XX_AM_ZP_IND_LONG = 14,
    #[doc = "< zeropage indirect long addressing indexed by Y register"]
    MOS65XX_AM_ZP_IND_LONG_Y = 15,
    #[doc = "< absolute addressing"]
    MOS65XX_AM_ABS = 16,
    #[doc = "< indexed absolute addressing by the X index register"]
    MOS65XX_AM_ABS_X = 17,
    #[doc = "< indexed absolute addressing by the Y index register"]
    MOS65XX_AM_ABS_Y = 18,
    #[doc = "< absolute indirect addressing"]
    MOS65XX_AM_ABS_IND = 19,
    #[doc = "< indexed absolute indirect addressing by the X index register"]
    MOS65XX_AM_ABS_X_IND = 20,
    #[doc = "< absolute indirect long addressing"]
    MOS65XX_AM_ABS_IND_LONG = 21,
    #[doc = "< absolute long address mode"]
    MOS65XX_AM_ABS_LONG = 22,
    #[doc = "< absolute long address mode, indexed by X register"]
    MOS65XX_AM_ABS_LONG_X = 23,
    #[doc = "< stack relative addressing"]
    MOS65XX_AM_SR = 24,
    #[doc = "< indirect stack relative addressing indexed by the Y index register"]
    MOS65XX_AM_SR_IND_Y = 25,
}
#[repr(u32)]
#[doc = " MOS65XX instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mos65xx_insn {
    MOS65XX_INS_INVALID = 0,
    MOS65XX_INS_ADC = 1,
    MOS65XX_INS_AND = 2,
    MOS65XX_INS_ASL = 3,
    MOS65XX_INS_BBR = 4,
    MOS65XX_INS_BBS = 5,
    MOS65XX_INS_BCC = 6,
    MOS65XX_INS_BCS = 7,
    MOS65XX_INS_BEQ = 8,
    MOS65XX_INS_BIT = 9,
    MOS65XX_INS_BMI = 10,
    MOS65XX_INS_BNE = 11,
    MOS65XX_INS_BPL = 12,
    MOS65XX_INS_BRA = 13,
    MOS65XX_INS_BRK = 14,
    MOS65XX_INS_BRL = 15,
    MOS65XX_INS_BVC = 16,
    MOS65XX_INS_BVS = 17,
    MOS65XX_INS_CLC = 18,
    MOS65XX_INS_CLD = 19,
    MOS65XX_INS_CLI = 20,
    MOS65XX_INS_CLV = 21,
    MOS65XX_INS_CMP = 22,
    MOS65XX_INS_COP = 23,
    MOS65XX_INS_CPX = 24,
    MOS65XX_INS_CPY = 25,
    MOS65XX_INS_DEC = 26,
    MOS65XX_INS_DEX = 27,
    MOS65XX_INS_DEY = 28,
    MOS65XX_INS_EOR = 29,
    MOS65XX_INS_INC = 30,
    MOS65XX_INS_INX = 31,
    MOS65XX_INS_INY = 32,
    MOS65XX_INS_JML = 33,
    MOS65XX_INS_JMP = 34,
    MOS65XX_INS_JSL = 35,
    MOS65XX_INS_JSR = 36,
    MOS65XX_INS_LDA = 37,
    MOS65XX_INS_LDX = 38,
    MOS65XX_INS_LDY = 39,
    MOS65XX_INS_LSR = 40,
    MOS65XX_INS_MVN = 41,
    MOS65XX_INS_MVP = 42,
    MOS65XX_INS_NOP = 43,
    MOS65XX_INS_ORA = 44,
    MOS65XX_INS_PEA = 45,
    MOS65XX_INS_PEI = 46,
    MOS65XX_INS_PER = 47,
    MOS65XX_INS_PHA = 48,
    MOS65XX_INS_PHB = 49,
    MOS65XX_INS_PHD = 50,
    MOS65XX_INS_PHK = 51,
    MOS65XX_INS_PHP = 52,
    MOS65XX_INS_PHX = 53,
    MOS65XX_INS_PHY = 54,
    MOS65XX_INS_PLA = 55,
    MOS65XX_INS_PLB = 56,
    MOS65XX_INS_PLD = 57,
    MOS65XX_INS_PLP = 58,
    MOS65XX_INS_PLX = 59,
    MOS65XX_INS_PLY = 60,
    MOS65XX_INS_REP = 61,
    MOS65XX_INS_RMB = 62,
    MOS65XX_INS_ROL = 63,
    MOS65XX_INS_ROR = 64,
    MOS65XX_INS_RTI = 65,
    MOS65XX_INS_RTL = 66,
    MOS65XX_INS_RTS = 67,
    MOS65XX_INS_SBC = 68,
    MOS65XX_INS_SEC = 69,
    MOS65XX_INS_SED = 70,
    MOS65XX_INS_SEI = 71,
    MOS65XX_INS_SEP = 72,
    MOS65XX_INS_SMB = 73,
    MOS65XX_INS_STA = 74,
    MOS65XX_INS_STP = 75,
    MOS65XX_INS_STX = 76,
    MOS65XX_INS_STY = 77,
    MOS65XX_INS_STZ = 78,
    MOS65XX_INS_TAX = 79,
    MOS65XX_INS_TAY = 80,
    MOS65XX_INS_TCD = 81,
    MOS65XX_INS_TCS = 82,
    MOS65XX_INS_TDC = 83,
    MOS65XX_INS_TRB = 84,
    MOS65XX_INS_TSB = 85,
    MOS65XX_INS_TSC = 86,
    MOS65XX_INS_TSX = 87,
    MOS65XX_INS_TXA = 88,
    MOS65XX_INS_TXS = 89,
    MOS65XX_INS_TXY = 90,
    MOS65XX_INS_TYA = 91,
    MOS65XX_INS_TYX = 92,
    MOS65XX_INS_WAI = 93,
    MOS65XX_INS_WDM = 94,
    MOS65XX_INS_XBA = 95,
    MOS65XX_INS_XCE = 96,
    MOS65XX_INS_ENDING = 97,
}
#[repr(u32)]
#[doc = " Group of MOS65XX instructions"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mos65xx_group_type {
    #[doc = "< CS_GRP_INVALID"]
    MOS65XX_GRP_INVALID = 0,
    #[doc = "< = CS_GRP_JUMP"]
    MOS65XX_GRP_JUMP = 1,
    #[doc = "< = CS_GRP_RET"]
    MOS65XX_GRP_CALL = 2,
    #[doc = "< = CS_GRP_RET"]
    MOS65XX_GRP_RET = 3,
    #[doc = "< = CS_GRP_INT"]
    MOS65XX_GRP_INT = 4,
    #[doc = "< = CS_GRP_IRET"]
    MOS65XX_GRP_IRET = 5,
    #[doc = "< = CS_GRP_BRANCH_RELATIVE"]
    MOS65XX_GRP_BRANCH_RELATIVE = 6,
    MOS65XX_GRP_ENDING = 7,
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mos65xx_op_type {
    #[doc = "< = CS_OP_INVALID (Uninitialized)."]
    MOS65XX_OP_INVALID = 0,
    #[doc = "< = CS_OP_REG (Register operand)."]
    MOS65XX_OP_REG = 1,
    #[doc = "< = CS_OP_IMM (Immediate operand)."]
    MOS65XX_OP_IMM = 2,
    #[doc = "< = CS_OP_MEM (Memory operand)."]
    MOS65XX_OP_MEM = 128,
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_mos65xx_op {
    #[doc = "< operand type"]
    pub type_: mos65xx_op_type,
    pub __bindgen_anon_1: cs_mos65xx_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_mos65xx_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: mos65xx_reg::Type,
    #[doc = "< immediate value for IMM operand"]
    pub imm: u16,
    #[doc = "< address for MEM operand"]
    pub mem: u32,
}
impl ::core::fmt::Debug for cs_mos65xx_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_mos65xx_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_mos65xx_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_mos65xx_op {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[doc = " The MOS65XX address mode and its operands"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_mos65xx {
    pub am: mos65xx_address_mode,
    pub modifies_flags: bool,
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_mos65xx_op; 3usize],
}
impl ::core::fmt::Debug for cs_mos65xx {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_mos65xx {{ am: {:?}, modifies_flags: {:?}, operands: {:?} }}",
            self.am, self.modifies_flags, self.operands
        )
    }
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum bpf_op_type {
    BPF_OP_INVALID = 0,
    BPF_OP_REG = 1,
    BPF_OP_IMM = 2,
    BPF_OP_OFF = 16,
    #[doc = "< corresponds to cBPF's BPF_MSH mode"]
    BPF_OP_MSH = 17,
    #[doc = "< cBPF's extension (not eBPF)"]
    BPF_OP_EXT = 18,
    #[doc = "< M[k] in cBPF"]
    BPF_OP_MMEM = 147,
    BPF_OP_MEM = 128,
}
pub mod bpf_reg {
    #[doc = " BPF registers"]
    pub type Type = libc::c_uint;
    pub const BPF_REG_INVALID: Type = 0;
    pub const BPF_REG_A: Type = 1;
    pub const BPF_REG_X: Type = 2;
    pub const BPF_REG_R0: Type = 3;
    pub const BPF_REG_R1: Type = 4;
    pub const BPF_REG_R2: Type = 5;
    pub const BPF_REG_R3: Type = 6;
    pub const BPF_REG_R4: Type = 7;
    pub const BPF_REG_R5: Type = 8;
    pub const BPF_REG_R6: Type = 9;
    pub const BPF_REG_R7: Type = 10;
    pub const BPF_REG_R8: Type = 11;
    pub const BPF_REG_R9: Type = 12;
    pub const BPF_REG_R10: Type = 13;
    pub const BPF_REG_ENDING: Type = 14;
}
#[doc = " Instruction's operand referring to memory\n This is associated with BPF_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_op_mem {
    #[doc = "< base register"]
    pub base: bpf_reg::Type,
    #[doc = "< offset value"]
    pub disp: u32,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum bpf_ext_type {
    BPF_EXT_INVALID = 0,
    BPF_EXT_LEN = 1,
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_bpf_op {
    pub type_: bpf_op_type,
    pub __bindgen_anon_1: cs_bpf_op__bindgen_ty_1,
    #[doc = "< is this operand signed? It is set for memory, immediate and offset operands."]
    pub is_signed: bool,
    #[doc = "< is this operand referring to packet data? It is set for memory operands."]
    pub is_pkt: bool,
    #[doc = " How is this operand accessed? (READ, WRITE or READ|WRITE)\n This field is combined of cs_ac_type.\n NOTE: this field is irrelevant if engine is compiled in DIET mode."]
    pub access: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_bpf_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: u8,
    #[doc = "< immediate value IMM operand"]
    pub imm: u64,
    #[doc = "< offset value, used in jump & call"]
    pub off: u32,
    #[doc = "< base/disp value for MEM operand"]
    pub mem: bpf_op_mem,
    #[doc = "< M[k] in cBPF"]
    pub mmem: u32,
    #[doc = "< corresponds to cBPF's BPF_MSH mode"]
    pub msh: u32,
    #[doc = "< cBPF's extension (not eBPF)"]
    pub ext: u32,
}
impl ::core::fmt::Debug for cs_bpf_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_bpf_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_bpf_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_bpf_op {{ type: {:?}, __bindgen_anon_1: {:?}, is_signed: {:?}, is_pkt: {:?} }}",
            self.type_, self.__bindgen_anon_1, self.is_signed, self.is_pkt
        )
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_bpf {
    pub op_count: u8,
    pub operands: [cs_bpf_op; 4usize],
}
impl ::core::fmt::Debug for cs_bpf {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_bpf {{ operands: {:?} }}", self.operands)
    }
}
impl bpf_insn {
    pub const BPF_INS_LD: bpf_insn = bpf_insn::BPF_INS_LDW;
}
impl bpf_insn {
    pub const BPF_INS_LDX: bpf_insn = bpf_insn::BPF_INS_LDXW;
}
impl bpf_insn {
    pub const BPF_INS_ST: bpf_insn = bpf_insn::BPF_INS_STW;
}
impl bpf_insn {
    pub const BPF_INS_STX: bpf_insn = bpf_insn::BPF_INS_STXW;
}
#[repr(u32)]
#[doc = " BPF instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum bpf_insn {
    BPF_INS_INVALID = 0,
    BPF_INS_ADD = 1,
    BPF_INS_SUB = 2,
    BPF_INS_MUL = 3,
    BPF_INS_DIV = 4,
    BPF_INS_SDIV = 5,
    BPF_INS_OR = 6,
    BPF_INS_AND = 7,
    BPF_INS_LSH = 8,
    BPF_INS_RSH = 9,
    BPF_INS_NEG = 10,
    BPF_INS_MOD = 11,
    BPF_INS_SMOD = 12,
    BPF_INS_XOR = 13,
    #[doc = "< eBPF only"]
    BPF_INS_MOV = 14,
    #[doc = "< eBPF only"]
    BPF_INS_MOVSB = 15,
    #[doc = "< eBPF only"]
    BPF_INS_MOVSH = 16,
    #[doc = "< eBPF only"]
    BPF_INS_ARSH = 17,
    BPF_INS_ADD64 = 18,
    BPF_INS_SUB64 = 19,
    BPF_INS_MUL64 = 20,
    BPF_INS_DIV64 = 21,
    BPF_INS_SDIV64 = 22,
    BPF_INS_OR64 = 23,
    BPF_INS_AND64 = 24,
    BPF_INS_LSH64 = 25,
    BPF_INS_RSH64 = 26,
    BPF_INS_NEG64 = 27,
    BPF_INS_MOD64 = 28,
    BPF_INS_SMOD64 = 29,
    BPF_INS_XOR64 = 30,
    BPF_INS_MOV64 = 31,
    BPF_INS_MOVSB64 = 32,
    BPF_INS_MOVSH64 = 33,
    BPF_INS_MOVSW64 = 34,
    BPF_INS_ARSH64 = 35,
    BPF_INS_LE16 = 36,
    BPF_INS_LE32 = 37,
    BPF_INS_LE64 = 38,
    BPF_INS_BE16 = 39,
    BPF_INS_BE32 = 40,
    BPF_INS_BE64 = 41,
    BPF_INS_BSWAP16 = 42,
    BPF_INS_BSWAP32 = 43,
    BPF_INS_BSWAP64 = 44,
    #[doc = "< eBPF only"]
    BPF_INS_LDW = 45,
    BPF_INS_LDH = 46,
    BPF_INS_LDB = 47,
    #[doc = "< eBPF only: load 64-bit imm"]
    BPF_INS_LDDW = 48,
    #[doc = "< eBPF only"]
    BPF_INS_LDXW = 49,
    #[doc = "< eBPF only"]
    BPF_INS_LDXH = 50,
    #[doc = "< eBPF only"]
    BPF_INS_LDXB = 51,
    #[doc = "< eBPF only\n< Packet data access"]
    BPF_INS_LDXDW = 52,
    #[doc = "< eBPF only"]
    BPF_INS_LDABSW = 53,
    #[doc = "< eBPF only"]
    BPF_INS_LDABSH = 54,
    #[doc = "< eBPF only"]
    BPF_INS_LDABSB = 55,
    #[doc = "< eBPF only"]
    BPF_INS_LDINDW = 56,
    #[doc = "< eBPF only"]
    BPF_INS_LDINDH = 57,
    #[doc = "< eBPF only"]
    BPF_INS_LDINDB = 58,
    #[doc = "< eBPF only"]
    BPF_INS_STW = 59,
    #[doc = "< eBPF only"]
    BPF_INS_STH = 60,
    #[doc = "< eBPF only"]
    BPF_INS_STB = 61,
    #[doc = "< eBPF only"]
    BPF_INS_STDW = 62,
    #[doc = "< eBPF only"]
    BPF_INS_STXW = 63,
    #[doc = "< eBPF only"]
    BPF_INS_STXH = 64,
    #[doc = "< eBPF only"]
    BPF_INS_STXB = 65,
    #[doc = "< eBPF only"]
    BPF_INS_STXDW = 66,
    #[doc = "< eBPF only"]
    BPF_INS_XADDW = 67,
    #[doc = "< eBPF only"]
    BPF_INS_XADDDW = 68,
    BPF_INS_JA = 69,
    BPF_INS_JEQ = 70,
    BPF_INS_JGT = 71,
    BPF_INS_JGE = 72,
    BPF_INS_JSET = 73,
    #[doc = "< eBPF only"]
    BPF_INS_JNE = 74,
    #[doc = "< eBPF only"]
    BPF_INS_JSGT = 75,
    #[doc = "< eBPF only"]
    BPF_INS_JSGE = 76,
    #[doc = "< eBPF only"]
    BPF_INS_CALL = 77,
    #[doc = "< eBPF only"]
    BPF_INS_CALLX = 78,
    #[doc = "< eBPF only"]
    BPF_INS_EXIT = 79,
    #[doc = "< eBPF only"]
    BPF_INS_JLT = 80,
    #[doc = "< eBPF only"]
    BPF_INS_JLE = 81,
    #[doc = "< eBPF only"]
    BPF_INS_JSLT = 82,
    #[doc = "< eBPF only"]
    BPF_INS_JSLE = 83,
    BPF_INS_JAL = 84,
    BPF_INS_JEQ32 = 85,
    BPF_INS_JGT32 = 86,
    BPF_INS_JGE32 = 87,
    BPF_INS_JSET32 = 88,
    BPF_INS_JNE32 = 89,
    BPF_INS_JSGT32 = 90,
    BPF_INS_JSGE32 = 91,
    BPF_INS_JLT32 = 92,
    BPF_INS_JLE32 = 93,
    BPF_INS_JSLT32 = 94,
    BPF_INS_JSLE32 = 95,
    BPF_INS_RET = 96,
    BPF_INS_AADD = 97,
    BPF_INS_AOR = 98,
    BPF_INS_AAND = 99,
    BPF_INS_AXOR = 100,
    BPF_INS_AFADD = 101,
    BPF_INS_AFOR = 102,
    BPF_INS_AFAND = 103,
    BPF_INS_AFXOR = 104,
    BPF_INS_AXCHG64 = 105,
    BPF_INS_ACMPXCHG64 = 106,
    BPF_INS_AADD64 = 107,
    BPF_INS_AOR64 = 108,
    BPF_INS_AAND64 = 109,
    BPF_INS_AXOR64 = 110,
    BPF_INS_AFADD64 = 111,
    BPF_INS_AFOR64 = 112,
    BPF_INS_AFAND64 = 113,
    BPF_INS_AFXOR64 = 114,
    BPF_INS_TAX = 115,
    BPF_INS_TXA = 116,
    BPF_INS_ENDING = 117,
}
pub mod bpf_insn_group {
    #[doc = " Group of BPF instructions"]
    pub type Type = libc::c_uint;
    #[doc = "< = CS_GRP_INVALID"]
    pub const BPF_GRP_INVALID: Type = 0;
    pub const BPF_GRP_LOAD: Type = 1;
    pub const BPF_GRP_STORE: Type = 2;
    pub const BPF_GRP_ALU: Type = 3;
    pub const BPF_GRP_JUMP: Type = 4;
    #[doc = "< eBPF only"]
    pub const BPF_GRP_CALL: Type = 5;
    pub const BPF_GRP_RETURN: Type = 6;
    #[doc = "< cBPF only"]
    pub const BPF_GRP_MISC: Type = 7;
    pub const BPF_GRP_ENDING: Type = 8;
}
pub mod sh_reg {
    #[doc = " SH registers and special registers"]
    pub type Type = libc::c_uint;
    pub const SH_REG_INVALID: Type = 0;
    pub const SH_REG_R0: Type = 1;
    pub const SH_REG_R1: Type = 2;
    pub const SH_REG_R2: Type = 3;
    pub const SH_REG_R3: Type = 4;
    pub const SH_REG_R4: Type = 5;
    pub const SH_REG_R5: Type = 6;
    pub const SH_REG_R6: Type = 7;
    pub const SH_REG_R7: Type = 8;
    pub const SH_REG_R8: Type = 9;
    pub const SH_REG_R9: Type = 10;
    pub const SH_REG_R10: Type = 11;
    pub const SH_REG_R11: Type = 12;
    pub const SH_REG_R12: Type = 13;
    pub const SH_REG_R13: Type = 14;
    pub const SH_REG_R14: Type = 15;
    pub const SH_REG_R15: Type = 16;
    pub const SH_REG_R0_BANK: Type = 17;
    pub const SH_REG_R1_BANK: Type = 18;
    pub const SH_REG_R2_BANK: Type = 19;
    pub const SH_REG_R3_BANK: Type = 20;
    pub const SH_REG_R4_BANK: Type = 21;
    pub const SH_REG_R5_BANK: Type = 22;
    pub const SH_REG_R6_BANK: Type = 23;
    pub const SH_REG_R7_BANK: Type = 24;
    pub const SH_REG_FR0: Type = 25;
    pub const SH_REG_FR1: Type = 26;
    pub const SH_REG_FR2: Type = 27;
    pub const SH_REG_FR3: Type = 28;
    pub const SH_REG_FR4: Type = 29;
    pub const SH_REG_FR5: Type = 30;
    pub const SH_REG_FR6: Type = 31;
    pub const SH_REG_FR7: Type = 32;
    pub const SH_REG_FR8: Type = 33;
    pub const SH_REG_FR9: Type = 34;
    pub const SH_REG_FR10: Type = 35;
    pub const SH_REG_FR11: Type = 36;
    pub const SH_REG_FR12: Type = 37;
    pub const SH_REG_FR13: Type = 38;
    pub const SH_REG_FR14: Type = 39;
    pub const SH_REG_FR15: Type = 40;
    pub const SH_REG_DR0: Type = 41;
    pub const SH_REG_DR2: Type = 42;
    pub const SH_REG_DR4: Type = 43;
    pub const SH_REG_DR6: Type = 44;
    pub const SH_REG_DR8: Type = 45;
    pub const SH_REG_DR10: Type = 46;
    pub const SH_REG_DR12: Type = 47;
    pub const SH_REG_DR14: Type = 48;
    pub const SH_REG_XD0: Type = 49;
    pub const SH_REG_XD2: Type = 50;
    pub const SH_REG_XD4: Type = 51;
    pub const SH_REG_XD6: Type = 52;
    pub const SH_REG_XD8: Type = 53;
    pub const SH_REG_XD10: Type = 54;
    pub const SH_REG_XD12: Type = 55;
    pub const SH_REG_XD14: Type = 56;
    pub const SH_REG_XF0: Type = 57;
    pub const SH_REG_XF1: Type = 58;
    pub const SH_REG_XF2: Type = 59;
    pub const SH_REG_XF3: Type = 60;
    pub const SH_REG_XF4: Type = 61;
    pub const SH_REG_XF5: Type = 62;
    pub const SH_REG_XF6: Type = 63;
    pub const SH_REG_XF7: Type = 64;
    pub const SH_REG_XF8: Type = 65;
    pub const SH_REG_XF9: Type = 66;
    pub const SH_REG_XF10: Type = 67;
    pub const SH_REG_XF11: Type = 68;
    pub const SH_REG_XF12: Type = 69;
    pub const SH_REG_XF13: Type = 70;
    pub const SH_REG_XF14: Type = 71;
    pub const SH_REG_XF15: Type = 72;
    pub const SH_REG_FV0: Type = 73;
    pub const SH_REG_FV4: Type = 74;
    pub const SH_REG_FV8: Type = 75;
    pub const SH_REG_FV12: Type = 76;
    pub const SH_REG_XMATRX: Type = 77;
    pub const SH_REG_PC: Type = 78;
    pub const SH_REG_PR: Type = 79;
    pub const SH_REG_MACH: Type = 80;
    pub const SH_REG_MACL: Type = 81;
    pub const SH_REG_SR: Type = 82;
    pub const SH_REG_GBR: Type = 83;
    pub const SH_REG_SSR: Type = 84;
    pub const SH_REG_SPC: Type = 85;
    pub const SH_REG_SGR: Type = 86;
    pub const SH_REG_DBR: Type = 87;
    pub const SH_REG_VBR: Type = 88;
    pub const SH_REG_TBR: Type = 89;
    pub const SH_REG_RS: Type = 90;
    pub const SH_REG_RE: Type = 91;
    pub const SH_REG_MOD: Type = 92;
    pub const SH_REG_FPUL: Type = 93;
    pub const SH_REG_FPSCR: Type = 94;
    pub const SH_REG_DSP_X0: Type = 95;
    pub const SH_REG_DSP_X1: Type = 96;
    pub const SH_REG_DSP_Y0: Type = 97;
    pub const SH_REG_DSP_Y1: Type = 98;
    pub const SH_REG_DSP_A0: Type = 99;
    pub const SH_REG_DSP_A1: Type = 100;
    pub const SH_REG_DSP_A0G: Type = 101;
    pub const SH_REG_DSP_A1G: Type = 102;
    pub const SH_REG_DSP_M0: Type = 103;
    pub const SH_REG_DSP_M1: Type = 104;
    pub const SH_REG_DSP_DSR: Type = 105;
    pub const SH_REG_DSP_RSV0: Type = 106;
    pub const SH_REG_DSP_RSV1: Type = 107;
    pub const SH_REG_DSP_RSV2: Type = 108;
    pub const SH_REG_DSP_RSV3: Type = 109;
    pub const SH_REG_DSP_RSV4: Type = 110;
    pub const SH_REG_DSP_RSV5: Type = 111;
    pub const SH_REG_DSP_RSV6: Type = 112;
    pub const SH_REG_DSP_RSV7: Type = 113;
    pub const SH_REG_DSP_RSV8: Type = 114;
    pub const SH_REG_DSP_RSV9: Type = 115;
    pub const SH_REG_DSP_RSVA: Type = 116;
    pub const SH_REG_DSP_RSVB: Type = 117;
    pub const SH_REG_DSP_RSVC: Type = 118;
    pub const SH_REG_DSP_RSVD: Type = 119;
    pub const SH_REG_DSP_RSVE: Type = 120;
    pub const SH_REG_DSP_RSVF: Type = 121;
    pub const SH_REG_ENDING: Type = 122;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum sh_op_type {
    #[doc = "< = CS_OP_INVALID (Uninitialized)."]
    SH_OP_INVALID = 0,
    #[doc = "< = CS_OP_REG (Register operand)."]
    SH_OP_REG = 1,
    #[doc = "< = CS_OP_IMM (Immediate operand)."]
    SH_OP_IMM = 2,
    #[doc = "< = CS_OP_MEM (Memory operand)."]
    SH_OP_MEM = 128,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum sh_op_mem_type {
    SH_OP_MEM_INVALID = 0,
    #[doc = " <= Invalid"]
    SH_OP_MEM_REG_IND = 1,
    #[doc = " <= Register indirect"]
    SH_OP_MEM_REG_POST = 2,
    #[doc = " <= Register post increment"]
    SH_OP_MEM_REG_PRE = 3,
    #[doc = " <= Register pre decrement"]
    SH_OP_MEM_REG_DISP = 4,
    #[doc = " <= displacement"]
    SH_OP_MEM_REG_R0 = 5,
    #[doc = " <= R0 indexed"]
    SH_OP_MEM_GBR_DISP = 6,
    #[doc = " <= GBR based displacement"]
    SH_OP_MEM_GBR_R0 = 7,
    #[doc = " <= GBR based R0 indexed"]
    SH_OP_MEM_PCR = 8,
    #[doc = " <= PC relative"]
    SH_OP_MEM_TBR_DISP = 9,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sh_op_mem {
    pub address: sh_op_mem_type,
    #[doc = " <= memory address"]
    pub reg: sh_reg::Type,
    #[doc = " <= base register"]
    pub disp: u32,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum sh_dsp_insn {
    SH_INS_DSP_INVALID = 0,
    SH_INS_DSP_NOP = 1,
    SH_INS_DSP_MOV = 2,
    SH_INS_DSP_PSHL = 3,
    SH_INS_DSP_PSHA = 4,
    SH_INS_DSP_PMULS = 5,
    SH_INS_DSP_PCLR_PMULS = 6,
    SH_INS_DSP_PSUB_PMULS = 7,
    SH_INS_DSP_PADD_PMULS = 8,
    SH_INS_DSP_PSUBC = 9,
    SH_INS_DSP_PADDC = 10,
    SH_INS_DSP_PCMP = 11,
    SH_INS_DSP_PABS = 12,
    SH_INS_DSP_PRND = 13,
    SH_INS_DSP_PSUB = 14,
    SH_INS_DSP_PSUBr = 15,
    SH_INS_DSP_PADD = 16,
    SH_INS_DSP_PAND = 17,
    SH_INS_DSP_PXOR = 18,
    SH_INS_DSP_POR = 19,
    SH_INS_DSP_PDEC = 20,
    SH_INS_DSP_PINC = 21,
    SH_INS_DSP_PCLR = 22,
    SH_INS_DSP_PDMSB = 23,
    SH_INS_DSP_PNEG = 24,
    SH_INS_DSP_PCOPY = 25,
    SH_INS_DSP_PSTS = 26,
    SH_INS_DSP_PLDS = 27,
    SH_INS_DSP_PSWAP = 28,
    SH_INS_DSP_PWAD = 29,
    SH_INS_DSP_PWSB = 30,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum sh_dsp_operand {
    SH_OP_DSP_INVALID = 0,
    SH_OP_DSP_REG_PRE = 1,
    SH_OP_DSP_REG_IND = 2,
    SH_OP_DSP_REG_POST = 3,
    SH_OP_DSP_REG_INDEX = 4,
    SH_OP_DSP_REG = 5,
    SH_OP_DSP_IMM = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum sh_dsp_cc {
    SH_DSP_CC_INVALID = 0,
    SH_DSP_CC_NONE = 1,
    SH_DSP_CC_DCT = 2,
    SH_DSP_CC_DCF = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sh_op_dsp {
    pub insn: sh_dsp_insn,
    pub operand: [sh_dsp_operand; 2usize],
    pub r: [sh_reg::Type; 6usize],
    pub cc: sh_dsp_cc,
    pub imm: u8,
    pub size: libc::c_int,
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sh_op {
    pub type_: sh_op_type,
    pub __bindgen_anon_1: cs_sh_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_sh_op__bindgen_ty_1 {
    #[doc = "< immediate value for IMM operand"]
    pub imm: u64,
    #[doc = "< register value for REG operand"]
    pub reg: sh_reg::Type,
    #[doc = "< data when operand is targeting memory"]
    pub mem: sh_op_mem,
    #[doc = "< dsp instruction"]
    pub dsp: sh_op_dsp,
}
impl ::core::fmt::Debug for cs_sh_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_sh_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_sh_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_sh_op {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[repr(u32)]
#[doc = " SH instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum sh_insn {
    SH_INS_INVALID = 0,
    SH_INS_ADD_r = 1,
    SH_INS_ADD = 2,
    SH_INS_ADDC = 3,
    SH_INS_ADDV = 4,
    SH_INS_AND = 5,
    SH_INS_BAND = 6,
    SH_INS_BANDNOT = 7,
    SH_INS_BCLR = 8,
    SH_INS_BF = 9,
    SH_INS_BF_S = 10,
    SH_INS_BLD = 11,
    SH_INS_BLDNOT = 12,
    SH_INS_BOR = 13,
    SH_INS_BORNOT = 14,
    SH_INS_BRA = 15,
    SH_INS_BRAF = 16,
    SH_INS_BSET = 17,
    SH_INS_BSR = 18,
    SH_INS_BSRF = 19,
    SH_INS_BST = 20,
    SH_INS_BT = 21,
    SH_INS_BT_S = 22,
    SH_INS_BXOR = 23,
    SH_INS_CLIPS = 24,
    SH_INS_CLIPU = 25,
    SH_INS_CLRDMXY = 26,
    SH_INS_CLRMAC = 27,
    SH_INS_CLRS = 28,
    SH_INS_CLRT = 29,
    SH_INS_CMP_EQ = 30,
    SH_INS_CMP_GE = 31,
    SH_INS_CMP_GT = 32,
    SH_INS_CMP_HI = 33,
    SH_INS_CMP_HS = 34,
    SH_INS_CMP_PL = 35,
    SH_INS_CMP_PZ = 36,
    SH_INS_CMP_STR = 37,
    SH_INS_DIV0S = 38,
    SH_INS_DIV0U = 39,
    SH_INS_DIV1 = 40,
    SH_INS_DIVS = 41,
    SH_INS_DIVU = 42,
    SH_INS_DMULS_L = 43,
    SH_INS_DMULU_L = 44,
    SH_INS_DT = 45,
    SH_INS_EXTS_B = 46,
    SH_INS_EXTS_W = 47,
    SH_INS_EXTU_B = 48,
    SH_INS_EXTU_W = 49,
    SH_INS_FABS = 50,
    SH_INS_FADD = 51,
    SH_INS_FCMP_EQ = 52,
    SH_INS_FCMP_GT = 53,
    SH_INS_FCNVDS = 54,
    SH_INS_FCNVSD = 55,
    SH_INS_FDIV = 56,
    SH_INS_FIPR = 57,
    SH_INS_FLDI0 = 58,
    SH_INS_FLDI1 = 59,
    SH_INS_FLDS = 60,
    SH_INS_FLOAT = 61,
    SH_INS_FMAC = 62,
    SH_INS_FMOV = 63,
    SH_INS_FMUL = 64,
    SH_INS_FNEG = 65,
    SH_INS_FPCHG = 66,
    SH_INS_FRCHG = 67,
    SH_INS_FSCA = 68,
    SH_INS_FSCHG = 69,
    SH_INS_FSQRT = 70,
    SH_INS_FSRRA = 71,
    SH_INS_FSTS = 72,
    SH_INS_FSUB = 73,
    SH_INS_FTRC = 74,
    SH_INS_FTRV = 75,
    SH_INS_ICBI = 76,
    SH_INS_JMP = 77,
    SH_INS_JSR = 78,
    SH_INS_JSR_N = 79,
    SH_INS_LDBANK = 80,
    SH_INS_LDC = 81,
    SH_INS_LDRC = 82,
    SH_INS_LDRE = 83,
    SH_INS_LDRS = 84,
    SH_INS_LDS = 85,
    SH_INS_LDTLB = 86,
    SH_INS_MAC_L = 87,
    SH_INS_MAC_W = 88,
    SH_INS_MOV = 89,
    SH_INS_MOVA = 90,
    SH_INS_MOVCA = 91,
    SH_INS_MOVCO = 92,
    SH_INS_MOVI20 = 93,
    SH_INS_MOVI20S = 94,
    SH_INS_MOVLI = 95,
    SH_INS_MOVML = 96,
    SH_INS_MOVMU = 97,
    SH_INS_MOVRT = 98,
    SH_INS_MOVT = 99,
    SH_INS_MOVU = 100,
    SH_INS_MOVUA = 101,
    SH_INS_MUL_L = 102,
    SH_INS_MULR = 103,
    SH_INS_MULS_W = 104,
    SH_INS_MULU_W = 105,
    SH_INS_NEG = 106,
    SH_INS_NEGC = 107,
    SH_INS_NOP = 108,
    SH_INS_NOT = 109,
    SH_INS_NOTT = 110,
    SH_INS_OCBI = 111,
    SH_INS_OCBP = 112,
    SH_INS_OCBWB = 113,
    SH_INS_OR = 114,
    SH_INS_PREF = 115,
    SH_INS_PREFI = 116,
    SH_INS_RESBANK = 117,
    SH_INS_ROTCL = 118,
    SH_INS_ROTCR = 119,
    SH_INS_ROTL = 120,
    SH_INS_ROTR = 121,
    SH_INS_RTE = 122,
    SH_INS_RTS = 123,
    SH_INS_RTS_N = 124,
    SH_INS_RTV_N = 125,
    SH_INS_SETDMX = 126,
    SH_INS_SETDMY = 127,
    SH_INS_SETRC = 128,
    SH_INS_SETS = 129,
    SH_INS_SETT = 130,
    SH_INS_SHAD = 131,
    SH_INS_SHAL = 132,
    SH_INS_SHAR = 133,
    SH_INS_SHLD = 134,
    SH_INS_SHLL = 135,
    SH_INS_SHLL16 = 136,
    SH_INS_SHLL2 = 137,
    SH_INS_SHLL8 = 138,
    SH_INS_SHLR = 139,
    SH_INS_SHLR16 = 140,
    SH_INS_SHLR2 = 141,
    SH_INS_SHLR8 = 142,
    SH_INS_SLEEP = 143,
    SH_INS_STBANK = 144,
    SH_INS_STC = 145,
    SH_INS_STS = 146,
    SH_INS_SUB = 147,
    SH_INS_SUBC = 148,
    SH_INS_SUBV = 149,
    SH_INS_SWAP_B = 150,
    SH_INS_SWAP_W = 151,
    SH_INS_SYNCO = 152,
    SH_INS_TAS = 153,
    SH_INS_TRAPA = 154,
    SH_INS_TST = 155,
    SH_INS_XOR = 156,
    SH_INS_XTRCT = 157,
    SH_INS_DSP = 158,
    SH_INS_ENDING = 159,
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sh {
    pub insn: sh_insn,
    pub size: u8,
    pub op_count: u8,
    pub operands: [cs_sh_op; 3usize],
}
impl ::core::fmt::Debug for cs_sh {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_sh {{ insn: {:?}, operands: {:?} }}",
            self.insn, self.operands
        )
    }
}
pub mod sh_insn_group {
    #[doc = " Group of SH instructions"]
    pub type Type = libc::c_uint;
    #[doc = "< CS_GRUP_INVALID"]
    pub const SH_GRP_INVALID: Type = 0;
    #[doc = "< = CS_GRP_JUMP"]
    pub const SH_GRP_JUMP: Type = 1;
    #[doc = "< = CS_GRP_CALL"]
    pub const SH_GRP_CALL: Type = 2;
    #[doc = "< = CS_GRP_INT"]
    pub const SH_GRP_INT: Type = 3;
    #[doc = "< = CS_GRP_RET"]
    pub const SH_GRP_RET: Type = 4;
    #[doc = "< = CS_GRP_IRET"]
    pub const SH_GRP_IRET: Type = 5;
    #[doc = "< = CS_GRP_PRIVILEGE"]
    pub const SH_GRP_PRIVILEGE: Type = 6;
    #[doc = "< = CS_GRP_BRANCH_RELATIVE"]
    pub const SH_GRP_BRANCH_RELATIVE: Type = 7;
    pub const SH_GRP_SH1: Type = 8;
    pub const SH_GRP_SH2: Type = 9;
    pub const SH_GRP_SH2E: Type = 10;
    pub const SH_GRP_SH2DSP: Type = 11;
    pub const SH_GRP_SH2A: Type = 12;
    pub const SH_GRP_SH2AFPU: Type = 13;
    pub const SH_GRP_SH3: Type = 14;
    pub const SH_GRP_SH3DSP: Type = 15;
    pub const SH_GRP_SH4: Type = 16;
    pub const SH_GRP_SH4A: Type = 17;
    pub const SH_GRP_ENDING: Type = 18;
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum tricore_op_type {
    #[doc = "< CS_OP_INVALID (Uninitialized)."]
    TRICORE_OP_INVALID = 0,
    #[doc = "< CS_OP_REG (Register operand)."]
    TRICORE_OP_REG = 1,
    #[doc = "< CS_OP_IMM (Immediate operand)."]
    TRICORE_OP_IMM = 2,
    #[doc = "< CS_OP_MEM (Memory operand)."]
    TRICORE_OP_MEM = 128,
}
#[doc = " Instruction's operand referring to memory\n This is associated with TRICORE_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tricore_op_mem {
    #[doc = "< base register"]
    pub base: u8,
    #[doc = "< displacement/offset value"]
    pub disp: i64,
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_tricore_op {
    #[doc = "< operand type"]
    pub type_: tricore_op_type,
    pub __bindgen_anon_1: cs_tricore_op__bindgen_ty_1,
    #[doc = "< How is this operand accessed? (READ, WRITE or READ|WRITE)"]
    pub access: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_tricore_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: libc::c_uint,
    #[doc = "< immediate value for IMM operand"]
    pub imm: i64,
    #[doc = "< base/disp value for MEM operand"]
    pub mem: tricore_op_mem,
}
impl ::core::fmt::Debug for cs_tricore_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_tricore_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_tricore_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_tricore_op {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_tricore {
    #[doc = "< number of operands of this instruction."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_tricore_op; 8usize],
    #[doc = "< whether the flags register is updated."]
    pub update_flags: bool,
}
impl ::core::fmt::Debug for cs_tricore {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_tricore {{ operands: {:?}, update_flags: {:?} }}",
            self.operands, self.update_flags
        )
    }
}
pub mod tricore_reg {
    #[doc = " TriCore registers"]
    pub type Type = libc::c_uint;
    pub const TRICORE_REG_INVALID: Type = 0;
    pub const TRICORE_REG_FCX: Type = 1;
    pub const TRICORE_REG_PC: Type = 2;
    pub const TRICORE_REG_PCXI: Type = 3;
    pub const TRICORE_REG_PSW: Type = 4;
    pub const TRICORE_REG_A0: Type = 5;
    pub const TRICORE_REG_A1: Type = 6;
    pub const TRICORE_REG_A2: Type = 7;
    pub const TRICORE_REG_A3: Type = 8;
    pub const TRICORE_REG_A4: Type = 9;
    pub const TRICORE_REG_A5: Type = 10;
    pub const TRICORE_REG_A6: Type = 11;
    pub const TRICORE_REG_A7: Type = 12;
    pub const TRICORE_REG_A8: Type = 13;
    pub const TRICORE_REG_A9: Type = 14;
    pub const TRICORE_REG_A10: Type = 15;
    pub const TRICORE_REG_A11: Type = 16;
    pub const TRICORE_REG_A12: Type = 17;
    pub const TRICORE_REG_A13: Type = 18;
    pub const TRICORE_REG_A14: Type = 19;
    pub const TRICORE_REG_A15: Type = 20;
    pub const TRICORE_REG_D0: Type = 21;
    pub const TRICORE_REG_D1: Type = 22;
    pub const TRICORE_REG_D2: Type = 23;
    pub const TRICORE_REG_D3: Type = 24;
    pub const TRICORE_REG_D4: Type = 25;
    pub const TRICORE_REG_D5: Type = 26;
    pub const TRICORE_REG_D6: Type = 27;
    pub const TRICORE_REG_D7: Type = 28;
    pub const TRICORE_REG_D8: Type = 29;
    pub const TRICORE_REG_D9: Type = 30;
    pub const TRICORE_REG_D10: Type = 31;
    pub const TRICORE_REG_D11: Type = 32;
    pub const TRICORE_REG_D12: Type = 33;
    pub const TRICORE_REG_D13: Type = 34;
    pub const TRICORE_REG_D14: Type = 35;
    pub const TRICORE_REG_D15: Type = 36;
    pub const TRICORE_REG_E0: Type = 37;
    pub const TRICORE_REG_E2: Type = 38;
    pub const TRICORE_REG_E4: Type = 39;
    pub const TRICORE_REG_E6: Type = 40;
    pub const TRICORE_REG_E8: Type = 41;
    pub const TRICORE_REG_E10: Type = 42;
    pub const TRICORE_REG_E12: Type = 43;
    pub const TRICORE_REG_E14: Type = 44;
    pub const TRICORE_REG_P0: Type = 45;
    pub const TRICORE_REG_P2: Type = 46;
    pub const TRICORE_REG_P4: Type = 47;
    pub const TRICORE_REG_P6: Type = 48;
    pub const TRICORE_REG_P8: Type = 49;
    pub const TRICORE_REG_P10: Type = 50;
    pub const TRICORE_REG_P12: Type = 51;
    pub const TRICORE_REG_P14: Type = 52;
    pub const TRICORE_REG_A0_A1: Type = 53;
    pub const TRICORE_REG_A2_A3: Type = 54;
    pub const TRICORE_REG_A4_A5: Type = 55;
    pub const TRICORE_REG_A6_A7: Type = 56;
    pub const TRICORE_REG_A8_A9: Type = 57;
    pub const TRICORE_REG_A10_A11: Type = 58;
    pub const TRICORE_REG_A12_A13: Type = 59;
    pub const TRICORE_REG_A14_A15: Type = 60;
    pub const TRICORE_REG_ENDING: Type = 61;
}
#[repr(u32)]
#[doc = " TriCore instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum tricore_insn {
    TRICORE_INS_INVALID = 0,
    TRICORE_INS_ABSDIFS_B = 1,
    TRICORE_INS_ABSDIFS_H = 2,
    TRICORE_INS_ABSDIFS = 3,
    TRICORE_INS_ABSDIF_B = 4,
    TRICORE_INS_ABSDIF_H = 5,
    TRICORE_INS_ABSDIF = 6,
    TRICORE_INS_ABSS_B = 7,
    TRICORE_INS_ABSS_H = 8,
    TRICORE_INS_ABSS = 9,
    TRICORE_INS_ABS_B = 10,
    TRICORE_INS_ABS_DF = 11,
    TRICORE_INS_ABS_F = 12,
    TRICORE_INS_ABS_H = 13,
    TRICORE_INS_ABS = 14,
    TRICORE_INS_ADDC = 15,
    TRICORE_INS_ADDIH_A = 16,
    TRICORE_INS_ADDIH = 17,
    TRICORE_INS_ADDI = 18,
    TRICORE_INS_ADDSC_AT = 19,
    TRICORE_INS_ADDSC_A = 20,
    TRICORE_INS_ADDS_BU = 21,
    TRICORE_INS_ADDS_B = 22,
    TRICORE_INS_ADDS_H = 23,
    TRICORE_INS_ADDS_HU = 24,
    TRICORE_INS_ADDS_U = 25,
    TRICORE_INS_ADDS = 26,
    TRICORE_INS_ADDX = 27,
    TRICORE_INS_ADD_A = 28,
    TRICORE_INS_ADD_B = 29,
    TRICORE_INS_ADD_DF = 30,
    TRICORE_INS_ADD_F = 31,
    TRICORE_INS_ADD_H = 32,
    TRICORE_INS_ADD = 33,
    TRICORE_INS_ANDN_T = 34,
    TRICORE_INS_ANDN = 35,
    TRICORE_INS_AND_ANDN_T = 36,
    TRICORE_INS_AND_AND_T = 37,
    TRICORE_INS_AND_EQ = 38,
    TRICORE_INS_AND_GE_U = 39,
    TRICORE_INS_AND_GE = 40,
    TRICORE_INS_AND_LT_U = 41,
    TRICORE_INS_AND_LT = 42,
    TRICORE_INS_AND_NE = 43,
    TRICORE_INS_AND_NOR_T = 44,
    TRICORE_INS_AND_OR_T = 45,
    TRICORE_INS_AND_T = 46,
    TRICORE_INS_AND = 47,
    TRICORE_INS_BISR = 48,
    TRICORE_INS_BMERGE = 49,
    TRICORE_INS_BSPLIT = 50,
    TRICORE_INS_CACHEA_I = 51,
    TRICORE_INS_CACHEA_WI = 52,
    TRICORE_INS_CACHEA_W = 53,
    TRICORE_INS_CACHEI_I = 54,
    TRICORE_INS_CACHEI_WI = 55,
    TRICORE_INS_CACHEI_W = 56,
    TRICORE_INS_CADDN_A = 57,
    TRICORE_INS_CADDN = 58,
    TRICORE_INS_CADD_A = 59,
    TRICORE_INS_CADD = 60,
    TRICORE_INS_CALLA = 61,
    TRICORE_INS_CALLI = 62,
    TRICORE_INS_CALL = 63,
    TRICORE_INS_CLO_B = 64,
    TRICORE_INS_CLO_H = 65,
    TRICORE_INS_CLO = 66,
    TRICORE_INS_CLS_B = 67,
    TRICORE_INS_CLS_H = 68,
    TRICORE_INS_CLS = 69,
    TRICORE_INS_CLZ_B = 70,
    TRICORE_INS_CLZ_H = 71,
    TRICORE_INS_CLZ = 72,
    TRICORE_INS_CMOVN = 73,
    TRICORE_INS_CMOV = 74,
    TRICORE_INS_CMPSWAP_W = 75,
    TRICORE_INS_CMP_DF = 76,
    TRICORE_INS_CMP_F = 77,
    TRICORE_INS_CRC32B_W = 78,
    TRICORE_INS_CRC32L_W = 79,
    TRICORE_INS_CRC32_B = 80,
    TRICORE_INS_CRCN = 81,
    TRICORE_INS_CSUBN_A = 82,
    TRICORE_INS_CSUBN = 83,
    TRICORE_INS_CSUB_A = 84,
    TRICORE_INS_CSUB = 85,
    TRICORE_INS_DEBUG = 86,
    TRICORE_INS_DEXTR = 87,
    TRICORE_INS_DFTOF = 88,
    TRICORE_INS_DFTOIN = 89,
    TRICORE_INS_DFTOIZ = 90,
    TRICORE_INS_DFTOI = 91,
    TRICORE_INS_DFTOLZ = 92,
    TRICORE_INS_DFTOL = 93,
    TRICORE_INS_DFTOULZ = 94,
    TRICORE_INS_DFTOUL = 95,
    TRICORE_INS_DFTOUZ = 96,
    TRICORE_INS_DFTOU = 97,
    TRICORE_INS_DIFSC_A = 98,
    TRICORE_INS_DISABLE = 99,
    TRICORE_INS_DIV64_U = 100,
    TRICORE_INS_DIV64 = 101,
    TRICORE_INS_DIV_DF = 102,
    TRICORE_INS_DIV_F = 103,
    TRICORE_INS_DIV_U = 104,
    TRICORE_INS_DIV = 105,
    TRICORE_INS_DSYNC = 106,
    TRICORE_INS_DVADJ = 107,
    TRICORE_INS_DVINIT_BU = 108,
    TRICORE_INS_DVINIT_B = 109,
    TRICORE_INS_DVINIT_HU = 110,
    TRICORE_INS_DVINIT_H = 111,
    TRICORE_INS_DVINIT_U = 112,
    TRICORE_INS_DVINIT = 113,
    TRICORE_INS_DVSTEP_U = 114,
    TRICORE_INS_DVSTEP = 115,
    TRICORE_INS_ENABLE = 116,
    TRICORE_INS_EQANY_B = 117,
    TRICORE_INS_EQANY_H = 118,
    TRICORE_INS_EQZ_A = 119,
    TRICORE_INS_EQ_A = 120,
    TRICORE_INS_EQ_B = 121,
    TRICORE_INS_EQ_H = 122,
    TRICORE_INS_EQ_W = 123,
    TRICORE_INS_EQ = 124,
    TRICORE_INS_EXTR_U = 125,
    TRICORE_INS_EXTR = 126,
    TRICORE_INS_FCALLA = 127,
    TRICORE_INS_FCALLI = 128,
    TRICORE_INS_FCALL = 129,
    TRICORE_INS_FRET = 130,
    TRICORE_INS_FTODF = 131,
    TRICORE_INS_FTOHP = 132,
    TRICORE_INS_FTOIN = 133,
    TRICORE_INS_FTOIZ = 134,
    TRICORE_INS_FTOI = 135,
    TRICORE_INS_FTOQ31Z = 136,
    TRICORE_INS_FTOQ31 = 137,
    TRICORE_INS_FTOUZ = 138,
    TRICORE_INS_FTOU = 139,
    TRICORE_INS_GE_A = 140,
    TRICORE_INS_GE_U = 141,
    TRICORE_INS_GE = 142,
    TRICORE_INS_HPTOF = 143,
    TRICORE_INS_IMASK = 144,
    TRICORE_INS_INSERT = 145,
    TRICORE_INS_INSN_T = 146,
    TRICORE_INS_INS_T = 147,
    TRICORE_INS_ISYNC = 148,
    TRICORE_INS_ITODF = 149,
    TRICORE_INS_ITOF = 150,
    TRICORE_INS_IXMAX_U = 151,
    TRICORE_INS_IXMAX = 152,
    TRICORE_INS_IXMIN_U = 153,
    TRICORE_INS_IXMIN = 154,
    TRICORE_INS_JA = 155,
    TRICORE_INS_JEQ_A = 156,
    TRICORE_INS_JEQ = 157,
    TRICORE_INS_JGEZ = 158,
    TRICORE_INS_JGE_U = 159,
    TRICORE_INS_JGE = 160,
    TRICORE_INS_JGTZ = 161,
    TRICORE_INS_JI = 162,
    TRICORE_INS_JLA = 163,
    TRICORE_INS_JLEZ = 164,
    TRICORE_INS_JLI = 165,
    TRICORE_INS_JLTZ = 166,
    TRICORE_INS_JLT_U = 167,
    TRICORE_INS_JLT = 168,
    TRICORE_INS_JL = 169,
    TRICORE_INS_JNED = 170,
    TRICORE_INS_JNEI = 171,
    TRICORE_INS_JNE_A = 172,
    TRICORE_INS_JNE = 173,
    TRICORE_INS_JNZ_A = 174,
    TRICORE_INS_JNZ_T = 175,
    TRICORE_INS_JNZ = 176,
    TRICORE_INS_JZ_A = 177,
    TRICORE_INS_JZ_T = 178,
    TRICORE_INS_JZ = 179,
    TRICORE_INS_J = 180,
    TRICORE_INS_LDLCX = 181,
    TRICORE_INS_LDMST = 182,
    TRICORE_INS_LDUCX = 183,
    TRICORE_INS_LD_A = 184,
    TRICORE_INS_LD_BU = 185,
    TRICORE_INS_LD_B = 186,
    TRICORE_INS_LD_DA = 187,
    TRICORE_INS_LD_D = 188,
    TRICORE_INS_LD_HU = 189,
    TRICORE_INS_LD_H = 190,
    TRICORE_INS_LD_Q = 191,
    TRICORE_INS_LD_W = 192,
    TRICORE_INS_LEA = 193,
    TRICORE_INS_LHA = 194,
    TRICORE_INS_LOOPU = 195,
    TRICORE_INS_LOOP = 196,
    TRICORE_INS_LTODF = 197,
    TRICORE_INS_LT_A = 198,
    TRICORE_INS_LT_B = 199,
    TRICORE_INS_LT_BU = 200,
    TRICORE_INS_LT_H = 201,
    TRICORE_INS_LT_HU = 202,
    TRICORE_INS_LT_U = 203,
    TRICORE_INS_LT_W = 204,
    TRICORE_INS_LT_WU = 205,
    TRICORE_INS_LT = 206,
    TRICORE_INS_MADDMS_H = 207,
    TRICORE_INS_MADDMS_U = 208,
    TRICORE_INS_MADDMS = 209,
    TRICORE_INS_MADDM_H = 210,
    TRICORE_INS_MADDM_Q = 211,
    TRICORE_INS_MADDM_U = 212,
    TRICORE_INS_MADDM = 213,
    TRICORE_INS_MADDRS_H = 214,
    TRICORE_INS_MADDRS_Q = 215,
    TRICORE_INS_MADDR_H = 216,
    TRICORE_INS_MADDR_Q = 217,
    TRICORE_INS_MADDSUMS_H = 218,
    TRICORE_INS_MADDSUM_H = 219,
    TRICORE_INS_MADDSURS_H = 220,
    TRICORE_INS_MADDSUR_H = 221,
    TRICORE_INS_MADDSUS_H = 222,
    TRICORE_INS_MADDSU_H = 223,
    TRICORE_INS_MADDS_H = 224,
    TRICORE_INS_MADDS_Q = 225,
    TRICORE_INS_MADDS_U = 226,
    TRICORE_INS_MADDS = 227,
    TRICORE_INS_MADD_DF = 228,
    TRICORE_INS_MADD_F = 229,
    TRICORE_INS_MADD_H = 230,
    TRICORE_INS_MADD_Q = 231,
    TRICORE_INS_MADD_U = 232,
    TRICORE_INS_MADD = 233,
    TRICORE_INS_MAX_B = 234,
    TRICORE_INS_MAX_BU = 235,
    TRICORE_INS_MAX_DF = 236,
    TRICORE_INS_MAX_F = 237,
    TRICORE_INS_MAX_H = 238,
    TRICORE_INS_MAX_HU = 239,
    TRICORE_INS_MAX_U = 240,
    TRICORE_INS_MAX = 241,
    TRICORE_INS_MFCR = 242,
    TRICORE_INS_MIN_B = 243,
    TRICORE_INS_MIN_BU = 244,
    TRICORE_INS_MIN_DF = 245,
    TRICORE_INS_MIN_F = 246,
    TRICORE_INS_MIN_H = 247,
    TRICORE_INS_MIN_HU = 248,
    TRICORE_INS_MIN_U = 249,
    TRICORE_INS_MIN = 250,
    TRICORE_INS_MOVH_A = 251,
    TRICORE_INS_MOVH = 252,
    TRICORE_INS_MOVZ_A = 253,
    TRICORE_INS_MOV_AA = 254,
    TRICORE_INS_MOV_A = 255,
    TRICORE_INS_MOV_D = 256,
    TRICORE_INS_MOV_U = 257,
    TRICORE_INS_MOV = 258,
    TRICORE_INS_MSUBADMS_H = 259,
    TRICORE_INS_MSUBADM_H = 260,
    TRICORE_INS_MSUBADRS_H = 261,
    TRICORE_INS_MSUBADR_H = 262,
    TRICORE_INS_MSUBADS_H = 263,
    TRICORE_INS_MSUBAD_H = 264,
    TRICORE_INS_MSUBMS_H = 265,
    TRICORE_INS_MSUBMS_U = 266,
    TRICORE_INS_MSUBMS = 267,
    TRICORE_INS_MSUBM_H = 268,
    TRICORE_INS_MSUBM_Q = 269,
    TRICORE_INS_MSUBM_U = 270,
    TRICORE_INS_MSUBM = 271,
    TRICORE_INS_MSUBRS_H = 272,
    TRICORE_INS_MSUBRS_Q = 273,
    TRICORE_INS_MSUBR_H = 274,
    TRICORE_INS_MSUBR_Q = 275,
    TRICORE_INS_MSUBS_H = 276,
    TRICORE_INS_MSUBS_Q = 277,
    TRICORE_INS_MSUBS_U = 278,
    TRICORE_INS_MSUBS = 279,
    TRICORE_INS_MSUB_DF = 280,
    TRICORE_INS_MSUB_F = 281,
    TRICORE_INS_MSUB_H = 282,
    TRICORE_INS_MSUB_Q = 283,
    TRICORE_INS_MSUB_U = 284,
    TRICORE_INS_MSUB = 285,
    TRICORE_INS_MTCR = 286,
    TRICORE_INS_MULMS_H = 287,
    TRICORE_INS_MULM_H = 288,
    TRICORE_INS_MULM_U = 289,
    TRICORE_INS_MULM = 290,
    TRICORE_INS_MULR_H = 291,
    TRICORE_INS_MULR_Q = 292,
    TRICORE_INS_MULS_U = 293,
    TRICORE_INS_MULS = 294,
    TRICORE_INS_MUL_DF = 295,
    TRICORE_INS_MUL_F = 296,
    TRICORE_INS_MUL_H = 297,
    TRICORE_INS_MUL_Q = 298,
    TRICORE_INS_MUL_U = 299,
    TRICORE_INS_MUL = 300,
    TRICORE_INS_NAND_T = 301,
    TRICORE_INS_NAND = 302,
    TRICORE_INS_NEG_DF = 303,
    TRICORE_INS_NEG_F = 304,
    TRICORE_INS_NEZ_A = 305,
    TRICORE_INS_NE_A = 306,
    TRICORE_INS_NE = 307,
    TRICORE_INS_NOP = 308,
    TRICORE_INS_NOR_T = 309,
    TRICORE_INS_NOR = 310,
    TRICORE_INS_NOT = 311,
    TRICORE_INS_ORN_T = 312,
    TRICORE_INS_ORN = 313,
    TRICORE_INS_OR_ANDN_T = 314,
    TRICORE_INS_OR_AND_T = 315,
    TRICORE_INS_OR_EQ = 316,
    TRICORE_INS_OR_GE_U = 317,
    TRICORE_INS_OR_GE = 318,
    TRICORE_INS_OR_LT_U = 319,
    TRICORE_INS_OR_LT = 320,
    TRICORE_INS_OR_NE = 321,
    TRICORE_INS_OR_NOR_T = 322,
    TRICORE_INS_OR_OR_T = 323,
    TRICORE_INS_OR_T = 324,
    TRICORE_INS_OR = 325,
    TRICORE_INS_PACK = 326,
    TRICORE_INS_PARITY = 327,
    TRICORE_INS_POPCNT_W = 328,
    TRICORE_INS_Q31TOF = 329,
    TRICORE_INS_QSEED_DF = 330,
    TRICORE_INS_QSEED_F = 331,
    TRICORE_INS_REM64_U = 332,
    TRICORE_INS_REM64 = 333,
    TRICORE_INS_RESTORE = 334,
    TRICORE_INS_RET = 335,
    TRICORE_INS_RFE = 336,
    TRICORE_INS_RFM = 337,
    TRICORE_INS_RSLCX = 338,
    TRICORE_INS_RSTV = 339,
    TRICORE_INS_RSUBS_U = 340,
    TRICORE_INS_RSUBS = 341,
    TRICORE_INS_RSUB = 342,
    TRICORE_INS_SAT_BU = 343,
    TRICORE_INS_SAT_B = 344,
    TRICORE_INS_SAT_HU = 345,
    TRICORE_INS_SAT_H = 346,
    TRICORE_INS_SELN_A = 347,
    TRICORE_INS_SELN = 348,
    TRICORE_INS_SEL_A = 349,
    TRICORE_INS_SEL = 350,
    TRICORE_INS_SHAS = 351,
    TRICORE_INS_SHA_B = 352,
    TRICORE_INS_SHA_H = 353,
    TRICORE_INS_SHA = 354,
    TRICORE_INS_SHUFFLE = 355,
    TRICORE_INS_SH_ANDN_T = 356,
    TRICORE_INS_SH_AND_T = 357,
    TRICORE_INS_SH_B = 358,
    TRICORE_INS_SH_EQ = 359,
    TRICORE_INS_SH_GE_U = 360,
    TRICORE_INS_SH_GE = 361,
    TRICORE_INS_SH_H = 362,
    TRICORE_INS_SH_LT_U = 363,
    TRICORE_INS_SH_LT = 364,
    TRICORE_INS_SH_NAND_T = 365,
    TRICORE_INS_SH_NE = 366,
    TRICORE_INS_SH_NOR_T = 367,
    TRICORE_INS_SH_ORN_T = 368,
    TRICORE_INS_SH_OR_T = 369,
    TRICORE_INS_SH_XNOR_T = 370,
    TRICORE_INS_SH_XOR_T = 371,
    TRICORE_INS_SH = 372,
    TRICORE_INS_STLCX = 373,
    TRICORE_INS_STUCX = 374,
    TRICORE_INS_ST_A = 375,
    TRICORE_INS_ST_B = 376,
    TRICORE_INS_ST_DA = 377,
    TRICORE_INS_ST_D = 378,
    TRICORE_INS_ST_H = 379,
    TRICORE_INS_ST_Q = 380,
    TRICORE_INS_ST_T = 381,
    TRICORE_INS_ST_W = 382,
    TRICORE_INS_SUBC = 383,
    TRICORE_INS_SUBSC_A = 384,
    TRICORE_INS_SUBS_BU = 385,
    TRICORE_INS_SUBS_B = 386,
    TRICORE_INS_SUBS_HU = 387,
    TRICORE_INS_SUBS_H = 388,
    TRICORE_INS_SUBS_U = 389,
    TRICORE_INS_SUBS = 390,
    TRICORE_INS_SUBX = 391,
    TRICORE_INS_SUB_A = 392,
    TRICORE_INS_SUB_B = 393,
    TRICORE_INS_SUB_DF = 394,
    TRICORE_INS_SUB_F = 395,
    TRICORE_INS_SUB_H = 396,
    TRICORE_INS_SUB = 397,
    TRICORE_INS_SVLCX = 398,
    TRICORE_INS_SWAPMSK_W = 399,
    TRICORE_INS_SWAP_A = 400,
    TRICORE_INS_SWAP_W = 401,
    TRICORE_INS_SYSCALL = 402,
    TRICORE_INS_TLBDEMAP = 403,
    TRICORE_INS_TLBFLUSH_A = 404,
    TRICORE_INS_TLBFLUSH_B = 405,
    TRICORE_INS_TLBMAP = 406,
    TRICORE_INS_TLBPROBE_A = 407,
    TRICORE_INS_TLBPROBE_I = 408,
    TRICORE_INS_TRAPSV = 409,
    TRICORE_INS_TRAPV = 410,
    TRICORE_INS_ULTODF = 411,
    TRICORE_INS_UNPACK = 412,
    TRICORE_INS_UPDFL = 413,
    TRICORE_INS_UTODF = 414,
    TRICORE_INS_UTOF = 415,
    TRICORE_INS_WAIT = 416,
    TRICORE_INS_XNOR_T = 417,
    TRICORE_INS_XNOR = 418,
    TRICORE_INS_XOR_EQ = 419,
    TRICORE_INS_XOR_GE_U = 420,
    TRICORE_INS_XOR_GE = 421,
    TRICORE_INS_XOR_LT_U = 422,
    TRICORE_INS_XOR_LT = 423,
    TRICORE_INS_XOR_NE = 424,
    TRICORE_INS_XOR_T = 425,
    TRICORE_INS_XOR = 426,
    TRICORE_INS_ENDING = 427,
}
pub mod tricore_insn_group {
    #[doc = " Group of TriCore instructions"]
    pub type Type = libc::c_uint;
    #[doc = "< = CS_GRP_INVALID"]
    pub const TRICORE_GRP_INVALID: Type = 0;
    #[doc = "< = CS_GRP_CALL"]
    pub const TRICORE_GRP_CALL: Type = 1;
    #[doc = "< = CS_GRP_JUMP"]
    pub const TRICORE_GRP_JUMP: Type = 2;
    #[doc = "< mark the end of the list of groups"]
    pub const TRICORE_GRP_ENDING: Type = 3;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum tricore_feature_t {
    TRICORE_FEATURE_INVALID = 0,
    TRICORE_FEATURE_HASV110 = 128,
    TRICORE_FEATURE_HASV120 = 129,
    TRICORE_FEATURE_HASV130 = 130,
    TRICORE_FEATURE_HASV131 = 131,
    TRICORE_FEATURE_HASV160 = 132,
    TRICORE_FEATURE_HASV161 = 133,
    TRICORE_FEATURE_HASV162 = 134,
    TRICORE_FEATURE_HASV180 = 135,
    TRICORE_FEATURE_HASV120_UP = 136,
    TRICORE_FEATURE_HASV130_UP = 137,
    TRICORE_FEATURE_HASV131_UP = 138,
    TRICORE_FEATURE_HASV160_UP = 139,
    TRICORE_FEATURE_HASV161_UP = 140,
    TRICORE_FEATURE_HASV162_UP = 141,
    TRICORE_FEATURE_HASV180_UP = 142,
    TRICORE_FEATURE_HASV120_DN = 143,
    TRICORE_FEATURE_HASV130_DN = 144,
    TRICORE_FEATURE_HASV131_DN = 145,
    TRICORE_FEATURE_HASV160_DN = 146,
    TRICORE_FEATURE_HASV161_DN = 147,
    TRICORE_FEATURE_HASV162_DN = 148,
    TRICORE_FEATURE_HASV180_DN = 149,
    #[doc = "< mark the end of the list of features"]
    TRICORE_FEATURE_ENDING = 150,
}
pub use self::tricore_feature_t as tricore_feature;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum alpha_op_type {
    #[doc = "< CS_OP_INVALID (Uninitialized)."]
    ALPHA_OP_INVALID = 0,
    #[doc = "< CS_OP_REG (Register operand)."]
    ALPHA_OP_REG = 1,
    #[doc = "< CS_OP_IMM (Immediate operand)."]
    ALPHA_OP_IMM = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_alpha_op {
    pub type_: alpha_op_type,
    pub __bindgen_anon_1: cs_alpha_op__bindgen_ty_1,
    pub access: cs_ac_type,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_alpha_op__bindgen_ty_1 {
    pub reg: libc::c_uint,
    pub imm: i32,
}
impl ::core::fmt::Debug for cs_alpha_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_alpha_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_alpha_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_alpha_op {{ type: {:?}, __bindgen_anon_1: {:?}, access: {:?} }}",
            self.type_, self.__bindgen_anon_1, self.access
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_alpha {
    pub op_count: u8,
    pub operands: [cs_alpha_op; 3usize],
}
impl ::core::fmt::Debug for cs_alpha {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_alpha {{ operands: {:?} }}", self.operands)
    }
}
pub mod alpha_reg {
    pub type Type = libc::c_uint;
    pub const Alpha_REG_INVALID: Type = 0;
    pub const Alpha_REG_F0: Type = 1;
    pub const Alpha_REG_F1: Type = 2;
    pub const Alpha_REG_F2: Type = 3;
    pub const Alpha_REG_F3: Type = 4;
    pub const Alpha_REG_F4: Type = 5;
    pub const Alpha_REG_F5: Type = 6;
    pub const Alpha_REG_F6: Type = 7;
    pub const Alpha_REG_F7: Type = 8;
    pub const Alpha_REG_F8: Type = 9;
    pub const Alpha_REG_F9: Type = 10;
    pub const Alpha_REG_F10: Type = 11;
    pub const Alpha_REG_F11: Type = 12;
    pub const Alpha_REG_F12: Type = 13;
    pub const Alpha_REG_F13: Type = 14;
    pub const Alpha_REG_F14: Type = 15;
    pub const Alpha_REG_F15: Type = 16;
    pub const Alpha_REG_F16: Type = 17;
    pub const Alpha_REG_F17: Type = 18;
    pub const Alpha_REG_F18: Type = 19;
    pub const Alpha_REG_F19: Type = 20;
    pub const Alpha_REG_F20: Type = 21;
    pub const Alpha_REG_F21: Type = 22;
    pub const Alpha_REG_F22: Type = 23;
    pub const Alpha_REG_F23: Type = 24;
    pub const Alpha_REG_F24: Type = 25;
    pub const Alpha_REG_F25: Type = 26;
    pub const Alpha_REG_F26: Type = 27;
    pub const Alpha_REG_F27: Type = 28;
    pub const Alpha_REG_F28: Type = 29;
    pub const Alpha_REG_F29: Type = 30;
    pub const Alpha_REG_F30: Type = 31;
    pub const Alpha_REG_F31: Type = 32;
    pub const Alpha_REG_R0: Type = 33;
    pub const Alpha_REG_R1: Type = 34;
    pub const Alpha_REG_R2: Type = 35;
    pub const Alpha_REG_R3: Type = 36;
    pub const Alpha_REG_R4: Type = 37;
    pub const Alpha_REG_R5: Type = 38;
    pub const Alpha_REG_R6: Type = 39;
    pub const Alpha_REG_R7: Type = 40;
    pub const Alpha_REG_R8: Type = 41;
    pub const Alpha_REG_R9: Type = 42;
    pub const Alpha_REG_R10: Type = 43;
    pub const Alpha_REG_R11: Type = 44;
    pub const Alpha_REG_R12: Type = 45;
    pub const Alpha_REG_R13: Type = 46;
    pub const Alpha_REG_R14: Type = 47;
    pub const Alpha_REG_R15: Type = 48;
    pub const Alpha_REG_R16: Type = 49;
    pub const Alpha_REG_R17: Type = 50;
    pub const Alpha_REG_R18: Type = 51;
    pub const Alpha_REG_R19: Type = 52;
    pub const Alpha_REG_R20: Type = 53;
    pub const Alpha_REG_R21: Type = 54;
    pub const Alpha_REG_R22: Type = 55;
    pub const Alpha_REG_R23: Type = 56;
    pub const Alpha_REG_R24: Type = 57;
    pub const Alpha_REG_R25: Type = 58;
    pub const Alpha_REG_R26: Type = 59;
    pub const Alpha_REG_R27: Type = 60;
    pub const Alpha_REG_R28: Type = 61;
    pub const Alpha_REG_R29: Type = 62;
    pub const Alpha_REG_R30: Type = 63;
    pub const Alpha_REG_R31: Type = 64;
    pub const Alpha_REG_ENDING: Type = 65;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum alpha_insn {
    Alpha_INS_INVALID = 0,
    Alpha_INS_ADDL = 1,
    Alpha_INS_ADDQ = 2,
    Alpha_INS_ADDSsSU = 3,
    Alpha_INS_ADDTsSU = 4,
    Alpha_INS_AND = 5,
    Alpha_INS_BEQ = 6,
    Alpha_INS_BGE = 7,
    Alpha_INS_BGT = 8,
    Alpha_INS_BIC = 9,
    Alpha_INS_BIS = 10,
    Alpha_INS_BLBC = 11,
    Alpha_INS_BLBS = 12,
    Alpha_INS_BLE = 13,
    Alpha_INS_BLT = 14,
    Alpha_INS_BNE = 15,
    Alpha_INS_BR = 16,
    Alpha_INS_BSR = 17,
    Alpha_INS_CMOVEQ = 18,
    Alpha_INS_CMOVGE = 19,
    Alpha_INS_CMOVGT = 20,
    Alpha_INS_CMOVLBC = 21,
    Alpha_INS_CMOVLBS = 22,
    Alpha_INS_CMOVLE = 23,
    Alpha_INS_CMOVLT = 24,
    Alpha_INS_CMOVNE = 25,
    Alpha_INS_CMPBGE = 26,
    Alpha_INS_CMPEQ = 27,
    Alpha_INS_CMPLE = 28,
    Alpha_INS_CMPLT = 29,
    Alpha_INS_CMPTEQsSU = 30,
    Alpha_INS_CMPTLEsSU = 31,
    Alpha_INS_CMPTLTsSU = 32,
    Alpha_INS_CMPTUNsSU = 33,
    Alpha_INS_CMPULE = 34,
    Alpha_INS_CMPULT = 35,
    Alpha_INS_COND_BRANCH = 36,
    Alpha_INS_CPYSE = 37,
    Alpha_INS_CPYSN = 38,
    Alpha_INS_CPYS = 39,
    Alpha_INS_CTLZ = 40,
    Alpha_INS_CTPOP = 41,
    Alpha_INS_CTTZ = 42,
    Alpha_INS_CVTQSsSUI = 43,
    Alpha_INS_CVTQTsSUI = 44,
    Alpha_INS_CVTSTsS = 45,
    Alpha_INS_CVTTQsSVC = 46,
    Alpha_INS_CVTTSsSUI = 47,
    Alpha_INS_DIVSsSU = 48,
    Alpha_INS_DIVTsSU = 49,
    Alpha_INS_ECB = 50,
    Alpha_INS_EQV = 51,
    Alpha_INS_EXCB = 52,
    Alpha_INS_EXTBL = 53,
    Alpha_INS_EXTLH = 54,
    Alpha_INS_EXTLL = 55,
    Alpha_INS_EXTQH = 56,
    Alpha_INS_EXTQL = 57,
    Alpha_INS_EXTWH = 58,
    Alpha_INS_EXTWL = 59,
    Alpha_INS_FBEQ = 60,
    Alpha_INS_FBGE = 61,
    Alpha_INS_FBGT = 62,
    Alpha_INS_FBLE = 63,
    Alpha_INS_FBLT = 64,
    Alpha_INS_FBNE = 65,
    Alpha_INS_FCMOVEQ = 66,
    Alpha_INS_FCMOVGE = 67,
    Alpha_INS_FCMOVGT = 68,
    Alpha_INS_FCMOVLE = 69,
    Alpha_INS_FCMOVLT = 70,
    Alpha_INS_FCMOVNE = 71,
    Alpha_INS_FETCH = 72,
    Alpha_INS_FETCH_M = 73,
    Alpha_INS_FTOIS = 74,
    Alpha_INS_FTOIT = 75,
    Alpha_INS_INSBL = 76,
    Alpha_INS_INSLH = 77,
    Alpha_INS_INSLL = 78,
    Alpha_INS_INSQH = 79,
    Alpha_INS_INSQL = 80,
    Alpha_INS_INSWH = 81,
    Alpha_INS_INSWL = 82,
    Alpha_INS_ITOFS = 83,
    Alpha_INS_ITOFT = 84,
    Alpha_INS_JMP = 85,
    Alpha_INS_JSR = 86,
    Alpha_INS_JSR_COROUTINE = 87,
    Alpha_INS_LDA = 88,
    Alpha_INS_LDAH = 89,
    Alpha_INS_LDBU = 90,
    Alpha_INS_LDL = 91,
    Alpha_INS_LDL_L = 92,
    Alpha_INS_LDQ = 93,
    Alpha_INS_LDQ_L = 94,
    Alpha_INS_LDQ_U = 95,
    Alpha_INS_LDS = 96,
    Alpha_INS_LDT = 97,
    Alpha_INS_LDWU = 98,
    Alpha_INS_MB = 99,
    Alpha_INS_MSKBL = 100,
    Alpha_INS_MSKLH = 101,
    Alpha_INS_MSKLL = 102,
    Alpha_INS_MSKQH = 103,
    Alpha_INS_MSKQL = 104,
    Alpha_INS_MSKWH = 105,
    Alpha_INS_MSKWL = 106,
    Alpha_INS_MULL = 107,
    Alpha_INS_MULQ = 108,
    Alpha_INS_MULSsSU = 109,
    Alpha_INS_MULTsSU = 110,
    Alpha_INS_ORNOT = 111,
    Alpha_INS_RC = 112,
    Alpha_INS_RET = 113,
    Alpha_INS_RPCC = 114,
    Alpha_INS_RS = 115,
    Alpha_INS_S4ADDL = 116,
    Alpha_INS_S4ADDQ = 117,
    Alpha_INS_S4SUBL = 118,
    Alpha_INS_S4SUBQ = 119,
    Alpha_INS_S8ADDL = 120,
    Alpha_INS_S8ADDQ = 121,
    Alpha_INS_S8SUBL = 122,
    Alpha_INS_S8SUBQ = 123,
    Alpha_INS_SEXTB = 124,
    Alpha_INS_SEXTW = 125,
    Alpha_INS_SLL = 126,
    Alpha_INS_SQRTSsSU = 127,
    Alpha_INS_SQRTTsSU = 128,
    Alpha_INS_SRA = 129,
    Alpha_INS_SRL = 130,
    Alpha_INS_STB = 131,
    Alpha_INS_STL = 132,
    Alpha_INS_STL_C = 133,
    Alpha_INS_STQ = 134,
    Alpha_INS_STQ_C = 135,
    Alpha_INS_STQ_U = 136,
    Alpha_INS_STS = 137,
    Alpha_INS_STT = 138,
    Alpha_INS_STW = 139,
    Alpha_INS_SUBL = 140,
    Alpha_INS_SUBQ = 141,
    Alpha_INS_SUBSsSU = 142,
    Alpha_INS_SUBTsSU = 143,
    Alpha_INS_TRAPB = 144,
    Alpha_INS_UMULH = 145,
    Alpha_INS_WH64 = 146,
    Alpha_INS_WH64EN = 147,
    Alpha_INS_WMB = 148,
    Alpha_INS_XOR = 149,
    Alpha_INS_ZAPNOT = 150,
    ALPHA_INS_ENDING = 151,
}
pub mod alpha_insn_group {
    pub type Type = libc::c_uint;
    #[doc = "< = CS_GRP_INVALID"]
    pub const Alpha_GRP_INVALID: Type = 0;
    #[doc = "< = CS_GRP_CALL"]
    pub const Alpha_GRP_CALL: Type = 1;
    #[doc = "< = CS_GRP_JUMP"]
    pub const Alpha_GRP_JUMP: Type = 2;
    #[doc = "< = CS_GRP_BRANCH_RELATIVE"]
    pub const Alpha_GRP_BRANCH_RELATIVE: Type = 3;
    #[doc = "< = mark the end of the list of groups"]
    pub const Alpha_GRP_ENDING: Type = 4;
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum hppa_op_type {
    HPPA_OP_INVALID = 0,
    HPPA_OP_REG = 1,
    HPPA_OP_IMM = 2,
    HPPA_OP_IDX_REG = 16,
    HPPA_OP_DISP = 17,
    HPPA_OP_TARGET = 18,
    HPPA_OP_MEM = 128,
}
pub mod hppa_reg {
    pub type Type = libc::c_uint;
    pub const HPPA_REG_INVALID: Type = 0;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR0: Type = 1;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR1: Type = 2;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR2: Type = 3;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR3: Type = 4;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR4: Type = 5;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR5: Type = 6;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR6: Type = 7;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR7: Type = 8;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR8: Type = 9;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR9: Type = 10;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR10: Type = 11;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR11: Type = 12;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR12: Type = 13;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR13: Type = 14;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR14: Type = 15;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR15: Type = 16;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR16: Type = 17;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR17: Type = 18;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR18: Type = 19;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR19: Type = 20;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR20: Type = 21;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR21: Type = 22;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR22: Type = 23;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR23: Type = 24;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR24: Type = 25;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR25: Type = 26;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR26: Type = 27;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR27: Type = 28;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR28: Type = 29;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR29: Type = 30;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR30: Type = 31;
    #[doc = "> General registers"]
    pub const HPPA_REG_GR31: Type = 32;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR0: Type = 33;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR1: Type = 34;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR2: Type = 35;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR3: Type = 36;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR4: Type = 37;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR5: Type = 38;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR6: Type = 39;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR7: Type = 40;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR8: Type = 41;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR9: Type = 42;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR10: Type = 43;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR11: Type = 44;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR12: Type = 45;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR13: Type = 46;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR14: Type = 47;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR15: Type = 48;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR16: Type = 49;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR17: Type = 50;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR18: Type = 51;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR19: Type = 52;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR20: Type = 53;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR21: Type = 54;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR22: Type = 55;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR23: Type = 56;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR24: Type = 57;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR25: Type = 58;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR26: Type = 59;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR27: Type = 60;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR28: Type = 61;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR29: Type = 62;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR30: Type = 63;
    #[doc = "> Floating-point registers"]
    pub const HPPA_REG_FPR31: Type = 64;
    #[doc = "> Space registers"]
    pub const HPPA_REG_SR0: Type = 65;
    #[doc = "> Space registers"]
    pub const HPPA_REG_SR1: Type = 66;
    #[doc = "> Space registers"]
    pub const HPPA_REG_SR2: Type = 67;
    #[doc = "> Space registers"]
    pub const HPPA_REG_SR3: Type = 68;
    #[doc = "> Space registers"]
    pub const HPPA_REG_SR4: Type = 69;
    #[doc = "> Space registers"]
    pub const HPPA_REG_SR5: Type = 70;
    #[doc = "> Space registers"]
    pub const HPPA_REG_SR6: Type = 71;
    #[doc = "> Space registers"]
    pub const HPPA_REG_SR7: Type = 72;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR0: Type = 73;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR1: Type = 74;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR2: Type = 75;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR3: Type = 76;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR4: Type = 77;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR5: Type = 78;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR6: Type = 79;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR7: Type = 80;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR8: Type = 81;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR9: Type = 82;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR10: Type = 83;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR11: Type = 84;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR12: Type = 85;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR13: Type = 86;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR14: Type = 87;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR15: Type = 88;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR16: Type = 89;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR17: Type = 90;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR18: Type = 91;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR19: Type = 92;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR20: Type = 93;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR21: Type = 94;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR22: Type = 95;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR23: Type = 96;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR24: Type = 97;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR25: Type = 98;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR26: Type = 99;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR27: Type = 100;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR28: Type = 101;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR29: Type = 102;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR30: Type = 103;
    #[doc = "> Control registers"]
    pub const HPPA_REG_CR31: Type = 104;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE0: Type = 105;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE1: Type = 106;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE2: Type = 107;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE3: Type = 108;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE4: Type = 109;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE5: Type = 110;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE6: Type = 111;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE7: Type = 112;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE8: Type = 113;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE9: Type = 114;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE10: Type = 115;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE11: Type = 116;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE12: Type = 117;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE13: Type = 118;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE14: Type = 119;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE15: Type = 120;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE16: Type = 121;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE17: Type = 122;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE18: Type = 123;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE19: Type = 124;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE20: Type = 125;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE21: Type = 126;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE22: Type = 127;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE23: Type = 128;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE24: Type = 129;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE25: Type = 130;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE26: Type = 131;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE27: Type = 132;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE28: Type = 133;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE29: Type = 134;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE30: Type = 135;
    #[doc = "> Special floating point exception registers"]
    pub const HPPA_REG_FPE31: Type = 136;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR0: Type = 137;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR1: Type = 138;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR2: Type = 139;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR3: Type = 140;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR4: Type = 141;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR5: Type = 142;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR6: Type = 143;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR7: Type = 144;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR8: Type = 145;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR9: Type = 146;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR10: Type = 147;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR11: Type = 148;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR12: Type = 149;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR13: Type = 150;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR14: Type = 151;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR15: Type = 152;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR16: Type = 153;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR17: Type = 154;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR18: Type = 155;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR19: Type = 156;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR20: Type = 157;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR21: Type = 158;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR22: Type = 159;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR23: Type = 160;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR24: Type = 161;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR25: Type = 162;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR26: Type = 163;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR27: Type = 164;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR28: Type = 165;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR29: Type = 166;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR30: Type = 167;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_SP_FPR31: Type = 168;
    #[doc = "> Single-precision floating point registers"]
    pub const HPPA_REG_ENDING: Type = 169;
}
#[repr(u32)]
#[doc = " HPPA instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum hppa_insn {
    HPPA_INS_INVALID = 0,
    HPPA_INS_ADD = 1,
    HPPA_INS_ADDI = 2,
    HPPA_INS_ADDIO = 3,
    HPPA_INS_ADDIT = 4,
    HPPA_INS_ADDITO = 5,
    HPPA_INS_ADDB = 6,
    HPPA_INS_ADDBT = 7,
    HPPA_INS_ADDBF = 8,
    HPPA_INS_ADDIB = 9,
    HPPA_INS_ADDIBT = 10,
    HPPA_INS_ADDIBF = 11,
    HPPA_INS_ADDIL = 12,
    HPPA_INS_ADDC = 13,
    HPPA_INS_ADDCO = 14,
    HPPA_INS_ADDL = 15,
    HPPA_INS_ADDO = 16,
    HPPA_INS_AND = 17,
    HPPA_INS_ANDCM = 18,
    HPPA_INS_B = 19,
    HPPA_INS_BB = 20,
    HPPA_INS_BE = 21,
    HPPA_INS_BL = 22,
    HPPA_INS_BLE = 23,
    HPPA_INS_BLR = 24,
    HPPA_INS_BREAK = 25,
    HPPA_INS_BV = 26,
    HPPA_INS_BVB = 27,
    HPPA_INS_BVE = 28,
    HPPA_INS_CALL = 29,
    HPPA_INS_CLDD = 30,
    HPPA_INS_CLDDS = 31,
    HPPA_INS_CLDDX = 32,
    HPPA_INS_CLDW = 33,
    HPPA_INS_CLDWS = 34,
    HPPA_INS_CLDWX = 35,
    HPPA_INS_CLRBTS = 36,
    HPPA_INS_CMPB = 37,
    HPPA_INS_CMPCLR = 38,
    HPPA_INS_CMPIB = 39,
    HPPA_INS_CMPICLR = 40,
    HPPA_INS_COMB = 41,
    HPPA_INS_COMBT = 42,
    HPPA_INS_COMBF = 43,
    HPPA_INS_COMCLR = 44,
    HPPA_INS_COMIB = 45,
    HPPA_INS_COMIBT = 46,
    HPPA_INS_COMIBF = 47,
    HPPA_INS_COMICLR = 48,
    HPPA_INS_COPR = 49,
    HPPA_INS_COPY = 50,
    HPPA_INS_CSTD = 51,
    HPPA_INS_CSTDS = 52,
    HPPA_INS_CSTDX = 53,
    HPPA_INS_CSTW = 54,
    HPPA_INS_CSTWS = 55,
    HPPA_INS_CSTWX = 56,
    HPPA_INS_DCOR = 57,
    HPPA_INS_DEP = 58,
    HPPA_INS_DEPI = 59,
    HPPA_INS_DEPD = 60,
    HPPA_INS_DEPDI = 61,
    HPPA_INS_DEPW = 62,
    HPPA_INS_DEPWI = 63,
    HPPA_INS_DIAG = 64,
    HPPA_INS_DS = 65,
    HPPA_INS_EXTRD = 66,
    HPPA_INS_EXTRS = 67,
    HPPA_INS_EXTRU = 68,
    HPPA_INS_EXTRW = 69,
    HPPA_INS_FABS = 70,
    HPPA_INS_FADD = 71,
    HPPA_INS_FCMP = 72,
    HPPA_INS_FCNV = 73,
    HPPA_INS_FCNVFF = 74,
    HPPA_INS_FCNVFX = 75,
    HPPA_INS_FCNVFXT = 76,
    HPPA_INS_FCNVXF = 77,
    HPPA_INS_FCPY = 78,
    HPPA_INS_FDC = 79,
    HPPA_INS_FDCE = 80,
    HPPA_INS_FDIV = 81,
    HPPA_INS_FIC = 82,
    HPPA_INS_FICE = 83,
    HPPA_INS_FID = 84,
    HPPA_INS_FLDD = 85,
    HPPA_INS_FLDDS = 86,
    HPPA_INS_FLDDX = 87,
    HPPA_INS_FLDW = 88,
    HPPA_INS_FLDWS = 89,
    HPPA_INS_FLDWX = 90,
    HPPA_INS_FMPY = 91,
    HPPA_INS_FMPYADD = 92,
    HPPA_INS_FMPYFADD = 93,
    HPPA_INS_FMPYNFADD = 94,
    HPPA_INS_FMPYSUB = 95,
    HPPA_INS_FNEG = 96,
    HPPA_INS_FNEGABS = 97,
    HPPA_INS_FREM = 98,
    HPPA_INS_FRND = 99,
    HPPA_INS_FSQRT = 100,
    HPPA_INS_FSTD = 101,
    HPPA_INS_FSTDS = 102,
    HPPA_INS_FSTDX = 103,
    HPPA_INS_FSTW = 104,
    HPPA_INS_FSTWS = 105,
    HPPA_INS_FSTWX = 106,
    HPPA_INS_FSTQS = 107,
    HPPA_INS_FSTQX = 108,
    HPPA_INS_FSUB = 109,
    HPPA_INS_FTEST = 110,
    HPPA_INS_GATE = 111,
    HPPA_INS_GFR = 112,
    HPPA_INS_GFW = 113,
    HPPA_INS_GRSHDW = 114,
    HPPA_INS_HADD = 115,
    HPPA_INS_HAVG = 116,
    HPPA_INS_HSHL = 117,
    HPPA_INS_HSHLADD = 118,
    HPPA_INS_HSHR = 119,
    HPPA_INS_HSHRADD = 120,
    HPPA_INS_HSUB = 121,
    HPPA_INS_IDTLBA = 122,
    HPPA_INS_IDTLBP = 123,
    HPPA_INS_IDTLBT = 124,
    HPPA_INS_IDCOR = 125,
    HPPA_INS_IITLBA = 126,
    HPPA_INS_IITLBP = 127,
    HPPA_INS_IITLBT = 128,
    HPPA_INS_LCI = 129,
    HPPA_INS_LDB = 130,
    HPPA_INS_LDBS = 131,
    HPPA_INS_LDBX = 132,
    HPPA_INS_LDCD = 133,
    HPPA_INS_LDCW = 134,
    HPPA_INS_LDCWS = 135,
    HPPA_INS_LDCWX = 136,
    HPPA_INS_LDD = 137,
    HPPA_INS_LDDA = 138,
    HPPA_INS_LDH = 139,
    HPPA_INS_LDHS = 140,
    HPPA_INS_LDHX = 141,
    HPPA_INS_LDI = 142,
    HPPA_INS_LDIL = 143,
    HPPA_INS_LDO = 144,
    HPPA_INS_LDSID = 145,
    HPPA_INS_LDW = 146,
    HPPA_INS_LDWA = 147,
    HPPA_INS_LDWAS = 148,
    HPPA_INS_LDWAX = 149,
    HPPA_INS_LDWM = 150,
    HPPA_INS_LDWS = 151,
    HPPA_INS_LDWX = 152,
    HPPA_INS_LPA = 153,
    HPPA_INS_MFCPU = 154,
    HPPA_INS_MFCTL = 155,
    HPPA_INS_MFIA = 156,
    HPPA_INS_MFSP = 157,
    HPPA_INS_MIXH = 158,
    HPPA_INS_MIXW = 159,
    HPPA_INS_MOVB = 160,
    HPPA_INS_MOVIB = 161,
    HPPA_INS_MTCPU = 162,
    HPPA_INS_MTCTL = 163,
    HPPA_INS_MTSAR = 164,
    HPPA_INS_MTSARCM = 165,
    HPPA_INS_MTSM = 166,
    HPPA_INS_MTSP = 167,
    HPPA_INS_NOP = 168,
    HPPA_INS_OR = 169,
    HPPA_INS_PDC = 170,
    HPPA_INS_PDTLB = 171,
    HPPA_INS_PDTLBE = 172,
    HPPA_INS_PERMH = 173,
    HPPA_INS_PITLB = 174,
    HPPA_INS_PITLBE = 175,
    HPPA_INS_PMDIS = 176,
    HPPA_INS_PMENB = 177,
    HPPA_INS_POPBTS = 178,
    HPPA_INS_PROBE = 179,
    HPPA_INS_PROBEI = 180,
    HPPA_INS_PROBER = 181,
    HPPA_INS_PROBERI = 182,
    HPPA_INS_PROBEW = 183,
    HPPA_INS_PROBEWI = 184,
    HPPA_INS_PUSHBTS = 185,
    HPPA_INS_PUSHNOM = 186,
    HPPA_INS_RET = 187,
    HPPA_INS_RFI = 188,
    HPPA_INS_RFIR = 189,
    HPPA_INS_RSM = 190,
    HPPA_INS_SHDWGR = 191,
    HPPA_INS_SHLADD = 192,
    HPPA_INS_SH1ADD = 193,
    HPPA_INS_SH1ADDL = 194,
    HPPA_INS_SH1ADDO = 195,
    HPPA_INS_SH2ADD = 196,
    HPPA_INS_SH2ADDL = 197,
    HPPA_INS_SH2ADDO = 198,
    HPPA_INS_SH3ADD = 199,
    HPPA_INS_SH3ADDL = 200,
    HPPA_INS_SH3ADDO = 201,
    HPPA_INS_SHD = 202,
    HPPA_INS_SHRPD = 203,
    HPPA_INS_SHRPW = 204,
    HPPA_INS_SPOP0 = 205,
    HPPA_INS_SPOP1 = 206,
    HPPA_INS_SPOP2 = 207,
    HPPA_INS_SPOP3 = 208,
    HPPA_INS_SSM = 209,
    HPPA_INS_STB = 210,
    HPPA_INS_STBS = 211,
    HPPA_INS_STBY = 212,
    HPPA_INS_STBYS = 213,
    HPPA_INS_STD = 214,
    HPPA_INS_STDA = 215,
    HPPA_INS_STDBY = 216,
    HPPA_INS_STH = 217,
    HPPA_INS_STHS = 218,
    HPPA_INS_STW = 219,
    HPPA_INS_STWA = 220,
    HPPA_INS_STWAS = 221,
    HPPA_INS_STWS = 222,
    HPPA_INS_STWM = 223,
    HPPA_INS_SUB = 224,
    HPPA_INS_SUBB = 225,
    HPPA_INS_SUBBO = 226,
    HPPA_INS_SUBI = 227,
    HPPA_INS_SUBIO = 228,
    HPPA_INS_SUBO = 229,
    HPPA_INS_SUBT = 230,
    HPPA_INS_SUBTO = 231,
    HPPA_INS_SYNC = 232,
    HPPA_INS_SYNCDMA = 233,
    HPPA_INS_TOCDIS = 234,
    HPPA_INS_TOCEN = 235,
    HPPA_INS_UADDCM = 236,
    HPPA_INS_UADDCMT = 237,
    HPPA_INS_UXOR = 238,
    HPPA_INS_VDEP = 239,
    HPPA_INS_VDEPI = 240,
    HPPA_INS_VEXTRS = 241,
    HPPA_INS_VEXTRU = 242,
    HPPA_INS_VSHD = 243,
    HPPA_INS_XMPYU = 244,
    HPPA_INS_XOR = 245,
    HPPA_INS_ZDEP = 246,
    HPPA_INS_ZDEPI = 247,
    HPPA_INS_ZVDEP = 248,
    HPPA_INS_ZVDEPI = 249,
    HPPA_INS_ENDING = 250,
}
#[doc = " HPPA space select operand"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hppa_mem {
    pub base: hppa_reg::Type,
    pub space: hppa_reg::Type,
    pub base_access: cs_ac_type,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_hppa_op {
    #[doc = "< operand type"]
    pub type_: hppa_op_type,
    pub __bindgen_anon_1: cs_hppa_op__bindgen_ty_1,
    pub access: cs_ac_type,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_hppa_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: hppa_reg::Type,
    #[doc = "< immediate value for IMM operand"]
    pub imm: i64,
    pub mem: hppa_mem,
}
impl ::core::fmt::Debug for cs_hppa_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_hppa_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_hppa_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_hppa_op {{ type: {:?}, __bindgen_anon_1: {:?}, access: {:?} }}",
            self.type_, self.__bindgen_anon_1, self.access
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_hppa {
    pub op_count: u8,
    #[doc = "< operands for hppa instruction."]
    pub operands: [cs_hppa_op; 5usize],
}
impl ::core::fmt::Debug for cs_hppa {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_hppa {{ operands: {:?} }}", self.operands)
    }
}
#[repr(u32)]
#[doc = " HPPA modifiers type. Can be string (most of them) or int (uid, sop)"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum hppa_modifier_type {
    HPPA_MOD_STR = 0,
    HPPA_MOD_INT = 1,
}
#[doc = " hppa string/integer modifier"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hppa_modifier {
    pub type_: hppa_modifier_type,
    pub __bindgen_anon_1: hppa_modifier__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hppa_modifier__bindgen_ty_1 {
    pub str_mod: [libc::c_char; 8usize],
    pub int_mod: u32,
}
impl ::core::fmt::Debug for hppa_modifier__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "hppa_modifier__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for hppa_modifier {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "hppa_modifier {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hppa_ext {
    #[doc = "< instruction modifiers array"]
    pub modifiers: [hppa_modifier; 5usize],
    #[doc = "< number of modifiers of current instruction"]
    pub mod_num: u8,
    #[doc = "< true if some load/store modifier has modify base register bit"]
    pub b_writeble: bool,
    #[doc = "< true if some modifier affects instruction format"]
    pub is_alternative: bool,
}
impl ::core::fmt::Debug for hppa_ext {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "hppa_ext {{ modifiers: {:?}, b_writeble: {:?}, is_alternative: {:?} }}",
            self.modifiers, self.b_writeble, self.is_alternative
        )
    }
}
pub mod hppa_insn_group {
    pub type Type = libc::c_uint;
    #[doc = "< = CS_GRP_INVALID"]
    pub const HPPA_GRP_INVALID: Type = 0;
    pub const HPPA_GRP_COMPUTATION: Type = 128;
    pub const HPPA_GRP_MULTIMEDIA: Type = 129;
    pub const HPPA_GRP_MEM_REF: Type = 130;
    pub const HPPA_GRP_LONG_IMM: Type = 131;
    pub const HPPA_GRP_BRANCH: Type = 132;
    pub const HPPA_GRP_SYSCTRL: Type = 133;
    pub const HPPA_GRP_ASSIST: Type = 134;
    pub const HPPA_GRP_FLOAT: Type = 135;
    pub const HPPA_GRP_PERFMON: Type = 136;
    pub const HPPA_GRP_ENDING: Type = 137;
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum loongarch_op_type {
    #[doc = "< Invalid"]
    LOONGARCH_OP_INVALID = 0,
    #[doc = "< Register operand"]
    LOONGARCH_OP_REG = 1,
    #[doc = "< Immediate operand"]
    LOONGARCH_OP_IMM = 2,
    #[doc = "< Memory operand"]
    LOONGARCH_OP_MEM = 128,
}
#[doc = " Instruction's operand referring to memory\n This is associated with LOONGARCH_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct loongarch_op_mem {
    #[doc = "< base register"]
    pub base: libc::c_uint,
    #[doc = "< index register"]
    pub index: libc::c_uint,
    #[doc = "< displacement/offset value"]
    pub disp: i64,
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_loongarch_op {
    pub type_: loongarch_op_type,
    pub __bindgen_anon_1: cs_loongarch_op__bindgen_ty_1,
    #[doc = " How is this operand accessed? (READ, WRITE or READ|WRITE)\n NOTE: this field is irrelevant if engine is compiled in DIET mode."]
    pub access: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_loongarch_op__bindgen_ty_1 {
    pub reg: libc::c_uint,
    #[doc = " register value for REG operand"]
    pub imm: i64,
    #[doc = " immediate value for IMM operand"]
    pub mem: loongarch_op_mem,
}
impl ::core::fmt::Debug for cs_loongarch_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_loongarch_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_loongarch_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_loongarch_op {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[repr(u32)]
#[doc = " LoongArch instruction formats. To get details about them please\n refer to `LoongArchInstrFormats.td` in LLVM."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum loongarch_insn_form {
    LOONGARCH_INSN_FORM_PSEUDO = 0,
    LOONGARCH_INSN_FORM_FMT3R = 1,
    LOONGARCH_INSN_FORM_FMT2RI12 = 2,
    LOONGARCH_INSN_FORM_FMT2RI5 = 3,
    LOONGARCH_INSN_FORM_FMT2RI16 = 4,
    LOONGARCH_INSN_FORM_FMT3RI2 = 5,
    LOONGARCH_INSN_FORM_NODSTFMT2RI4 = 6,
    LOONGARCH_INSN_FORM_FMT1RI8 = 7,
    LOONGARCH_INSN_FORM_FMT2RI4 = 8,
    LOONGARCH_INSN_FORM_NODSTFMT1RI4 = 9,
    LOONGARCH_INSN_FORM_NODSTFMT1RI5I4 = 10,
    LOONGARCH_INSN_FORM_FMTASRT = 11,
    LOONGARCH_INSN_FORM_FMTI26 = 12,
    LOONGARCH_INSN_FORM_FPFMTBR = 13,
    LOONGARCH_INSN_FORM_FMT1RI21 = 14,
    LOONGARCH_INSN_FORM_FMT2R = 15,
    LOONGARCH_INSN_FORM_FMTI15 = 16,
    LOONGARCH_INSN_FORM_FMTBSTR_D = 17,
    LOONGARCH_INSN_FORM_FMTBSTR_W = 18,
    LOONGARCH_INSN_FORM_FMT3RI3 = 19,
    LOONGARCH_INSN_FORM_FMTCACOP = 20,
    LOONGARCH_INSN_FORM_FMTCSR = 21,
    LOONGARCH_INSN_FORM_FMTCSRXCHG = 22,
    LOONGARCH_INSN_FORM_FMTI32 = 23,
    LOONGARCH_INSN_FORM_FPFMT2R = 24,
    LOONGARCH_INSN_FORM_FPFMT3R = 25,
    LOONGARCH_INSN_FORM_FPFMTFCMP = 26,
    LOONGARCH_INSN_FORM_FPFMTMEM = 27,
    LOONGARCH_INSN_FORM_FPFMT2RI12 = 28,
    LOONGARCH_INSN_FORM_FPFMT4R = 29,
    LOONGARCH_INSN_FORM_FPFMTMOV = 30,
    LOONGARCH_INSN_FORM_FPFMTFSEL = 31,
    LOONGARCH_INSN_FORM_FMTINVTLB = 32,
    LOONGARCH_INSN_FORM_FMTJISCR = 33,
    LOONGARCH_INSN_FORM_FMT2RI8 = 34,
    LOONGARCH_INSN_FORM_FMTLDPTE = 35,
    LOONGARCH_INSN_FORM_FMT2RI14 = 36,
    LOONGARCH_INSN_FORM_FMT1RI20 = 37,
    LOONGARCH_INSN_FORM_FMTGR2SCR = 38,
    LOONGARCH_INSN_FORM_FMTSCR2GR = 39,
    LOONGARCH_INSN_FORM_FMTPRELD = 40,
    LOONGARCH_INSN_FORM_FMTPRELDX = 41,
    LOONGARCH_INSN_FORM_FMT2RI3 = 42,
    LOONGARCH_INSN_FORM_FMT2RI6 = 43,
    LOONGARCH_INSN_FORM_FMT1RI4 = 44,
    LOONGARCH_INSN_FORM_FMT3R_VVV = 45,
    LOONGARCH_INSN_FORM_FMT2RI5_VVI = 46,
    LOONGARCH_INSN_FORM_FMT2RI8_VVI = 47,
    LOONGARCH_INSN_FORM_FMT2RI3_VVI = 48,
    LOONGARCH_INSN_FORM_FMT2RI6_VVI = 49,
    LOONGARCH_INSN_FORM_FMT2RI4_VVI = 50,
    LOONGARCH_INSN_FORM_FMT4R_VVVV = 51,
    LOONGARCH_INSN_FORM_FMT2R_VV = 52,
    LOONGARCH_INSN_FORM_FMT2R_XX = 53,
    LOONGARCH_INSN_FORM_FMT2RI4_VRI = 54,
    LOONGARCH_INSN_FORM_FMT2RI1_VRI = 55,
    LOONGARCH_INSN_FORM_FMT2RI3_VRI = 56,
    LOONGARCH_INSN_FORM_FMT2RI2_VRI = 57,
    LOONGARCH_INSN_FORM_FMT2RI12_VRI = 58,
    LOONGARCH_INSN_FORM_FMT1RI13_VI = 59,
    LOONGARCH_INSN_FORM_FMT2RI9_VRI = 60,
    LOONGARCH_INSN_FORM_FMT2RI11_VRI = 61,
    LOONGARCH_INSN_FORM_FMT2RI10_VRI = 62,
    LOONGARCH_INSN_FORM_FMT3R_VRR = 63,
    LOONGARCH_INSN_FORM_FMT2RI4_RVI = 64,
    LOONGARCH_INSN_FORM_FMT2RI1_RVI = 65,
    LOONGARCH_INSN_FORM_FMT2RI3_RVI = 66,
    LOONGARCH_INSN_FORM_FMT2RI2_RVI = 67,
    LOONGARCH_INSN_FORM_FMT2R_VR = 68,
    LOONGARCH_INSN_FORM_FMT2RI1_VVI = 69,
    LOONGARCH_INSN_FORM_FMT2RI2_VVI = 70,
    LOONGARCH_INSN_FORM_FMT3R_VVR = 71,
    LOONGARCH_INSN_FORM_FMT2R_CV = 72,
    LOONGARCH_INSN_FORM_FMT2RI7_VVI = 73,
    LOONGARCH_INSN_FORM_FMT2RI8I4_VRII = 74,
    LOONGARCH_INSN_FORM_FMT2RI8I1_VRII = 75,
    LOONGARCH_INSN_FORM_FMT2RI8I3_VRII = 76,
    LOONGARCH_INSN_FORM_FMT2RI8I2_VRII = 77,
    LOONGARCH_INSN_FORM_NODSTFMT2R = 78,
    LOONGARCH_INSN_FORM_NODSTFMT1R = 79,
    LOONGARCH_INSN_FORM_FMTMFTOP = 80,
    LOONGARCH_INSN_FORM_FMTMTTOP = 81,
    LOONGARCH_INSN_FORM_NODSTFMT1RI3 = 82,
    LOONGARCH_INSN_FORM_NODSTFMT1RI6 = 83,
    LOONGARCH_INSN_FORM_NODSTFMT1RI5 = 84,
    LOONGARCH_INSN_FORM_FMT1RI5I8 = 85,
    LOONGARCH_INSN_FORM_FMT3R_XXX = 86,
    LOONGARCH_INSN_FORM_FMT2RI5_XXI = 87,
    LOONGARCH_INSN_FORM_FMT2RI8_XXI = 88,
    LOONGARCH_INSN_FORM_FMT2RI3_XXI = 89,
    LOONGARCH_INSN_FORM_FMT2RI6_XXI = 90,
    LOONGARCH_INSN_FORM_FMT2RI4_XXI = 91,
    LOONGARCH_INSN_FORM_FMT4R_XXXX = 92,
    LOONGARCH_INSN_FORM_FMT2RI2_XRI = 93,
    LOONGARCH_INSN_FORM_FMT2RI3_XRI = 94,
    LOONGARCH_INSN_FORM_FMT2RI2_XXI = 95,
    LOONGARCH_INSN_FORM_FMT2RI12_XRI = 96,
    LOONGARCH_INSN_FORM_FMT1RI13_XI = 97,
    LOONGARCH_INSN_FORM_FMT2RI9_XRI = 98,
    LOONGARCH_INSN_FORM_FMT2RI11_XRI = 99,
    LOONGARCH_INSN_FORM_FMT2RI10_XRI = 100,
    LOONGARCH_INSN_FORM_FMT3R_XRR = 101,
    LOONGARCH_INSN_FORM_FMT2RI2_RXI = 102,
    LOONGARCH_INSN_FORM_FMT2RI3_RXI = 103,
    LOONGARCH_INSN_FORM_FMT2RI1_XXI = 104,
    LOONGARCH_INSN_FORM_FMT2R_XR = 105,
    LOONGARCH_INSN_FORM_FMT3R_XXR = 106,
    LOONGARCH_INSN_FORM_FMT2R_CX = 107,
    LOONGARCH_INSN_FORM_FMT2RI7_XXI = 108,
    LOONGARCH_INSN_FORM_FMT2RI8I5_XRII = 109,
    LOONGARCH_INSN_FORM_FMT2RI8I2_XRII = 110,
    LOONGARCH_INSN_FORM_FMT2RI8I4_XRII = 111,
    LOONGARCH_INSN_FORM_FMT2RI8I3_XRII = 112,
}
#[doc = " Supplemental info for LoongArch instructions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct loongarch_suppl_info {
    #[doc = "< Instruction form"]
    pub form: loongarch_insn_form,
    #[doc = "< Memory access (none/read/write/read+write)"]
    pub memory_access: cs_ac_type,
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_loongarch {
    #[doc = " The instruction format. Can be use to determine the bit encoding of the instruction."]
    pub format: loongarch_insn_form,
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_loongarch_op; 8usize],
}
impl ::core::fmt::Debug for cs_loongarch {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_loongarch {{ format: {:?}, operands: {:?} }}",
            self.format, self.operands
        )
    }
}
pub mod loongarch_reg {
    #[doc = " LoongArch registers"]
    pub type Type = libc::c_uint;
    pub const LOONGARCH_REG_INVALID: Type = 0;
    pub const LOONGARCH_REG_F0: Type = 1;
    pub const LOONGARCH_REG_F1: Type = 2;
    pub const LOONGARCH_REG_F2: Type = 3;
    pub const LOONGARCH_REG_F3: Type = 4;
    pub const LOONGARCH_REG_F4: Type = 5;
    pub const LOONGARCH_REG_F5: Type = 6;
    pub const LOONGARCH_REG_F6: Type = 7;
    pub const LOONGARCH_REG_F7: Type = 8;
    pub const LOONGARCH_REG_F8: Type = 9;
    pub const LOONGARCH_REG_F9: Type = 10;
    pub const LOONGARCH_REG_F10: Type = 11;
    pub const LOONGARCH_REG_F11: Type = 12;
    pub const LOONGARCH_REG_F12: Type = 13;
    pub const LOONGARCH_REG_F13: Type = 14;
    pub const LOONGARCH_REG_F14: Type = 15;
    pub const LOONGARCH_REG_F15: Type = 16;
    pub const LOONGARCH_REG_F16: Type = 17;
    pub const LOONGARCH_REG_F17: Type = 18;
    pub const LOONGARCH_REG_F18: Type = 19;
    pub const LOONGARCH_REG_F19: Type = 20;
    pub const LOONGARCH_REG_F20: Type = 21;
    pub const LOONGARCH_REG_F21: Type = 22;
    pub const LOONGARCH_REG_F22: Type = 23;
    pub const LOONGARCH_REG_F23: Type = 24;
    pub const LOONGARCH_REG_F24: Type = 25;
    pub const LOONGARCH_REG_F25: Type = 26;
    pub const LOONGARCH_REG_F26: Type = 27;
    pub const LOONGARCH_REG_F27: Type = 28;
    pub const LOONGARCH_REG_F28: Type = 29;
    pub const LOONGARCH_REG_F29: Type = 30;
    pub const LOONGARCH_REG_F30: Type = 31;
    pub const LOONGARCH_REG_F31: Type = 32;
    pub const LOONGARCH_REG_FCC0: Type = 33;
    pub const LOONGARCH_REG_FCC1: Type = 34;
    pub const LOONGARCH_REG_FCC2: Type = 35;
    pub const LOONGARCH_REG_FCC3: Type = 36;
    pub const LOONGARCH_REG_FCC4: Type = 37;
    pub const LOONGARCH_REG_FCC5: Type = 38;
    pub const LOONGARCH_REG_FCC6: Type = 39;
    pub const LOONGARCH_REG_FCC7: Type = 40;
    pub const LOONGARCH_REG_FCSR0: Type = 41;
    pub const LOONGARCH_REG_FCSR1: Type = 42;
    pub const LOONGARCH_REG_FCSR2: Type = 43;
    pub const LOONGARCH_REG_FCSR3: Type = 44;
    pub const LOONGARCH_REG_R0: Type = 45;
    pub const LOONGARCH_REG_R1: Type = 46;
    pub const LOONGARCH_REG_R2: Type = 47;
    pub const LOONGARCH_REG_R3: Type = 48;
    pub const LOONGARCH_REG_R4: Type = 49;
    pub const LOONGARCH_REG_R5: Type = 50;
    pub const LOONGARCH_REG_R6: Type = 51;
    pub const LOONGARCH_REG_R7: Type = 52;
    pub const LOONGARCH_REG_R8: Type = 53;
    pub const LOONGARCH_REG_R9: Type = 54;
    pub const LOONGARCH_REG_R10: Type = 55;
    pub const LOONGARCH_REG_R11: Type = 56;
    pub const LOONGARCH_REG_R12: Type = 57;
    pub const LOONGARCH_REG_R13: Type = 58;
    pub const LOONGARCH_REG_R14: Type = 59;
    pub const LOONGARCH_REG_R15: Type = 60;
    pub const LOONGARCH_REG_R16: Type = 61;
    pub const LOONGARCH_REG_R17: Type = 62;
    pub const LOONGARCH_REG_R18: Type = 63;
    pub const LOONGARCH_REG_R19: Type = 64;
    pub const LOONGARCH_REG_R20: Type = 65;
    pub const LOONGARCH_REG_R21: Type = 66;
    pub const LOONGARCH_REG_R22: Type = 67;
    pub const LOONGARCH_REG_R23: Type = 68;
    pub const LOONGARCH_REG_R24: Type = 69;
    pub const LOONGARCH_REG_R25: Type = 70;
    pub const LOONGARCH_REG_R26: Type = 71;
    pub const LOONGARCH_REG_R27: Type = 72;
    pub const LOONGARCH_REG_R28: Type = 73;
    pub const LOONGARCH_REG_R29: Type = 74;
    pub const LOONGARCH_REG_R30: Type = 75;
    pub const LOONGARCH_REG_R31: Type = 76;
    pub const LOONGARCH_REG_SCR0: Type = 77;
    pub const LOONGARCH_REG_SCR1: Type = 78;
    pub const LOONGARCH_REG_SCR2: Type = 79;
    pub const LOONGARCH_REG_SCR3: Type = 80;
    pub const LOONGARCH_REG_VR0: Type = 81;
    pub const LOONGARCH_REG_VR1: Type = 82;
    pub const LOONGARCH_REG_VR2: Type = 83;
    pub const LOONGARCH_REG_VR3: Type = 84;
    pub const LOONGARCH_REG_VR4: Type = 85;
    pub const LOONGARCH_REG_VR5: Type = 86;
    pub const LOONGARCH_REG_VR6: Type = 87;
    pub const LOONGARCH_REG_VR7: Type = 88;
    pub const LOONGARCH_REG_VR8: Type = 89;
    pub const LOONGARCH_REG_VR9: Type = 90;
    pub const LOONGARCH_REG_VR10: Type = 91;
    pub const LOONGARCH_REG_VR11: Type = 92;
    pub const LOONGARCH_REG_VR12: Type = 93;
    pub const LOONGARCH_REG_VR13: Type = 94;
    pub const LOONGARCH_REG_VR14: Type = 95;
    pub const LOONGARCH_REG_VR15: Type = 96;
    pub const LOONGARCH_REG_VR16: Type = 97;
    pub const LOONGARCH_REG_VR17: Type = 98;
    pub const LOONGARCH_REG_VR18: Type = 99;
    pub const LOONGARCH_REG_VR19: Type = 100;
    pub const LOONGARCH_REG_VR20: Type = 101;
    pub const LOONGARCH_REG_VR21: Type = 102;
    pub const LOONGARCH_REG_VR22: Type = 103;
    pub const LOONGARCH_REG_VR23: Type = 104;
    pub const LOONGARCH_REG_VR24: Type = 105;
    pub const LOONGARCH_REG_VR25: Type = 106;
    pub const LOONGARCH_REG_VR26: Type = 107;
    pub const LOONGARCH_REG_VR27: Type = 108;
    pub const LOONGARCH_REG_VR28: Type = 109;
    pub const LOONGARCH_REG_VR29: Type = 110;
    pub const LOONGARCH_REG_VR30: Type = 111;
    pub const LOONGARCH_REG_VR31: Type = 112;
    pub const LOONGARCH_REG_XR0: Type = 113;
    pub const LOONGARCH_REG_XR1: Type = 114;
    pub const LOONGARCH_REG_XR2: Type = 115;
    pub const LOONGARCH_REG_XR3: Type = 116;
    pub const LOONGARCH_REG_XR4: Type = 117;
    pub const LOONGARCH_REG_XR5: Type = 118;
    pub const LOONGARCH_REG_XR6: Type = 119;
    pub const LOONGARCH_REG_XR7: Type = 120;
    pub const LOONGARCH_REG_XR8: Type = 121;
    pub const LOONGARCH_REG_XR9: Type = 122;
    pub const LOONGARCH_REG_XR10: Type = 123;
    pub const LOONGARCH_REG_XR11: Type = 124;
    pub const LOONGARCH_REG_XR12: Type = 125;
    pub const LOONGARCH_REG_XR13: Type = 126;
    pub const LOONGARCH_REG_XR14: Type = 127;
    pub const LOONGARCH_REG_XR15: Type = 128;
    pub const LOONGARCH_REG_XR16: Type = 129;
    pub const LOONGARCH_REG_XR17: Type = 130;
    pub const LOONGARCH_REG_XR18: Type = 131;
    pub const LOONGARCH_REG_XR19: Type = 132;
    pub const LOONGARCH_REG_XR20: Type = 133;
    pub const LOONGARCH_REG_XR21: Type = 134;
    pub const LOONGARCH_REG_XR22: Type = 135;
    pub const LOONGARCH_REG_XR23: Type = 136;
    pub const LOONGARCH_REG_XR24: Type = 137;
    pub const LOONGARCH_REG_XR25: Type = 138;
    pub const LOONGARCH_REG_XR26: Type = 139;
    pub const LOONGARCH_REG_XR27: Type = 140;
    pub const LOONGARCH_REG_XR28: Type = 141;
    pub const LOONGARCH_REG_XR29: Type = 142;
    pub const LOONGARCH_REG_XR30: Type = 143;
    pub const LOONGARCH_REG_XR31: Type = 144;
    pub const LOONGARCH_REG_F0_64: Type = 145;
    pub const LOONGARCH_REG_F1_64: Type = 146;
    pub const LOONGARCH_REG_F2_64: Type = 147;
    pub const LOONGARCH_REG_F3_64: Type = 148;
    pub const LOONGARCH_REG_F4_64: Type = 149;
    pub const LOONGARCH_REG_F5_64: Type = 150;
    pub const LOONGARCH_REG_F6_64: Type = 151;
    pub const LOONGARCH_REG_F7_64: Type = 152;
    pub const LOONGARCH_REG_F8_64: Type = 153;
    pub const LOONGARCH_REG_F9_64: Type = 154;
    pub const LOONGARCH_REG_F10_64: Type = 155;
    pub const LOONGARCH_REG_F11_64: Type = 156;
    pub const LOONGARCH_REG_F12_64: Type = 157;
    pub const LOONGARCH_REG_F13_64: Type = 158;
    pub const LOONGARCH_REG_F14_64: Type = 159;
    pub const LOONGARCH_REG_F15_64: Type = 160;
    pub const LOONGARCH_REG_F16_64: Type = 161;
    pub const LOONGARCH_REG_F17_64: Type = 162;
    pub const LOONGARCH_REG_F18_64: Type = 163;
    pub const LOONGARCH_REG_F19_64: Type = 164;
    pub const LOONGARCH_REG_F20_64: Type = 165;
    pub const LOONGARCH_REG_F21_64: Type = 166;
    pub const LOONGARCH_REG_F22_64: Type = 167;
    pub const LOONGARCH_REG_F23_64: Type = 168;
    pub const LOONGARCH_REG_F24_64: Type = 169;
    pub const LOONGARCH_REG_F25_64: Type = 170;
    pub const LOONGARCH_REG_F26_64: Type = 171;
    pub const LOONGARCH_REG_F27_64: Type = 172;
    pub const LOONGARCH_REG_F28_64: Type = 173;
    pub const LOONGARCH_REG_F29_64: Type = 174;
    pub const LOONGARCH_REG_F30_64: Type = 175;
    pub const LOONGARCH_REG_F31_64: Type = 176;
    pub const LOONGARCH_REG_ENDING: Type = 177;
    pub const LOONGARCH_REG_ZERO: Type = 45;
    pub const LOONGARCH_REG_RA: Type = 46;
    pub const LOONGARCH_REG_TP: Type = 47;
    pub const LOONGARCH_REG_SP: Type = 48;
    pub const LOONGARCH_REG_A0: Type = 49;
    pub const LOONGARCH_REG_A1: Type = 50;
    pub const LOONGARCH_REG_A2: Type = 51;
    pub const LOONGARCH_REG_A3: Type = 52;
    pub const LOONGARCH_REG_A4: Type = 53;
    pub const LOONGARCH_REG_A5: Type = 54;
    pub const LOONGARCH_REG_A6: Type = 55;
    pub const LOONGARCH_REG_A7: Type = 56;
    pub const LOONGARCH_REG_T0: Type = 57;
    pub const LOONGARCH_REG_T1: Type = 58;
    pub const LOONGARCH_REG_T2: Type = 59;
    pub const LOONGARCH_REG_T3: Type = 60;
    pub const LOONGARCH_REG_T4: Type = 61;
    pub const LOONGARCH_REG_T5: Type = 62;
    pub const LOONGARCH_REG_T6: Type = 63;
    pub const LOONGARCH_REG_T7: Type = 64;
    pub const LOONGARCH_REG_T8: Type = 65;
    pub const LOONGARCH_REG_FP: Type = 67;
    pub const LOONGARCH_REG_S9: Type = 67;
    pub const LOONGARCH_REG_S0: Type = 68;
    pub const LOONGARCH_REG_S1: Type = 69;
    pub const LOONGARCH_REG_S2: Type = 70;
    pub const LOONGARCH_REG_S3: Type = 71;
    pub const LOONGARCH_REG_S4: Type = 72;
    pub const LOONGARCH_REG_S5: Type = 73;
    pub const LOONGARCH_REG_S6: Type = 74;
    pub const LOONGARCH_REG_S7: Type = 75;
    pub const LOONGARCH_REG_S8: Type = 76;
}
#[repr(u32)]
#[doc = " LoongArch instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum loongarch_insn {
    LOONGARCH_INS_INVALID = 0,
    LOONGARCH_INS_CALL36 = 1,
    LOONGARCH_INS_LA_ABS = 2,
    LOONGARCH_INS_LA_GOT = 3,
    LOONGARCH_INS_LA_PCREL = 4,
    LOONGARCH_INS_LA_TLS_GD = 5,
    LOONGARCH_INS_LA_TLS_IE = 6,
    LOONGARCH_INS_LA_TLS_LD = 7,
    LOONGARCH_INS_LA_TLS_LE = 8,
    LOONGARCH_INS_LI_D = 9,
    LOONGARCH_INS_LI_W = 10,
    LOONGARCH_INS_TAIL36 = 11,
    LOONGARCH_INS_VREPLI_B = 12,
    LOONGARCH_INS_VREPLI_D = 13,
    LOONGARCH_INS_VREPLI_H = 14,
    LOONGARCH_INS_VREPLI_W = 15,
    LOONGARCH_INS_XVREPLI_B = 16,
    LOONGARCH_INS_XVREPLI_D = 17,
    LOONGARCH_INS_XVREPLI_H = 18,
    LOONGARCH_INS_XVREPLI_W = 19,
    LOONGARCH_INS_ADC_B = 20,
    LOONGARCH_INS_ADC_D = 21,
    LOONGARCH_INS_ADC_H = 22,
    LOONGARCH_INS_ADC_W = 23,
    LOONGARCH_INS_ADDI_D = 24,
    LOONGARCH_INS_ADDI_W = 25,
    LOONGARCH_INS_ADDU12I_D = 26,
    LOONGARCH_INS_ADDU12I_W = 27,
    LOONGARCH_INS_ADDU16I_D = 28,
    LOONGARCH_INS_ADD_D = 29,
    LOONGARCH_INS_ADD_W = 30,
    LOONGARCH_INS_ALSL_D = 31,
    LOONGARCH_INS_ALSL_W = 32,
    LOONGARCH_INS_ALSL_WU = 33,
    LOONGARCH_INS_AMADD_B = 34,
    LOONGARCH_INS_AMADD_D = 35,
    LOONGARCH_INS_AMADD_H = 36,
    LOONGARCH_INS_AMADD_W = 37,
    LOONGARCH_INS_AMADD_DB_B = 38,
    LOONGARCH_INS_AMADD_DB_D = 39,
    LOONGARCH_INS_AMADD_DB_H = 40,
    LOONGARCH_INS_AMADD_DB_W = 41,
    LOONGARCH_INS_AMAND_D = 42,
    LOONGARCH_INS_AMAND_W = 43,
    LOONGARCH_INS_AMAND_DB_D = 44,
    LOONGARCH_INS_AMAND_DB_W = 45,
    LOONGARCH_INS_AMCAS_B = 46,
    LOONGARCH_INS_AMCAS_D = 47,
    LOONGARCH_INS_AMCAS_H = 48,
    LOONGARCH_INS_AMCAS_W = 49,
    LOONGARCH_INS_AMCAS_DB_B = 50,
    LOONGARCH_INS_AMCAS_DB_D = 51,
    LOONGARCH_INS_AMCAS_DB_H = 52,
    LOONGARCH_INS_AMCAS_DB_W = 53,
    LOONGARCH_INS_AMMAX_D = 54,
    LOONGARCH_INS_AMMAX_DU = 55,
    LOONGARCH_INS_AMMAX_W = 56,
    LOONGARCH_INS_AMMAX_WU = 57,
    LOONGARCH_INS_AMMAX_DB_D = 58,
    LOONGARCH_INS_AMMAX_DB_DU = 59,
    LOONGARCH_INS_AMMAX_DB_W = 60,
    LOONGARCH_INS_AMMAX_DB_WU = 61,
    LOONGARCH_INS_AMMIN_D = 62,
    LOONGARCH_INS_AMMIN_DU = 63,
    LOONGARCH_INS_AMMIN_W = 64,
    LOONGARCH_INS_AMMIN_WU = 65,
    LOONGARCH_INS_AMMIN_DB_D = 66,
    LOONGARCH_INS_AMMIN_DB_DU = 67,
    LOONGARCH_INS_AMMIN_DB_W = 68,
    LOONGARCH_INS_AMMIN_DB_WU = 69,
    LOONGARCH_INS_AMOR_D = 70,
    LOONGARCH_INS_AMOR_W = 71,
    LOONGARCH_INS_AMOR_DB_D = 72,
    LOONGARCH_INS_AMOR_DB_W = 73,
    LOONGARCH_INS_AMSWAP_B = 74,
    LOONGARCH_INS_AMSWAP_D = 75,
    LOONGARCH_INS_AMSWAP_H = 76,
    LOONGARCH_INS_AMSWAP_W = 77,
    LOONGARCH_INS_AMSWAP_DB_B = 78,
    LOONGARCH_INS_AMSWAP_DB_D = 79,
    LOONGARCH_INS_AMSWAP_DB_H = 80,
    LOONGARCH_INS_AMSWAP_DB_W = 81,
    LOONGARCH_INS_AMXOR_D = 82,
    LOONGARCH_INS_AMXOR_W = 83,
    LOONGARCH_INS_AMXOR_DB_D = 84,
    LOONGARCH_INS_AMXOR_DB_W = 85,
    LOONGARCH_INS_AND = 86,
    LOONGARCH_INS_ANDI = 87,
    LOONGARCH_INS_ANDN = 88,
    LOONGARCH_INS_ARMADC_W = 89,
    LOONGARCH_INS_ARMADD_W = 90,
    LOONGARCH_INS_ARMAND_W = 91,
    LOONGARCH_INS_ARMMFFLAG = 92,
    LOONGARCH_INS_ARMMOVE = 93,
    LOONGARCH_INS_ARMMOV_D = 94,
    LOONGARCH_INS_ARMMOV_W = 95,
    LOONGARCH_INS_ARMMTFLAG = 96,
    LOONGARCH_INS_ARMNOT_W = 97,
    LOONGARCH_INS_ARMOR_W = 98,
    LOONGARCH_INS_ARMROTRI_W = 99,
    LOONGARCH_INS_ARMROTR_W = 100,
    LOONGARCH_INS_ARMRRX_W = 101,
    LOONGARCH_INS_ARMSBC_W = 102,
    LOONGARCH_INS_ARMSLLI_W = 103,
    LOONGARCH_INS_ARMSLL_W = 104,
    LOONGARCH_INS_ARMSRAI_W = 105,
    LOONGARCH_INS_ARMSRA_W = 106,
    LOONGARCH_INS_ARMSRLI_W = 107,
    LOONGARCH_INS_ARMSRL_W = 108,
    LOONGARCH_INS_ARMSUB_W = 109,
    LOONGARCH_INS_ARMXOR_W = 110,
    LOONGARCH_INS_ASRTGT_D = 111,
    LOONGARCH_INS_ASRTLE_D = 112,
    LOONGARCH_INS_B = 113,
    LOONGARCH_INS_BCEQZ = 114,
    LOONGARCH_INS_BCNEZ = 115,
    LOONGARCH_INS_BEQ = 116,
    LOONGARCH_INS_BEQZ = 117,
    LOONGARCH_INS_BGE = 118,
    LOONGARCH_INS_BGEU = 119,
    LOONGARCH_INS_BITREV_4B = 120,
    LOONGARCH_INS_BITREV_8B = 121,
    LOONGARCH_INS_BITREV_D = 122,
    LOONGARCH_INS_BITREV_W = 123,
    LOONGARCH_INS_BL = 124,
    LOONGARCH_INS_BLT = 125,
    LOONGARCH_INS_BLTU = 126,
    LOONGARCH_INS_BNE = 127,
    LOONGARCH_INS_BNEZ = 128,
    LOONGARCH_INS_BREAK = 129,
    LOONGARCH_INS_BSTRINS_D = 130,
    LOONGARCH_INS_BSTRINS_W = 131,
    LOONGARCH_INS_BSTRPICK_D = 132,
    LOONGARCH_INS_BSTRPICK_W = 133,
    LOONGARCH_INS_BYTEPICK_D = 134,
    LOONGARCH_INS_BYTEPICK_W = 135,
    LOONGARCH_INS_CACOP = 136,
    LOONGARCH_INS_CLO_D = 137,
    LOONGARCH_INS_CLO_W = 138,
    LOONGARCH_INS_CLZ_D = 139,
    LOONGARCH_INS_CLZ_W = 140,
    LOONGARCH_INS_CPUCFG = 141,
    LOONGARCH_INS_CRCC_W_B_W = 142,
    LOONGARCH_INS_CRCC_W_D_W = 143,
    LOONGARCH_INS_CRCC_W_H_W = 144,
    LOONGARCH_INS_CRCC_W_W_W = 145,
    LOONGARCH_INS_CRC_W_B_W = 146,
    LOONGARCH_INS_CRC_W_D_W = 147,
    LOONGARCH_INS_CRC_W_H_W = 148,
    LOONGARCH_INS_CRC_W_W_W = 149,
    LOONGARCH_INS_CSRRD = 150,
    LOONGARCH_INS_CSRWR = 151,
    LOONGARCH_INS_CSRXCHG = 152,
    LOONGARCH_INS_CTO_D = 153,
    LOONGARCH_INS_CTO_W = 154,
    LOONGARCH_INS_CTZ_D = 155,
    LOONGARCH_INS_CTZ_W = 156,
    LOONGARCH_INS_DBAR = 157,
    LOONGARCH_INS_DBCL = 158,
    LOONGARCH_INS_DIV_D = 159,
    LOONGARCH_INS_DIV_DU = 160,
    LOONGARCH_INS_DIV_W = 161,
    LOONGARCH_INS_DIV_WU = 162,
    LOONGARCH_INS_ERTN = 163,
    LOONGARCH_INS_EXT_W_B = 164,
    LOONGARCH_INS_EXT_W_H = 165,
    LOONGARCH_INS_FABS_D = 166,
    LOONGARCH_INS_FABS_S = 167,
    LOONGARCH_INS_FADD_D = 168,
    LOONGARCH_INS_FADD_S = 169,
    LOONGARCH_INS_FCLASS_D = 170,
    LOONGARCH_INS_FCLASS_S = 171,
    LOONGARCH_INS_FCMP_CAF_D = 172,
    LOONGARCH_INS_FCMP_CAF_S = 173,
    LOONGARCH_INS_FCMP_CEQ_D = 174,
    LOONGARCH_INS_FCMP_CEQ_S = 175,
    LOONGARCH_INS_FCMP_CLE_D = 176,
    LOONGARCH_INS_FCMP_CLE_S = 177,
    LOONGARCH_INS_FCMP_CLT_D = 178,
    LOONGARCH_INS_FCMP_CLT_S = 179,
    LOONGARCH_INS_FCMP_CNE_D = 180,
    LOONGARCH_INS_FCMP_CNE_S = 181,
    LOONGARCH_INS_FCMP_COR_D = 182,
    LOONGARCH_INS_FCMP_COR_S = 183,
    LOONGARCH_INS_FCMP_CUEQ_D = 184,
    LOONGARCH_INS_FCMP_CUEQ_S = 185,
    LOONGARCH_INS_FCMP_CULE_D = 186,
    LOONGARCH_INS_FCMP_CULE_S = 187,
    LOONGARCH_INS_FCMP_CULT_D = 188,
    LOONGARCH_INS_FCMP_CULT_S = 189,
    LOONGARCH_INS_FCMP_CUNE_D = 190,
    LOONGARCH_INS_FCMP_CUNE_S = 191,
    LOONGARCH_INS_FCMP_CUN_D = 192,
    LOONGARCH_INS_FCMP_CUN_S = 193,
    LOONGARCH_INS_FCMP_SAF_D = 194,
    LOONGARCH_INS_FCMP_SAF_S = 195,
    LOONGARCH_INS_FCMP_SEQ_D = 196,
    LOONGARCH_INS_FCMP_SEQ_S = 197,
    LOONGARCH_INS_FCMP_SLE_D = 198,
    LOONGARCH_INS_FCMP_SLE_S = 199,
    LOONGARCH_INS_FCMP_SLT_D = 200,
    LOONGARCH_INS_FCMP_SLT_S = 201,
    LOONGARCH_INS_FCMP_SNE_D = 202,
    LOONGARCH_INS_FCMP_SNE_S = 203,
    LOONGARCH_INS_FCMP_SOR_D = 204,
    LOONGARCH_INS_FCMP_SOR_S = 205,
    LOONGARCH_INS_FCMP_SUEQ_D = 206,
    LOONGARCH_INS_FCMP_SUEQ_S = 207,
    LOONGARCH_INS_FCMP_SULE_D = 208,
    LOONGARCH_INS_FCMP_SULE_S = 209,
    LOONGARCH_INS_FCMP_SULT_D = 210,
    LOONGARCH_INS_FCMP_SULT_S = 211,
    LOONGARCH_INS_FCMP_SUNE_D = 212,
    LOONGARCH_INS_FCMP_SUNE_S = 213,
    LOONGARCH_INS_FCMP_SUN_D = 214,
    LOONGARCH_INS_FCMP_SUN_S = 215,
    LOONGARCH_INS_FCOPYSIGN_D = 216,
    LOONGARCH_INS_FCOPYSIGN_S = 217,
    LOONGARCH_INS_FCVT_D_LD = 218,
    LOONGARCH_INS_FCVT_D_S = 219,
    LOONGARCH_INS_FCVT_LD_D = 220,
    LOONGARCH_INS_FCVT_S_D = 221,
    LOONGARCH_INS_FCVT_UD_D = 222,
    LOONGARCH_INS_FDIV_D = 223,
    LOONGARCH_INS_FDIV_S = 224,
    LOONGARCH_INS_FFINT_D_L = 225,
    LOONGARCH_INS_FFINT_D_W = 226,
    LOONGARCH_INS_FFINT_S_L = 227,
    LOONGARCH_INS_FFINT_S_W = 228,
    LOONGARCH_INS_FLDGT_D = 229,
    LOONGARCH_INS_FLDGT_S = 230,
    LOONGARCH_INS_FLDLE_D = 231,
    LOONGARCH_INS_FLDLE_S = 232,
    LOONGARCH_INS_FLDX_D = 233,
    LOONGARCH_INS_FLDX_S = 234,
    LOONGARCH_INS_FLD_D = 235,
    LOONGARCH_INS_FLD_S = 236,
    LOONGARCH_INS_FLOGB_D = 237,
    LOONGARCH_INS_FLOGB_S = 238,
    LOONGARCH_INS_FMADD_D = 239,
    LOONGARCH_INS_FMADD_S = 240,
    LOONGARCH_INS_FMAXA_D = 241,
    LOONGARCH_INS_FMAXA_S = 242,
    LOONGARCH_INS_FMAX_D = 243,
    LOONGARCH_INS_FMAX_S = 244,
    LOONGARCH_INS_FMINA_D = 245,
    LOONGARCH_INS_FMINA_S = 246,
    LOONGARCH_INS_FMIN_D = 247,
    LOONGARCH_INS_FMIN_S = 248,
    LOONGARCH_INS_FMOV_D = 249,
    LOONGARCH_INS_FMOV_S = 250,
    LOONGARCH_INS_FMSUB_D = 251,
    LOONGARCH_INS_FMSUB_S = 252,
    LOONGARCH_INS_FMUL_D = 253,
    LOONGARCH_INS_FMUL_S = 254,
    LOONGARCH_INS_FNEG_D = 255,
    LOONGARCH_INS_FNEG_S = 256,
    LOONGARCH_INS_FNMADD_D = 257,
    LOONGARCH_INS_FNMADD_S = 258,
    LOONGARCH_INS_FNMSUB_D = 259,
    LOONGARCH_INS_FNMSUB_S = 260,
    LOONGARCH_INS_FRECIPE_D = 261,
    LOONGARCH_INS_FRECIPE_S = 262,
    LOONGARCH_INS_FRECIP_D = 263,
    LOONGARCH_INS_FRECIP_S = 264,
    LOONGARCH_INS_FRINT_D = 265,
    LOONGARCH_INS_FRINT_S = 266,
    LOONGARCH_INS_FRSQRTE_D = 267,
    LOONGARCH_INS_FRSQRTE_S = 268,
    LOONGARCH_INS_FRSQRT_D = 269,
    LOONGARCH_INS_FRSQRT_S = 270,
    LOONGARCH_INS_FSCALEB_D = 271,
    LOONGARCH_INS_FSCALEB_S = 272,
    LOONGARCH_INS_FSEL = 273,
    LOONGARCH_INS_FSQRT_D = 274,
    LOONGARCH_INS_FSQRT_S = 275,
    LOONGARCH_INS_FSTGT_D = 276,
    LOONGARCH_INS_FSTGT_S = 277,
    LOONGARCH_INS_FSTLE_D = 278,
    LOONGARCH_INS_FSTLE_S = 279,
    LOONGARCH_INS_FSTX_D = 280,
    LOONGARCH_INS_FSTX_S = 281,
    LOONGARCH_INS_FST_D = 282,
    LOONGARCH_INS_FST_S = 283,
    LOONGARCH_INS_FSUB_D = 284,
    LOONGARCH_INS_FSUB_S = 285,
    LOONGARCH_INS_FTINTRM_L_D = 286,
    LOONGARCH_INS_FTINTRM_L_S = 287,
    LOONGARCH_INS_FTINTRM_W_D = 288,
    LOONGARCH_INS_FTINTRM_W_S = 289,
    LOONGARCH_INS_FTINTRNE_L_D = 290,
    LOONGARCH_INS_FTINTRNE_L_S = 291,
    LOONGARCH_INS_FTINTRNE_W_D = 292,
    LOONGARCH_INS_FTINTRNE_W_S = 293,
    LOONGARCH_INS_FTINTRP_L_D = 294,
    LOONGARCH_INS_FTINTRP_L_S = 295,
    LOONGARCH_INS_FTINTRP_W_D = 296,
    LOONGARCH_INS_FTINTRP_W_S = 297,
    LOONGARCH_INS_FTINTRZ_L_D = 298,
    LOONGARCH_INS_FTINTRZ_L_S = 299,
    LOONGARCH_INS_FTINTRZ_W_D = 300,
    LOONGARCH_INS_FTINTRZ_W_S = 301,
    LOONGARCH_INS_FTINT_L_D = 302,
    LOONGARCH_INS_FTINT_L_S = 303,
    LOONGARCH_INS_FTINT_W_D = 304,
    LOONGARCH_INS_FTINT_W_S = 305,
    LOONGARCH_INS_GCSRRD = 306,
    LOONGARCH_INS_GCSRWR = 307,
    LOONGARCH_INS_GCSRXCHG = 308,
    LOONGARCH_INS_GTLBFLUSH = 309,
    LOONGARCH_INS_HVCL = 310,
    LOONGARCH_INS_IBAR = 311,
    LOONGARCH_INS_IDLE = 312,
    LOONGARCH_INS_INVTLB = 313,
    LOONGARCH_INS_IOCSRRD_B = 314,
    LOONGARCH_INS_IOCSRRD_D = 315,
    LOONGARCH_INS_IOCSRRD_H = 316,
    LOONGARCH_INS_IOCSRRD_W = 317,
    LOONGARCH_INS_IOCSRWR_B = 318,
    LOONGARCH_INS_IOCSRWR_D = 319,
    LOONGARCH_INS_IOCSRWR_H = 320,
    LOONGARCH_INS_IOCSRWR_W = 321,
    LOONGARCH_INS_JIRL = 322,
    LOONGARCH_INS_JISCR0 = 323,
    LOONGARCH_INS_JISCR1 = 324,
    LOONGARCH_INS_LDDIR = 325,
    LOONGARCH_INS_LDGT_B = 326,
    LOONGARCH_INS_LDGT_D = 327,
    LOONGARCH_INS_LDGT_H = 328,
    LOONGARCH_INS_LDGT_W = 329,
    LOONGARCH_INS_LDLE_B = 330,
    LOONGARCH_INS_LDLE_D = 331,
    LOONGARCH_INS_LDLE_H = 332,
    LOONGARCH_INS_LDLE_W = 333,
    LOONGARCH_INS_LDL_D = 334,
    LOONGARCH_INS_LDL_W = 335,
    LOONGARCH_INS_LDPTE = 336,
    LOONGARCH_INS_LDPTR_D = 337,
    LOONGARCH_INS_LDPTR_W = 338,
    LOONGARCH_INS_LDR_D = 339,
    LOONGARCH_INS_LDR_W = 340,
    LOONGARCH_INS_LDX_B = 341,
    LOONGARCH_INS_LDX_BU = 342,
    LOONGARCH_INS_LDX_D = 343,
    LOONGARCH_INS_LDX_H = 344,
    LOONGARCH_INS_LDX_HU = 345,
    LOONGARCH_INS_LDX_W = 346,
    LOONGARCH_INS_LDX_WU = 347,
    LOONGARCH_INS_LD_B = 348,
    LOONGARCH_INS_LD_BU = 349,
    LOONGARCH_INS_LD_D = 350,
    LOONGARCH_INS_LD_H = 351,
    LOONGARCH_INS_LD_HU = 352,
    LOONGARCH_INS_LD_W = 353,
    LOONGARCH_INS_LD_WU = 354,
    LOONGARCH_INS_LLACQ_D = 355,
    LOONGARCH_INS_LLACQ_W = 356,
    LOONGARCH_INS_LL_D = 357,
    LOONGARCH_INS_LL_W = 358,
    LOONGARCH_INS_LU12I_W = 359,
    LOONGARCH_INS_LU32I_D = 360,
    LOONGARCH_INS_LU52I_D = 361,
    LOONGARCH_INS_MASKEQZ = 362,
    LOONGARCH_INS_MASKNEZ = 363,
    LOONGARCH_INS_MOD_D = 364,
    LOONGARCH_INS_MOD_DU = 365,
    LOONGARCH_INS_MOD_W = 366,
    LOONGARCH_INS_MOD_WU = 367,
    LOONGARCH_INS_MOVCF2FR = 368,
    LOONGARCH_INS_MOVCF2GR = 369,
    LOONGARCH_INS_MOVFCSR2GR = 370,
    LOONGARCH_INS_MOVFR2CF = 371,
    LOONGARCH_INS_MOVFR2GR_D = 372,
    LOONGARCH_INS_MOVFR2GR_S = 373,
    LOONGARCH_INS_MOVFRH2GR_S = 374,
    LOONGARCH_INS_MOVGR2CF = 375,
    LOONGARCH_INS_MOVGR2FCSR = 376,
    LOONGARCH_INS_MOVGR2FRH_W = 377,
    LOONGARCH_INS_MOVGR2FR_D = 378,
    LOONGARCH_INS_MOVGR2FR_W = 379,
    LOONGARCH_INS_MOVGR2SCR = 380,
    LOONGARCH_INS_MOVSCR2GR = 381,
    LOONGARCH_INS_MULH_D = 382,
    LOONGARCH_INS_MULH_DU = 383,
    LOONGARCH_INS_MULH_W = 384,
    LOONGARCH_INS_MULH_WU = 385,
    LOONGARCH_INS_MULW_D_W = 386,
    LOONGARCH_INS_MULW_D_WU = 387,
    LOONGARCH_INS_MUL_D = 388,
    LOONGARCH_INS_MUL_W = 389,
    LOONGARCH_INS_NOR = 390,
    LOONGARCH_INS_OR = 391,
    LOONGARCH_INS_ORI = 392,
    LOONGARCH_INS_ORN = 393,
    LOONGARCH_INS_PCADDI = 394,
    LOONGARCH_INS_PCADDU12I = 395,
    LOONGARCH_INS_PCADDU18I = 396,
    LOONGARCH_INS_PCALAU12I = 397,
    LOONGARCH_INS_PRELD = 398,
    LOONGARCH_INS_PRELDX = 399,
    LOONGARCH_INS_RCRI_B = 400,
    LOONGARCH_INS_RCRI_D = 401,
    LOONGARCH_INS_RCRI_H = 402,
    LOONGARCH_INS_RCRI_W = 403,
    LOONGARCH_INS_RCR_B = 404,
    LOONGARCH_INS_RCR_D = 405,
    LOONGARCH_INS_RCR_H = 406,
    LOONGARCH_INS_RCR_W = 407,
    LOONGARCH_INS_RDTIMEH_W = 408,
    LOONGARCH_INS_RDTIMEL_W = 409,
    LOONGARCH_INS_RDTIME_D = 410,
    LOONGARCH_INS_REVB_2H = 411,
    LOONGARCH_INS_REVB_2W = 412,
    LOONGARCH_INS_REVB_4H = 413,
    LOONGARCH_INS_REVB_D = 414,
    LOONGARCH_INS_REVH_2W = 415,
    LOONGARCH_INS_REVH_D = 416,
    LOONGARCH_INS_ROTRI_B = 417,
    LOONGARCH_INS_ROTRI_D = 418,
    LOONGARCH_INS_ROTRI_H = 419,
    LOONGARCH_INS_ROTRI_W = 420,
    LOONGARCH_INS_ROTR_B = 421,
    LOONGARCH_INS_ROTR_D = 422,
    LOONGARCH_INS_ROTR_H = 423,
    LOONGARCH_INS_ROTR_W = 424,
    LOONGARCH_INS_SBC_B = 425,
    LOONGARCH_INS_SBC_D = 426,
    LOONGARCH_INS_SBC_H = 427,
    LOONGARCH_INS_SBC_W = 428,
    LOONGARCH_INS_SCREL_D = 429,
    LOONGARCH_INS_SCREL_W = 430,
    LOONGARCH_INS_SC_D = 431,
    LOONGARCH_INS_SC_Q = 432,
    LOONGARCH_INS_SC_W = 433,
    LOONGARCH_INS_SETARMJ = 434,
    LOONGARCH_INS_SETX86J = 435,
    LOONGARCH_INS_SETX86LOOPE = 436,
    LOONGARCH_INS_SETX86LOOPNE = 437,
    LOONGARCH_INS_SLLI_D = 438,
    LOONGARCH_INS_SLLI_W = 439,
    LOONGARCH_INS_SLL_D = 440,
    LOONGARCH_INS_SLL_W = 441,
    LOONGARCH_INS_SLT = 442,
    LOONGARCH_INS_SLTI = 443,
    LOONGARCH_INS_SLTU = 444,
    LOONGARCH_INS_SLTUI = 445,
    LOONGARCH_INS_SRAI_D = 446,
    LOONGARCH_INS_SRAI_W = 447,
    LOONGARCH_INS_SRA_D = 448,
    LOONGARCH_INS_SRA_W = 449,
    LOONGARCH_INS_SRLI_D = 450,
    LOONGARCH_INS_SRLI_W = 451,
    LOONGARCH_INS_SRL_D = 452,
    LOONGARCH_INS_SRL_W = 453,
    LOONGARCH_INS_STGT_B = 454,
    LOONGARCH_INS_STGT_D = 455,
    LOONGARCH_INS_STGT_H = 456,
    LOONGARCH_INS_STGT_W = 457,
    LOONGARCH_INS_STLE_B = 458,
    LOONGARCH_INS_STLE_D = 459,
    LOONGARCH_INS_STLE_H = 460,
    LOONGARCH_INS_STLE_W = 461,
    LOONGARCH_INS_STL_D = 462,
    LOONGARCH_INS_STL_W = 463,
    LOONGARCH_INS_STPTR_D = 464,
    LOONGARCH_INS_STPTR_W = 465,
    LOONGARCH_INS_STR_D = 466,
    LOONGARCH_INS_STR_W = 467,
    LOONGARCH_INS_STX_B = 468,
    LOONGARCH_INS_STX_D = 469,
    LOONGARCH_INS_STX_H = 470,
    LOONGARCH_INS_STX_W = 471,
    LOONGARCH_INS_ST_B = 472,
    LOONGARCH_INS_ST_D = 473,
    LOONGARCH_INS_ST_H = 474,
    LOONGARCH_INS_ST_W = 475,
    LOONGARCH_INS_SUB_D = 476,
    LOONGARCH_INS_SUB_W = 477,
    LOONGARCH_INS_SYSCALL = 478,
    LOONGARCH_INS_TLBCLR = 479,
    LOONGARCH_INS_TLBFILL = 480,
    LOONGARCH_INS_TLBFLUSH = 481,
    LOONGARCH_INS_TLBRD = 482,
    LOONGARCH_INS_TLBSRCH = 483,
    LOONGARCH_INS_TLBWR = 484,
    LOONGARCH_INS_VABSD_B = 485,
    LOONGARCH_INS_VABSD_BU = 486,
    LOONGARCH_INS_VABSD_D = 487,
    LOONGARCH_INS_VABSD_DU = 488,
    LOONGARCH_INS_VABSD_H = 489,
    LOONGARCH_INS_VABSD_HU = 490,
    LOONGARCH_INS_VABSD_W = 491,
    LOONGARCH_INS_VABSD_WU = 492,
    LOONGARCH_INS_VADDA_B = 493,
    LOONGARCH_INS_VADDA_D = 494,
    LOONGARCH_INS_VADDA_H = 495,
    LOONGARCH_INS_VADDA_W = 496,
    LOONGARCH_INS_VADDI_BU = 497,
    LOONGARCH_INS_VADDI_DU = 498,
    LOONGARCH_INS_VADDI_HU = 499,
    LOONGARCH_INS_VADDI_WU = 500,
    LOONGARCH_INS_VADDWEV_D_W = 501,
    LOONGARCH_INS_VADDWEV_D_WU = 502,
    LOONGARCH_INS_VADDWEV_D_WU_W = 503,
    LOONGARCH_INS_VADDWEV_H_B = 504,
    LOONGARCH_INS_VADDWEV_H_BU = 505,
    LOONGARCH_INS_VADDWEV_H_BU_B = 506,
    LOONGARCH_INS_VADDWEV_Q_D = 507,
    LOONGARCH_INS_VADDWEV_Q_DU = 508,
    LOONGARCH_INS_VADDWEV_Q_DU_D = 509,
    LOONGARCH_INS_VADDWEV_W_H = 510,
    LOONGARCH_INS_VADDWEV_W_HU = 511,
    LOONGARCH_INS_VADDWEV_W_HU_H = 512,
    LOONGARCH_INS_VADDWOD_D_W = 513,
    LOONGARCH_INS_VADDWOD_D_WU = 514,
    LOONGARCH_INS_VADDWOD_D_WU_W = 515,
    LOONGARCH_INS_VADDWOD_H_B = 516,
    LOONGARCH_INS_VADDWOD_H_BU = 517,
    LOONGARCH_INS_VADDWOD_H_BU_B = 518,
    LOONGARCH_INS_VADDWOD_Q_D = 519,
    LOONGARCH_INS_VADDWOD_Q_DU = 520,
    LOONGARCH_INS_VADDWOD_Q_DU_D = 521,
    LOONGARCH_INS_VADDWOD_W_H = 522,
    LOONGARCH_INS_VADDWOD_W_HU = 523,
    LOONGARCH_INS_VADDWOD_W_HU_H = 524,
    LOONGARCH_INS_VADD_B = 525,
    LOONGARCH_INS_VADD_D = 526,
    LOONGARCH_INS_VADD_H = 527,
    LOONGARCH_INS_VADD_Q = 528,
    LOONGARCH_INS_VADD_W = 529,
    LOONGARCH_INS_VANDI_B = 530,
    LOONGARCH_INS_VANDN_V = 531,
    LOONGARCH_INS_VAND_V = 532,
    LOONGARCH_INS_VAVGR_B = 533,
    LOONGARCH_INS_VAVGR_BU = 534,
    LOONGARCH_INS_VAVGR_D = 535,
    LOONGARCH_INS_VAVGR_DU = 536,
    LOONGARCH_INS_VAVGR_H = 537,
    LOONGARCH_INS_VAVGR_HU = 538,
    LOONGARCH_INS_VAVGR_W = 539,
    LOONGARCH_INS_VAVGR_WU = 540,
    LOONGARCH_INS_VAVG_B = 541,
    LOONGARCH_INS_VAVG_BU = 542,
    LOONGARCH_INS_VAVG_D = 543,
    LOONGARCH_INS_VAVG_DU = 544,
    LOONGARCH_INS_VAVG_H = 545,
    LOONGARCH_INS_VAVG_HU = 546,
    LOONGARCH_INS_VAVG_W = 547,
    LOONGARCH_INS_VAVG_WU = 548,
    LOONGARCH_INS_VBITCLRI_B = 549,
    LOONGARCH_INS_VBITCLRI_D = 550,
    LOONGARCH_INS_VBITCLRI_H = 551,
    LOONGARCH_INS_VBITCLRI_W = 552,
    LOONGARCH_INS_VBITCLR_B = 553,
    LOONGARCH_INS_VBITCLR_D = 554,
    LOONGARCH_INS_VBITCLR_H = 555,
    LOONGARCH_INS_VBITCLR_W = 556,
    LOONGARCH_INS_VBITREVI_B = 557,
    LOONGARCH_INS_VBITREVI_D = 558,
    LOONGARCH_INS_VBITREVI_H = 559,
    LOONGARCH_INS_VBITREVI_W = 560,
    LOONGARCH_INS_VBITREV_B = 561,
    LOONGARCH_INS_VBITREV_D = 562,
    LOONGARCH_INS_VBITREV_H = 563,
    LOONGARCH_INS_VBITREV_W = 564,
    LOONGARCH_INS_VBITSELI_B = 565,
    LOONGARCH_INS_VBITSEL_V = 566,
    LOONGARCH_INS_VBITSETI_B = 567,
    LOONGARCH_INS_VBITSETI_D = 568,
    LOONGARCH_INS_VBITSETI_H = 569,
    LOONGARCH_INS_VBITSETI_W = 570,
    LOONGARCH_INS_VBITSET_B = 571,
    LOONGARCH_INS_VBITSET_D = 572,
    LOONGARCH_INS_VBITSET_H = 573,
    LOONGARCH_INS_VBITSET_W = 574,
    LOONGARCH_INS_VBSLL_V = 575,
    LOONGARCH_INS_VBSRL_V = 576,
    LOONGARCH_INS_VCLO_B = 577,
    LOONGARCH_INS_VCLO_D = 578,
    LOONGARCH_INS_VCLO_H = 579,
    LOONGARCH_INS_VCLO_W = 580,
    LOONGARCH_INS_VCLZ_B = 581,
    LOONGARCH_INS_VCLZ_D = 582,
    LOONGARCH_INS_VCLZ_H = 583,
    LOONGARCH_INS_VCLZ_W = 584,
    LOONGARCH_INS_VDIV_B = 585,
    LOONGARCH_INS_VDIV_BU = 586,
    LOONGARCH_INS_VDIV_D = 587,
    LOONGARCH_INS_VDIV_DU = 588,
    LOONGARCH_INS_VDIV_H = 589,
    LOONGARCH_INS_VDIV_HU = 590,
    LOONGARCH_INS_VDIV_W = 591,
    LOONGARCH_INS_VDIV_WU = 592,
    LOONGARCH_INS_VEXT2XV_DU_BU = 593,
    LOONGARCH_INS_VEXT2XV_DU_HU = 594,
    LOONGARCH_INS_VEXT2XV_DU_WU = 595,
    LOONGARCH_INS_VEXT2XV_D_B = 596,
    LOONGARCH_INS_VEXT2XV_D_H = 597,
    LOONGARCH_INS_VEXT2XV_D_W = 598,
    LOONGARCH_INS_VEXT2XV_HU_BU = 599,
    LOONGARCH_INS_VEXT2XV_H_B = 600,
    LOONGARCH_INS_VEXT2XV_WU_BU = 601,
    LOONGARCH_INS_VEXT2XV_WU_HU = 602,
    LOONGARCH_INS_VEXT2XV_W_B = 603,
    LOONGARCH_INS_VEXT2XV_W_H = 604,
    LOONGARCH_INS_VEXTH_DU_WU = 605,
    LOONGARCH_INS_VEXTH_D_W = 606,
    LOONGARCH_INS_VEXTH_HU_BU = 607,
    LOONGARCH_INS_VEXTH_H_B = 608,
    LOONGARCH_INS_VEXTH_QU_DU = 609,
    LOONGARCH_INS_VEXTH_Q_D = 610,
    LOONGARCH_INS_VEXTH_WU_HU = 611,
    LOONGARCH_INS_VEXTH_W_H = 612,
    LOONGARCH_INS_VEXTL_QU_DU = 613,
    LOONGARCH_INS_VEXTL_Q_D = 614,
    LOONGARCH_INS_VEXTRINS_B = 615,
    LOONGARCH_INS_VEXTRINS_D = 616,
    LOONGARCH_INS_VEXTRINS_H = 617,
    LOONGARCH_INS_VEXTRINS_W = 618,
    LOONGARCH_INS_VFADD_D = 619,
    LOONGARCH_INS_VFADD_S = 620,
    LOONGARCH_INS_VFCLASS_D = 621,
    LOONGARCH_INS_VFCLASS_S = 622,
    LOONGARCH_INS_VFCMP_CAF_D = 623,
    LOONGARCH_INS_VFCMP_CAF_S = 624,
    LOONGARCH_INS_VFCMP_CEQ_D = 625,
    LOONGARCH_INS_VFCMP_CEQ_S = 626,
    LOONGARCH_INS_VFCMP_CLE_D = 627,
    LOONGARCH_INS_VFCMP_CLE_S = 628,
    LOONGARCH_INS_VFCMP_CLT_D = 629,
    LOONGARCH_INS_VFCMP_CLT_S = 630,
    LOONGARCH_INS_VFCMP_CNE_D = 631,
    LOONGARCH_INS_VFCMP_CNE_S = 632,
    LOONGARCH_INS_VFCMP_COR_D = 633,
    LOONGARCH_INS_VFCMP_COR_S = 634,
    LOONGARCH_INS_VFCMP_CUEQ_D = 635,
    LOONGARCH_INS_VFCMP_CUEQ_S = 636,
    LOONGARCH_INS_VFCMP_CULE_D = 637,
    LOONGARCH_INS_VFCMP_CULE_S = 638,
    LOONGARCH_INS_VFCMP_CULT_D = 639,
    LOONGARCH_INS_VFCMP_CULT_S = 640,
    LOONGARCH_INS_VFCMP_CUNE_D = 641,
    LOONGARCH_INS_VFCMP_CUNE_S = 642,
    LOONGARCH_INS_VFCMP_CUN_D = 643,
    LOONGARCH_INS_VFCMP_CUN_S = 644,
    LOONGARCH_INS_VFCMP_SAF_D = 645,
    LOONGARCH_INS_VFCMP_SAF_S = 646,
    LOONGARCH_INS_VFCMP_SEQ_D = 647,
    LOONGARCH_INS_VFCMP_SEQ_S = 648,
    LOONGARCH_INS_VFCMP_SLE_D = 649,
    LOONGARCH_INS_VFCMP_SLE_S = 650,
    LOONGARCH_INS_VFCMP_SLT_D = 651,
    LOONGARCH_INS_VFCMP_SLT_S = 652,
    LOONGARCH_INS_VFCMP_SNE_D = 653,
    LOONGARCH_INS_VFCMP_SNE_S = 654,
    LOONGARCH_INS_VFCMP_SOR_D = 655,
    LOONGARCH_INS_VFCMP_SOR_S = 656,
    LOONGARCH_INS_VFCMP_SUEQ_D = 657,
    LOONGARCH_INS_VFCMP_SUEQ_S = 658,
    LOONGARCH_INS_VFCMP_SULE_D = 659,
    LOONGARCH_INS_VFCMP_SULE_S = 660,
    LOONGARCH_INS_VFCMP_SULT_D = 661,
    LOONGARCH_INS_VFCMP_SULT_S = 662,
    LOONGARCH_INS_VFCMP_SUNE_D = 663,
    LOONGARCH_INS_VFCMP_SUNE_S = 664,
    LOONGARCH_INS_VFCMP_SUN_D = 665,
    LOONGARCH_INS_VFCMP_SUN_S = 666,
    LOONGARCH_INS_VFCVTH_D_S = 667,
    LOONGARCH_INS_VFCVTH_S_H = 668,
    LOONGARCH_INS_VFCVTL_D_S = 669,
    LOONGARCH_INS_VFCVTL_S_H = 670,
    LOONGARCH_INS_VFCVT_H_S = 671,
    LOONGARCH_INS_VFCVT_S_D = 672,
    LOONGARCH_INS_VFDIV_D = 673,
    LOONGARCH_INS_VFDIV_S = 674,
    LOONGARCH_INS_VFFINTH_D_W = 675,
    LOONGARCH_INS_VFFINTL_D_W = 676,
    LOONGARCH_INS_VFFINT_D_L = 677,
    LOONGARCH_INS_VFFINT_D_LU = 678,
    LOONGARCH_INS_VFFINT_S_L = 679,
    LOONGARCH_INS_VFFINT_S_W = 680,
    LOONGARCH_INS_VFFINT_S_WU = 681,
    LOONGARCH_INS_VFLOGB_D = 682,
    LOONGARCH_INS_VFLOGB_S = 683,
    LOONGARCH_INS_VFMADD_D = 684,
    LOONGARCH_INS_VFMADD_S = 685,
    LOONGARCH_INS_VFMAXA_D = 686,
    LOONGARCH_INS_VFMAXA_S = 687,
    LOONGARCH_INS_VFMAX_D = 688,
    LOONGARCH_INS_VFMAX_S = 689,
    LOONGARCH_INS_VFMINA_D = 690,
    LOONGARCH_INS_VFMINA_S = 691,
    LOONGARCH_INS_VFMIN_D = 692,
    LOONGARCH_INS_VFMIN_S = 693,
    LOONGARCH_INS_VFMSUB_D = 694,
    LOONGARCH_INS_VFMSUB_S = 695,
    LOONGARCH_INS_VFMUL_D = 696,
    LOONGARCH_INS_VFMUL_S = 697,
    LOONGARCH_INS_VFNMADD_D = 698,
    LOONGARCH_INS_VFNMADD_S = 699,
    LOONGARCH_INS_VFNMSUB_D = 700,
    LOONGARCH_INS_VFNMSUB_S = 701,
    LOONGARCH_INS_VFRECIPE_D = 702,
    LOONGARCH_INS_VFRECIPE_S = 703,
    LOONGARCH_INS_VFRECIP_D = 704,
    LOONGARCH_INS_VFRECIP_S = 705,
    LOONGARCH_INS_VFRINTRM_D = 706,
    LOONGARCH_INS_VFRINTRM_S = 707,
    LOONGARCH_INS_VFRINTRNE_D = 708,
    LOONGARCH_INS_VFRINTRNE_S = 709,
    LOONGARCH_INS_VFRINTRP_D = 710,
    LOONGARCH_INS_VFRINTRP_S = 711,
    LOONGARCH_INS_VFRINTRZ_D = 712,
    LOONGARCH_INS_VFRINTRZ_S = 713,
    LOONGARCH_INS_VFRINT_D = 714,
    LOONGARCH_INS_VFRINT_S = 715,
    LOONGARCH_INS_VFRSQRTE_D = 716,
    LOONGARCH_INS_VFRSQRTE_S = 717,
    LOONGARCH_INS_VFRSQRT_D = 718,
    LOONGARCH_INS_VFRSQRT_S = 719,
    LOONGARCH_INS_VFRSTPI_B = 720,
    LOONGARCH_INS_VFRSTPI_H = 721,
    LOONGARCH_INS_VFRSTP_B = 722,
    LOONGARCH_INS_VFRSTP_H = 723,
    LOONGARCH_INS_VFSQRT_D = 724,
    LOONGARCH_INS_VFSQRT_S = 725,
    LOONGARCH_INS_VFSUB_D = 726,
    LOONGARCH_INS_VFSUB_S = 727,
    LOONGARCH_INS_VFTINTH_L_S = 728,
    LOONGARCH_INS_VFTINTL_L_S = 729,
    LOONGARCH_INS_VFTINTRMH_L_S = 730,
    LOONGARCH_INS_VFTINTRML_L_S = 731,
    LOONGARCH_INS_VFTINTRM_L_D = 732,
    LOONGARCH_INS_VFTINTRM_W_D = 733,
    LOONGARCH_INS_VFTINTRM_W_S = 734,
    LOONGARCH_INS_VFTINTRNEH_L_S = 735,
    LOONGARCH_INS_VFTINTRNEL_L_S = 736,
    LOONGARCH_INS_VFTINTRNE_L_D = 737,
    LOONGARCH_INS_VFTINTRNE_W_D = 738,
    LOONGARCH_INS_VFTINTRNE_W_S = 739,
    LOONGARCH_INS_VFTINTRPH_L_S = 740,
    LOONGARCH_INS_VFTINTRPL_L_S = 741,
    LOONGARCH_INS_VFTINTRP_L_D = 742,
    LOONGARCH_INS_VFTINTRP_W_D = 743,
    LOONGARCH_INS_VFTINTRP_W_S = 744,
    LOONGARCH_INS_VFTINTRZH_L_S = 745,
    LOONGARCH_INS_VFTINTRZL_L_S = 746,
    LOONGARCH_INS_VFTINTRZ_LU_D = 747,
    LOONGARCH_INS_VFTINTRZ_L_D = 748,
    LOONGARCH_INS_VFTINTRZ_WU_S = 749,
    LOONGARCH_INS_VFTINTRZ_W_D = 750,
    LOONGARCH_INS_VFTINTRZ_W_S = 751,
    LOONGARCH_INS_VFTINT_LU_D = 752,
    LOONGARCH_INS_VFTINT_L_D = 753,
    LOONGARCH_INS_VFTINT_WU_S = 754,
    LOONGARCH_INS_VFTINT_W_D = 755,
    LOONGARCH_INS_VFTINT_W_S = 756,
    LOONGARCH_INS_VHADDW_DU_WU = 757,
    LOONGARCH_INS_VHADDW_D_W = 758,
    LOONGARCH_INS_VHADDW_HU_BU = 759,
    LOONGARCH_INS_VHADDW_H_B = 760,
    LOONGARCH_INS_VHADDW_QU_DU = 761,
    LOONGARCH_INS_VHADDW_Q_D = 762,
    LOONGARCH_INS_VHADDW_WU_HU = 763,
    LOONGARCH_INS_VHADDW_W_H = 764,
    LOONGARCH_INS_VHSUBW_DU_WU = 765,
    LOONGARCH_INS_VHSUBW_D_W = 766,
    LOONGARCH_INS_VHSUBW_HU_BU = 767,
    LOONGARCH_INS_VHSUBW_H_B = 768,
    LOONGARCH_INS_VHSUBW_QU_DU = 769,
    LOONGARCH_INS_VHSUBW_Q_D = 770,
    LOONGARCH_INS_VHSUBW_WU_HU = 771,
    LOONGARCH_INS_VHSUBW_W_H = 772,
    LOONGARCH_INS_VILVH_B = 773,
    LOONGARCH_INS_VILVH_D = 774,
    LOONGARCH_INS_VILVH_H = 775,
    LOONGARCH_INS_VILVH_W = 776,
    LOONGARCH_INS_VILVL_B = 777,
    LOONGARCH_INS_VILVL_D = 778,
    LOONGARCH_INS_VILVL_H = 779,
    LOONGARCH_INS_VILVL_W = 780,
    LOONGARCH_INS_VINSGR2VR_B = 781,
    LOONGARCH_INS_VINSGR2VR_D = 782,
    LOONGARCH_INS_VINSGR2VR_H = 783,
    LOONGARCH_INS_VINSGR2VR_W = 784,
    LOONGARCH_INS_VLD = 785,
    LOONGARCH_INS_VLDI = 786,
    LOONGARCH_INS_VLDREPL_B = 787,
    LOONGARCH_INS_VLDREPL_D = 788,
    LOONGARCH_INS_VLDREPL_H = 789,
    LOONGARCH_INS_VLDREPL_W = 790,
    LOONGARCH_INS_VLDX = 791,
    LOONGARCH_INS_VMADDWEV_D_W = 792,
    LOONGARCH_INS_VMADDWEV_D_WU = 793,
    LOONGARCH_INS_VMADDWEV_D_WU_W = 794,
    LOONGARCH_INS_VMADDWEV_H_B = 795,
    LOONGARCH_INS_VMADDWEV_H_BU = 796,
    LOONGARCH_INS_VMADDWEV_H_BU_B = 797,
    LOONGARCH_INS_VMADDWEV_Q_D = 798,
    LOONGARCH_INS_VMADDWEV_Q_DU = 799,
    LOONGARCH_INS_VMADDWEV_Q_DU_D = 800,
    LOONGARCH_INS_VMADDWEV_W_H = 801,
    LOONGARCH_INS_VMADDWEV_W_HU = 802,
    LOONGARCH_INS_VMADDWEV_W_HU_H = 803,
    LOONGARCH_INS_VMADDWOD_D_W = 804,
    LOONGARCH_INS_VMADDWOD_D_WU = 805,
    LOONGARCH_INS_VMADDWOD_D_WU_W = 806,
    LOONGARCH_INS_VMADDWOD_H_B = 807,
    LOONGARCH_INS_VMADDWOD_H_BU = 808,
    LOONGARCH_INS_VMADDWOD_H_BU_B = 809,
    LOONGARCH_INS_VMADDWOD_Q_D = 810,
    LOONGARCH_INS_VMADDWOD_Q_DU = 811,
    LOONGARCH_INS_VMADDWOD_Q_DU_D = 812,
    LOONGARCH_INS_VMADDWOD_W_H = 813,
    LOONGARCH_INS_VMADDWOD_W_HU = 814,
    LOONGARCH_INS_VMADDWOD_W_HU_H = 815,
    LOONGARCH_INS_VMADD_B = 816,
    LOONGARCH_INS_VMADD_D = 817,
    LOONGARCH_INS_VMADD_H = 818,
    LOONGARCH_INS_VMADD_W = 819,
    LOONGARCH_INS_VMAXI_B = 820,
    LOONGARCH_INS_VMAXI_BU = 821,
    LOONGARCH_INS_VMAXI_D = 822,
    LOONGARCH_INS_VMAXI_DU = 823,
    LOONGARCH_INS_VMAXI_H = 824,
    LOONGARCH_INS_VMAXI_HU = 825,
    LOONGARCH_INS_VMAXI_W = 826,
    LOONGARCH_INS_VMAXI_WU = 827,
    LOONGARCH_INS_VMAX_B = 828,
    LOONGARCH_INS_VMAX_BU = 829,
    LOONGARCH_INS_VMAX_D = 830,
    LOONGARCH_INS_VMAX_DU = 831,
    LOONGARCH_INS_VMAX_H = 832,
    LOONGARCH_INS_VMAX_HU = 833,
    LOONGARCH_INS_VMAX_W = 834,
    LOONGARCH_INS_VMAX_WU = 835,
    LOONGARCH_INS_VMINI_B = 836,
    LOONGARCH_INS_VMINI_BU = 837,
    LOONGARCH_INS_VMINI_D = 838,
    LOONGARCH_INS_VMINI_DU = 839,
    LOONGARCH_INS_VMINI_H = 840,
    LOONGARCH_INS_VMINI_HU = 841,
    LOONGARCH_INS_VMINI_W = 842,
    LOONGARCH_INS_VMINI_WU = 843,
    LOONGARCH_INS_VMIN_B = 844,
    LOONGARCH_INS_VMIN_BU = 845,
    LOONGARCH_INS_VMIN_D = 846,
    LOONGARCH_INS_VMIN_DU = 847,
    LOONGARCH_INS_VMIN_H = 848,
    LOONGARCH_INS_VMIN_HU = 849,
    LOONGARCH_INS_VMIN_W = 850,
    LOONGARCH_INS_VMIN_WU = 851,
    LOONGARCH_INS_VMOD_B = 852,
    LOONGARCH_INS_VMOD_BU = 853,
    LOONGARCH_INS_VMOD_D = 854,
    LOONGARCH_INS_VMOD_DU = 855,
    LOONGARCH_INS_VMOD_H = 856,
    LOONGARCH_INS_VMOD_HU = 857,
    LOONGARCH_INS_VMOD_W = 858,
    LOONGARCH_INS_VMOD_WU = 859,
    LOONGARCH_INS_VMSKGEZ_B = 860,
    LOONGARCH_INS_VMSKLTZ_B = 861,
    LOONGARCH_INS_VMSKLTZ_D = 862,
    LOONGARCH_INS_VMSKLTZ_H = 863,
    LOONGARCH_INS_VMSKLTZ_W = 864,
    LOONGARCH_INS_VMSKNZ_B = 865,
    LOONGARCH_INS_VMSUB_B = 866,
    LOONGARCH_INS_VMSUB_D = 867,
    LOONGARCH_INS_VMSUB_H = 868,
    LOONGARCH_INS_VMSUB_W = 869,
    LOONGARCH_INS_VMUH_B = 870,
    LOONGARCH_INS_VMUH_BU = 871,
    LOONGARCH_INS_VMUH_D = 872,
    LOONGARCH_INS_VMUH_DU = 873,
    LOONGARCH_INS_VMUH_H = 874,
    LOONGARCH_INS_VMUH_HU = 875,
    LOONGARCH_INS_VMUH_W = 876,
    LOONGARCH_INS_VMUH_WU = 877,
    LOONGARCH_INS_VMULWEV_D_W = 878,
    LOONGARCH_INS_VMULWEV_D_WU = 879,
    LOONGARCH_INS_VMULWEV_D_WU_W = 880,
    LOONGARCH_INS_VMULWEV_H_B = 881,
    LOONGARCH_INS_VMULWEV_H_BU = 882,
    LOONGARCH_INS_VMULWEV_H_BU_B = 883,
    LOONGARCH_INS_VMULWEV_Q_D = 884,
    LOONGARCH_INS_VMULWEV_Q_DU = 885,
    LOONGARCH_INS_VMULWEV_Q_DU_D = 886,
    LOONGARCH_INS_VMULWEV_W_H = 887,
    LOONGARCH_INS_VMULWEV_W_HU = 888,
    LOONGARCH_INS_VMULWEV_W_HU_H = 889,
    LOONGARCH_INS_VMULWOD_D_W = 890,
    LOONGARCH_INS_VMULWOD_D_WU = 891,
    LOONGARCH_INS_VMULWOD_D_WU_W = 892,
    LOONGARCH_INS_VMULWOD_H_B = 893,
    LOONGARCH_INS_VMULWOD_H_BU = 894,
    LOONGARCH_INS_VMULWOD_H_BU_B = 895,
    LOONGARCH_INS_VMULWOD_Q_D = 896,
    LOONGARCH_INS_VMULWOD_Q_DU = 897,
    LOONGARCH_INS_VMULWOD_Q_DU_D = 898,
    LOONGARCH_INS_VMULWOD_W_H = 899,
    LOONGARCH_INS_VMULWOD_W_HU = 900,
    LOONGARCH_INS_VMULWOD_W_HU_H = 901,
    LOONGARCH_INS_VMUL_B = 902,
    LOONGARCH_INS_VMUL_D = 903,
    LOONGARCH_INS_VMUL_H = 904,
    LOONGARCH_INS_VMUL_W = 905,
    LOONGARCH_INS_VNEG_B = 906,
    LOONGARCH_INS_VNEG_D = 907,
    LOONGARCH_INS_VNEG_H = 908,
    LOONGARCH_INS_VNEG_W = 909,
    LOONGARCH_INS_VNORI_B = 910,
    LOONGARCH_INS_VNOR_V = 911,
    LOONGARCH_INS_VORI_B = 912,
    LOONGARCH_INS_VORN_V = 913,
    LOONGARCH_INS_VOR_V = 914,
    LOONGARCH_INS_VPACKEV_B = 915,
    LOONGARCH_INS_VPACKEV_D = 916,
    LOONGARCH_INS_VPACKEV_H = 917,
    LOONGARCH_INS_VPACKEV_W = 918,
    LOONGARCH_INS_VPACKOD_B = 919,
    LOONGARCH_INS_VPACKOD_D = 920,
    LOONGARCH_INS_VPACKOD_H = 921,
    LOONGARCH_INS_VPACKOD_W = 922,
    LOONGARCH_INS_VPCNT_B = 923,
    LOONGARCH_INS_VPCNT_D = 924,
    LOONGARCH_INS_VPCNT_H = 925,
    LOONGARCH_INS_VPCNT_W = 926,
    LOONGARCH_INS_VPERMI_W = 927,
    LOONGARCH_INS_VPICKEV_B = 928,
    LOONGARCH_INS_VPICKEV_D = 929,
    LOONGARCH_INS_VPICKEV_H = 930,
    LOONGARCH_INS_VPICKEV_W = 931,
    LOONGARCH_INS_VPICKOD_B = 932,
    LOONGARCH_INS_VPICKOD_D = 933,
    LOONGARCH_INS_VPICKOD_H = 934,
    LOONGARCH_INS_VPICKOD_W = 935,
    LOONGARCH_INS_VPICKVE2GR_B = 936,
    LOONGARCH_INS_VPICKVE2GR_BU = 937,
    LOONGARCH_INS_VPICKVE2GR_D = 938,
    LOONGARCH_INS_VPICKVE2GR_DU = 939,
    LOONGARCH_INS_VPICKVE2GR_H = 940,
    LOONGARCH_INS_VPICKVE2GR_HU = 941,
    LOONGARCH_INS_VPICKVE2GR_W = 942,
    LOONGARCH_INS_VPICKVE2GR_WU = 943,
    LOONGARCH_INS_VREPLGR2VR_B = 944,
    LOONGARCH_INS_VREPLGR2VR_D = 945,
    LOONGARCH_INS_VREPLGR2VR_H = 946,
    LOONGARCH_INS_VREPLGR2VR_W = 947,
    LOONGARCH_INS_VREPLVEI_B = 948,
    LOONGARCH_INS_VREPLVEI_D = 949,
    LOONGARCH_INS_VREPLVEI_H = 950,
    LOONGARCH_INS_VREPLVEI_W = 951,
    LOONGARCH_INS_VREPLVE_B = 952,
    LOONGARCH_INS_VREPLVE_D = 953,
    LOONGARCH_INS_VREPLVE_H = 954,
    LOONGARCH_INS_VREPLVE_W = 955,
    LOONGARCH_INS_VROTRI_B = 956,
    LOONGARCH_INS_VROTRI_D = 957,
    LOONGARCH_INS_VROTRI_H = 958,
    LOONGARCH_INS_VROTRI_W = 959,
    LOONGARCH_INS_VROTR_B = 960,
    LOONGARCH_INS_VROTR_D = 961,
    LOONGARCH_INS_VROTR_H = 962,
    LOONGARCH_INS_VROTR_W = 963,
    LOONGARCH_INS_VSADD_B = 964,
    LOONGARCH_INS_VSADD_BU = 965,
    LOONGARCH_INS_VSADD_D = 966,
    LOONGARCH_INS_VSADD_DU = 967,
    LOONGARCH_INS_VSADD_H = 968,
    LOONGARCH_INS_VSADD_HU = 969,
    LOONGARCH_INS_VSADD_W = 970,
    LOONGARCH_INS_VSADD_WU = 971,
    LOONGARCH_INS_VSAT_B = 972,
    LOONGARCH_INS_VSAT_BU = 973,
    LOONGARCH_INS_VSAT_D = 974,
    LOONGARCH_INS_VSAT_DU = 975,
    LOONGARCH_INS_VSAT_H = 976,
    LOONGARCH_INS_VSAT_HU = 977,
    LOONGARCH_INS_VSAT_W = 978,
    LOONGARCH_INS_VSAT_WU = 979,
    LOONGARCH_INS_VSEQI_B = 980,
    LOONGARCH_INS_VSEQI_D = 981,
    LOONGARCH_INS_VSEQI_H = 982,
    LOONGARCH_INS_VSEQI_W = 983,
    LOONGARCH_INS_VSEQ_B = 984,
    LOONGARCH_INS_VSEQ_D = 985,
    LOONGARCH_INS_VSEQ_H = 986,
    LOONGARCH_INS_VSEQ_W = 987,
    LOONGARCH_INS_VSETALLNEZ_B = 988,
    LOONGARCH_INS_VSETALLNEZ_D = 989,
    LOONGARCH_INS_VSETALLNEZ_H = 990,
    LOONGARCH_INS_VSETALLNEZ_W = 991,
    LOONGARCH_INS_VSETANYEQZ_B = 992,
    LOONGARCH_INS_VSETANYEQZ_D = 993,
    LOONGARCH_INS_VSETANYEQZ_H = 994,
    LOONGARCH_INS_VSETANYEQZ_W = 995,
    LOONGARCH_INS_VSETEQZ_V = 996,
    LOONGARCH_INS_VSETNEZ_V = 997,
    LOONGARCH_INS_VSHUF4I_B = 998,
    LOONGARCH_INS_VSHUF4I_D = 999,
    LOONGARCH_INS_VSHUF4I_H = 1000,
    LOONGARCH_INS_VSHUF4I_W = 1001,
    LOONGARCH_INS_VSHUF_B = 1002,
    LOONGARCH_INS_VSHUF_D = 1003,
    LOONGARCH_INS_VSHUF_H = 1004,
    LOONGARCH_INS_VSHUF_W = 1005,
    LOONGARCH_INS_VSIGNCOV_B = 1006,
    LOONGARCH_INS_VSIGNCOV_D = 1007,
    LOONGARCH_INS_VSIGNCOV_H = 1008,
    LOONGARCH_INS_VSIGNCOV_W = 1009,
    LOONGARCH_INS_VSLEI_B = 1010,
    LOONGARCH_INS_VSLEI_BU = 1011,
    LOONGARCH_INS_VSLEI_D = 1012,
    LOONGARCH_INS_VSLEI_DU = 1013,
    LOONGARCH_INS_VSLEI_H = 1014,
    LOONGARCH_INS_VSLEI_HU = 1015,
    LOONGARCH_INS_VSLEI_W = 1016,
    LOONGARCH_INS_VSLEI_WU = 1017,
    LOONGARCH_INS_VSLE_B = 1018,
    LOONGARCH_INS_VSLE_BU = 1019,
    LOONGARCH_INS_VSLE_D = 1020,
    LOONGARCH_INS_VSLE_DU = 1021,
    LOONGARCH_INS_VSLE_H = 1022,
    LOONGARCH_INS_VSLE_HU = 1023,
    LOONGARCH_INS_VSLE_W = 1024,
    LOONGARCH_INS_VSLE_WU = 1025,
    LOONGARCH_INS_VSLLI_B = 1026,
    LOONGARCH_INS_VSLLI_D = 1027,
    LOONGARCH_INS_VSLLI_H = 1028,
    LOONGARCH_INS_VSLLI_W = 1029,
    LOONGARCH_INS_VSLLWIL_DU_WU = 1030,
    LOONGARCH_INS_VSLLWIL_D_W = 1031,
    LOONGARCH_INS_VSLLWIL_HU_BU = 1032,
    LOONGARCH_INS_VSLLWIL_H_B = 1033,
    LOONGARCH_INS_VSLLWIL_WU_HU = 1034,
    LOONGARCH_INS_VSLLWIL_W_H = 1035,
    LOONGARCH_INS_VSLL_B = 1036,
    LOONGARCH_INS_VSLL_D = 1037,
    LOONGARCH_INS_VSLL_H = 1038,
    LOONGARCH_INS_VSLL_W = 1039,
    LOONGARCH_INS_VSLTI_B = 1040,
    LOONGARCH_INS_VSLTI_BU = 1041,
    LOONGARCH_INS_VSLTI_D = 1042,
    LOONGARCH_INS_VSLTI_DU = 1043,
    LOONGARCH_INS_VSLTI_H = 1044,
    LOONGARCH_INS_VSLTI_HU = 1045,
    LOONGARCH_INS_VSLTI_W = 1046,
    LOONGARCH_INS_VSLTI_WU = 1047,
    LOONGARCH_INS_VSLT_B = 1048,
    LOONGARCH_INS_VSLT_BU = 1049,
    LOONGARCH_INS_VSLT_D = 1050,
    LOONGARCH_INS_VSLT_DU = 1051,
    LOONGARCH_INS_VSLT_H = 1052,
    LOONGARCH_INS_VSLT_HU = 1053,
    LOONGARCH_INS_VSLT_W = 1054,
    LOONGARCH_INS_VSLT_WU = 1055,
    LOONGARCH_INS_VSRAI_B = 1056,
    LOONGARCH_INS_VSRAI_D = 1057,
    LOONGARCH_INS_VSRAI_H = 1058,
    LOONGARCH_INS_VSRAI_W = 1059,
    LOONGARCH_INS_VSRANI_B_H = 1060,
    LOONGARCH_INS_VSRANI_D_Q = 1061,
    LOONGARCH_INS_VSRANI_H_W = 1062,
    LOONGARCH_INS_VSRANI_W_D = 1063,
    LOONGARCH_INS_VSRAN_B_H = 1064,
    LOONGARCH_INS_VSRAN_H_W = 1065,
    LOONGARCH_INS_VSRAN_W_D = 1066,
    LOONGARCH_INS_VSRARI_B = 1067,
    LOONGARCH_INS_VSRARI_D = 1068,
    LOONGARCH_INS_VSRARI_H = 1069,
    LOONGARCH_INS_VSRARI_W = 1070,
    LOONGARCH_INS_VSRARNI_B_H = 1071,
    LOONGARCH_INS_VSRARNI_D_Q = 1072,
    LOONGARCH_INS_VSRARNI_H_W = 1073,
    LOONGARCH_INS_VSRARNI_W_D = 1074,
    LOONGARCH_INS_VSRARN_B_H = 1075,
    LOONGARCH_INS_VSRARN_H_W = 1076,
    LOONGARCH_INS_VSRARN_W_D = 1077,
    LOONGARCH_INS_VSRAR_B = 1078,
    LOONGARCH_INS_VSRAR_D = 1079,
    LOONGARCH_INS_VSRAR_H = 1080,
    LOONGARCH_INS_VSRAR_W = 1081,
    LOONGARCH_INS_VSRA_B = 1082,
    LOONGARCH_INS_VSRA_D = 1083,
    LOONGARCH_INS_VSRA_H = 1084,
    LOONGARCH_INS_VSRA_W = 1085,
    LOONGARCH_INS_VSRLI_B = 1086,
    LOONGARCH_INS_VSRLI_D = 1087,
    LOONGARCH_INS_VSRLI_H = 1088,
    LOONGARCH_INS_VSRLI_W = 1089,
    LOONGARCH_INS_VSRLNI_B_H = 1090,
    LOONGARCH_INS_VSRLNI_D_Q = 1091,
    LOONGARCH_INS_VSRLNI_H_W = 1092,
    LOONGARCH_INS_VSRLNI_W_D = 1093,
    LOONGARCH_INS_VSRLN_B_H = 1094,
    LOONGARCH_INS_VSRLN_H_W = 1095,
    LOONGARCH_INS_VSRLN_W_D = 1096,
    LOONGARCH_INS_VSRLRI_B = 1097,
    LOONGARCH_INS_VSRLRI_D = 1098,
    LOONGARCH_INS_VSRLRI_H = 1099,
    LOONGARCH_INS_VSRLRI_W = 1100,
    LOONGARCH_INS_VSRLRNI_B_H = 1101,
    LOONGARCH_INS_VSRLRNI_D_Q = 1102,
    LOONGARCH_INS_VSRLRNI_H_W = 1103,
    LOONGARCH_INS_VSRLRNI_W_D = 1104,
    LOONGARCH_INS_VSRLRN_B_H = 1105,
    LOONGARCH_INS_VSRLRN_H_W = 1106,
    LOONGARCH_INS_VSRLRN_W_D = 1107,
    LOONGARCH_INS_VSRLR_B = 1108,
    LOONGARCH_INS_VSRLR_D = 1109,
    LOONGARCH_INS_VSRLR_H = 1110,
    LOONGARCH_INS_VSRLR_W = 1111,
    LOONGARCH_INS_VSRL_B = 1112,
    LOONGARCH_INS_VSRL_D = 1113,
    LOONGARCH_INS_VSRL_H = 1114,
    LOONGARCH_INS_VSRL_W = 1115,
    LOONGARCH_INS_VSSRANI_BU_H = 1116,
    LOONGARCH_INS_VSSRANI_B_H = 1117,
    LOONGARCH_INS_VSSRANI_DU_Q = 1118,
    LOONGARCH_INS_VSSRANI_D_Q = 1119,
    LOONGARCH_INS_VSSRANI_HU_W = 1120,
    LOONGARCH_INS_VSSRANI_H_W = 1121,
    LOONGARCH_INS_VSSRANI_WU_D = 1122,
    LOONGARCH_INS_VSSRANI_W_D = 1123,
    LOONGARCH_INS_VSSRAN_BU_H = 1124,
    LOONGARCH_INS_VSSRAN_B_H = 1125,
    LOONGARCH_INS_VSSRAN_HU_W = 1126,
    LOONGARCH_INS_VSSRAN_H_W = 1127,
    LOONGARCH_INS_VSSRAN_WU_D = 1128,
    LOONGARCH_INS_VSSRAN_W_D = 1129,
    LOONGARCH_INS_VSSRARNI_BU_H = 1130,
    LOONGARCH_INS_VSSRARNI_B_H = 1131,
    LOONGARCH_INS_VSSRARNI_DU_Q = 1132,
    LOONGARCH_INS_VSSRARNI_D_Q = 1133,
    LOONGARCH_INS_VSSRARNI_HU_W = 1134,
    LOONGARCH_INS_VSSRARNI_H_W = 1135,
    LOONGARCH_INS_VSSRARNI_WU_D = 1136,
    LOONGARCH_INS_VSSRARNI_W_D = 1137,
    LOONGARCH_INS_VSSRARN_BU_H = 1138,
    LOONGARCH_INS_VSSRARN_B_H = 1139,
    LOONGARCH_INS_VSSRARN_HU_W = 1140,
    LOONGARCH_INS_VSSRARN_H_W = 1141,
    LOONGARCH_INS_VSSRARN_WU_D = 1142,
    LOONGARCH_INS_VSSRARN_W_D = 1143,
    LOONGARCH_INS_VSSRLNI_BU_H = 1144,
    LOONGARCH_INS_VSSRLNI_B_H = 1145,
    LOONGARCH_INS_VSSRLNI_DU_Q = 1146,
    LOONGARCH_INS_VSSRLNI_D_Q = 1147,
    LOONGARCH_INS_VSSRLNI_HU_W = 1148,
    LOONGARCH_INS_VSSRLNI_H_W = 1149,
    LOONGARCH_INS_VSSRLNI_WU_D = 1150,
    LOONGARCH_INS_VSSRLNI_W_D = 1151,
    LOONGARCH_INS_VSSRLN_BU_H = 1152,
    LOONGARCH_INS_VSSRLN_B_H = 1153,
    LOONGARCH_INS_VSSRLN_HU_W = 1154,
    LOONGARCH_INS_VSSRLN_H_W = 1155,
    LOONGARCH_INS_VSSRLN_WU_D = 1156,
    LOONGARCH_INS_VSSRLN_W_D = 1157,
    LOONGARCH_INS_VSSRLRNI_BU_H = 1158,
    LOONGARCH_INS_VSSRLRNI_B_H = 1159,
    LOONGARCH_INS_VSSRLRNI_DU_Q = 1160,
    LOONGARCH_INS_VSSRLRNI_D_Q = 1161,
    LOONGARCH_INS_VSSRLRNI_HU_W = 1162,
    LOONGARCH_INS_VSSRLRNI_H_W = 1163,
    LOONGARCH_INS_VSSRLRNI_WU_D = 1164,
    LOONGARCH_INS_VSSRLRNI_W_D = 1165,
    LOONGARCH_INS_VSSRLRN_BU_H = 1166,
    LOONGARCH_INS_VSSRLRN_B_H = 1167,
    LOONGARCH_INS_VSSRLRN_HU_W = 1168,
    LOONGARCH_INS_VSSRLRN_H_W = 1169,
    LOONGARCH_INS_VSSRLRN_WU_D = 1170,
    LOONGARCH_INS_VSSRLRN_W_D = 1171,
    LOONGARCH_INS_VSSUB_B = 1172,
    LOONGARCH_INS_VSSUB_BU = 1173,
    LOONGARCH_INS_VSSUB_D = 1174,
    LOONGARCH_INS_VSSUB_DU = 1175,
    LOONGARCH_INS_VSSUB_H = 1176,
    LOONGARCH_INS_VSSUB_HU = 1177,
    LOONGARCH_INS_VSSUB_W = 1178,
    LOONGARCH_INS_VSSUB_WU = 1179,
    LOONGARCH_INS_VST = 1180,
    LOONGARCH_INS_VSTELM_B = 1181,
    LOONGARCH_INS_VSTELM_D = 1182,
    LOONGARCH_INS_VSTELM_H = 1183,
    LOONGARCH_INS_VSTELM_W = 1184,
    LOONGARCH_INS_VSTX = 1185,
    LOONGARCH_INS_VSUBI_BU = 1186,
    LOONGARCH_INS_VSUBI_DU = 1187,
    LOONGARCH_INS_VSUBI_HU = 1188,
    LOONGARCH_INS_VSUBI_WU = 1189,
    LOONGARCH_INS_VSUBWEV_D_W = 1190,
    LOONGARCH_INS_VSUBWEV_D_WU = 1191,
    LOONGARCH_INS_VSUBWEV_H_B = 1192,
    LOONGARCH_INS_VSUBWEV_H_BU = 1193,
    LOONGARCH_INS_VSUBWEV_Q_D = 1194,
    LOONGARCH_INS_VSUBWEV_Q_DU = 1195,
    LOONGARCH_INS_VSUBWEV_W_H = 1196,
    LOONGARCH_INS_VSUBWEV_W_HU = 1197,
    LOONGARCH_INS_VSUBWOD_D_W = 1198,
    LOONGARCH_INS_VSUBWOD_D_WU = 1199,
    LOONGARCH_INS_VSUBWOD_H_B = 1200,
    LOONGARCH_INS_VSUBWOD_H_BU = 1201,
    LOONGARCH_INS_VSUBWOD_Q_D = 1202,
    LOONGARCH_INS_VSUBWOD_Q_DU = 1203,
    LOONGARCH_INS_VSUBWOD_W_H = 1204,
    LOONGARCH_INS_VSUBWOD_W_HU = 1205,
    LOONGARCH_INS_VSUB_B = 1206,
    LOONGARCH_INS_VSUB_D = 1207,
    LOONGARCH_INS_VSUB_H = 1208,
    LOONGARCH_INS_VSUB_Q = 1209,
    LOONGARCH_INS_VSUB_W = 1210,
    LOONGARCH_INS_VXORI_B = 1211,
    LOONGARCH_INS_VXOR_V = 1212,
    LOONGARCH_INS_X86ADC_B = 1213,
    LOONGARCH_INS_X86ADC_D = 1214,
    LOONGARCH_INS_X86ADC_H = 1215,
    LOONGARCH_INS_X86ADC_W = 1216,
    LOONGARCH_INS_X86ADD_B = 1217,
    LOONGARCH_INS_X86ADD_D = 1218,
    LOONGARCH_INS_X86ADD_DU = 1219,
    LOONGARCH_INS_X86ADD_H = 1220,
    LOONGARCH_INS_X86ADD_W = 1221,
    LOONGARCH_INS_X86ADD_WU = 1222,
    LOONGARCH_INS_X86AND_B = 1223,
    LOONGARCH_INS_X86AND_D = 1224,
    LOONGARCH_INS_X86AND_H = 1225,
    LOONGARCH_INS_X86AND_W = 1226,
    LOONGARCH_INS_X86CLRTM = 1227,
    LOONGARCH_INS_X86DECTOP = 1228,
    LOONGARCH_INS_X86DEC_B = 1229,
    LOONGARCH_INS_X86DEC_D = 1230,
    LOONGARCH_INS_X86DEC_H = 1231,
    LOONGARCH_INS_X86DEC_W = 1232,
    LOONGARCH_INS_X86INCTOP = 1233,
    LOONGARCH_INS_X86INC_B = 1234,
    LOONGARCH_INS_X86INC_D = 1235,
    LOONGARCH_INS_X86INC_H = 1236,
    LOONGARCH_INS_X86INC_W = 1237,
    LOONGARCH_INS_X86MFFLAG = 1238,
    LOONGARCH_INS_X86MFTOP = 1239,
    LOONGARCH_INS_X86MTFLAG = 1240,
    LOONGARCH_INS_X86MTTOP = 1241,
    LOONGARCH_INS_X86MUL_B = 1242,
    LOONGARCH_INS_X86MUL_BU = 1243,
    LOONGARCH_INS_X86MUL_D = 1244,
    LOONGARCH_INS_X86MUL_DU = 1245,
    LOONGARCH_INS_X86MUL_H = 1246,
    LOONGARCH_INS_X86MUL_HU = 1247,
    LOONGARCH_INS_X86MUL_W = 1248,
    LOONGARCH_INS_X86MUL_WU = 1249,
    LOONGARCH_INS_X86OR_B = 1250,
    LOONGARCH_INS_X86OR_D = 1251,
    LOONGARCH_INS_X86OR_H = 1252,
    LOONGARCH_INS_X86OR_W = 1253,
    LOONGARCH_INS_X86RCLI_B = 1254,
    LOONGARCH_INS_X86RCLI_D = 1255,
    LOONGARCH_INS_X86RCLI_H = 1256,
    LOONGARCH_INS_X86RCLI_W = 1257,
    LOONGARCH_INS_X86RCL_B = 1258,
    LOONGARCH_INS_X86RCL_D = 1259,
    LOONGARCH_INS_X86RCL_H = 1260,
    LOONGARCH_INS_X86RCL_W = 1261,
    LOONGARCH_INS_X86RCRI_B = 1262,
    LOONGARCH_INS_X86RCRI_D = 1263,
    LOONGARCH_INS_X86RCRI_H = 1264,
    LOONGARCH_INS_X86RCRI_W = 1265,
    LOONGARCH_INS_X86RCR_B = 1266,
    LOONGARCH_INS_X86RCR_D = 1267,
    LOONGARCH_INS_X86RCR_H = 1268,
    LOONGARCH_INS_X86RCR_W = 1269,
    LOONGARCH_INS_X86ROTLI_B = 1270,
    LOONGARCH_INS_X86ROTLI_D = 1271,
    LOONGARCH_INS_X86ROTLI_H = 1272,
    LOONGARCH_INS_X86ROTLI_W = 1273,
    LOONGARCH_INS_X86ROTL_B = 1274,
    LOONGARCH_INS_X86ROTL_D = 1275,
    LOONGARCH_INS_X86ROTL_H = 1276,
    LOONGARCH_INS_X86ROTL_W = 1277,
    LOONGARCH_INS_X86ROTRI_B = 1278,
    LOONGARCH_INS_X86ROTRI_D = 1279,
    LOONGARCH_INS_X86ROTRI_H = 1280,
    LOONGARCH_INS_X86ROTRI_W = 1281,
    LOONGARCH_INS_X86ROTR_B = 1282,
    LOONGARCH_INS_X86ROTR_D = 1283,
    LOONGARCH_INS_X86ROTR_H = 1284,
    LOONGARCH_INS_X86ROTR_W = 1285,
    LOONGARCH_INS_X86SBC_B = 1286,
    LOONGARCH_INS_X86SBC_D = 1287,
    LOONGARCH_INS_X86SBC_H = 1288,
    LOONGARCH_INS_X86SBC_W = 1289,
    LOONGARCH_INS_X86SETTAG = 1290,
    LOONGARCH_INS_X86SETTM = 1291,
    LOONGARCH_INS_X86SLLI_B = 1292,
    LOONGARCH_INS_X86SLLI_D = 1293,
    LOONGARCH_INS_X86SLLI_H = 1294,
    LOONGARCH_INS_X86SLLI_W = 1295,
    LOONGARCH_INS_X86SLL_B = 1296,
    LOONGARCH_INS_X86SLL_D = 1297,
    LOONGARCH_INS_X86SLL_H = 1298,
    LOONGARCH_INS_X86SLL_W = 1299,
    LOONGARCH_INS_X86SRAI_B = 1300,
    LOONGARCH_INS_X86SRAI_D = 1301,
    LOONGARCH_INS_X86SRAI_H = 1302,
    LOONGARCH_INS_X86SRAI_W = 1303,
    LOONGARCH_INS_X86SRA_B = 1304,
    LOONGARCH_INS_X86SRA_D = 1305,
    LOONGARCH_INS_X86SRA_H = 1306,
    LOONGARCH_INS_X86SRA_W = 1307,
    LOONGARCH_INS_X86SRLI_B = 1308,
    LOONGARCH_INS_X86SRLI_D = 1309,
    LOONGARCH_INS_X86SRLI_H = 1310,
    LOONGARCH_INS_X86SRLI_W = 1311,
    LOONGARCH_INS_X86SRL_B = 1312,
    LOONGARCH_INS_X86SRL_D = 1313,
    LOONGARCH_INS_X86SRL_H = 1314,
    LOONGARCH_INS_X86SRL_W = 1315,
    LOONGARCH_INS_X86SUB_B = 1316,
    LOONGARCH_INS_X86SUB_D = 1317,
    LOONGARCH_INS_X86SUB_DU = 1318,
    LOONGARCH_INS_X86SUB_H = 1319,
    LOONGARCH_INS_X86SUB_W = 1320,
    LOONGARCH_INS_X86SUB_WU = 1321,
    LOONGARCH_INS_X86XOR_B = 1322,
    LOONGARCH_INS_X86XOR_D = 1323,
    LOONGARCH_INS_X86XOR_H = 1324,
    LOONGARCH_INS_X86XOR_W = 1325,
    LOONGARCH_INS_XOR = 1326,
    LOONGARCH_INS_XORI = 1327,
    LOONGARCH_INS_XVABSD_B = 1328,
    LOONGARCH_INS_XVABSD_BU = 1329,
    LOONGARCH_INS_XVABSD_D = 1330,
    LOONGARCH_INS_XVABSD_DU = 1331,
    LOONGARCH_INS_XVABSD_H = 1332,
    LOONGARCH_INS_XVABSD_HU = 1333,
    LOONGARCH_INS_XVABSD_W = 1334,
    LOONGARCH_INS_XVABSD_WU = 1335,
    LOONGARCH_INS_XVADDA_B = 1336,
    LOONGARCH_INS_XVADDA_D = 1337,
    LOONGARCH_INS_XVADDA_H = 1338,
    LOONGARCH_INS_XVADDA_W = 1339,
    LOONGARCH_INS_XVADDI_BU = 1340,
    LOONGARCH_INS_XVADDI_DU = 1341,
    LOONGARCH_INS_XVADDI_HU = 1342,
    LOONGARCH_INS_XVADDI_WU = 1343,
    LOONGARCH_INS_XVADDWEV_D_W = 1344,
    LOONGARCH_INS_XVADDWEV_D_WU = 1345,
    LOONGARCH_INS_XVADDWEV_D_WU_W = 1346,
    LOONGARCH_INS_XVADDWEV_H_B = 1347,
    LOONGARCH_INS_XVADDWEV_H_BU = 1348,
    LOONGARCH_INS_XVADDWEV_H_BU_B = 1349,
    LOONGARCH_INS_XVADDWEV_Q_D = 1350,
    LOONGARCH_INS_XVADDWEV_Q_DU = 1351,
    LOONGARCH_INS_XVADDWEV_Q_DU_D = 1352,
    LOONGARCH_INS_XVADDWEV_W_H = 1353,
    LOONGARCH_INS_XVADDWEV_W_HU = 1354,
    LOONGARCH_INS_XVADDWEV_W_HU_H = 1355,
    LOONGARCH_INS_XVADDWOD_D_W = 1356,
    LOONGARCH_INS_XVADDWOD_D_WU = 1357,
    LOONGARCH_INS_XVADDWOD_D_WU_W = 1358,
    LOONGARCH_INS_XVADDWOD_H_B = 1359,
    LOONGARCH_INS_XVADDWOD_H_BU = 1360,
    LOONGARCH_INS_XVADDWOD_H_BU_B = 1361,
    LOONGARCH_INS_XVADDWOD_Q_D = 1362,
    LOONGARCH_INS_XVADDWOD_Q_DU = 1363,
    LOONGARCH_INS_XVADDWOD_Q_DU_D = 1364,
    LOONGARCH_INS_XVADDWOD_W_H = 1365,
    LOONGARCH_INS_XVADDWOD_W_HU = 1366,
    LOONGARCH_INS_XVADDWOD_W_HU_H = 1367,
    LOONGARCH_INS_XVADD_B = 1368,
    LOONGARCH_INS_XVADD_D = 1369,
    LOONGARCH_INS_XVADD_H = 1370,
    LOONGARCH_INS_XVADD_Q = 1371,
    LOONGARCH_INS_XVADD_W = 1372,
    LOONGARCH_INS_XVANDI_B = 1373,
    LOONGARCH_INS_XVANDN_V = 1374,
    LOONGARCH_INS_XVAND_V = 1375,
    LOONGARCH_INS_XVAVGR_B = 1376,
    LOONGARCH_INS_XVAVGR_BU = 1377,
    LOONGARCH_INS_XVAVGR_D = 1378,
    LOONGARCH_INS_XVAVGR_DU = 1379,
    LOONGARCH_INS_XVAVGR_H = 1380,
    LOONGARCH_INS_XVAVGR_HU = 1381,
    LOONGARCH_INS_XVAVGR_W = 1382,
    LOONGARCH_INS_XVAVGR_WU = 1383,
    LOONGARCH_INS_XVAVG_B = 1384,
    LOONGARCH_INS_XVAVG_BU = 1385,
    LOONGARCH_INS_XVAVG_D = 1386,
    LOONGARCH_INS_XVAVG_DU = 1387,
    LOONGARCH_INS_XVAVG_H = 1388,
    LOONGARCH_INS_XVAVG_HU = 1389,
    LOONGARCH_INS_XVAVG_W = 1390,
    LOONGARCH_INS_XVAVG_WU = 1391,
    LOONGARCH_INS_XVBITCLRI_B = 1392,
    LOONGARCH_INS_XVBITCLRI_D = 1393,
    LOONGARCH_INS_XVBITCLRI_H = 1394,
    LOONGARCH_INS_XVBITCLRI_W = 1395,
    LOONGARCH_INS_XVBITCLR_B = 1396,
    LOONGARCH_INS_XVBITCLR_D = 1397,
    LOONGARCH_INS_XVBITCLR_H = 1398,
    LOONGARCH_INS_XVBITCLR_W = 1399,
    LOONGARCH_INS_XVBITREVI_B = 1400,
    LOONGARCH_INS_XVBITREVI_D = 1401,
    LOONGARCH_INS_XVBITREVI_H = 1402,
    LOONGARCH_INS_XVBITREVI_W = 1403,
    LOONGARCH_INS_XVBITREV_B = 1404,
    LOONGARCH_INS_XVBITREV_D = 1405,
    LOONGARCH_INS_XVBITREV_H = 1406,
    LOONGARCH_INS_XVBITREV_W = 1407,
    LOONGARCH_INS_XVBITSELI_B = 1408,
    LOONGARCH_INS_XVBITSEL_V = 1409,
    LOONGARCH_INS_XVBITSETI_B = 1410,
    LOONGARCH_INS_XVBITSETI_D = 1411,
    LOONGARCH_INS_XVBITSETI_H = 1412,
    LOONGARCH_INS_XVBITSETI_W = 1413,
    LOONGARCH_INS_XVBITSET_B = 1414,
    LOONGARCH_INS_XVBITSET_D = 1415,
    LOONGARCH_INS_XVBITSET_H = 1416,
    LOONGARCH_INS_XVBITSET_W = 1417,
    LOONGARCH_INS_XVBSLL_V = 1418,
    LOONGARCH_INS_XVBSRL_V = 1419,
    LOONGARCH_INS_XVCLO_B = 1420,
    LOONGARCH_INS_XVCLO_D = 1421,
    LOONGARCH_INS_XVCLO_H = 1422,
    LOONGARCH_INS_XVCLO_W = 1423,
    LOONGARCH_INS_XVCLZ_B = 1424,
    LOONGARCH_INS_XVCLZ_D = 1425,
    LOONGARCH_INS_XVCLZ_H = 1426,
    LOONGARCH_INS_XVCLZ_W = 1427,
    LOONGARCH_INS_XVDIV_B = 1428,
    LOONGARCH_INS_XVDIV_BU = 1429,
    LOONGARCH_INS_XVDIV_D = 1430,
    LOONGARCH_INS_XVDIV_DU = 1431,
    LOONGARCH_INS_XVDIV_H = 1432,
    LOONGARCH_INS_XVDIV_HU = 1433,
    LOONGARCH_INS_XVDIV_W = 1434,
    LOONGARCH_INS_XVDIV_WU = 1435,
    LOONGARCH_INS_XVEXTH_DU_WU = 1436,
    LOONGARCH_INS_XVEXTH_D_W = 1437,
    LOONGARCH_INS_XVEXTH_HU_BU = 1438,
    LOONGARCH_INS_XVEXTH_H_B = 1439,
    LOONGARCH_INS_XVEXTH_QU_DU = 1440,
    LOONGARCH_INS_XVEXTH_Q_D = 1441,
    LOONGARCH_INS_XVEXTH_WU_HU = 1442,
    LOONGARCH_INS_XVEXTH_W_H = 1443,
    LOONGARCH_INS_XVEXTL_QU_DU = 1444,
    LOONGARCH_INS_XVEXTL_Q_D = 1445,
    LOONGARCH_INS_XVEXTRINS_B = 1446,
    LOONGARCH_INS_XVEXTRINS_D = 1447,
    LOONGARCH_INS_XVEXTRINS_H = 1448,
    LOONGARCH_INS_XVEXTRINS_W = 1449,
    LOONGARCH_INS_XVFADD_D = 1450,
    LOONGARCH_INS_XVFADD_S = 1451,
    LOONGARCH_INS_XVFCLASS_D = 1452,
    LOONGARCH_INS_XVFCLASS_S = 1453,
    LOONGARCH_INS_XVFCMP_CAF_D = 1454,
    LOONGARCH_INS_XVFCMP_CAF_S = 1455,
    LOONGARCH_INS_XVFCMP_CEQ_D = 1456,
    LOONGARCH_INS_XVFCMP_CEQ_S = 1457,
    LOONGARCH_INS_XVFCMP_CLE_D = 1458,
    LOONGARCH_INS_XVFCMP_CLE_S = 1459,
    LOONGARCH_INS_XVFCMP_CLT_D = 1460,
    LOONGARCH_INS_XVFCMP_CLT_S = 1461,
    LOONGARCH_INS_XVFCMP_CNE_D = 1462,
    LOONGARCH_INS_XVFCMP_CNE_S = 1463,
    LOONGARCH_INS_XVFCMP_COR_D = 1464,
    LOONGARCH_INS_XVFCMP_COR_S = 1465,
    LOONGARCH_INS_XVFCMP_CUEQ_D = 1466,
    LOONGARCH_INS_XVFCMP_CUEQ_S = 1467,
    LOONGARCH_INS_XVFCMP_CULE_D = 1468,
    LOONGARCH_INS_XVFCMP_CULE_S = 1469,
    LOONGARCH_INS_XVFCMP_CULT_D = 1470,
    LOONGARCH_INS_XVFCMP_CULT_S = 1471,
    LOONGARCH_INS_XVFCMP_CUNE_D = 1472,
    LOONGARCH_INS_XVFCMP_CUNE_S = 1473,
    LOONGARCH_INS_XVFCMP_CUN_D = 1474,
    LOONGARCH_INS_XVFCMP_CUN_S = 1475,
    LOONGARCH_INS_XVFCMP_SAF_D = 1476,
    LOONGARCH_INS_XVFCMP_SAF_S = 1477,
    LOONGARCH_INS_XVFCMP_SEQ_D = 1478,
    LOONGARCH_INS_XVFCMP_SEQ_S = 1479,
    LOONGARCH_INS_XVFCMP_SLE_D = 1480,
    LOONGARCH_INS_XVFCMP_SLE_S = 1481,
    LOONGARCH_INS_XVFCMP_SLT_D = 1482,
    LOONGARCH_INS_XVFCMP_SLT_S = 1483,
    LOONGARCH_INS_XVFCMP_SNE_D = 1484,
    LOONGARCH_INS_XVFCMP_SNE_S = 1485,
    LOONGARCH_INS_XVFCMP_SOR_D = 1486,
    LOONGARCH_INS_XVFCMP_SOR_S = 1487,
    LOONGARCH_INS_XVFCMP_SUEQ_D = 1488,
    LOONGARCH_INS_XVFCMP_SUEQ_S = 1489,
    LOONGARCH_INS_XVFCMP_SULE_D = 1490,
    LOONGARCH_INS_XVFCMP_SULE_S = 1491,
    LOONGARCH_INS_XVFCMP_SULT_D = 1492,
    LOONGARCH_INS_XVFCMP_SULT_S = 1493,
    LOONGARCH_INS_XVFCMP_SUNE_D = 1494,
    LOONGARCH_INS_XVFCMP_SUNE_S = 1495,
    LOONGARCH_INS_XVFCMP_SUN_D = 1496,
    LOONGARCH_INS_XVFCMP_SUN_S = 1497,
    LOONGARCH_INS_XVFCVTH_D_S = 1498,
    LOONGARCH_INS_XVFCVTH_S_H = 1499,
    LOONGARCH_INS_XVFCVTL_D_S = 1500,
    LOONGARCH_INS_XVFCVTL_S_H = 1501,
    LOONGARCH_INS_XVFCVT_H_S = 1502,
    LOONGARCH_INS_XVFCVT_S_D = 1503,
    LOONGARCH_INS_XVFDIV_D = 1504,
    LOONGARCH_INS_XVFDIV_S = 1505,
    LOONGARCH_INS_XVFFINTH_D_W = 1506,
    LOONGARCH_INS_XVFFINTL_D_W = 1507,
    LOONGARCH_INS_XVFFINT_D_L = 1508,
    LOONGARCH_INS_XVFFINT_D_LU = 1509,
    LOONGARCH_INS_XVFFINT_S_L = 1510,
    LOONGARCH_INS_XVFFINT_S_W = 1511,
    LOONGARCH_INS_XVFFINT_S_WU = 1512,
    LOONGARCH_INS_XVFLOGB_D = 1513,
    LOONGARCH_INS_XVFLOGB_S = 1514,
    LOONGARCH_INS_XVFMADD_D = 1515,
    LOONGARCH_INS_XVFMADD_S = 1516,
    LOONGARCH_INS_XVFMAXA_D = 1517,
    LOONGARCH_INS_XVFMAXA_S = 1518,
    LOONGARCH_INS_XVFMAX_D = 1519,
    LOONGARCH_INS_XVFMAX_S = 1520,
    LOONGARCH_INS_XVFMINA_D = 1521,
    LOONGARCH_INS_XVFMINA_S = 1522,
    LOONGARCH_INS_XVFMIN_D = 1523,
    LOONGARCH_INS_XVFMIN_S = 1524,
    LOONGARCH_INS_XVFMSUB_D = 1525,
    LOONGARCH_INS_XVFMSUB_S = 1526,
    LOONGARCH_INS_XVFMUL_D = 1527,
    LOONGARCH_INS_XVFMUL_S = 1528,
    LOONGARCH_INS_XVFNMADD_D = 1529,
    LOONGARCH_INS_XVFNMADD_S = 1530,
    LOONGARCH_INS_XVFNMSUB_D = 1531,
    LOONGARCH_INS_XVFNMSUB_S = 1532,
    LOONGARCH_INS_XVFRECIPE_D = 1533,
    LOONGARCH_INS_XVFRECIPE_S = 1534,
    LOONGARCH_INS_XVFRECIP_D = 1535,
    LOONGARCH_INS_XVFRECIP_S = 1536,
    LOONGARCH_INS_XVFRINTRM_D = 1537,
    LOONGARCH_INS_XVFRINTRM_S = 1538,
    LOONGARCH_INS_XVFRINTRNE_D = 1539,
    LOONGARCH_INS_XVFRINTRNE_S = 1540,
    LOONGARCH_INS_XVFRINTRP_D = 1541,
    LOONGARCH_INS_XVFRINTRP_S = 1542,
    LOONGARCH_INS_XVFRINTRZ_D = 1543,
    LOONGARCH_INS_XVFRINTRZ_S = 1544,
    LOONGARCH_INS_XVFRINT_D = 1545,
    LOONGARCH_INS_XVFRINT_S = 1546,
    LOONGARCH_INS_XVFRSQRTE_D = 1547,
    LOONGARCH_INS_XVFRSQRTE_S = 1548,
    LOONGARCH_INS_XVFRSQRT_D = 1549,
    LOONGARCH_INS_XVFRSQRT_S = 1550,
    LOONGARCH_INS_XVFRSTPI_B = 1551,
    LOONGARCH_INS_XVFRSTPI_H = 1552,
    LOONGARCH_INS_XVFRSTP_B = 1553,
    LOONGARCH_INS_XVFRSTP_H = 1554,
    LOONGARCH_INS_XVFSQRT_D = 1555,
    LOONGARCH_INS_XVFSQRT_S = 1556,
    LOONGARCH_INS_XVFSUB_D = 1557,
    LOONGARCH_INS_XVFSUB_S = 1558,
    LOONGARCH_INS_XVFTINTH_L_S = 1559,
    LOONGARCH_INS_XVFTINTL_L_S = 1560,
    LOONGARCH_INS_XVFTINTRMH_L_S = 1561,
    LOONGARCH_INS_XVFTINTRML_L_S = 1562,
    LOONGARCH_INS_XVFTINTRM_L_D = 1563,
    LOONGARCH_INS_XVFTINTRM_W_D = 1564,
    LOONGARCH_INS_XVFTINTRM_W_S = 1565,
    LOONGARCH_INS_XVFTINTRNEH_L_S = 1566,
    LOONGARCH_INS_XVFTINTRNEL_L_S = 1567,
    LOONGARCH_INS_XVFTINTRNE_L_D = 1568,
    LOONGARCH_INS_XVFTINTRNE_W_D = 1569,
    LOONGARCH_INS_XVFTINTRNE_W_S = 1570,
    LOONGARCH_INS_XVFTINTRPH_L_S = 1571,
    LOONGARCH_INS_XVFTINTRPL_L_S = 1572,
    LOONGARCH_INS_XVFTINTRP_L_D = 1573,
    LOONGARCH_INS_XVFTINTRP_W_D = 1574,
    LOONGARCH_INS_XVFTINTRP_W_S = 1575,
    LOONGARCH_INS_XVFTINTRZH_L_S = 1576,
    LOONGARCH_INS_XVFTINTRZL_L_S = 1577,
    LOONGARCH_INS_XVFTINTRZ_LU_D = 1578,
    LOONGARCH_INS_XVFTINTRZ_L_D = 1579,
    LOONGARCH_INS_XVFTINTRZ_WU_S = 1580,
    LOONGARCH_INS_XVFTINTRZ_W_D = 1581,
    LOONGARCH_INS_XVFTINTRZ_W_S = 1582,
    LOONGARCH_INS_XVFTINT_LU_D = 1583,
    LOONGARCH_INS_XVFTINT_L_D = 1584,
    LOONGARCH_INS_XVFTINT_WU_S = 1585,
    LOONGARCH_INS_XVFTINT_W_D = 1586,
    LOONGARCH_INS_XVFTINT_W_S = 1587,
    LOONGARCH_INS_XVHADDW_DU_WU = 1588,
    LOONGARCH_INS_XVHADDW_D_W = 1589,
    LOONGARCH_INS_XVHADDW_HU_BU = 1590,
    LOONGARCH_INS_XVHADDW_H_B = 1591,
    LOONGARCH_INS_XVHADDW_QU_DU = 1592,
    LOONGARCH_INS_XVHADDW_Q_D = 1593,
    LOONGARCH_INS_XVHADDW_WU_HU = 1594,
    LOONGARCH_INS_XVHADDW_W_H = 1595,
    LOONGARCH_INS_XVHSELI_D = 1596,
    LOONGARCH_INS_XVHSUBW_DU_WU = 1597,
    LOONGARCH_INS_XVHSUBW_D_W = 1598,
    LOONGARCH_INS_XVHSUBW_HU_BU = 1599,
    LOONGARCH_INS_XVHSUBW_H_B = 1600,
    LOONGARCH_INS_XVHSUBW_QU_DU = 1601,
    LOONGARCH_INS_XVHSUBW_Q_D = 1602,
    LOONGARCH_INS_XVHSUBW_WU_HU = 1603,
    LOONGARCH_INS_XVHSUBW_W_H = 1604,
    LOONGARCH_INS_XVILVH_B = 1605,
    LOONGARCH_INS_XVILVH_D = 1606,
    LOONGARCH_INS_XVILVH_H = 1607,
    LOONGARCH_INS_XVILVH_W = 1608,
    LOONGARCH_INS_XVILVL_B = 1609,
    LOONGARCH_INS_XVILVL_D = 1610,
    LOONGARCH_INS_XVILVL_H = 1611,
    LOONGARCH_INS_XVILVL_W = 1612,
    LOONGARCH_INS_XVINSGR2VR_D = 1613,
    LOONGARCH_INS_XVINSGR2VR_W = 1614,
    LOONGARCH_INS_XVINSVE0_D = 1615,
    LOONGARCH_INS_XVINSVE0_W = 1616,
    LOONGARCH_INS_XVLD = 1617,
    LOONGARCH_INS_XVLDI = 1618,
    LOONGARCH_INS_XVLDREPL_B = 1619,
    LOONGARCH_INS_XVLDREPL_D = 1620,
    LOONGARCH_INS_XVLDREPL_H = 1621,
    LOONGARCH_INS_XVLDREPL_W = 1622,
    LOONGARCH_INS_XVLDX = 1623,
    LOONGARCH_INS_XVMADDWEV_D_W = 1624,
    LOONGARCH_INS_XVMADDWEV_D_WU = 1625,
    LOONGARCH_INS_XVMADDWEV_D_WU_W = 1626,
    LOONGARCH_INS_XVMADDWEV_H_B = 1627,
    LOONGARCH_INS_XVMADDWEV_H_BU = 1628,
    LOONGARCH_INS_XVMADDWEV_H_BU_B = 1629,
    LOONGARCH_INS_XVMADDWEV_Q_D = 1630,
    LOONGARCH_INS_XVMADDWEV_Q_DU = 1631,
    LOONGARCH_INS_XVMADDWEV_Q_DU_D = 1632,
    LOONGARCH_INS_XVMADDWEV_W_H = 1633,
    LOONGARCH_INS_XVMADDWEV_W_HU = 1634,
    LOONGARCH_INS_XVMADDWEV_W_HU_H = 1635,
    LOONGARCH_INS_XVMADDWOD_D_W = 1636,
    LOONGARCH_INS_XVMADDWOD_D_WU = 1637,
    LOONGARCH_INS_XVMADDWOD_D_WU_W = 1638,
    LOONGARCH_INS_XVMADDWOD_H_B = 1639,
    LOONGARCH_INS_XVMADDWOD_H_BU = 1640,
    LOONGARCH_INS_XVMADDWOD_H_BU_B = 1641,
    LOONGARCH_INS_XVMADDWOD_Q_D = 1642,
    LOONGARCH_INS_XVMADDWOD_Q_DU = 1643,
    LOONGARCH_INS_XVMADDWOD_Q_DU_D = 1644,
    LOONGARCH_INS_XVMADDWOD_W_H = 1645,
    LOONGARCH_INS_XVMADDWOD_W_HU = 1646,
    LOONGARCH_INS_XVMADDWOD_W_HU_H = 1647,
    LOONGARCH_INS_XVMADD_B = 1648,
    LOONGARCH_INS_XVMADD_D = 1649,
    LOONGARCH_INS_XVMADD_H = 1650,
    LOONGARCH_INS_XVMADD_W = 1651,
    LOONGARCH_INS_XVMAXI_B = 1652,
    LOONGARCH_INS_XVMAXI_BU = 1653,
    LOONGARCH_INS_XVMAXI_D = 1654,
    LOONGARCH_INS_XVMAXI_DU = 1655,
    LOONGARCH_INS_XVMAXI_H = 1656,
    LOONGARCH_INS_XVMAXI_HU = 1657,
    LOONGARCH_INS_XVMAXI_W = 1658,
    LOONGARCH_INS_XVMAXI_WU = 1659,
    LOONGARCH_INS_XVMAX_B = 1660,
    LOONGARCH_INS_XVMAX_BU = 1661,
    LOONGARCH_INS_XVMAX_D = 1662,
    LOONGARCH_INS_XVMAX_DU = 1663,
    LOONGARCH_INS_XVMAX_H = 1664,
    LOONGARCH_INS_XVMAX_HU = 1665,
    LOONGARCH_INS_XVMAX_W = 1666,
    LOONGARCH_INS_XVMAX_WU = 1667,
    LOONGARCH_INS_XVMINI_B = 1668,
    LOONGARCH_INS_XVMINI_BU = 1669,
    LOONGARCH_INS_XVMINI_D = 1670,
    LOONGARCH_INS_XVMINI_DU = 1671,
    LOONGARCH_INS_XVMINI_H = 1672,
    LOONGARCH_INS_XVMINI_HU = 1673,
    LOONGARCH_INS_XVMINI_W = 1674,
    LOONGARCH_INS_XVMINI_WU = 1675,
    LOONGARCH_INS_XVMIN_B = 1676,
    LOONGARCH_INS_XVMIN_BU = 1677,
    LOONGARCH_INS_XVMIN_D = 1678,
    LOONGARCH_INS_XVMIN_DU = 1679,
    LOONGARCH_INS_XVMIN_H = 1680,
    LOONGARCH_INS_XVMIN_HU = 1681,
    LOONGARCH_INS_XVMIN_W = 1682,
    LOONGARCH_INS_XVMIN_WU = 1683,
    LOONGARCH_INS_XVMOD_B = 1684,
    LOONGARCH_INS_XVMOD_BU = 1685,
    LOONGARCH_INS_XVMOD_D = 1686,
    LOONGARCH_INS_XVMOD_DU = 1687,
    LOONGARCH_INS_XVMOD_H = 1688,
    LOONGARCH_INS_XVMOD_HU = 1689,
    LOONGARCH_INS_XVMOD_W = 1690,
    LOONGARCH_INS_XVMOD_WU = 1691,
    LOONGARCH_INS_XVMSKGEZ_B = 1692,
    LOONGARCH_INS_XVMSKLTZ_B = 1693,
    LOONGARCH_INS_XVMSKLTZ_D = 1694,
    LOONGARCH_INS_XVMSKLTZ_H = 1695,
    LOONGARCH_INS_XVMSKLTZ_W = 1696,
    LOONGARCH_INS_XVMSKNZ_B = 1697,
    LOONGARCH_INS_XVMSUB_B = 1698,
    LOONGARCH_INS_XVMSUB_D = 1699,
    LOONGARCH_INS_XVMSUB_H = 1700,
    LOONGARCH_INS_XVMSUB_W = 1701,
    LOONGARCH_INS_XVMUH_B = 1702,
    LOONGARCH_INS_XVMUH_BU = 1703,
    LOONGARCH_INS_XVMUH_D = 1704,
    LOONGARCH_INS_XVMUH_DU = 1705,
    LOONGARCH_INS_XVMUH_H = 1706,
    LOONGARCH_INS_XVMUH_HU = 1707,
    LOONGARCH_INS_XVMUH_W = 1708,
    LOONGARCH_INS_XVMUH_WU = 1709,
    LOONGARCH_INS_XVMULWEV_D_W = 1710,
    LOONGARCH_INS_XVMULWEV_D_WU = 1711,
    LOONGARCH_INS_XVMULWEV_D_WU_W = 1712,
    LOONGARCH_INS_XVMULWEV_H_B = 1713,
    LOONGARCH_INS_XVMULWEV_H_BU = 1714,
    LOONGARCH_INS_XVMULWEV_H_BU_B = 1715,
    LOONGARCH_INS_XVMULWEV_Q_D = 1716,
    LOONGARCH_INS_XVMULWEV_Q_DU = 1717,
    LOONGARCH_INS_XVMULWEV_Q_DU_D = 1718,
    LOONGARCH_INS_XVMULWEV_W_H = 1719,
    LOONGARCH_INS_XVMULWEV_W_HU = 1720,
    LOONGARCH_INS_XVMULWEV_W_HU_H = 1721,
    LOONGARCH_INS_XVMULWOD_D_W = 1722,
    LOONGARCH_INS_XVMULWOD_D_WU = 1723,
    LOONGARCH_INS_XVMULWOD_D_WU_W = 1724,
    LOONGARCH_INS_XVMULWOD_H_B = 1725,
    LOONGARCH_INS_XVMULWOD_H_BU = 1726,
    LOONGARCH_INS_XVMULWOD_H_BU_B = 1727,
    LOONGARCH_INS_XVMULWOD_Q_D = 1728,
    LOONGARCH_INS_XVMULWOD_Q_DU = 1729,
    LOONGARCH_INS_XVMULWOD_Q_DU_D = 1730,
    LOONGARCH_INS_XVMULWOD_W_H = 1731,
    LOONGARCH_INS_XVMULWOD_W_HU = 1732,
    LOONGARCH_INS_XVMULWOD_W_HU_H = 1733,
    LOONGARCH_INS_XVMUL_B = 1734,
    LOONGARCH_INS_XVMUL_D = 1735,
    LOONGARCH_INS_XVMUL_H = 1736,
    LOONGARCH_INS_XVMUL_W = 1737,
    LOONGARCH_INS_XVNEG_B = 1738,
    LOONGARCH_INS_XVNEG_D = 1739,
    LOONGARCH_INS_XVNEG_H = 1740,
    LOONGARCH_INS_XVNEG_W = 1741,
    LOONGARCH_INS_XVNORI_B = 1742,
    LOONGARCH_INS_XVNOR_V = 1743,
    LOONGARCH_INS_XVORI_B = 1744,
    LOONGARCH_INS_XVORN_V = 1745,
    LOONGARCH_INS_XVOR_V = 1746,
    LOONGARCH_INS_XVPACKEV_B = 1747,
    LOONGARCH_INS_XVPACKEV_D = 1748,
    LOONGARCH_INS_XVPACKEV_H = 1749,
    LOONGARCH_INS_XVPACKEV_W = 1750,
    LOONGARCH_INS_XVPACKOD_B = 1751,
    LOONGARCH_INS_XVPACKOD_D = 1752,
    LOONGARCH_INS_XVPACKOD_H = 1753,
    LOONGARCH_INS_XVPACKOD_W = 1754,
    LOONGARCH_INS_XVPCNT_B = 1755,
    LOONGARCH_INS_XVPCNT_D = 1756,
    LOONGARCH_INS_XVPCNT_H = 1757,
    LOONGARCH_INS_XVPCNT_W = 1758,
    LOONGARCH_INS_XVPERMI_D = 1759,
    LOONGARCH_INS_XVPERMI_Q = 1760,
    LOONGARCH_INS_XVPERMI_W = 1761,
    LOONGARCH_INS_XVPERM_W = 1762,
    LOONGARCH_INS_XVPICKEV_B = 1763,
    LOONGARCH_INS_XVPICKEV_D = 1764,
    LOONGARCH_INS_XVPICKEV_H = 1765,
    LOONGARCH_INS_XVPICKEV_W = 1766,
    LOONGARCH_INS_XVPICKOD_B = 1767,
    LOONGARCH_INS_XVPICKOD_D = 1768,
    LOONGARCH_INS_XVPICKOD_H = 1769,
    LOONGARCH_INS_XVPICKOD_W = 1770,
    LOONGARCH_INS_XVPICKVE2GR_D = 1771,
    LOONGARCH_INS_XVPICKVE2GR_DU = 1772,
    LOONGARCH_INS_XVPICKVE2GR_W = 1773,
    LOONGARCH_INS_XVPICKVE2GR_WU = 1774,
    LOONGARCH_INS_XVPICKVE_D = 1775,
    LOONGARCH_INS_XVPICKVE_W = 1776,
    LOONGARCH_INS_XVREPL128VEI_B = 1777,
    LOONGARCH_INS_XVREPL128VEI_D = 1778,
    LOONGARCH_INS_XVREPL128VEI_H = 1779,
    LOONGARCH_INS_XVREPL128VEI_W = 1780,
    LOONGARCH_INS_XVREPLGR2VR_B = 1781,
    LOONGARCH_INS_XVREPLGR2VR_D = 1782,
    LOONGARCH_INS_XVREPLGR2VR_H = 1783,
    LOONGARCH_INS_XVREPLGR2VR_W = 1784,
    LOONGARCH_INS_XVREPLVE0_B = 1785,
    LOONGARCH_INS_XVREPLVE0_D = 1786,
    LOONGARCH_INS_XVREPLVE0_H = 1787,
    LOONGARCH_INS_XVREPLVE0_Q = 1788,
    LOONGARCH_INS_XVREPLVE0_W = 1789,
    LOONGARCH_INS_XVREPLVE_B = 1790,
    LOONGARCH_INS_XVREPLVE_D = 1791,
    LOONGARCH_INS_XVREPLVE_H = 1792,
    LOONGARCH_INS_XVREPLVE_W = 1793,
    LOONGARCH_INS_XVROTRI_B = 1794,
    LOONGARCH_INS_XVROTRI_D = 1795,
    LOONGARCH_INS_XVROTRI_H = 1796,
    LOONGARCH_INS_XVROTRI_W = 1797,
    LOONGARCH_INS_XVROTR_B = 1798,
    LOONGARCH_INS_XVROTR_D = 1799,
    LOONGARCH_INS_XVROTR_H = 1800,
    LOONGARCH_INS_XVROTR_W = 1801,
    LOONGARCH_INS_XVSADD_B = 1802,
    LOONGARCH_INS_XVSADD_BU = 1803,
    LOONGARCH_INS_XVSADD_D = 1804,
    LOONGARCH_INS_XVSADD_DU = 1805,
    LOONGARCH_INS_XVSADD_H = 1806,
    LOONGARCH_INS_XVSADD_HU = 1807,
    LOONGARCH_INS_XVSADD_W = 1808,
    LOONGARCH_INS_XVSADD_WU = 1809,
    LOONGARCH_INS_XVSAT_B = 1810,
    LOONGARCH_INS_XVSAT_BU = 1811,
    LOONGARCH_INS_XVSAT_D = 1812,
    LOONGARCH_INS_XVSAT_DU = 1813,
    LOONGARCH_INS_XVSAT_H = 1814,
    LOONGARCH_INS_XVSAT_HU = 1815,
    LOONGARCH_INS_XVSAT_W = 1816,
    LOONGARCH_INS_XVSAT_WU = 1817,
    LOONGARCH_INS_XVSEQI_B = 1818,
    LOONGARCH_INS_XVSEQI_D = 1819,
    LOONGARCH_INS_XVSEQI_H = 1820,
    LOONGARCH_INS_XVSEQI_W = 1821,
    LOONGARCH_INS_XVSEQ_B = 1822,
    LOONGARCH_INS_XVSEQ_D = 1823,
    LOONGARCH_INS_XVSEQ_H = 1824,
    LOONGARCH_INS_XVSEQ_W = 1825,
    LOONGARCH_INS_XVSETALLNEZ_B = 1826,
    LOONGARCH_INS_XVSETALLNEZ_D = 1827,
    LOONGARCH_INS_XVSETALLNEZ_H = 1828,
    LOONGARCH_INS_XVSETALLNEZ_W = 1829,
    LOONGARCH_INS_XVSETANYEQZ_B = 1830,
    LOONGARCH_INS_XVSETANYEQZ_D = 1831,
    LOONGARCH_INS_XVSETANYEQZ_H = 1832,
    LOONGARCH_INS_XVSETANYEQZ_W = 1833,
    LOONGARCH_INS_XVSETEQZ_V = 1834,
    LOONGARCH_INS_XVSETNEZ_V = 1835,
    LOONGARCH_INS_XVSHUF4I_B = 1836,
    LOONGARCH_INS_XVSHUF4I_D = 1837,
    LOONGARCH_INS_XVSHUF4I_H = 1838,
    LOONGARCH_INS_XVSHUF4I_W = 1839,
    LOONGARCH_INS_XVSHUF_B = 1840,
    LOONGARCH_INS_XVSHUF_D = 1841,
    LOONGARCH_INS_XVSHUF_H = 1842,
    LOONGARCH_INS_XVSHUF_W = 1843,
    LOONGARCH_INS_XVSIGNCOV_B = 1844,
    LOONGARCH_INS_XVSIGNCOV_D = 1845,
    LOONGARCH_INS_XVSIGNCOV_H = 1846,
    LOONGARCH_INS_XVSIGNCOV_W = 1847,
    LOONGARCH_INS_XVSLEI_B = 1848,
    LOONGARCH_INS_XVSLEI_BU = 1849,
    LOONGARCH_INS_XVSLEI_D = 1850,
    LOONGARCH_INS_XVSLEI_DU = 1851,
    LOONGARCH_INS_XVSLEI_H = 1852,
    LOONGARCH_INS_XVSLEI_HU = 1853,
    LOONGARCH_INS_XVSLEI_W = 1854,
    LOONGARCH_INS_XVSLEI_WU = 1855,
    LOONGARCH_INS_XVSLE_B = 1856,
    LOONGARCH_INS_XVSLE_BU = 1857,
    LOONGARCH_INS_XVSLE_D = 1858,
    LOONGARCH_INS_XVSLE_DU = 1859,
    LOONGARCH_INS_XVSLE_H = 1860,
    LOONGARCH_INS_XVSLE_HU = 1861,
    LOONGARCH_INS_XVSLE_W = 1862,
    LOONGARCH_INS_XVSLE_WU = 1863,
    LOONGARCH_INS_XVSLLI_B = 1864,
    LOONGARCH_INS_XVSLLI_D = 1865,
    LOONGARCH_INS_XVSLLI_H = 1866,
    LOONGARCH_INS_XVSLLI_W = 1867,
    LOONGARCH_INS_XVSLLWIL_DU_WU = 1868,
    LOONGARCH_INS_XVSLLWIL_D_W = 1869,
    LOONGARCH_INS_XVSLLWIL_HU_BU = 1870,
    LOONGARCH_INS_XVSLLWIL_H_B = 1871,
    LOONGARCH_INS_XVSLLWIL_WU_HU = 1872,
    LOONGARCH_INS_XVSLLWIL_W_H = 1873,
    LOONGARCH_INS_XVSLL_B = 1874,
    LOONGARCH_INS_XVSLL_D = 1875,
    LOONGARCH_INS_XVSLL_H = 1876,
    LOONGARCH_INS_XVSLL_W = 1877,
    LOONGARCH_INS_XVSLTI_B = 1878,
    LOONGARCH_INS_XVSLTI_BU = 1879,
    LOONGARCH_INS_XVSLTI_D = 1880,
    LOONGARCH_INS_XVSLTI_DU = 1881,
    LOONGARCH_INS_XVSLTI_H = 1882,
    LOONGARCH_INS_XVSLTI_HU = 1883,
    LOONGARCH_INS_XVSLTI_W = 1884,
    LOONGARCH_INS_XVSLTI_WU = 1885,
    LOONGARCH_INS_XVSLT_B = 1886,
    LOONGARCH_INS_XVSLT_BU = 1887,
    LOONGARCH_INS_XVSLT_D = 1888,
    LOONGARCH_INS_XVSLT_DU = 1889,
    LOONGARCH_INS_XVSLT_H = 1890,
    LOONGARCH_INS_XVSLT_HU = 1891,
    LOONGARCH_INS_XVSLT_W = 1892,
    LOONGARCH_INS_XVSLT_WU = 1893,
    LOONGARCH_INS_XVSRAI_B = 1894,
    LOONGARCH_INS_XVSRAI_D = 1895,
    LOONGARCH_INS_XVSRAI_H = 1896,
    LOONGARCH_INS_XVSRAI_W = 1897,
    LOONGARCH_INS_XVSRANI_B_H = 1898,
    LOONGARCH_INS_XVSRANI_D_Q = 1899,
    LOONGARCH_INS_XVSRANI_H_W = 1900,
    LOONGARCH_INS_XVSRANI_W_D = 1901,
    LOONGARCH_INS_XVSRAN_B_H = 1902,
    LOONGARCH_INS_XVSRAN_H_W = 1903,
    LOONGARCH_INS_XVSRAN_W_D = 1904,
    LOONGARCH_INS_XVSRARI_B = 1905,
    LOONGARCH_INS_XVSRARI_D = 1906,
    LOONGARCH_INS_XVSRARI_H = 1907,
    LOONGARCH_INS_XVSRARI_W = 1908,
    LOONGARCH_INS_XVSRARNI_B_H = 1909,
    LOONGARCH_INS_XVSRARNI_D_Q = 1910,
    LOONGARCH_INS_XVSRARNI_H_W = 1911,
    LOONGARCH_INS_XVSRARNI_W_D = 1912,
    LOONGARCH_INS_XVSRARN_B_H = 1913,
    LOONGARCH_INS_XVSRARN_H_W = 1914,
    LOONGARCH_INS_XVSRARN_W_D = 1915,
    LOONGARCH_INS_XVSRAR_B = 1916,
    LOONGARCH_INS_XVSRAR_D = 1917,
    LOONGARCH_INS_XVSRAR_H = 1918,
    LOONGARCH_INS_XVSRAR_W = 1919,
    LOONGARCH_INS_XVSRA_B = 1920,
    LOONGARCH_INS_XVSRA_D = 1921,
    LOONGARCH_INS_XVSRA_H = 1922,
    LOONGARCH_INS_XVSRA_W = 1923,
    LOONGARCH_INS_XVSRLI_B = 1924,
    LOONGARCH_INS_XVSRLI_D = 1925,
    LOONGARCH_INS_XVSRLI_H = 1926,
    LOONGARCH_INS_XVSRLI_W = 1927,
    LOONGARCH_INS_XVSRLNI_B_H = 1928,
    LOONGARCH_INS_XVSRLNI_D_Q = 1929,
    LOONGARCH_INS_XVSRLNI_H_W = 1930,
    LOONGARCH_INS_XVSRLNI_W_D = 1931,
    LOONGARCH_INS_XVSRLN_B_H = 1932,
    LOONGARCH_INS_XVSRLN_H_W = 1933,
    LOONGARCH_INS_XVSRLN_W_D = 1934,
    LOONGARCH_INS_XVSRLRI_B = 1935,
    LOONGARCH_INS_XVSRLRI_D = 1936,
    LOONGARCH_INS_XVSRLRI_H = 1937,
    LOONGARCH_INS_XVSRLRI_W = 1938,
    LOONGARCH_INS_XVSRLRNI_B_H = 1939,
    LOONGARCH_INS_XVSRLRNI_D_Q = 1940,
    LOONGARCH_INS_XVSRLRNI_H_W = 1941,
    LOONGARCH_INS_XVSRLRNI_W_D = 1942,
    LOONGARCH_INS_XVSRLRN_B_H = 1943,
    LOONGARCH_INS_XVSRLRN_H_W = 1944,
    LOONGARCH_INS_XVSRLRN_W_D = 1945,
    LOONGARCH_INS_XVSRLR_B = 1946,
    LOONGARCH_INS_XVSRLR_D = 1947,
    LOONGARCH_INS_XVSRLR_H = 1948,
    LOONGARCH_INS_XVSRLR_W = 1949,
    LOONGARCH_INS_XVSRL_B = 1950,
    LOONGARCH_INS_XVSRL_D = 1951,
    LOONGARCH_INS_XVSRL_H = 1952,
    LOONGARCH_INS_XVSRL_W = 1953,
    LOONGARCH_INS_XVSSRANI_BU_H = 1954,
    LOONGARCH_INS_XVSSRANI_B_H = 1955,
    LOONGARCH_INS_XVSSRANI_DU_Q = 1956,
    LOONGARCH_INS_XVSSRANI_D_Q = 1957,
    LOONGARCH_INS_XVSSRANI_HU_W = 1958,
    LOONGARCH_INS_XVSSRANI_H_W = 1959,
    LOONGARCH_INS_XVSSRANI_WU_D = 1960,
    LOONGARCH_INS_XVSSRANI_W_D = 1961,
    LOONGARCH_INS_XVSSRAN_BU_H = 1962,
    LOONGARCH_INS_XVSSRAN_B_H = 1963,
    LOONGARCH_INS_XVSSRAN_HU_W = 1964,
    LOONGARCH_INS_XVSSRAN_H_W = 1965,
    LOONGARCH_INS_XVSSRAN_WU_D = 1966,
    LOONGARCH_INS_XVSSRAN_W_D = 1967,
    LOONGARCH_INS_XVSSRARNI_BU_H = 1968,
    LOONGARCH_INS_XVSSRARNI_B_H = 1969,
    LOONGARCH_INS_XVSSRARNI_DU_Q = 1970,
    LOONGARCH_INS_XVSSRARNI_D_Q = 1971,
    LOONGARCH_INS_XVSSRARNI_HU_W = 1972,
    LOONGARCH_INS_XVSSRARNI_H_W = 1973,
    LOONGARCH_INS_XVSSRARNI_WU_D = 1974,
    LOONGARCH_INS_XVSSRARNI_W_D = 1975,
    LOONGARCH_INS_XVSSRARN_BU_H = 1976,
    LOONGARCH_INS_XVSSRARN_B_H = 1977,
    LOONGARCH_INS_XVSSRARN_HU_W = 1978,
    LOONGARCH_INS_XVSSRARN_H_W = 1979,
    LOONGARCH_INS_XVSSRARN_WU_D = 1980,
    LOONGARCH_INS_XVSSRARN_W_D = 1981,
    LOONGARCH_INS_XVSSRLNI_BU_H = 1982,
    LOONGARCH_INS_XVSSRLNI_B_H = 1983,
    LOONGARCH_INS_XVSSRLNI_DU_Q = 1984,
    LOONGARCH_INS_XVSSRLNI_D_Q = 1985,
    LOONGARCH_INS_XVSSRLNI_HU_W = 1986,
    LOONGARCH_INS_XVSSRLNI_H_W = 1987,
    LOONGARCH_INS_XVSSRLNI_WU_D = 1988,
    LOONGARCH_INS_XVSSRLNI_W_D = 1989,
    LOONGARCH_INS_XVSSRLN_BU_H = 1990,
    LOONGARCH_INS_XVSSRLN_B_H = 1991,
    LOONGARCH_INS_XVSSRLN_HU_W = 1992,
    LOONGARCH_INS_XVSSRLN_H_W = 1993,
    LOONGARCH_INS_XVSSRLN_WU_D = 1994,
    LOONGARCH_INS_XVSSRLN_W_D = 1995,
    LOONGARCH_INS_XVSSRLRNI_BU_H = 1996,
    LOONGARCH_INS_XVSSRLRNI_B_H = 1997,
    LOONGARCH_INS_XVSSRLRNI_DU_Q = 1998,
    LOONGARCH_INS_XVSSRLRNI_D_Q = 1999,
    LOONGARCH_INS_XVSSRLRNI_HU_W = 2000,
    LOONGARCH_INS_XVSSRLRNI_H_W = 2001,
    LOONGARCH_INS_XVSSRLRNI_WU_D = 2002,
    LOONGARCH_INS_XVSSRLRNI_W_D = 2003,
    LOONGARCH_INS_XVSSRLRN_BU_H = 2004,
    LOONGARCH_INS_XVSSRLRN_B_H = 2005,
    LOONGARCH_INS_XVSSRLRN_HU_W = 2006,
    LOONGARCH_INS_XVSSRLRN_H_W = 2007,
    LOONGARCH_INS_XVSSRLRN_WU_D = 2008,
    LOONGARCH_INS_XVSSRLRN_W_D = 2009,
    LOONGARCH_INS_XVSSUB_B = 2010,
    LOONGARCH_INS_XVSSUB_BU = 2011,
    LOONGARCH_INS_XVSSUB_D = 2012,
    LOONGARCH_INS_XVSSUB_DU = 2013,
    LOONGARCH_INS_XVSSUB_H = 2014,
    LOONGARCH_INS_XVSSUB_HU = 2015,
    LOONGARCH_INS_XVSSUB_W = 2016,
    LOONGARCH_INS_XVSSUB_WU = 2017,
    LOONGARCH_INS_XVST = 2018,
    LOONGARCH_INS_XVSTELM_B = 2019,
    LOONGARCH_INS_XVSTELM_D = 2020,
    LOONGARCH_INS_XVSTELM_H = 2021,
    LOONGARCH_INS_XVSTELM_W = 2022,
    LOONGARCH_INS_XVSTX = 2023,
    LOONGARCH_INS_XVSUBI_BU = 2024,
    LOONGARCH_INS_XVSUBI_DU = 2025,
    LOONGARCH_INS_XVSUBI_HU = 2026,
    LOONGARCH_INS_XVSUBI_WU = 2027,
    LOONGARCH_INS_XVSUBWEV_D_W = 2028,
    LOONGARCH_INS_XVSUBWEV_D_WU = 2029,
    LOONGARCH_INS_XVSUBWEV_H_B = 2030,
    LOONGARCH_INS_XVSUBWEV_H_BU = 2031,
    LOONGARCH_INS_XVSUBWEV_Q_D = 2032,
    LOONGARCH_INS_XVSUBWEV_Q_DU = 2033,
    LOONGARCH_INS_XVSUBWEV_W_H = 2034,
    LOONGARCH_INS_XVSUBWEV_W_HU = 2035,
    LOONGARCH_INS_XVSUBWOD_D_W = 2036,
    LOONGARCH_INS_XVSUBWOD_D_WU = 2037,
    LOONGARCH_INS_XVSUBWOD_H_B = 2038,
    LOONGARCH_INS_XVSUBWOD_H_BU = 2039,
    LOONGARCH_INS_XVSUBWOD_Q_D = 2040,
    LOONGARCH_INS_XVSUBWOD_Q_DU = 2041,
    LOONGARCH_INS_XVSUBWOD_W_H = 2042,
    LOONGARCH_INS_XVSUBWOD_W_HU = 2043,
    LOONGARCH_INS_XVSUB_B = 2044,
    LOONGARCH_INS_XVSUB_D = 2045,
    LOONGARCH_INS_XVSUB_H = 2046,
    LOONGARCH_INS_XVSUB_Q = 2047,
    LOONGARCH_INS_XVSUB_W = 2048,
    LOONGARCH_INS_XVXORI_B = 2049,
    LOONGARCH_INS_XVXOR_V = 2050,
    LOONGARCH_INS_ENDING = 2051,
    LOONGARCH_INS_ALIAS_BEGIN = 2052,
    LOONGARCH_INS_ALIAS_LA = 2053,
    LOONGARCH_INS_ALIAS_LA_GLOBAL = 2054,
    LOONGARCH_INS_ALIAS_LA_LOCAL = 2055,
    LOONGARCH_INS_ALIAS_NOP = 2056,
    LOONGARCH_INS_ALIAS_MOVE = 2057,
    LOONGARCH_INS_ALIAS_RET = 2058,
    LOONGARCH_INS_ALIAS_JR = 2059,
    LOONGARCH_INS_ALIAS_END = 2060,
}
pub mod loongarch_insn_group {
    pub type Type = libc::c_uint;
    #[doc = "< = CS_GRP_INVALID"]
    pub const LOONGARCH_GRP_INVALID: Type = 0;
    #[doc = "< = CS_GRP_JUMP"]
    pub const LOONGARCH_GRP_JUMP: Type = 1;
    #[doc = "< = CS_GRP_CALL"]
    pub const LOONGARCH_GRP_CALL: Type = 2;
    #[doc = "< = CS_GRP_RET"]
    pub const LOONGARCH_GRP_RET: Type = 3;
    #[doc = "< = CS_GRP_INT"]
    pub const LOONGARCH_GRP_INT: Type = 4;
    #[doc = "< = CS_GRP_IRET"]
    pub const LOONGARCH_GRP_IRET: Type = 5;
    #[doc = "< = CS_GRP_PRIVILEGE"]
    pub const LOONGARCH_GRP_PRIVILEGE: Type = 6;
    #[doc = "< = CS_GRP_BRANCH_RELATIVE"]
    pub const LOONGARCH_GRP_BRANCH_RELATIVE: Type = 7;
    pub const LOONGARCH_FEATURE_ISLA64: Type = 128;
    pub const LOONGARCH_FEATURE_ISLA32: Type = 129;
    pub const LOONGARCH_FEATURE_HASLAGLOBALWITHPCREL: Type = 130;
    pub const LOONGARCH_FEATURE_HASLAGLOBALWITHABS: Type = 131;
    pub const LOONGARCH_FEATURE_HASLALOCALWITHABS: Type = 132;
    pub const LOONGARCH_GRP_ENDING: Type = 133;
}
pub mod xtensa_reg {
    #[doc = " Xtensa registers"]
    pub type Type = libc::c_uint;
    pub const XTENSA_REG_INVALID: Type = 0;
    pub const XTENSA_REG_ACCHI: Type = 1;
    pub const XTENSA_REG_ACCLO: Type = 2;
    pub const XTENSA_REG_ACCX: Type = 3;
    pub const XTENSA_REG_ATOMCTL: Type = 4;
    pub const XTENSA_REG_BREG: Type = 5;
    pub const XTENSA_REG_CCOUNT: Type = 6;
    pub const XTENSA_REG_CPENABLE: Type = 7;
    pub const XTENSA_REG_DDR: Type = 8;
    pub const XTENSA_REG_DEBUGCAUSE: Type = 9;
    pub const XTENSA_REG_DEPC: Type = 10;
    pub const XTENSA_REG_EXCCAUSE: Type = 11;
    pub const XTENSA_REG_EXCVADDR: Type = 12;
    pub const XTENSA_REG_EXPSTATE: Type = 13;
    pub const XTENSA_REG_FCR: Type = 14;
    pub const XTENSA_REG_FFT_BIT_WIDTH: Type = 15;
    pub const XTENSA_REG_FSR: Type = 16;
    pub const XTENSA_REG_GPIO_OUT: Type = 17;
    pub const XTENSA_REG_IBREAKENABLE: Type = 18;
    pub const XTENSA_REG_ICOUNT: Type = 19;
    pub const XTENSA_REG_ICOUNTLEVEL: Type = 20;
    pub const XTENSA_REG_INTCLEAR: Type = 21;
    pub const XTENSA_REG_INTENABLE: Type = 22;
    pub const XTENSA_REG_INTERRUPT: Type = 23;
    pub const XTENSA_REG_LBEG: Type = 24;
    pub const XTENSA_REG_LCOUNT: Type = 25;
    pub const XTENSA_REG_LEND: Type = 26;
    pub const XTENSA_REG_LITBASE: Type = 27;
    pub const XTENSA_REG_MEMCTL: Type = 28;
    pub const XTENSA_REG_PRID: Type = 29;
    pub const XTENSA_REG_PS: Type = 30;
    pub const XTENSA_REG_QACC: Type = 31;
    pub const XTENSA_REG_SAR: Type = 32;
    pub const XTENSA_REG_SAR_BYTE: Type = 33;
    pub const XTENSA_REG_SP: Type = 34;
    pub const XTENSA_REG_THREADPTR: Type = 35;
    pub const XTENSA_REG_UA_STATE: Type = 36;
    pub const XTENSA_REG_VECBASE: Type = 37;
    pub const XTENSA_REG_WINDOWBASE: Type = 38;
    pub const XTENSA_REG_WINDOWSTART: Type = 39;
    pub const XTENSA_REG_A0: Type = 40;
    pub const XTENSA_REG_A2: Type = 41;
    pub const XTENSA_REG_A3: Type = 42;
    pub const XTENSA_REG_A4: Type = 43;
    pub const XTENSA_REG_A5: Type = 44;
    pub const XTENSA_REG_A6: Type = 45;
    pub const XTENSA_REG_A7: Type = 46;
    pub const XTENSA_REG_A8: Type = 47;
    pub const XTENSA_REG_A9: Type = 48;
    pub const XTENSA_REG_A10: Type = 49;
    pub const XTENSA_REG_A11: Type = 50;
    pub const XTENSA_REG_A12: Type = 51;
    pub const XTENSA_REG_A13: Type = 52;
    pub const XTENSA_REG_A14: Type = 53;
    pub const XTENSA_REG_A15: Type = 54;
    pub const XTENSA_REG_AED0: Type = 55;
    pub const XTENSA_REG_AED1: Type = 56;
    pub const XTENSA_REG_AED2: Type = 57;
    pub const XTENSA_REG_AED3: Type = 58;
    pub const XTENSA_REG_AED4: Type = 59;
    pub const XTENSA_REG_AED5: Type = 60;
    pub const XTENSA_REG_AED6: Type = 61;
    pub const XTENSA_REG_AED7: Type = 62;
    pub const XTENSA_REG_AED8: Type = 63;
    pub const XTENSA_REG_AED9: Type = 64;
    pub const XTENSA_REG_AED10: Type = 65;
    pub const XTENSA_REG_AED11: Type = 66;
    pub const XTENSA_REG_AED12: Type = 67;
    pub const XTENSA_REG_AED13: Type = 68;
    pub const XTENSA_REG_AED14: Type = 69;
    pub const XTENSA_REG_AED15: Type = 70;
    pub const XTENSA_REG_B0: Type = 71;
    pub const XTENSA_REG_B1: Type = 72;
    pub const XTENSA_REG_B2: Type = 73;
    pub const XTENSA_REG_B3: Type = 74;
    pub const XTENSA_REG_B4: Type = 75;
    pub const XTENSA_REG_B5: Type = 76;
    pub const XTENSA_REG_B6: Type = 77;
    pub const XTENSA_REG_B7: Type = 78;
    pub const XTENSA_REG_B8: Type = 79;
    pub const XTENSA_REG_B9: Type = 80;
    pub const XTENSA_REG_B10: Type = 81;
    pub const XTENSA_REG_B11: Type = 82;
    pub const XTENSA_REG_B12: Type = 83;
    pub const XTENSA_REG_B13: Type = 84;
    pub const XTENSA_REG_B14: Type = 85;
    pub const XTENSA_REG_B15: Type = 86;
    pub const XTENSA_REG_CCOMPARE0: Type = 87;
    pub const XTENSA_REG_CCOMPARE1: Type = 88;
    pub const XTENSA_REG_CCOMPARE2: Type = 89;
    pub const XTENSA_REG_CONFIGID0: Type = 90;
    pub const XTENSA_REG_CONFIGID1: Type = 91;
    pub const XTENSA_REG_DBREAKA0: Type = 92;
    pub const XTENSA_REG_DBREAKA1: Type = 93;
    pub const XTENSA_REG_DBREAKC0: Type = 94;
    pub const XTENSA_REG_DBREAKC1: Type = 95;
    pub const XTENSA_REG_EPC1: Type = 96;
    pub const XTENSA_REG_EPC2: Type = 97;
    pub const XTENSA_REG_EPC3: Type = 98;
    pub const XTENSA_REG_EPC4: Type = 99;
    pub const XTENSA_REG_EPC5: Type = 100;
    pub const XTENSA_REG_EPC6: Type = 101;
    pub const XTENSA_REG_EPC7: Type = 102;
    pub const XTENSA_REG_EPS2: Type = 103;
    pub const XTENSA_REG_EPS3: Type = 104;
    pub const XTENSA_REG_EPS4: Type = 105;
    pub const XTENSA_REG_EPS5: Type = 106;
    pub const XTENSA_REG_EPS6: Type = 107;
    pub const XTENSA_REG_EPS7: Type = 108;
    pub const XTENSA_REG_EXCSAVE1: Type = 109;
    pub const XTENSA_REG_EXCSAVE2: Type = 110;
    pub const XTENSA_REG_EXCSAVE3: Type = 111;
    pub const XTENSA_REG_EXCSAVE4: Type = 112;
    pub const XTENSA_REG_EXCSAVE5: Type = 113;
    pub const XTENSA_REG_EXCSAVE6: Type = 114;
    pub const XTENSA_REG_EXCSAVE7: Type = 115;
    pub const XTENSA_REG_F0: Type = 116;
    pub const XTENSA_REG_F1: Type = 117;
    pub const XTENSA_REG_F2: Type = 118;
    pub const XTENSA_REG_F3: Type = 119;
    pub const XTENSA_REG_F4: Type = 120;
    pub const XTENSA_REG_F5: Type = 121;
    pub const XTENSA_REG_F6: Type = 122;
    pub const XTENSA_REG_F7: Type = 123;
    pub const XTENSA_REG_F8: Type = 124;
    pub const XTENSA_REG_F9: Type = 125;
    pub const XTENSA_REG_F10: Type = 126;
    pub const XTENSA_REG_F11: Type = 127;
    pub const XTENSA_REG_F12: Type = 128;
    pub const XTENSA_REG_F13: Type = 129;
    pub const XTENSA_REG_F14: Type = 130;
    pub const XTENSA_REG_F15: Type = 131;
    pub const XTENSA_REG_IBREAKA0: Type = 132;
    pub const XTENSA_REG_IBREAKA1: Type = 133;
    pub const XTENSA_REG_M0: Type = 134;
    pub const XTENSA_REG_M1: Type = 135;
    pub const XTENSA_REG_M2: Type = 136;
    pub const XTENSA_REG_M3: Type = 137;
    pub const XTENSA_REG_MISC0: Type = 138;
    pub const XTENSA_REG_MISC1: Type = 139;
    pub const XTENSA_REG_MISC2: Type = 140;
    pub const XTENSA_REG_MISC3: Type = 141;
    pub const XTENSA_REG_Q0: Type = 142;
    pub const XTENSA_REG_Q1: Type = 143;
    pub const XTENSA_REG_Q2: Type = 144;
    pub const XTENSA_REG_Q3: Type = 145;
    pub const XTENSA_REG_Q4: Type = 146;
    pub const XTENSA_REG_Q5: Type = 147;
    pub const XTENSA_REG_Q6: Type = 148;
    pub const XTENSA_REG_Q7: Type = 149;
    pub const XTENSA_REG_SCOMPARE1: Type = 150;
    pub const XTENSA_REG_U0: Type = 151;
    pub const XTENSA_REG_U1: Type = 152;
    pub const XTENSA_REG_U2: Type = 153;
    pub const XTENSA_REG_U3: Type = 154;
    pub const XTENSA_REG_F64R_HI: Type = 155;
    pub const XTENSA_REG_F64R_LO: Type = 156;
    pub const XTENSA_REG_F64S: Type = 157;
    pub const XTENSA_REG_B0_B1: Type = 158;
    pub const XTENSA_REG_B2_B3: Type = 159;
    pub const XTENSA_REG_B4_B5: Type = 160;
    pub const XTENSA_REG_B6_B7: Type = 161;
    pub const XTENSA_REG_B8_B9: Type = 162;
    pub const XTENSA_REG_B10_B11: Type = 163;
    pub const XTENSA_REG_B12_B13: Type = 164;
    pub const XTENSA_REG_B14_B15: Type = 165;
    pub const XTENSA_REG_B0_B1_B2_B3: Type = 166;
    pub const XTENSA_REG_B4_B5_B6_B7: Type = 167;
    pub const XTENSA_REG_B8_B9_B10_B11: Type = 168;
    pub const XTENSA_REG_B12_B13_B14_B15: Type = 169;
    pub const XTENSA_REG_ENDING: Type = 170;
}
#[repr(u32)]
#[doc = " Xtensa registers"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum xtensa_insn {
    XTENSA_INS_INVALID = 0,
    XTENSA_INS_ABS = 1,
    XTENSA_INS_ABS_S = 2,
    XTENSA_INS_ADD = 3,
    XTENSA_INS_ADDEXPM_S = 4,
    XTENSA_INS_ADDEXP_S = 5,
    XTENSA_INS_ADDI = 6,
    XTENSA_INS_ADDI_N = 7,
    XTENSA_INS_ADDMI = 8,
    XTENSA_INS_ADDX2 = 9,
    XTENSA_INS_ADDX4 = 10,
    XTENSA_INS_ADDX8 = 11,
    XTENSA_INS_ADD_N = 12,
    XTENSA_INS_ADD_S = 13,
    XTENSA_INS_AE_ABS16S = 14,
    XTENSA_INS_AE_ABS24S = 15,
    XTENSA_INS_AE_ABS32 = 16,
    XTENSA_INS_AE_ABS32S = 17,
    XTENSA_INS_AE_ABS64 = 18,
    XTENSA_INS_AE_ABS64S = 19,
    XTENSA_INS_AE_ADD16 = 20,
    XTENSA_INS_AE_ADD16S = 21,
    XTENSA_INS_AE_ADD24S = 22,
    XTENSA_INS_AE_ADD32 = 23,
    XTENSA_INS_AE_ADD32S = 24,
    XTENSA_INS_AE_ADD32_HL_LH = 25,
    XTENSA_INS_AE_ADD64 = 26,
    XTENSA_INS_AE_ADD64S = 27,
    XTENSA_INS_AE_ADDBRBA32 = 28,
    XTENSA_INS_AE_ADDSUB32 = 29,
    XTENSA_INS_AE_ADDSUB32S = 30,
    XTENSA_INS_AE_AND = 31,
    XTENSA_INS_AE_CVT32X2F16_10 = 32,
    XTENSA_INS_AE_CVT32X2F16_32 = 33,
    XTENSA_INS_AE_CVT48A32 = 34,
    XTENSA_INS_AE_CVT64A32 = 35,
    XTENSA_INS_AE_CVT64F32_H = 36,
    XTENSA_INS_AE_CVTA32F24S_H = 37,
    XTENSA_INS_AE_CVTA32F24S_L = 38,
    XTENSA_INS_AE_CVTQ56A32S = 39,
    XTENSA_INS_AE_CVTQ56P32S_H = 40,
    XTENSA_INS_AE_CVTQ56P32S_L = 41,
    XTENSA_INS_AE_DB = 42,
    XTENSA_INS_AE_DBI = 43,
    XTENSA_INS_AE_DBI_IC = 44,
    XTENSA_INS_AE_DBI_IP = 45,
    XTENSA_INS_AE_DB_IC = 46,
    XTENSA_INS_AE_DB_IP = 47,
    XTENSA_INS_AE_DIV64D32_H = 48,
    XTENSA_INS_AE_DIV64D32_L = 49,
    XTENSA_INS_AE_EQ16 = 50,
    XTENSA_INS_AE_EQ32 = 51,
    XTENSA_INS_AE_EQ64 = 52,
    XTENSA_INS_AE_L16M_I = 53,
    XTENSA_INS_AE_L16M_IU = 54,
    XTENSA_INS_AE_L16M_X = 55,
    XTENSA_INS_AE_L16M_XC = 56,
    XTENSA_INS_AE_L16M_XU = 57,
    XTENSA_INS_AE_L16X2M_I = 58,
    XTENSA_INS_AE_L16X2M_IU = 59,
    XTENSA_INS_AE_L16X2M_X = 60,
    XTENSA_INS_AE_L16X2M_XC = 61,
    XTENSA_INS_AE_L16X2M_XU = 62,
    XTENSA_INS_AE_L16X4_I = 63,
    XTENSA_INS_AE_L16X4_IP = 64,
    XTENSA_INS_AE_L16X4_RIC = 65,
    XTENSA_INS_AE_L16X4_RIP = 66,
    XTENSA_INS_AE_L16X4_X = 67,
    XTENSA_INS_AE_L16X4_XC = 68,
    XTENSA_INS_AE_L16X4_XP = 69,
    XTENSA_INS_AE_L16_I = 70,
    XTENSA_INS_AE_L16_IP = 71,
    XTENSA_INS_AE_L16_X = 72,
    XTENSA_INS_AE_L16_XC = 73,
    XTENSA_INS_AE_L16_XP = 74,
    XTENSA_INS_AE_L32F24_I = 75,
    XTENSA_INS_AE_L32F24_IP = 76,
    XTENSA_INS_AE_L32F24_X = 77,
    XTENSA_INS_AE_L32F24_XC = 78,
    XTENSA_INS_AE_L32F24_XP = 79,
    XTENSA_INS_AE_L32M_I = 80,
    XTENSA_INS_AE_L32M_IU = 81,
    XTENSA_INS_AE_L32M_X = 82,
    XTENSA_INS_AE_L32M_XC = 83,
    XTENSA_INS_AE_L32M_XU = 84,
    XTENSA_INS_AE_L32X2F24_I = 85,
    XTENSA_INS_AE_L32X2F24_IP = 86,
    XTENSA_INS_AE_L32X2F24_RIC = 87,
    XTENSA_INS_AE_L32X2F24_RIP = 88,
    XTENSA_INS_AE_L32X2F24_X = 89,
    XTENSA_INS_AE_L32X2F24_XC = 90,
    XTENSA_INS_AE_L32X2F24_XP = 91,
    XTENSA_INS_AE_L32X2_I = 92,
    XTENSA_INS_AE_L32X2_IP = 93,
    XTENSA_INS_AE_L32X2_RIC = 94,
    XTENSA_INS_AE_L32X2_RIP = 95,
    XTENSA_INS_AE_L32X2_X = 96,
    XTENSA_INS_AE_L32X2_XC = 97,
    XTENSA_INS_AE_L32X2_XP = 98,
    XTENSA_INS_AE_L32_I = 99,
    XTENSA_INS_AE_L32_IP = 100,
    XTENSA_INS_AE_L32_X = 101,
    XTENSA_INS_AE_L32_XC = 102,
    XTENSA_INS_AE_L32_XP = 103,
    XTENSA_INS_AE_L64_I = 104,
    XTENSA_INS_AE_L64_IP = 105,
    XTENSA_INS_AE_L64_X = 106,
    XTENSA_INS_AE_L64_XC = 107,
    XTENSA_INS_AE_L64_XP = 108,
    XTENSA_INS_AE_LA16X4NEG_PC = 109,
    XTENSA_INS_AE_LA16X4POS_PC = 110,
    XTENSA_INS_AE_LA16X4_IC = 111,
    XTENSA_INS_AE_LA16X4_IP = 112,
    XTENSA_INS_AE_LA16X4_RIC = 113,
    XTENSA_INS_AE_LA16X4_RIP = 114,
    XTENSA_INS_AE_LA24NEG_PC = 115,
    XTENSA_INS_AE_LA24POS_PC = 116,
    XTENSA_INS_AE_LA24X2NEG_PC = 117,
    XTENSA_INS_AE_LA24X2POS_PC = 118,
    XTENSA_INS_AE_LA24X2_IC = 119,
    XTENSA_INS_AE_LA24X2_IP = 120,
    XTENSA_INS_AE_LA24X2_RIC = 121,
    XTENSA_INS_AE_LA24X2_RIP = 122,
    XTENSA_INS_AE_LA24_IC = 123,
    XTENSA_INS_AE_LA24_IP = 124,
    XTENSA_INS_AE_LA24_RIC = 125,
    XTENSA_INS_AE_LA24_RIP = 126,
    XTENSA_INS_AE_LA32X2F24_IC = 127,
    XTENSA_INS_AE_LA32X2F24_IP = 128,
    XTENSA_INS_AE_LA32X2F24_RIC = 129,
    XTENSA_INS_AE_LA32X2F24_RIP = 130,
    XTENSA_INS_AE_LA32X2NEG_PC = 131,
    XTENSA_INS_AE_LA32X2POS_PC = 132,
    XTENSA_INS_AE_LA32X2_IC = 133,
    XTENSA_INS_AE_LA32X2_IP = 134,
    XTENSA_INS_AE_LA32X2_RIC = 135,
    XTENSA_INS_AE_LA32X2_RIP = 136,
    XTENSA_INS_AE_LA64_PP = 137,
    XTENSA_INS_AE_LALIGN64_I = 138,
    XTENSA_INS_AE_LB = 139,
    XTENSA_INS_AE_LBI = 140,
    XTENSA_INS_AE_LBK = 141,
    XTENSA_INS_AE_LBKI = 142,
    XTENSA_INS_AE_LBS = 143,
    XTENSA_INS_AE_LBSI = 144,
    XTENSA_INS_AE_LE16 = 145,
    XTENSA_INS_AE_LE32 = 146,
    XTENSA_INS_AE_LE64 = 147,
    XTENSA_INS_AE_LT16 = 148,
    XTENSA_INS_AE_LT32 = 149,
    XTENSA_INS_AE_LT64 = 150,
    XTENSA_INS_AE_MAX32 = 151,
    XTENSA_INS_AE_MAX64 = 152,
    XTENSA_INS_AE_MAXABS32S = 153,
    XTENSA_INS_AE_MAXABS64S = 154,
    XTENSA_INS_AE_MIN32 = 155,
    XTENSA_INS_AE_MIN64 = 156,
    XTENSA_INS_AE_MINABS32S = 157,
    XTENSA_INS_AE_MINABS64S = 158,
    XTENSA_INS_AE_MOV = 159,
    XTENSA_INS_AE_MOVAD16_0 = 160,
    XTENSA_INS_AE_MOVAD16_1 = 161,
    XTENSA_INS_AE_MOVAD16_2 = 162,
    XTENSA_INS_AE_MOVAD16_3 = 163,
    XTENSA_INS_AE_MOVAD32_H = 164,
    XTENSA_INS_AE_MOVAD32_L = 165,
    XTENSA_INS_AE_MOVALIGN = 166,
    XTENSA_INS_AE_MOVDA16 = 167,
    XTENSA_INS_AE_MOVDA16X2 = 168,
    XTENSA_INS_AE_MOVDA32 = 169,
    XTENSA_INS_AE_MOVDA32X2 = 170,
    XTENSA_INS_AE_MOVF16X4 = 171,
    XTENSA_INS_AE_MOVF32X2 = 172,
    XTENSA_INS_AE_MOVF64 = 173,
    XTENSA_INS_AE_MOVI = 174,
    XTENSA_INS_AE_MOVT16X4 = 175,
    XTENSA_INS_AE_MOVT32X2 = 176,
    XTENSA_INS_AE_MOVT64 = 177,
    XTENSA_INS_AE_MUL16X4 = 178,
    XTENSA_INS_AE_MUL32U_LL = 179,
    XTENSA_INS_AE_MUL32X16_H0 = 180,
    XTENSA_INS_AE_MUL32X16_H0_S2 = 181,
    XTENSA_INS_AE_MUL32X16_H1 = 182,
    XTENSA_INS_AE_MUL32X16_H1_S2 = 183,
    XTENSA_INS_AE_MUL32X16_H2 = 184,
    XTENSA_INS_AE_MUL32X16_H2_S2 = 185,
    XTENSA_INS_AE_MUL32X16_H3 = 186,
    XTENSA_INS_AE_MUL32X16_H3_S2 = 187,
    XTENSA_INS_AE_MUL32X16_L0 = 188,
    XTENSA_INS_AE_MUL32X16_L0_S2 = 189,
    XTENSA_INS_AE_MUL32X16_L1 = 190,
    XTENSA_INS_AE_MUL32X16_L1_S2 = 191,
    XTENSA_INS_AE_MUL32X16_L2 = 192,
    XTENSA_INS_AE_MUL32X16_L2_S2 = 193,
    XTENSA_INS_AE_MUL32X16_L3 = 194,
    XTENSA_INS_AE_MUL32X16_L3_S2 = 195,
    XTENSA_INS_AE_MUL32_HH = 196,
    XTENSA_INS_AE_MUL32_LH = 197,
    XTENSA_INS_AE_MUL32_LL = 198,
    XTENSA_INS_AE_MUL32_LL_S2 = 199,
    XTENSA_INS_AE_MULA16X4 = 200,
    XTENSA_INS_AE_MULA32U_LL = 201,
    XTENSA_INS_AE_MULA32X16_H0 = 202,
    XTENSA_INS_AE_MULA32X16_H0_S2 = 203,
    XTENSA_INS_AE_MULA32X16_H1 = 204,
    XTENSA_INS_AE_MULA32X16_H1_S2 = 205,
    XTENSA_INS_AE_MULA32X16_H2 = 206,
    XTENSA_INS_AE_MULA32X16_H2_S2 = 207,
    XTENSA_INS_AE_MULA32X16_H3 = 208,
    XTENSA_INS_AE_MULA32X16_H3_S2 = 209,
    XTENSA_INS_AE_MULA32X16_L0 = 210,
    XTENSA_INS_AE_MULA32X16_L0_S2 = 211,
    XTENSA_INS_AE_MULA32X16_L1 = 212,
    XTENSA_INS_AE_MULA32X16_L1_S2 = 213,
    XTENSA_INS_AE_MULA32X16_L2 = 214,
    XTENSA_INS_AE_MULA32X16_L2_S2 = 215,
    XTENSA_INS_AE_MULA32X16_L3 = 216,
    XTENSA_INS_AE_MULA32X16_L3_S2 = 217,
    XTENSA_INS_AE_MULA32_HH = 218,
    XTENSA_INS_AE_MULA32_LH = 219,
    XTENSA_INS_AE_MULA32_LL = 220,
    XTENSA_INS_AE_MULA32_LL_S2 = 221,
    XTENSA_INS_AE_MULAAD24_HH_LL = 222,
    XTENSA_INS_AE_MULAAD24_HH_LL_S2 = 223,
    XTENSA_INS_AE_MULAAD24_HL_LH = 224,
    XTENSA_INS_AE_MULAAD24_HL_LH_S2 = 225,
    XTENSA_INS_AE_MULAAD32X16_H0_L1 = 226,
    XTENSA_INS_AE_MULAAD32X16_H0_L1_S2 = 227,
    XTENSA_INS_AE_MULAAD32X16_H1_L0 = 228,
    XTENSA_INS_AE_MULAAD32X16_H1_L0_S2 = 229,
    XTENSA_INS_AE_MULAAD32X16_H2_L3 = 230,
    XTENSA_INS_AE_MULAAD32X16_H2_L3_S2 = 231,
    XTENSA_INS_AE_MULAAD32X16_H3_L2 = 232,
    XTENSA_INS_AE_MULAAD32X16_H3_L2_S2 = 233,
    XTENSA_INS_AE_MULAAFD16SS_11_00 = 234,
    XTENSA_INS_AE_MULAAFD16SS_11_00_S2 = 235,
    XTENSA_INS_AE_MULAAFD16SS_13_02 = 236,
    XTENSA_INS_AE_MULAAFD16SS_13_02_S2 = 237,
    XTENSA_INS_AE_MULAAFD16SS_33_22 = 238,
    XTENSA_INS_AE_MULAAFD16SS_33_22_S2 = 239,
    XTENSA_INS_AE_MULAAFD24_HH_LL = 240,
    XTENSA_INS_AE_MULAAFD24_HH_LL_S2 = 241,
    XTENSA_INS_AE_MULAAFD24_HL_LH = 242,
    XTENSA_INS_AE_MULAAFD24_HL_LH_S2 = 243,
    XTENSA_INS_AE_MULAAFD32X16_H0_L1 = 244,
    XTENSA_INS_AE_MULAAFD32X16_H0_L1_S2 = 245,
    XTENSA_INS_AE_MULAAFD32X16_H1_L0 = 246,
    XTENSA_INS_AE_MULAAFD32X16_H1_L0_S2 = 247,
    XTENSA_INS_AE_MULAAFD32X16_H2_L3 = 248,
    XTENSA_INS_AE_MULAAFD32X16_H2_L3_S2 = 249,
    XTENSA_INS_AE_MULAAFD32X16_H3_L2 = 250,
    XTENSA_INS_AE_MULAAFD32X16_H3_L2_S2 = 251,
    XTENSA_INS_AE_MULAC24 = 252,
    XTENSA_INS_AE_MULAC32X16_H = 253,
    XTENSA_INS_AE_MULAC32X16_L = 254,
    XTENSA_INS_AE_MULAF16SS_00 = 255,
    XTENSA_INS_AE_MULAF16SS_00_S2 = 256,
    XTENSA_INS_AE_MULAF16SS_10 = 257,
    XTENSA_INS_AE_MULAF16SS_11 = 258,
    XTENSA_INS_AE_MULAF16SS_20 = 259,
    XTENSA_INS_AE_MULAF16SS_21 = 260,
    XTENSA_INS_AE_MULAF16SS_22 = 261,
    XTENSA_INS_AE_MULAF16SS_30 = 262,
    XTENSA_INS_AE_MULAF16SS_31 = 263,
    XTENSA_INS_AE_MULAF16SS_32 = 264,
    XTENSA_INS_AE_MULAF16SS_33 = 265,
    XTENSA_INS_AE_MULAF16X4SS = 266,
    XTENSA_INS_AE_MULAF32R_HH = 267,
    XTENSA_INS_AE_MULAF32R_LH = 268,
    XTENSA_INS_AE_MULAF32R_LL = 269,
    XTENSA_INS_AE_MULAF32R_LL_S2 = 270,
    XTENSA_INS_AE_MULAF32S_HH = 271,
    XTENSA_INS_AE_MULAF32S_LH = 272,
    XTENSA_INS_AE_MULAF32S_LL = 273,
    XTENSA_INS_AE_MULAF32S_LL_S2 = 274,
    XTENSA_INS_AE_MULAF32X16_H0 = 275,
    XTENSA_INS_AE_MULAF32X16_H0_S2 = 276,
    XTENSA_INS_AE_MULAF32X16_H1 = 277,
    XTENSA_INS_AE_MULAF32X16_H1_S2 = 278,
    XTENSA_INS_AE_MULAF32X16_H2 = 279,
    XTENSA_INS_AE_MULAF32X16_H2_S2 = 280,
    XTENSA_INS_AE_MULAF32X16_H3 = 281,
    XTENSA_INS_AE_MULAF32X16_H3_S2 = 282,
    XTENSA_INS_AE_MULAF32X16_L0 = 283,
    XTENSA_INS_AE_MULAF32X16_L0_S2 = 284,
    XTENSA_INS_AE_MULAF32X16_L1 = 285,
    XTENSA_INS_AE_MULAF32X16_L1_S2 = 286,
    XTENSA_INS_AE_MULAF32X16_L2 = 287,
    XTENSA_INS_AE_MULAF32X16_L2_S2 = 288,
    XTENSA_INS_AE_MULAF32X16_L3 = 289,
    XTENSA_INS_AE_MULAF32X16_L3_S2 = 290,
    XTENSA_INS_AE_MULAF48Q32SP16S_L = 291,
    XTENSA_INS_AE_MULAF48Q32SP16S_L_S2 = 292,
    XTENSA_INS_AE_MULAF48Q32SP16U_L = 293,
    XTENSA_INS_AE_MULAF48Q32SP16U_L_S2 = 294,
    XTENSA_INS_AE_MULAFC24RA = 295,
    XTENSA_INS_AE_MULAFC32X16RAS_H = 296,
    XTENSA_INS_AE_MULAFC32X16RAS_L = 297,
    XTENSA_INS_AE_MULAFD24X2_FIR_H = 298,
    XTENSA_INS_AE_MULAFD24X2_FIR_L = 299,
    XTENSA_INS_AE_MULAFD32X16X2_FIR_HH = 300,
    XTENSA_INS_AE_MULAFD32X16X2_FIR_HL = 301,
    XTENSA_INS_AE_MULAFD32X16X2_FIR_LH = 302,
    XTENSA_INS_AE_MULAFD32X16X2_FIR_LL = 303,
    XTENSA_INS_AE_MULAFP24X2R = 304,
    XTENSA_INS_AE_MULAFP24X2RA = 305,
    XTENSA_INS_AE_MULAFP24X2RA_S2 = 306,
    XTENSA_INS_AE_MULAFP24X2R_S2 = 307,
    XTENSA_INS_AE_MULAFP32X16X2RAS_H = 308,
    XTENSA_INS_AE_MULAFP32X16X2RAS_H_S2 = 309,
    XTENSA_INS_AE_MULAFP32X16X2RAS_L = 310,
    XTENSA_INS_AE_MULAFP32X16X2RAS_L_S2 = 311,
    XTENSA_INS_AE_MULAFP32X16X2RS_H = 312,
    XTENSA_INS_AE_MULAFP32X16X2RS_H_S2 = 313,
    XTENSA_INS_AE_MULAFP32X16X2RS_L = 314,
    XTENSA_INS_AE_MULAFP32X16X2RS_L_S2 = 315,
    XTENSA_INS_AE_MULAFP32X2RAS = 316,
    XTENSA_INS_AE_MULAFP32X2RS = 317,
    XTENSA_INS_AE_MULAFQ32SP24S_H_S2 = 318,
    XTENSA_INS_AE_MULAFQ32SP24S_L_S2 = 319,
    XTENSA_INS_AE_MULAP24X2 = 320,
    XTENSA_INS_AE_MULAP24X2_S2 = 321,
    XTENSA_INS_AE_MULAP32X16X2_H = 322,
    XTENSA_INS_AE_MULAP32X16X2_L = 323,
    XTENSA_INS_AE_MULAP32X2 = 324,
    XTENSA_INS_AE_MULAQ32SP16S_L_S2 = 325,
    XTENSA_INS_AE_MULAQ32SP16U_L_S2 = 326,
    XTENSA_INS_AE_MULARFQ32SP24S_H_S2 = 327,
    XTENSA_INS_AE_MULARFQ32SP24S_L_S2 = 328,
    XTENSA_INS_AE_MULAS32F48P16S_HH = 329,
    XTENSA_INS_AE_MULAS32F48P16S_HH_S2 = 330,
    XTENSA_INS_AE_MULAS32F48P16S_LH = 331,
    XTENSA_INS_AE_MULAS32F48P16S_LH_S2 = 332,
    XTENSA_INS_AE_MULAS32F48P16S_LL = 333,
    XTENSA_INS_AE_MULAS32F48P16S_LL_S2 = 334,
    XTENSA_INS_AE_MULASD24_HH_LL = 335,
    XTENSA_INS_AE_MULASD24_HH_LL_S2 = 336,
    XTENSA_INS_AE_MULASD24_HL_LH = 337,
    XTENSA_INS_AE_MULASD24_HL_LH_S2 = 338,
    XTENSA_INS_AE_MULASD32X16_H1_L0 = 339,
    XTENSA_INS_AE_MULASD32X16_H1_L0_S2 = 340,
    XTENSA_INS_AE_MULASD32X16_H3_L2 = 341,
    XTENSA_INS_AE_MULASD32X16_H3_L2_S2 = 342,
    XTENSA_INS_AE_MULASFD24_HH_LL = 343,
    XTENSA_INS_AE_MULASFD24_HH_LL_S2 = 344,
    XTENSA_INS_AE_MULASFD24_HL_LH = 345,
    XTENSA_INS_AE_MULASFD24_HL_LH_S2 = 346,
    XTENSA_INS_AE_MULASFD32X16_H1_L0 = 347,
    XTENSA_INS_AE_MULASFD32X16_H1_L0_S2 = 348,
    XTENSA_INS_AE_MULASFD32X16_H3_L2 = 349,
    XTENSA_INS_AE_MULASFD32X16_H3_L2_S2 = 350,
    XTENSA_INS_AE_MULC24 = 351,
    XTENSA_INS_AE_MULC32X16_H = 352,
    XTENSA_INS_AE_MULC32X16_L = 353,
    XTENSA_INS_AE_MULF16SS_00 = 354,
    XTENSA_INS_AE_MULF16SS_00_S2 = 355,
    XTENSA_INS_AE_MULF16SS_10 = 356,
    XTENSA_INS_AE_MULF16SS_11 = 357,
    XTENSA_INS_AE_MULF16SS_20 = 358,
    XTENSA_INS_AE_MULF16SS_21 = 359,
    XTENSA_INS_AE_MULF16SS_22 = 360,
    XTENSA_INS_AE_MULF16SS_30 = 361,
    XTENSA_INS_AE_MULF16SS_31 = 362,
    XTENSA_INS_AE_MULF16SS_32 = 363,
    XTENSA_INS_AE_MULF16SS_33 = 364,
    XTENSA_INS_AE_MULF16X4SS = 365,
    XTENSA_INS_AE_MULF32R_HH = 366,
    XTENSA_INS_AE_MULF32R_LH = 367,
    XTENSA_INS_AE_MULF32R_LL = 368,
    XTENSA_INS_AE_MULF32R_LL_S2 = 369,
    XTENSA_INS_AE_MULF32S_HH = 370,
    XTENSA_INS_AE_MULF32S_LH = 371,
    XTENSA_INS_AE_MULF32S_LL = 372,
    XTENSA_INS_AE_MULF32S_LL_S2 = 373,
    XTENSA_INS_AE_MULF32X16_H0 = 374,
    XTENSA_INS_AE_MULF32X16_H0_S2 = 375,
    XTENSA_INS_AE_MULF32X16_H1 = 376,
    XTENSA_INS_AE_MULF32X16_H1_S2 = 377,
    XTENSA_INS_AE_MULF32X16_H2 = 378,
    XTENSA_INS_AE_MULF32X16_H2_S2 = 379,
    XTENSA_INS_AE_MULF32X16_H3 = 380,
    XTENSA_INS_AE_MULF32X16_H3_S2 = 381,
    XTENSA_INS_AE_MULF32X16_L0 = 382,
    XTENSA_INS_AE_MULF32X16_L0_S2 = 383,
    XTENSA_INS_AE_MULF32X16_L1 = 384,
    XTENSA_INS_AE_MULF32X16_L1_S2 = 385,
    XTENSA_INS_AE_MULF32X16_L2 = 386,
    XTENSA_INS_AE_MULF32X16_L2_S2 = 387,
    XTENSA_INS_AE_MULF32X16_L3 = 388,
    XTENSA_INS_AE_MULF32X16_L3_S2 = 389,
    XTENSA_INS_AE_MULF48Q32SP16S_L = 390,
    XTENSA_INS_AE_MULF48Q32SP16S_L_S2 = 391,
    XTENSA_INS_AE_MULF48Q32SP16U_L = 392,
    XTENSA_INS_AE_MULF48Q32SP16U_L_S2 = 393,
    XTENSA_INS_AE_MULFC24RA = 394,
    XTENSA_INS_AE_MULFC32X16RAS_H = 395,
    XTENSA_INS_AE_MULFC32X16RAS_L = 396,
    XTENSA_INS_AE_MULFD24X2_FIR_H = 397,
    XTENSA_INS_AE_MULFD24X2_FIR_L = 398,
    XTENSA_INS_AE_MULFD32X16X2_FIR_HH = 399,
    XTENSA_INS_AE_MULFD32X16X2_FIR_HL = 400,
    XTENSA_INS_AE_MULFD32X16X2_FIR_LH = 401,
    XTENSA_INS_AE_MULFD32X16X2_FIR_LL = 402,
    XTENSA_INS_AE_MULFP16X4RAS = 403,
    XTENSA_INS_AE_MULFP16X4S = 404,
    XTENSA_INS_AE_MULFP24X2R = 405,
    XTENSA_INS_AE_MULFP24X2RA = 406,
    XTENSA_INS_AE_MULFP24X2RA_S2 = 407,
    XTENSA_INS_AE_MULFP24X2R_S2 = 408,
    XTENSA_INS_AE_MULFP32X16X2RAS_H = 409,
    XTENSA_INS_AE_MULFP32X16X2RAS_H_S2 = 410,
    XTENSA_INS_AE_MULFP32X16X2RAS_L = 411,
    XTENSA_INS_AE_MULFP32X16X2RAS_L_S2 = 412,
    XTENSA_INS_AE_MULFP32X16X2RS_H = 413,
    XTENSA_INS_AE_MULFP32X16X2RS_H_S2 = 414,
    XTENSA_INS_AE_MULFP32X16X2RS_L = 415,
    XTENSA_INS_AE_MULFP32X16X2RS_L_S2 = 416,
    XTENSA_INS_AE_MULFP32X2RAS = 417,
    XTENSA_INS_AE_MULFP32X2RS = 418,
    XTENSA_INS_AE_MULFQ32SP24S_H_S2 = 419,
    XTENSA_INS_AE_MULFQ32SP24S_L_S2 = 420,
    XTENSA_INS_AE_MULP24X2 = 421,
    XTENSA_INS_AE_MULP24X2_S2 = 422,
    XTENSA_INS_AE_MULP32X16X2_H = 423,
    XTENSA_INS_AE_MULP32X16X2_L = 424,
    XTENSA_INS_AE_MULP32X2 = 425,
    XTENSA_INS_AE_MULQ32SP16S_L_S2 = 426,
    XTENSA_INS_AE_MULQ32SP16U_L_S2 = 427,
    XTENSA_INS_AE_MULRFQ32SP24S_H_S2 = 428,
    XTENSA_INS_AE_MULRFQ32SP24S_L_S2 = 429,
    XTENSA_INS_AE_MULS16X4 = 430,
    XTENSA_INS_AE_MULS32F48P16S_HH = 431,
    XTENSA_INS_AE_MULS32F48P16S_HH_S2 = 432,
    XTENSA_INS_AE_MULS32F48P16S_LH = 433,
    XTENSA_INS_AE_MULS32F48P16S_LH_S2 = 434,
    XTENSA_INS_AE_MULS32F48P16S_LL = 435,
    XTENSA_INS_AE_MULS32F48P16S_LL_S2 = 436,
    XTENSA_INS_AE_MULS32U_LL = 437,
    XTENSA_INS_AE_MULS32X16_H0 = 438,
    XTENSA_INS_AE_MULS32X16_H0_S2 = 439,
    XTENSA_INS_AE_MULS32X16_H1 = 440,
    XTENSA_INS_AE_MULS32X16_H1_S2 = 441,
    XTENSA_INS_AE_MULS32X16_H2 = 442,
    XTENSA_INS_AE_MULS32X16_H2_S2 = 443,
    XTENSA_INS_AE_MULS32X16_H3 = 444,
    XTENSA_INS_AE_MULS32X16_H3_S2 = 445,
    XTENSA_INS_AE_MULS32X16_L0 = 446,
    XTENSA_INS_AE_MULS32X16_L0_S2 = 447,
    XTENSA_INS_AE_MULS32X16_L1 = 448,
    XTENSA_INS_AE_MULS32X16_L1_S2 = 449,
    XTENSA_INS_AE_MULS32X16_L2 = 450,
    XTENSA_INS_AE_MULS32X16_L2_S2 = 451,
    XTENSA_INS_AE_MULS32X16_L3 = 452,
    XTENSA_INS_AE_MULS32X16_L3_S2 = 453,
    XTENSA_INS_AE_MULS32_HH = 454,
    XTENSA_INS_AE_MULS32_LH = 455,
    XTENSA_INS_AE_MULS32_LL = 456,
    XTENSA_INS_AE_MULSAD24_HH_LL = 457,
    XTENSA_INS_AE_MULSAD24_HH_LL_S2 = 458,
    XTENSA_INS_AE_MULSAD32X16_H1_L0 = 459,
    XTENSA_INS_AE_MULSAD32X16_H1_L0_S2 = 460,
    XTENSA_INS_AE_MULSAD32X16_H3_L2 = 461,
    XTENSA_INS_AE_MULSAD32X16_H3_L2_S2 = 462,
    XTENSA_INS_AE_MULSAFD24_HH_LL = 463,
    XTENSA_INS_AE_MULSAFD24_HH_LL_S2 = 464,
    XTENSA_INS_AE_MULSAFD32X16_H1_L0 = 465,
    XTENSA_INS_AE_MULSAFD32X16_H1_L0_S2 = 466,
    XTENSA_INS_AE_MULSAFD32X16_H3_L2 = 467,
    XTENSA_INS_AE_MULSAFD32X16_H3_L2_S2 = 468,
    XTENSA_INS_AE_MULSF16SS_00 = 469,
    XTENSA_INS_AE_MULSF16SS_00_S2 = 470,
    XTENSA_INS_AE_MULSF16SS_10 = 471,
    XTENSA_INS_AE_MULSF16SS_11 = 472,
    XTENSA_INS_AE_MULSF16SS_20 = 473,
    XTENSA_INS_AE_MULSF16SS_21 = 474,
    XTENSA_INS_AE_MULSF16SS_22 = 475,
    XTENSA_INS_AE_MULSF16SS_30 = 476,
    XTENSA_INS_AE_MULSF16SS_31 = 477,
    XTENSA_INS_AE_MULSF16SS_32 = 478,
    XTENSA_INS_AE_MULSF16SS_33 = 479,
    XTENSA_INS_AE_MULSF16X4SS = 480,
    XTENSA_INS_AE_MULSF32R_HH = 481,
    XTENSA_INS_AE_MULSF32R_LH = 482,
    XTENSA_INS_AE_MULSF32R_LL = 483,
    XTENSA_INS_AE_MULSF32R_LL_S2 = 484,
    XTENSA_INS_AE_MULSF32S_HH = 485,
    XTENSA_INS_AE_MULSF32S_LH = 486,
    XTENSA_INS_AE_MULSF32S_LL = 487,
    XTENSA_INS_AE_MULSF32X16_H0 = 488,
    XTENSA_INS_AE_MULSF32X16_H0_S2 = 489,
    XTENSA_INS_AE_MULSF32X16_H1 = 490,
    XTENSA_INS_AE_MULSF32X16_H1_S2 = 491,
    XTENSA_INS_AE_MULSF32X16_H2 = 492,
    XTENSA_INS_AE_MULSF32X16_H2_S2 = 493,
    XTENSA_INS_AE_MULSF32X16_H3 = 494,
    XTENSA_INS_AE_MULSF32X16_H3_S2 = 495,
    XTENSA_INS_AE_MULSF32X16_L0 = 496,
    XTENSA_INS_AE_MULSF32X16_L0_S2 = 497,
    XTENSA_INS_AE_MULSF32X16_L1 = 498,
    XTENSA_INS_AE_MULSF32X16_L1_S2 = 499,
    XTENSA_INS_AE_MULSF32X16_L2 = 500,
    XTENSA_INS_AE_MULSF32X16_L2_S2 = 501,
    XTENSA_INS_AE_MULSF32X16_L3 = 502,
    XTENSA_INS_AE_MULSF32X16_L3_S2 = 503,
    XTENSA_INS_AE_MULSF48Q32SP16S_L = 504,
    XTENSA_INS_AE_MULSF48Q32SP16S_L_S2 = 505,
    XTENSA_INS_AE_MULSF48Q32SP16U_L = 506,
    XTENSA_INS_AE_MULSF48Q32SP16U_L_S2 = 507,
    XTENSA_INS_AE_MULSFP24X2R = 508,
    XTENSA_INS_AE_MULSFP24X2RA = 509,
    XTENSA_INS_AE_MULSFP24X2RA_S2 = 510,
    XTENSA_INS_AE_MULSFP24X2R_S2 = 511,
    XTENSA_INS_AE_MULSFP32X16X2RAS_H = 512,
    XTENSA_INS_AE_MULSFP32X16X2RAS_H_S2 = 513,
    XTENSA_INS_AE_MULSFP32X16X2RAS_L = 514,
    XTENSA_INS_AE_MULSFP32X16X2RAS_L_S2 = 515,
    XTENSA_INS_AE_MULSFP32X16X2RS_H = 516,
    XTENSA_INS_AE_MULSFP32X16X2RS_H_S2 = 517,
    XTENSA_INS_AE_MULSFP32X16X2RS_L = 518,
    XTENSA_INS_AE_MULSFP32X16X2RS_L_S2 = 519,
    XTENSA_INS_AE_MULSFP32X2RAS = 520,
    XTENSA_INS_AE_MULSFP32X2RS = 521,
    XTENSA_INS_AE_MULSFQ32SP24S_H_S2 = 522,
    XTENSA_INS_AE_MULSFQ32SP24S_L_S2 = 523,
    XTENSA_INS_AE_MULSP24X2 = 524,
    XTENSA_INS_AE_MULSP24X2_S2 = 525,
    XTENSA_INS_AE_MULSP32X16X2_H = 526,
    XTENSA_INS_AE_MULSP32X16X2_L = 527,
    XTENSA_INS_AE_MULSP32X2 = 528,
    XTENSA_INS_AE_MULSQ32SP16S_L_S2 = 529,
    XTENSA_INS_AE_MULSQ32SP16U_L_S2 = 530,
    XTENSA_INS_AE_MULSRFQ32SP24S_H_S2 = 531,
    XTENSA_INS_AE_MULSRFQ32SP24S_L_S2 = 532,
    XTENSA_INS_AE_MULSS32F48P16S_HH = 533,
    XTENSA_INS_AE_MULSS32F48P16S_HH_S2 = 534,
    XTENSA_INS_AE_MULSS32F48P16S_LH = 535,
    XTENSA_INS_AE_MULSS32F48P16S_LH_S2 = 536,
    XTENSA_INS_AE_MULSS32F48P16S_LL = 537,
    XTENSA_INS_AE_MULSS32F48P16S_LL_S2 = 538,
    XTENSA_INS_AE_MULSSD24_HH_LL = 539,
    XTENSA_INS_AE_MULSSD24_HH_LL_S2 = 540,
    XTENSA_INS_AE_MULSSD24_HL_LH = 541,
    XTENSA_INS_AE_MULSSD24_HL_LH_S2 = 542,
    XTENSA_INS_AE_MULSSD32X16_H1_L0 = 543,
    XTENSA_INS_AE_MULSSD32X16_H1_L0_S2 = 544,
    XTENSA_INS_AE_MULSSD32X16_H3_L2 = 545,
    XTENSA_INS_AE_MULSSD32X16_H3_L2_S2 = 546,
    XTENSA_INS_AE_MULSSFD16SS_11_00 = 547,
    XTENSA_INS_AE_MULSSFD16SS_11_00_S2 = 548,
    XTENSA_INS_AE_MULSSFD16SS_13_02 = 549,
    XTENSA_INS_AE_MULSSFD16SS_13_02_S2 = 550,
    XTENSA_INS_AE_MULSSFD16SS_33_22 = 551,
    XTENSA_INS_AE_MULSSFD16SS_33_22_S2 = 552,
    XTENSA_INS_AE_MULSSFD24_HH_LL = 553,
    XTENSA_INS_AE_MULSSFD24_HH_LL_S2 = 554,
    XTENSA_INS_AE_MULSSFD24_HL_LH = 555,
    XTENSA_INS_AE_MULSSFD24_HL_LH_S2 = 556,
    XTENSA_INS_AE_MULSSFD32X16_H1_L0 = 557,
    XTENSA_INS_AE_MULSSFD32X16_H1_L0_S2 = 558,
    XTENSA_INS_AE_MULSSFD32X16_H3_L2 = 559,
    XTENSA_INS_AE_MULSSFD32X16_H3_L2_S2 = 560,
    XTENSA_INS_AE_MULZAAD24_HH_LL = 561,
    XTENSA_INS_AE_MULZAAD24_HH_LL_S2 = 562,
    XTENSA_INS_AE_MULZAAD24_HL_LH = 563,
    XTENSA_INS_AE_MULZAAD24_HL_LH_S2 = 564,
    XTENSA_INS_AE_MULZAAD32X16_H0_L1 = 565,
    XTENSA_INS_AE_MULZAAD32X16_H0_L1_S2 = 566,
    XTENSA_INS_AE_MULZAAD32X16_H1_L0 = 567,
    XTENSA_INS_AE_MULZAAD32X16_H1_L0_S2 = 568,
    XTENSA_INS_AE_MULZAAD32X16_H2_L3 = 569,
    XTENSA_INS_AE_MULZAAD32X16_H2_L3_S2 = 570,
    XTENSA_INS_AE_MULZAAD32X16_H3_L2 = 571,
    XTENSA_INS_AE_MULZAAD32X16_H3_L2_S2 = 572,
    XTENSA_INS_AE_MULZAAFD16SS_11_00 = 573,
    XTENSA_INS_AE_MULZAAFD16SS_11_00_S2 = 574,
    XTENSA_INS_AE_MULZAAFD16SS_13_02 = 575,
    XTENSA_INS_AE_MULZAAFD16SS_13_02_S2 = 576,
    XTENSA_INS_AE_MULZAAFD16SS_33_22 = 577,
    XTENSA_INS_AE_MULZAAFD16SS_33_22_S2 = 578,
    XTENSA_INS_AE_MULZAAFD24_HH_LL = 579,
    XTENSA_INS_AE_MULZAAFD24_HH_LL_S2 = 580,
    XTENSA_INS_AE_MULZAAFD24_HL_LH = 581,
    XTENSA_INS_AE_MULZAAFD24_HL_LH_S2 = 582,
    XTENSA_INS_AE_MULZAAFD32X16_H0_L1 = 583,
    XTENSA_INS_AE_MULZAAFD32X16_H0_L1_S2 = 584,
    XTENSA_INS_AE_MULZAAFD32X16_H1_L0 = 585,
    XTENSA_INS_AE_MULZAAFD32X16_H1_L0_S2 = 586,
    XTENSA_INS_AE_MULZAAFD32X16_H2_L3 = 587,
    XTENSA_INS_AE_MULZAAFD32X16_H2_L3_S2 = 588,
    XTENSA_INS_AE_MULZAAFD32X16_H3_L2 = 589,
    XTENSA_INS_AE_MULZAAFD32X16_H3_L2_S2 = 590,
    XTENSA_INS_AE_MULZASD24_HH_LL = 591,
    XTENSA_INS_AE_MULZASD24_HH_LL_S2 = 592,
    XTENSA_INS_AE_MULZASD24_HL_LH = 593,
    XTENSA_INS_AE_MULZASD24_HL_LH_S2 = 594,
    XTENSA_INS_AE_MULZASD32X16_H1_L0 = 595,
    XTENSA_INS_AE_MULZASD32X16_H1_L0_S2 = 596,
    XTENSA_INS_AE_MULZASD32X16_H3_L2 = 597,
    XTENSA_INS_AE_MULZASD32X16_H3_L2_S2 = 598,
    XTENSA_INS_AE_MULZASFD24_HH_LL = 599,
    XTENSA_INS_AE_MULZASFD24_HH_LL_S2 = 600,
    XTENSA_INS_AE_MULZASFD24_HL_LH = 601,
    XTENSA_INS_AE_MULZASFD24_HL_LH_S2 = 602,
    XTENSA_INS_AE_MULZASFD32X16_H1_L0 = 603,
    XTENSA_INS_AE_MULZASFD32X16_H1_L0_S2 = 604,
    XTENSA_INS_AE_MULZASFD32X16_H3_L2 = 605,
    XTENSA_INS_AE_MULZASFD32X16_H3_L2_S2 = 606,
    XTENSA_INS_AE_MULZSAD24_HH_LL = 607,
    XTENSA_INS_AE_MULZSAD24_HH_LL_S2 = 608,
    XTENSA_INS_AE_MULZSAD32X16_H1_L0 = 609,
    XTENSA_INS_AE_MULZSAD32X16_H1_L0_S2 = 610,
    XTENSA_INS_AE_MULZSAD32X16_H3_L2 = 611,
    XTENSA_INS_AE_MULZSAD32X16_H3_L2_S2 = 612,
    XTENSA_INS_AE_MULZSAFD24_HH_LL = 613,
    XTENSA_INS_AE_MULZSAFD24_HH_LL_S2 = 614,
    XTENSA_INS_AE_MULZSAFD32X16_H1_L0 = 615,
    XTENSA_INS_AE_MULZSAFD32X16_H1_L0_S2 = 616,
    XTENSA_INS_AE_MULZSAFD32X16_H3_L2 = 617,
    XTENSA_INS_AE_MULZSAFD32X16_H3_L2_S2 = 618,
    XTENSA_INS_AE_MULZSSD24_HH_LL = 619,
    XTENSA_INS_AE_MULZSSD24_HH_LL_S2 = 620,
    XTENSA_INS_AE_MULZSSD24_HL_LH = 621,
    XTENSA_INS_AE_MULZSSD24_HL_LH_S2 = 622,
    XTENSA_INS_AE_MULZSSD32X16_H1_L0 = 623,
    XTENSA_INS_AE_MULZSSD32X16_H1_L0_S2 = 624,
    XTENSA_INS_AE_MULZSSD32X16_H3_L2 = 625,
    XTENSA_INS_AE_MULZSSD32X16_H3_L2_S2 = 626,
    XTENSA_INS_AE_MULZSSFD16SS_11_00 = 627,
    XTENSA_INS_AE_MULZSSFD16SS_11_00_S2 = 628,
    XTENSA_INS_AE_MULZSSFD16SS_13_02 = 629,
    XTENSA_INS_AE_MULZSSFD16SS_13_02_S2 = 630,
    XTENSA_INS_AE_MULZSSFD16SS_33_22 = 631,
    XTENSA_INS_AE_MULZSSFD16SS_33_22_S2 = 632,
    XTENSA_INS_AE_MULZSSFD24_HH_LL = 633,
    XTENSA_INS_AE_MULZSSFD24_HH_LL_S2 = 634,
    XTENSA_INS_AE_MULZSSFD24_HL_LH = 635,
    XTENSA_INS_AE_MULZSSFD24_HL_LH_S2 = 636,
    XTENSA_INS_AE_MULZSSFD32X16_H1_L0 = 637,
    XTENSA_INS_AE_MULZSSFD32X16_H1_L0_S2 = 638,
    XTENSA_INS_AE_MULZSSFD32X16_H3_L2 = 639,
    XTENSA_INS_AE_MULZSSFD32X16_H3_L2_S2 = 640,
    XTENSA_INS_AE_NAND = 641,
    XTENSA_INS_AE_NEG16S = 642,
    XTENSA_INS_AE_NEG24S = 643,
    XTENSA_INS_AE_NEG32 = 644,
    XTENSA_INS_AE_NEG32S = 645,
    XTENSA_INS_AE_NEG64 = 646,
    XTENSA_INS_AE_NEG64S = 647,
    XTENSA_INS_AE_NSA64 = 648,
    XTENSA_INS_AE_NSAZ16_0 = 649,
    XTENSA_INS_AE_NSAZ32_L = 650,
    XTENSA_INS_AE_OR = 651,
    XTENSA_INS_AE_PKSR24 = 652,
    XTENSA_INS_AE_PKSR32 = 653,
    XTENSA_INS_AE_ROUND16X4F32SASYM = 654,
    XTENSA_INS_AE_ROUND16X4F32SSYM = 655,
    XTENSA_INS_AE_ROUND24X2F48SASYM = 656,
    XTENSA_INS_AE_ROUND24X2F48SSYM = 657,
    XTENSA_INS_AE_ROUND32X2F48SASYM = 658,
    XTENSA_INS_AE_ROUND32X2F48SSYM = 659,
    XTENSA_INS_AE_ROUND32X2F64SASYM = 660,
    XTENSA_INS_AE_ROUND32X2F64SSYM = 661,
    XTENSA_INS_AE_ROUNDSP16F24ASYM = 662,
    XTENSA_INS_AE_ROUNDSP16F24SYM = 663,
    XTENSA_INS_AE_ROUNDSP16Q48X2ASYM = 664,
    XTENSA_INS_AE_ROUNDSP16Q48X2SYM = 665,
    XTENSA_INS_AE_ROUNDSQ32F48ASYM = 666,
    XTENSA_INS_AE_ROUNDSQ32F48SYM = 667,
    XTENSA_INS_AE_S16M_L_I = 668,
    XTENSA_INS_AE_S16M_L_IU = 669,
    XTENSA_INS_AE_S16M_L_X = 670,
    XTENSA_INS_AE_S16M_L_XC = 671,
    XTENSA_INS_AE_S16M_L_XU = 672,
    XTENSA_INS_AE_S16X2M_I = 673,
    XTENSA_INS_AE_S16X2M_IU = 674,
    XTENSA_INS_AE_S16X2M_X = 675,
    XTENSA_INS_AE_S16X2M_XC = 676,
    XTENSA_INS_AE_S16X2M_XU = 677,
    XTENSA_INS_AE_S16X4_I = 678,
    XTENSA_INS_AE_S16X4_IP = 679,
    XTENSA_INS_AE_S16X4_RIC = 680,
    XTENSA_INS_AE_S16X4_RIP = 681,
    XTENSA_INS_AE_S16X4_X = 682,
    XTENSA_INS_AE_S16X4_XC = 683,
    XTENSA_INS_AE_S16X4_XP = 684,
    XTENSA_INS_AE_S16_0_I = 685,
    XTENSA_INS_AE_S16_0_IP = 686,
    XTENSA_INS_AE_S16_0_X = 687,
    XTENSA_INS_AE_S16_0_XC = 688,
    XTENSA_INS_AE_S16_0_XP = 689,
    XTENSA_INS_AE_S24RA64S_I = 690,
    XTENSA_INS_AE_S24RA64S_IP = 691,
    XTENSA_INS_AE_S24RA64S_X = 692,
    XTENSA_INS_AE_S24RA64S_XC = 693,
    XTENSA_INS_AE_S24RA64S_XP = 694,
    XTENSA_INS_AE_S24X2RA64S_IP = 695,
    XTENSA_INS_AE_S32F24_L_I = 696,
    XTENSA_INS_AE_S32F24_L_IP = 697,
    XTENSA_INS_AE_S32F24_L_X = 698,
    XTENSA_INS_AE_S32F24_L_XC = 699,
    XTENSA_INS_AE_S32F24_L_XP = 700,
    XTENSA_INS_AE_S32M_I = 701,
    XTENSA_INS_AE_S32M_IU = 702,
    XTENSA_INS_AE_S32M_X = 703,
    XTENSA_INS_AE_S32M_XC = 704,
    XTENSA_INS_AE_S32M_XU = 705,
    XTENSA_INS_AE_S32RA64S_I = 706,
    XTENSA_INS_AE_S32RA64S_IP = 707,
    XTENSA_INS_AE_S32RA64S_X = 708,
    XTENSA_INS_AE_S32RA64S_XC = 709,
    XTENSA_INS_AE_S32RA64S_XP = 710,
    XTENSA_INS_AE_S32X2F24_I = 711,
    XTENSA_INS_AE_S32X2F24_IP = 712,
    XTENSA_INS_AE_S32X2F24_RIC = 713,
    XTENSA_INS_AE_S32X2F24_RIP = 714,
    XTENSA_INS_AE_S32X2F24_X = 715,
    XTENSA_INS_AE_S32X2F24_XC = 716,
    XTENSA_INS_AE_S32X2F24_XP = 717,
    XTENSA_INS_AE_S32X2RA64S_IP = 718,
    XTENSA_INS_AE_S32X2_I = 719,
    XTENSA_INS_AE_S32X2_IP = 720,
    XTENSA_INS_AE_S32X2_RIC = 721,
    XTENSA_INS_AE_S32X2_RIP = 722,
    XTENSA_INS_AE_S32X2_X = 723,
    XTENSA_INS_AE_S32X2_XC = 724,
    XTENSA_INS_AE_S32X2_XP = 725,
    XTENSA_INS_AE_S32_L_I = 726,
    XTENSA_INS_AE_S32_L_IP = 727,
    XTENSA_INS_AE_S32_L_X = 728,
    XTENSA_INS_AE_S32_L_XC = 729,
    XTENSA_INS_AE_S32_L_XP = 730,
    XTENSA_INS_AE_S64_I = 731,
    XTENSA_INS_AE_S64_IP = 732,
    XTENSA_INS_AE_S64_X = 733,
    XTENSA_INS_AE_S64_XC = 734,
    XTENSA_INS_AE_S64_XP = 735,
    XTENSA_INS_AE_SA16X4_IC = 736,
    XTENSA_INS_AE_SA16X4_IP = 737,
    XTENSA_INS_AE_SA16X4_RIC = 738,
    XTENSA_INS_AE_SA16X4_RIP = 739,
    XTENSA_INS_AE_SA24X2_IC = 740,
    XTENSA_INS_AE_SA24X2_IP = 741,
    XTENSA_INS_AE_SA24X2_RIC = 742,
    XTENSA_INS_AE_SA24X2_RIP = 743,
    XTENSA_INS_AE_SA24_L_IC = 744,
    XTENSA_INS_AE_SA24_L_IP = 745,
    XTENSA_INS_AE_SA24_L_RIC = 746,
    XTENSA_INS_AE_SA24_L_RIP = 747,
    XTENSA_INS_AE_SA32X2F24_IC = 748,
    XTENSA_INS_AE_SA32X2F24_IP = 749,
    XTENSA_INS_AE_SA32X2F24_RIC = 750,
    XTENSA_INS_AE_SA32X2F24_RIP = 751,
    XTENSA_INS_AE_SA32X2_IC = 752,
    XTENSA_INS_AE_SA32X2_IP = 753,
    XTENSA_INS_AE_SA32X2_RIC = 754,
    XTENSA_INS_AE_SA32X2_RIP = 755,
    XTENSA_INS_AE_SA64NEG_FP = 756,
    XTENSA_INS_AE_SA64POS_FP = 757,
    XTENSA_INS_AE_SALIGN64_I = 758,
    XTENSA_INS_AE_SAT16X4 = 759,
    XTENSA_INS_AE_SAT24S = 760,
    XTENSA_INS_AE_SAT48S = 761,
    XTENSA_INS_AE_SATQ56S = 762,
    XTENSA_INS_AE_SB = 763,
    XTENSA_INS_AE_SBF = 764,
    XTENSA_INS_AE_SBF_IC = 765,
    XTENSA_INS_AE_SBF_IP = 766,
    XTENSA_INS_AE_SBI = 767,
    XTENSA_INS_AE_SBI_IC = 768,
    XTENSA_INS_AE_SBI_IP = 769,
    XTENSA_INS_AE_SB_IC = 770,
    XTENSA_INS_AE_SB_IP = 771,
    XTENSA_INS_AE_SEL16I = 772,
    XTENSA_INS_AE_SEL16I_N = 773,
    XTENSA_INS_AE_SEXT32 = 774,
    XTENSA_INS_AE_SEXT32X2D16_10 = 775,
    XTENSA_INS_AE_SEXT32X2D16_32 = 776,
    XTENSA_INS_AE_SHA32 = 777,
    XTENSA_INS_AE_SHORTSWAP = 778,
    XTENSA_INS_AE_SLAA16S = 779,
    XTENSA_INS_AE_SLAA32 = 780,
    XTENSA_INS_AE_SLAA32S = 781,
    XTENSA_INS_AE_SLAA64 = 782,
    XTENSA_INS_AE_SLAA64S = 783,
    XTENSA_INS_AE_SLAAQ56 = 784,
    XTENSA_INS_AE_SLAI16S = 785,
    XTENSA_INS_AE_SLAI24 = 786,
    XTENSA_INS_AE_SLAI24S = 787,
    XTENSA_INS_AE_SLAI32 = 788,
    XTENSA_INS_AE_SLAI32S = 789,
    XTENSA_INS_AE_SLAI64 = 790,
    XTENSA_INS_AE_SLAI64S = 791,
    XTENSA_INS_AE_SLAISQ56S = 792,
    XTENSA_INS_AE_SLAS24 = 793,
    XTENSA_INS_AE_SLAS24S = 794,
    XTENSA_INS_AE_SLAS32 = 795,
    XTENSA_INS_AE_SLAS32S = 796,
    XTENSA_INS_AE_SLAS64 = 797,
    XTENSA_INS_AE_SLAS64S = 798,
    XTENSA_INS_AE_SLASQ56 = 799,
    XTENSA_INS_AE_SLASSQ56S = 800,
    XTENSA_INS_AE_SRA64_32 = 801,
    XTENSA_INS_AE_SRAA16RS = 802,
    XTENSA_INS_AE_SRAA16S = 803,
    XTENSA_INS_AE_SRAA32 = 804,
    XTENSA_INS_AE_SRAA32RS = 805,
    XTENSA_INS_AE_SRAA32S = 806,
    XTENSA_INS_AE_SRAA64 = 807,
    XTENSA_INS_AE_SRAI16 = 808,
    XTENSA_INS_AE_SRAI16R = 809,
    XTENSA_INS_AE_SRAI24 = 810,
    XTENSA_INS_AE_SRAI32 = 811,
    XTENSA_INS_AE_SRAI32R = 812,
    XTENSA_INS_AE_SRAI64 = 813,
    XTENSA_INS_AE_SRAS24 = 814,
    XTENSA_INS_AE_SRAS32 = 815,
    XTENSA_INS_AE_SRAS64 = 816,
    XTENSA_INS_AE_SRLA32 = 817,
    XTENSA_INS_AE_SRLA64 = 818,
    XTENSA_INS_AE_SRLI24 = 819,
    XTENSA_INS_AE_SRLI32 = 820,
    XTENSA_INS_AE_SRLI64 = 821,
    XTENSA_INS_AE_SRLS24 = 822,
    XTENSA_INS_AE_SRLS32 = 823,
    XTENSA_INS_AE_SRLS64 = 824,
    XTENSA_INS_AE_SUB16 = 825,
    XTENSA_INS_AE_SUB16S = 826,
    XTENSA_INS_AE_SUB24S = 827,
    XTENSA_INS_AE_SUB32 = 828,
    XTENSA_INS_AE_SUB32S = 829,
    XTENSA_INS_AE_SUB64 = 830,
    XTENSA_INS_AE_SUB64S = 831,
    XTENSA_INS_AE_SUBADD32 = 832,
    XTENSA_INS_AE_SUBADD32S = 833,
    XTENSA_INS_AE_TRUNCA32F64S_L = 834,
    XTENSA_INS_AE_TRUNCA32X2F64S = 835,
    XTENSA_INS_AE_TRUNCI32F64S_L = 836,
    XTENSA_INS_AE_TRUNCI32X2F64S = 837,
    XTENSA_INS_AE_VLDL16C = 838,
    XTENSA_INS_AE_VLDL16C_IC = 839,
    XTENSA_INS_AE_VLDL16C_IP = 840,
    XTENSA_INS_AE_VLDL16T = 841,
    XTENSA_INS_AE_VLDL32T = 842,
    XTENSA_INS_AE_VLDSHT = 843,
    XTENSA_INS_AE_VLEL16T = 844,
    XTENSA_INS_AE_VLEL32T = 845,
    XTENSA_INS_AE_VLES16C = 846,
    XTENSA_INS_AE_VLES16C_IC = 847,
    XTENSA_INS_AE_VLES16C_IP = 848,
    XTENSA_INS_AE_XOR = 849,
    XTENSA_INS_AE_ZALIGN64 = 850,
    XTENSA_INS_ALL4 = 851,
    XTENSA_INS_ALL8 = 852,
    XTENSA_INS_AND = 853,
    XTENSA_INS_ANDB = 854,
    XTENSA_INS_ANDBC = 855,
    XTENSA_INS_ANY4 = 856,
    XTENSA_INS_ANY8 = 857,
    XTENSA_INS_BALL = 858,
    XTENSA_INS_BANY = 859,
    XTENSA_INS_BBC = 860,
    XTENSA_INS_BBCI = 861,
    XTENSA_INS_BBS = 862,
    XTENSA_INS_BBSI = 863,
    XTENSA_INS_BEQ = 864,
    XTENSA_INS_BEQI = 865,
    XTENSA_INS_BEQZ = 866,
    XTENSA_INS_BF = 867,
    XTENSA_INS_BGE = 868,
    XTENSA_INS_BGEI = 869,
    XTENSA_INS_BGEU = 870,
    XTENSA_INS_BGEUI = 871,
    XTENSA_INS_BGEZ = 872,
    XTENSA_INS_BLT = 873,
    XTENSA_INS_BLTI = 874,
    XTENSA_INS_BLTU = 875,
    XTENSA_INS_BLTUI = 876,
    XTENSA_INS_BLTZ = 877,
    XTENSA_INS_BNALL = 878,
    XTENSA_INS_BNE = 879,
    XTENSA_INS_BNEI = 880,
    XTENSA_INS_BNEZ = 881,
    XTENSA_INS_BNONE = 882,
    XTENSA_INS_BREAK = 883,
    XTENSA_INS_BREAK_N = 884,
    XTENSA_INS_BT = 885,
    XTENSA_INS_CALL0 = 886,
    XTENSA_INS_CALL12 = 887,
    XTENSA_INS_CALL4 = 888,
    XTENSA_INS_CALL8 = 889,
    XTENSA_INS_CALLX0 = 890,
    XTENSA_INS_CALLX12 = 891,
    XTENSA_INS_CALLX4 = 892,
    XTENSA_INS_CALLX8 = 893,
    XTENSA_INS_CEIL_S = 894,
    XTENSA_INS_CLAMPS = 895,
    XTENSA_INS_CLR_BIT_GPIO_OUT = 896,
    XTENSA_INS_CONST_S = 897,
    XTENSA_INS_DIV0_S = 898,
    XTENSA_INS_DIVN_S = 899,
    XTENSA_INS_DSYNC = 900,
    XTENSA_INS_EE_ANDQ = 901,
    XTENSA_INS_EE_BITREV = 902,
    XTENSA_INS_EE_CLR_BIT_GPIO_OUT = 903,
    XTENSA_INS_EE_CMUL_S16 = 904,
    XTENSA_INS_EE_CMUL_S16_LD_INCP = 905,
    XTENSA_INS_EE_CMUL_S16_ST_INCP = 906,
    XTENSA_INS_EE_FFT_AMS_S16_LD_INCP = 907,
    XTENSA_INS_EE_FFT_AMS_S16_LD_INCP_UAUP = 908,
    XTENSA_INS_EE_FFT_AMS_S16_LD_R32_DECP = 909,
    XTENSA_INS_EE_FFT_AMS_S16_ST_INCP = 910,
    XTENSA_INS_EE_FFT_CMUL_S16_LD_XP = 911,
    XTENSA_INS_EE_FFT_CMUL_S16_ST_XP = 912,
    XTENSA_INS_EE_FFT_R2BF_S16 = 913,
    XTENSA_INS_EE_FFT_R2BF_S16_ST_INCP = 914,
    XTENSA_INS_EE_FFT_VST_R32_DECP = 915,
    XTENSA_INS_EE_GET_GPIO_IN = 916,
    XTENSA_INS_EE_LDF_128_IP = 917,
    XTENSA_INS_EE_LDF_128_XP = 918,
    XTENSA_INS_EE_LDF_64_IP = 919,
    XTENSA_INS_EE_LDF_64_XP = 920,
    XTENSA_INS_EE_LDQA_S16_128_IP = 921,
    XTENSA_INS_EE_LDQA_S16_128_XP = 922,
    XTENSA_INS_EE_LDQA_S8_128_IP = 923,
    XTENSA_INS_EE_LDQA_S8_128_XP = 924,
    XTENSA_INS_EE_LDQA_U16_128_IP = 925,
    XTENSA_INS_EE_LDQA_U16_128_XP = 926,
    XTENSA_INS_EE_LDQA_U8_128_IP = 927,
    XTENSA_INS_EE_LDQA_U8_128_XP = 928,
    XTENSA_INS_EE_LDXQ_32 = 929,
    XTENSA_INS_EE_LD_128_USAR_IP = 930,
    XTENSA_INS_EE_LD_128_USAR_XP = 931,
    XTENSA_INS_EE_LD_ACCX_IP = 932,
    XTENSA_INS_EE_LD_QACC_H_H_32_IP = 933,
    XTENSA_INS_EE_LD_QACC_H_L_128_IP = 934,
    XTENSA_INS_EE_LD_QACC_L_H_32_IP = 935,
    XTENSA_INS_EE_LD_QACC_L_L_128_IP = 936,
    XTENSA_INS_EE_LD_UA_STATE_IP = 937,
    XTENSA_INS_EE_MOVI_32_A = 938,
    XTENSA_INS_EE_MOVI_32_Q = 939,
    XTENSA_INS_EE_MOV_S16_QACC = 940,
    XTENSA_INS_EE_MOV_S8_QACC = 941,
    XTENSA_INS_EE_MOV_U16_QACC = 942,
    XTENSA_INS_EE_MOV_U8_QACC = 943,
    XTENSA_INS_EE_NOTQ = 944,
    XTENSA_INS_EE_ORQ = 945,
    XTENSA_INS_EE_SET_BIT_GPIO_OUT = 946,
    XTENSA_INS_EE_SLCI_2Q = 947,
    XTENSA_INS_EE_SLCXXP_2Q = 948,
    XTENSA_INS_EE_SRCI_2Q = 949,
    XTENSA_INS_EE_SRCMB_S16_QACC = 950,
    XTENSA_INS_EE_SRCMB_S8_QACC = 951,
    XTENSA_INS_EE_SRCQ_128_ST_INCP = 952,
    XTENSA_INS_EE_SRCXXP_2Q = 953,
    XTENSA_INS_EE_SRC_Q = 954,
    XTENSA_INS_EE_SRC_Q_LD_IP = 955,
    XTENSA_INS_EE_SRC_Q_LD_XP = 956,
    XTENSA_INS_EE_SRC_Q_QUP = 957,
    XTENSA_INS_EE_SRS_ACCX = 958,
    XTENSA_INS_EE_STF_128_IP = 959,
    XTENSA_INS_EE_STF_128_XP = 960,
    XTENSA_INS_EE_STF_64_IP = 961,
    XTENSA_INS_EE_STF_64_XP = 962,
    XTENSA_INS_EE_STXQ_32 = 963,
    XTENSA_INS_EE_ST_ACCX_IP = 964,
    XTENSA_INS_EE_ST_QACC_H_H_32_IP = 965,
    XTENSA_INS_EE_ST_QACC_H_L_128_IP = 966,
    XTENSA_INS_EE_ST_QACC_L_H_32_IP = 967,
    XTENSA_INS_EE_ST_QACC_L_L_128_IP = 968,
    XTENSA_INS_EE_ST_UA_STATE_IP = 969,
    XTENSA_INS_EE_VADDS_S16 = 970,
    XTENSA_INS_EE_VADDS_S16_LD_INCP = 971,
    XTENSA_INS_EE_VADDS_S16_ST_INCP = 972,
    XTENSA_INS_EE_VADDS_S32 = 973,
    XTENSA_INS_EE_VADDS_S32_LD_INCP = 974,
    XTENSA_INS_EE_VADDS_S32_ST_INCP = 975,
    XTENSA_INS_EE_VADDS_S8 = 976,
    XTENSA_INS_EE_VADDS_S8_LD_INCP = 977,
    XTENSA_INS_EE_VADDS_S8_ST_INCP = 978,
    XTENSA_INS_EE_VCMP_EQ_S16 = 979,
    XTENSA_INS_EE_VCMP_EQ_S32 = 980,
    XTENSA_INS_EE_VCMP_EQ_S8 = 981,
    XTENSA_INS_EE_VCMP_GT_S16 = 982,
    XTENSA_INS_EE_VCMP_GT_S32 = 983,
    XTENSA_INS_EE_VCMP_GT_S8 = 984,
    XTENSA_INS_EE_VCMP_LT_S16 = 985,
    XTENSA_INS_EE_VCMP_LT_S32 = 986,
    XTENSA_INS_EE_VCMP_LT_S8 = 987,
    XTENSA_INS_EE_VLDBC_16 = 988,
    XTENSA_INS_EE_VLDBC_16_IP = 989,
    XTENSA_INS_EE_VLDBC_16_XP = 990,
    XTENSA_INS_EE_VLDBC_32 = 991,
    XTENSA_INS_EE_VLDBC_32_IP = 992,
    XTENSA_INS_EE_VLDBC_32_XP = 993,
    XTENSA_INS_EE_VLDBC_8 = 994,
    XTENSA_INS_EE_VLDBC_8_IP = 995,
    XTENSA_INS_EE_VLDBC_8_XP = 996,
    XTENSA_INS_EE_VLDHBC_16_INCP = 997,
    XTENSA_INS_EE_VLD_128_IP = 998,
    XTENSA_INS_EE_VLD_128_XP = 999,
    XTENSA_INS_EE_VLD_H_64_IP = 1000,
    XTENSA_INS_EE_VLD_H_64_XP = 1001,
    XTENSA_INS_EE_VLD_L_64_IP = 1002,
    XTENSA_INS_EE_VLD_L_64_XP = 1003,
    XTENSA_INS_EE_VMAX_S16 = 1004,
    XTENSA_INS_EE_VMAX_S16_LD_INCP = 1005,
    XTENSA_INS_EE_VMAX_S16_ST_INCP = 1006,
    XTENSA_INS_EE_VMAX_S32 = 1007,
    XTENSA_INS_EE_VMAX_S32_LD_INCP = 1008,
    XTENSA_INS_EE_VMAX_S32_ST_INCP = 1009,
    XTENSA_INS_EE_VMAX_S8 = 1010,
    XTENSA_INS_EE_VMAX_S8_LD_INCP = 1011,
    XTENSA_INS_EE_VMAX_S8_ST_INCP = 1012,
    XTENSA_INS_EE_VMIN_S16 = 1013,
    XTENSA_INS_EE_VMIN_S16_LD_INCP = 1014,
    XTENSA_INS_EE_VMIN_S16_ST_INCP = 1015,
    XTENSA_INS_EE_VMIN_S32 = 1016,
    XTENSA_INS_EE_VMIN_S32_LD_INCP = 1017,
    XTENSA_INS_EE_VMIN_S32_ST_INCP = 1018,
    XTENSA_INS_EE_VMIN_S8 = 1019,
    XTENSA_INS_EE_VMIN_S8_LD_INCP = 1020,
    XTENSA_INS_EE_VMIN_S8_ST_INCP = 1021,
    XTENSA_INS_EE_VMULAS_S16_ACCX = 1022,
    XTENSA_INS_EE_VMULAS_S16_ACCX_LD_IP = 1023,
    XTENSA_INS_EE_VMULAS_S16_ACCX_LD_IP_QUP = 1024,
    XTENSA_INS_EE_VMULAS_S16_ACCX_LD_XP = 1025,
    XTENSA_INS_EE_VMULAS_S16_ACCX_LD_XP_QUP = 1026,
    XTENSA_INS_EE_VMULAS_S16_QACC = 1027,
    XTENSA_INS_EE_VMULAS_S16_QACC_LDBC_INCP = 1028,
    XTENSA_INS_EE_VMULAS_S16_QACC_LDBC_INCP_QUP = 1029,
    XTENSA_INS_EE_VMULAS_S16_QACC_LD_IP = 1030,
    XTENSA_INS_EE_VMULAS_S16_QACC_LD_IP_QUP = 1031,
    XTENSA_INS_EE_VMULAS_S16_QACC_LD_XP = 1032,
    XTENSA_INS_EE_VMULAS_S16_QACC_LD_XP_QUP = 1033,
    XTENSA_INS_EE_VMULAS_S8_ACCX = 1034,
    XTENSA_INS_EE_VMULAS_S8_ACCX_LD_IP = 1035,
    XTENSA_INS_EE_VMULAS_S8_ACCX_LD_IP_QUP = 1036,
    XTENSA_INS_EE_VMULAS_S8_ACCX_LD_XP = 1037,
    XTENSA_INS_EE_VMULAS_S8_ACCX_LD_XP_QUP = 1038,
    XTENSA_INS_EE_VMULAS_S8_QACC = 1039,
    XTENSA_INS_EE_VMULAS_S8_QACC_LDBC_INCP = 1040,
    XTENSA_INS_EE_VMULAS_S8_QACC_LDBC_INCP_QUP = 1041,
    XTENSA_INS_EE_VMULAS_S8_QACC_LD_IP = 1042,
    XTENSA_INS_EE_VMULAS_S8_QACC_LD_IP_QUP = 1043,
    XTENSA_INS_EE_VMULAS_S8_QACC_LD_XP = 1044,
    XTENSA_INS_EE_VMULAS_S8_QACC_LD_XP_QUP = 1045,
    XTENSA_INS_EE_VMULAS_U16_ACCX = 1046,
    XTENSA_INS_EE_VMULAS_U16_ACCX_LD_IP = 1047,
    XTENSA_INS_EE_VMULAS_U16_ACCX_LD_IP_QUP = 1048,
    XTENSA_INS_EE_VMULAS_U16_ACCX_LD_XP = 1049,
    XTENSA_INS_EE_VMULAS_U16_ACCX_LD_XP_QUP = 1050,
    XTENSA_INS_EE_VMULAS_U16_QACC = 1051,
    XTENSA_INS_EE_VMULAS_U16_QACC_LDBC_INCP = 1052,
    XTENSA_INS_EE_VMULAS_U16_QACC_LDBC_INCP_QUP = 1053,
    XTENSA_INS_EE_VMULAS_U16_QACC_LD_IP = 1054,
    XTENSA_INS_EE_VMULAS_U16_QACC_LD_IP_QUP = 1055,
    XTENSA_INS_EE_VMULAS_U16_QACC_LD_XP = 1056,
    XTENSA_INS_EE_VMULAS_U16_QACC_LD_XP_QUP = 1057,
    XTENSA_INS_EE_VMULAS_U8_ACCX = 1058,
    XTENSA_INS_EE_VMULAS_U8_ACCX_LD_IP = 1059,
    XTENSA_INS_EE_VMULAS_U8_ACCX_LD_IP_QUP = 1060,
    XTENSA_INS_EE_VMULAS_U8_ACCX_LD_XP = 1061,
    XTENSA_INS_EE_VMULAS_U8_ACCX_LD_XP_QUP = 1062,
    XTENSA_INS_EE_VMULAS_U8_QACC = 1063,
    XTENSA_INS_EE_VMULAS_U8_QACC_LDBC_INCP = 1064,
    XTENSA_INS_EE_VMULAS_U8_QACC_LDBC_INCP_QUP = 1065,
    XTENSA_INS_EE_VMULAS_U8_QACC_LD_IP = 1066,
    XTENSA_INS_EE_VMULAS_U8_QACC_LD_IP_QUP = 1067,
    XTENSA_INS_EE_VMULAS_U8_QACC_LD_XP = 1068,
    XTENSA_INS_EE_VMULAS_U8_QACC_LD_XP_QUP = 1069,
    XTENSA_INS_EE_VMUL_S16 = 1070,
    XTENSA_INS_EE_VMUL_S16_LD_INCP = 1071,
    XTENSA_INS_EE_VMUL_S16_ST_INCP = 1072,
    XTENSA_INS_EE_VMUL_S8 = 1073,
    XTENSA_INS_EE_VMUL_S8_LD_INCP = 1074,
    XTENSA_INS_EE_VMUL_S8_ST_INCP = 1075,
    XTENSA_INS_EE_VMUL_U16 = 1076,
    XTENSA_INS_EE_VMUL_U16_LD_INCP = 1077,
    XTENSA_INS_EE_VMUL_U16_ST_INCP = 1078,
    XTENSA_INS_EE_VMUL_U8 = 1079,
    XTENSA_INS_EE_VMUL_U8_LD_INCP = 1080,
    XTENSA_INS_EE_VMUL_U8_ST_INCP = 1081,
    XTENSA_INS_EE_VPRELU_S16 = 1082,
    XTENSA_INS_EE_VPRELU_S8 = 1083,
    XTENSA_INS_EE_VRELU_S16 = 1084,
    XTENSA_INS_EE_VRELU_S8 = 1085,
    XTENSA_INS_EE_VSL_32 = 1086,
    XTENSA_INS_EE_VSMULAS_S16_QACC = 1087,
    XTENSA_INS_EE_VSMULAS_S16_QACC_LD_INCP = 1088,
    XTENSA_INS_EE_VSMULAS_S8_QACC = 1089,
    XTENSA_INS_EE_VSMULAS_S8_QACC_LD_INCP = 1090,
    XTENSA_INS_EE_VSR_32 = 1091,
    XTENSA_INS_EE_VST_128_IP = 1092,
    XTENSA_INS_EE_VST_128_XP = 1093,
    XTENSA_INS_EE_VST_H_64_IP = 1094,
    XTENSA_INS_EE_VST_H_64_XP = 1095,
    XTENSA_INS_EE_VST_L_64_IP = 1096,
    XTENSA_INS_EE_VST_L_64_XP = 1097,
    XTENSA_INS_EE_VSUBS_S16 = 1098,
    XTENSA_INS_EE_VSUBS_S16_LD_INCP = 1099,
    XTENSA_INS_EE_VSUBS_S16_ST_INCP = 1100,
    XTENSA_INS_EE_VSUBS_S32 = 1101,
    XTENSA_INS_EE_VSUBS_S32_LD_INCP = 1102,
    XTENSA_INS_EE_VSUBS_S32_ST_INCP = 1103,
    XTENSA_INS_EE_VSUBS_S8 = 1104,
    XTENSA_INS_EE_VSUBS_S8_LD_INCP = 1105,
    XTENSA_INS_EE_VSUBS_S8_ST_INCP = 1106,
    XTENSA_INS_EE_VUNZIP_16 = 1107,
    XTENSA_INS_EE_VUNZIP_32 = 1108,
    XTENSA_INS_EE_VUNZIP_8 = 1109,
    XTENSA_INS_EE_VZIP_16 = 1110,
    XTENSA_INS_EE_VZIP_32 = 1111,
    XTENSA_INS_EE_VZIP_8 = 1112,
    XTENSA_INS_EE_WR_MASK_GPIO_OUT = 1113,
    XTENSA_INS_EE_XORQ = 1114,
    XTENSA_INS_EE_ZERO_ACCX = 1115,
    XTENSA_INS_EE_ZERO_Q = 1116,
    XTENSA_INS_EE_ZERO_QACC = 1117,
    XTENSA_INS_ENTRY = 1118,
    XTENSA_INS_ESYNC = 1119,
    XTENSA_INS_EXCW = 1120,
    XTENSA_INS_EXTUI = 1121,
    XTENSA_INS_EXTW = 1122,
    XTENSA_INS_FLOAT_S = 1123,
    XTENSA_INS_FLOOR_S = 1124,
    XTENSA_INS_GET_GPIO_IN = 1125,
    XTENSA_INS_ILL = 1126,
    XTENSA_INS_ILL_N = 1127,
    XTENSA_INS_ISYNC = 1128,
    XTENSA_INS_J = 1129,
    XTENSA_INS_JX = 1130,
    XTENSA_INS_L16SI = 1131,
    XTENSA_INS_L16UI = 1132,
    XTENSA_INS_L32E = 1133,
    XTENSA_INS_L32I = 1134,
    XTENSA_INS_L32I_N = 1135,
    XTENSA_INS_L32R = 1136,
    XTENSA_INS_L8UI = 1137,
    XTENSA_INS_LDDEC = 1138,
    XTENSA_INS_LDINC = 1139,
    XTENSA_INS_LOOP = 1140,
    XTENSA_INS_LOOPGTZ = 1141,
    XTENSA_INS_LOOPNEZ = 1142,
    XTENSA_INS_LSI = 1143,
    XTENSA_INS_LSIP = 1144,
    XTENSA_INS_LSX = 1145,
    XTENSA_INS_LSXP = 1146,
    XTENSA_INS_MADDN_S = 1147,
    XTENSA_INS_MADD_S = 1148,
    XTENSA_INS_MAX = 1149,
    XTENSA_INS_MAXU = 1150,
    XTENSA_INS_MEMW = 1151,
    XTENSA_INS_MIN = 1152,
    XTENSA_INS_MINU = 1153,
    XTENSA_INS_MKDADJ_S = 1154,
    XTENSA_INS_MKSADJ_S = 1155,
    XTENSA_INS_MOVEQZ = 1156,
    XTENSA_INS_MOVEQZ_S = 1157,
    XTENSA_INS_MOVF = 1158,
    XTENSA_INS_MOVF_S = 1159,
    XTENSA_INS_MOVGEZ = 1160,
    XTENSA_INS_MOVGEZ_S = 1161,
    XTENSA_INS_MOVI = 1162,
    XTENSA_INS_MOVI_N = 1163,
    XTENSA_INS_MOVLTZ = 1164,
    XTENSA_INS_MOVLTZ_S = 1165,
    XTENSA_INS_MOVNEZ = 1166,
    XTENSA_INS_MOVNEZ_S = 1167,
    XTENSA_INS_MOVSP = 1168,
    XTENSA_INS_MOVT = 1169,
    XTENSA_INS_MOVT_S = 1170,
    XTENSA_INS_MOV_N = 1171,
    XTENSA_INS_MOV_S = 1172,
    XTENSA_INS_MSUB_S = 1173,
    XTENSA_INS_MUL16S = 1174,
    XTENSA_INS_MUL16U = 1175,
    XTENSA_INS_MULA_AA_HH = 1176,
    XTENSA_INS_MULA_AA_HL = 1177,
    XTENSA_INS_MULA_AA_LH = 1178,
    XTENSA_INS_MULA_AA_LL = 1179,
    XTENSA_INS_MULA_AD_HH = 1180,
    XTENSA_INS_MULA_AD_HL = 1181,
    XTENSA_INS_MULA_AD_LH = 1182,
    XTENSA_INS_MULA_AD_LL = 1183,
    XTENSA_INS_MULA_DA_HH = 1184,
    XTENSA_INS_MULA_DA_HH_LDDEC = 1185,
    XTENSA_INS_MULA_DA_HH_LDINC = 1186,
    XTENSA_INS_MULA_DA_HL = 1187,
    XTENSA_INS_MULA_DA_HL_LDDEC = 1188,
    XTENSA_INS_MULA_DA_HL_LDINC = 1189,
    XTENSA_INS_MULA_DA_LH = 1190,
    XTENSA_INS_MULA_DA_LH_LDDEC = 1191,
    XTENSA_INS_MULA_DA_LH_LDINC = 1192,
    XTENSA_INS_MULA_DA_LL = 1193,
    XTENSA_INS_MULA_DA_LL_LDDEC = 1194,
    XTENSA_INS_MULA_DA_LL_LDINC = 1195,
    XTENSA_INS_MULA_DD_HH = 1196,
    XTENSA_INS_MULA_DD_HH_LDDEC = 1197,
    XTENSA_INS_MULA_DD_HH_LDINC = 1198,
    XTENSA_INS_MULA_DD_HL = 1199,
    XTENSA_INS_MULA_DD_HL_LDDEC = 1200,
    XTENSA_INS_MULA_DD_HL_LDINC = 1201,
    XTENSA_INS_MULA_DD_LH = 1202,
    XTENSA_INS_MULA_DD_LH_LDDEC = 1203,
    XTENSA_INS_MULA_DD_LH_LDINC = 1204,
    XTENSA_INS_MULA_DD_LL = 1205,
    XTENSA_INS_MULA_DD_LL_LDDEC = 1206,
    XTENSA_INS_MULA_DD_LL_LDINC = 1207,
    XTENSA_INS_MULL = 1208,
    XTENSA_INS_MULSH = 1209,
    XTENSA_INS_MULS_AA_HH = 1210,
    XTENSA_INS_MULS_AA_HL = 1211,
    XTENSA_INS_MULS_AA_LH = 1212,
    XTENSA_INS_MULS_AA_LL = 1213,
    XTENSA_INS_MULS_AD_HH = 1214,
    XTENSA_INS_MULS_AD_HL = 1215,
    XTENSA_INS_MULS_AD_LH = 1216,
    XTENSA_INS_MULS_AD_LL = 1217,
    XTENSA_INS_MULS_DA_HH = 1218,
    XTENSA_INS_MULS_DA_HL = 1219,
    XTENSA_INS_MULS_DA_LH = 1220,
    XTENSA_INS_MULS_DA_LL = 1221,
    XTENSA_INS_MULS_DD_HH = 1222,
    XTENSA_INS_MULS_DD_HL = 1223,
    XTENSA_INS_MULS_DD_LH = 1224,
    XTENSA_INS_MULS_DD_LL = 1225,
    XTENSA_INS_MULUH = 1226,
    XTENSA_INS_MUL_AA_HH = 1227,
    XTENSA_INS_MUL_AA_HL = 1228,
    XTENSA_INS_MUL_AA_LH = 1229,
    XTENSA_INS_MUL_AA_LL = 1230,
    XTENSA_INS_MUL_AD_HH = 1231,
    XTENSA_INS_MUL_AD_HL = 1232,
    XTENSA_INS_MUL_AD_LH = 1233,
    XTENSA_INS_MUL_AD_LL = 1234,
    XTENSA_INS_MUL_DA_HH = 1235,
    XTENSA_INS_MUL_DA_HL = 1236,
    XTENSA_INS_MUL_DA_LH = 1237,
    XTENSA_INS_MUL_DA_LL = 1238,
    XTENSA_INS_MUL_DD_HH = 1239,
    XTENSA_INS_MUL_DD_HL = 1240,
    XTENSA_INS_MUL_DD_LH = 1241,
    XTENSA_INS_MUL_DD_LL = 1242,
    XTENSA_INS_MUL_S = 1243,
    XTENSA_INS_NEG = 1244,
    XTENSA_INS_NEG_S = 1245,
    XTENSA_INS_NEXP01_S = 1246,
    XTENSA_INS_NOP = 1247,
    XTENSA_INS_NSA = 1248,
    XTENSA_INS_NSAU = 1249,
    XTENSA_INS_OEQ_S = 1250,
    XTENSA_INS_OLE_S = 1251,
    XTENSA_INS_OLT_S = 1252,
    XTENSA_INS_OR = 1253,
    XTENSA_INS_ORB = 1254,
    XTENSA_INS_ORBC = 1255,
    XTENSA_INS_QUOS = 1256,
    XTENSA_INS_QUOU = 1257,
    XTENSA_INS_RECIP0_S = 1258,
    XTENSA_INS_REMS = 1259,
    XTENSA_INS_REMU = 1260,
    XTENSA_INS_RER = 1261,
    XTENSA_INS_RET = 1262,
    XTENSA_INS_RETW = 1263,
    XTENSA_INS_RETW_N = 1264,
    XTENSA_INS_RET_N = 1265,
    XTENSA_INS_RFDE = 1266,
    XTENSA_INS_RFE = 1267,
    XTENSA_INS_RFI = 1268,
    XTENSA_INS_RFR = 1269,
    XTENSA_INS_RFWO = 1270,
    XTENSA_INS_RFWU = 1271,
    XTENSA_INS_ROTW = 1272,
    XTENSA_INS_ROUND_S = 1273,
    XTENSA_INS_RSIL = 1274,
    XTENSA_INS_RSQRT0_S = 1275,
    XTENSA_INS_RSR = 1276,
    XTENSA_INS_RSYNC = 1277,
    XTENSA_INS_RUR = 1278,
    XTENSA_INS_RUR_ACCX_0 = 1279,
    XTENSA_INS_RUR_ACCX_1 = 1280,
    XTENSA_INS_RUR_AE_BITHEAD = 1281,
    XTENSA_INS_RUR_AE_BITPTR = 1282,
    XTENSA_INS_RUR_AE_BITSUSED = 1283,
    XTENSA_INS_RUR_AE_CBEGIN0 = 1284,
    XTENSA_INS_RUR_AE_CEND0 = 1285,
    XTENSA_INS_RUR_AE_CWRAP = 1286,
    XTENSA_INS_RUR_AE_CW_SD_NO = 1287,
    XTENSA_INS_RUR_AE_FIRST_TS = 1288,
    XTENSA_INS_RUR_AE_NEXTOFFSET = 1289,
    XTENSA_INS_RUR_AE_OVERFLOW = 1290,
    XTENSA_INS_RUR_AE_OVF_SAR = 1291,
    XTENSA_INS_RUR_AE_SAR = 1292,
    XTENSA_INS_RUR_AE_SEARCHDONE = 1293,
    XTENSA_INS_RUR_AE_TABLESIZE = 1294,
    XTENSA_INS_RUR_AE_TS_FTS_BU_BP = 1295,
    XTENSA_INS_RUR_FFT_BIT_WIDTH = 1296,
    XTENSA_INS_RUR_GPIO_OUT = 1297,
    XTENSA_INS_RUR_QACC_H_0 = 1298,
    XTENSA_INS_RUR_QACC_H_1 = 1299,
    XTENSA_INS_RUR_QACC_H_2 = 1300,
    XTENSA_INS_RUR_QACC_H_3 = 1301,
    XTENSA_INS_RUR_QACC_H_4 = 1302,
    XTENSA_INS_RUR_QACC_L_0 = 1303,
    XTENSA_INS_RUR_QACC_L_1 = 1304,
    XTENSA_INS_RUR_QACC_L_2 = 1305,
    XTENSA_INS_RUR_QACC_L_3 = 1306,
    XTENSA_INS_RUR_QACC_L_4 = 1307,
    XTENSA_INS_RUR_SAR_BYTE = 1308,
    XTENSA_INS_RUR_UA_STATE_0 = 1309,
    XTENSA_INS_RUR_UA_STATE_1 = 1310,
    XTENSA_INS_RUR_UA_STATE_2 = 1311,
    XTENSA_INS_RUR_UA_STATE_3 = 1312,
    XTENSA_INS_S16I = 1313,
    XTENSA_INS_S32C1I = 1314,
    XTENSA_INS_S32E = 1315,
    XTENSA_INS_S32I = 1316,
    XTENSA_INS_S32I_N = 1317,
    XTENSA_INS_S8I = 1318,
    XTENSA_INS_SET_BIT_GPIO_OUT = 1319,
    XTENSA_INS_SEXT = 1320,
    XTENSA_INS_SIMCALL = 1321,
    XTENSA_INS_SLL = 1322,
    XTENSA_INS_SLLI = 1323,
    XTENSA_INS_SQRT0_S = 1324,
    XTENSA_INS_SRA = 1325,
    XTENSA_INS_SRAI = 1326,
    XTENSA_INS_SRC = 1327,
    XTENSA_INS_SRL = 1328,
    XTENSA_INS_SRLI = 1329,
    XTENSA_INS_SSA8L = 1330,
    XTENSA_INS_SSAI = 1331,
    XTENSA_INS_SSI = 1332,
    XTENSA_INS_SSIP = 1333,
    XTENSA_INS_SSL = 1334,
    XTENSA_INS_SSR = 1335,
    XTENSA_INS_SSX = 1336,
    XTENSA_INS_SSXP = 1337,
    XTENSA_INS_SUB = 1338,
    XTENSA_INS_SUBX2 = 1339,
    XTENSA_INS_SUBX4 = 1340,
    XTENSA_INS_SUBX8 = 1341,
    XTENSA_INS_SUB_S = 1342,
    XTENSA_INS_SYSCALL = 1343,
    XTENSA_INS_TRUNC_S = 1344,
    XTENSA_INS_UEQ_S = 1345,
    XTENSA_INS_UFLOAT_S = 1346,
    XTENSA_INS_ULE_S = 1347,
    XTENSA_INS_ULT_S = 1348,
    XTENSA_INS_UMUL_AA_HH = 1349,
    XTENSA_INS_UMUL_AA_HL = 1350,
    XTENSA_INS_UMUL_AA_LH = 1351,
    XTENSA_INS_UMUL_AA_LL = 1352,
    XTENSA_INS_UN_S = 1353,
    XTENSA_INS_UTRUNC_S = 1354,
    XTENSA_INS_WAITI = 1355,
    XTENSA_INS_WDTLB = 1356,
    XTENSA_INS_WER = 1357,
    XTENSA_INS_WFR = 1358,
    XTENSA_INS_WITLB = 1359,
    XTENSA_INS_WR_MASK_GPIO_OUT = 1360,
    XTENSA_INS_WSR = 1361,
    XTENSA_INS_WUR = 1362,
    XTENSA_INS_WUR_ACCX_0 = 1363,
    XTENSA_INS_WUR_ACCX_1 = 1364,
    XTENSA_INS_WUR_AE_BITHEAD = 1365,
    XTENSA_INS_WUR_AE_BITPTR = 1366,
    XTENSA_INS_WUR_AE_BITSUSED = 1367,
    XTENSA_INS_WUR_AE_CBEGIN0 = 1368,
    XTENSA_INS_WUR_AE_CEND0 = 1369,
    XTENSA_INS_WUR_AE_CWRAP = 1370,
    XTENSA_INS_WUR_AE_CW_SD_NO = 1371,
    XTENSA_INS_WUR_AE_FIRST_TS = 1372,
    XTENSA_INS_WUR_AE_NEXTOFFSET = 1373,
    XTENSA_INS_WUR_AE_OVERFLOW = 1374,
    XTENSA_INS_WUR_AE_OVF_SAR = 1375,
    XTENSA_INS_WUR_AE_SAR = 1376,
    XTENSA_INS_WUR_AE_SEARCHDONE = 1377,
    XTENSA_INS_WUR_AE_TABLESIZE = 1378,
    XTENSA_INS_WUR_AE_TS_FTS_BU_BP = 1379,
    XTENSA_INS_WUR_FCR = 1380,
    XTENSA_INS_WUR_FFT_BIT_WIDTH = 1381,
    XTENSA_INS_WUR_FSR = 1382,
    XTENSA_INS_WUR_GPIO_OUT = 1383,
    XTENSA_INS_WUR_QACC_H_0 = 1384,
    XTENSA_INS_WUR_QACC_H_1 = 1385,
    XTENSA_INS_WUR_QACC_H_2 = 1386,
    XTENSA_INS_WUR_QACC_H_3 = 1387,
    XTENSA_INS_WUR_QACC_H_4 = 1388,
    XTENSA_INS_WUR_QACC_L_0 = 1389,
    XTENSA_INS_WUR_QACC_L_1 = 1390,
    XTENSA_INS_WUR_QACC_L_2 = 1391,
    XTENSA_INS_WUR_QACC_L_3 = 1392,
    XTENSA_INS_WUR_QACC_L_4 = 1393,
    XTENSA_INS_WUR_SAR_BYTE = 1394,
    XTENSA_INS_WUR_UA_STATE_0 = 1395,
    XTENSA_INS_WUR_UA_STATE_1 = 1396,
    XTENSA_INS_WUR_UA_STATE_2 = 1397,
    XTENSA_INS_WUR_UA_STATE_3 = 1398,
    XTENSA_INS_XOR = 1399,
    XTENSA_INS_XORB = 1400,
    XTENSA_INS_XSR = 1401,
    XTENSA_INS__L32I = 1402,
    XTENSA_INS__L32I_N = 1403,
    XTENSA_INS__MOVI = 1404,
    XTENSA_INS__S32I = 1405,
    XTENSA_INS__S32I_N = 1406,
    XTENSA_INS__SLLI = 1407,
    XTENSA_INS__SRLI = 1408,
    XTENSA_INS_MV_QR = 1409,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum xtensa_feature {
    XTENSA_GRP_INVALID = 0,
    XTENSA_GRP_CALL = 1,
    XTENSA_GRP_JUMP = 2,
    XTENSA_GRP_RET = 3,
    XTENSA_FEATURE_HASDENSITY = 128,
    XTENSA_FEATURE_HASSINGLEFLOAT = 129,
    XTENSA_FEATURE_HASWINDOWED = 130,
    XTENSA_FEATURE_HASBOOLEAN = 131,
    XTENSA_FEATURE_HASLOOP = 132,
    XTENSA_FEATURE_HASSEXT = 133,
    XTENSA_FEATURE_HASCLAMPS = 134,
    XTENSA_FEATURE_HASNSA = 135,
    XTENSA_FEATURE_HASMINMAX = 136,
    XTENSA_FEATURE_HASMUL16 = 137,
    XTENSA_FEATURE_HASMUL32 = 138,
    XTENSA_FEATURE_HASMUL32HIGH = 139,
    XTENSA_FEATURE_HASDIV32 = 140,
    XTENSA_FEATURE_HASMAC16 = 141,
    XTENSA_FEATURE_HASDFPACCEL = 142,
    XTENSA_FEATURE_HASS32C1I = 143,
    XTENSA_FEATURE_HASTHREADPTR = 144,
    XTENSA_FEATURE_HASEXTENDEDL32R = 145,
    XTENSA_FEATURE_HASATOMCTL = 146,
    XTENSA_FEATURE_HASMEMCTL = 147,
    XTENSA_FEATURE_HASDEBUG = 148,
    XTENSA_FEATURE_HASEXCEPTION = 149,
    XTENSA_FEATURE_HASHIGHPRIINTERRUPTS = 150,
    XTENSA_FEATURE_HASCOPROCESSOR = 151,
    XTENSA_FEATURE_HASINTERRUPT = 152,
    XTENSA_FEATURE_HASRELOCATABLEVECTOR = 153,
    XTENSA_FEATURE_HASTIMERINT = 154,
    XTENSA_FEATURE_HASPRID = 155,
    XTENSA_FEATURE_HASREGIONPROTECTION = 156,
    XTENSA_FEATURE_HASMISCSR = 157,
    XTENSA_FEATURE_HASESP32S2OPS = 158,
    XTENSA_FEATURE_HASESP32S3OPS = 159,
    XTENSA_FEATURE_HASHIFI3 = 160,
    XTENSA_FEATURE_HASFORCEDATOMICS = 161,
    #[doc = "< mark the end of the list of features"]
    XTENSA_GRP_ENDING = 162,
}
#[repr(u32)]
#[doc = " Xtensa instruction formats. To get details about them please\n refer to `XtensaInstrFormats.td` in LLVM."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum xtensa_insn_form {
    XTENSA_INSN_FORM_INVALID = 0,
    XTENSA_INSN_FORM_RRR = 1,
    XTENSA_INSN_FORM_RRI8 = 2,
    XTENSA_INSN_FORM_RRRN = 3,
    XTENSA_INSN_FORM_AEINST24 = 4,
    XTENSA_INSN_FORM_BRI12 = 5,
    XTENSA_INSN_FORM_CALL = 6,
    XTENSA_INSN_FORM_CALLX = 7,
    XTENSA_INSN_FORM_EE_INST24 = 8,
    XTENSA_INSN_FORM_RRI4 = 9,
    XTENSA_INSN_FORM_RI16 = 10,
    XTENSA_INSN_FORM_RI7 = 11,
    XTENSA_INSN_FORM_RSR = 12,
    XTENSA_INSN_FORM_MAX = 13,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xtensa_suppl_info {
    pub form: xtensa_insn_form,
}
pub mod cs_xtensa_op_type {
    pub type Type = libc::c_uint;
    #[doc = "< = (Uninitialized)."]
    pub const XTENSA_OP_INVALID: Type = 0;
    #[doc = "< = (Register operand)."]
    pub const XTENSA_OP_REG: Type = 1;
    #[doc = "< = (Immediate operand)."]
    pub const XTENSA_OP_IMM: Type = 2;
    #[doc = "< = (Memory operand)."]
    pub const XTENSA_OP_MEM: Type = 128;
    #[doc = "< = (Memory Register operand)."]
    pub const XTENSA_OP_MEM_REG: Type = 129;
    #[doc = "< = (Memory Immediate operand)."]
    pub const XTENSA_OP_MEM_IMM: Type = 130;
    #[doc = "< = (L32R Target)"]
    pub const XTENSA_OP_L32R: Type = 16;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_xtensa_op_mem {
    pub base: u8,
    pub disp: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_xtensa_operand {
    pub type_: u8,
    pub access: u8,
    pub __bindgen_anon_1: cs_xtensa_operand__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_xtensa_operand__bindgen_ty_1 {
    pub reg: u8,
    pub imm: i32,
    pub mem: cs_xtensa_op_mem,
}
impl ::core::fmt::Debug for cs_xtensa_operand__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_xtensa_operand__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_xtensa_operand {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_xtensa_operand {{ __bindgen_anon_1: {:?} }}",
            self.__bindgen_anon_1
        )
    }
}
pub type cs_xtensa_op = cs_xtensa_operand;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_xtensa {
    pub op_count: u8,
    pub operands: [cs_xtensa_op; 8usize],
    pub format: xtensa_insn_form,
}
impl ::core::fmt::Debug for cs_xtensa {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_xtensa {{ operands: {:?}, format: {:?} }}",
            self.operands, self.format
        )
    }
}
#[repr(u32)]
#[doc = " Operand type for instruction's operands"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum arc_op_type {
    #[doc = "< Invalid"]
    ARC_OP_INVALID = 0,
    #[doc = "< Register operand"]
    ARC_OP_REG = 1,
    #[doc = "< Immediate operand"]
    ARC_OP_IMM = 2,
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_arc_op {
    pub type_: arc_op_type,
    pub __bindgen_anon_1: cs_arc_op__bindgen_ty_1,
    #[doc = " How is this operand accessed? (READ, WRITE or READ|WRITE)\n NOTE: this field is irrelevant if engine is compiled in DIET mode."]
    pub access: cs_ac_type,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_arc_op__bindgen_ty_1 {
    pub reg: libc::c_uint,
    #[doc = " register value for REG operand"]
    pub imm: i64,
}
impl ::core::fmt::Debug for cs_arc_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_arc_op__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_arc_op {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "cs_arc_op {{ type: {:?}, __bindgen_anon_1: {:?}, access: {:?} }}",
            self.type_, self.__bindgen_anon_1, self.access
        )
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_arc {
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_arc_op; 8usize],
}
impl ::core::fmt::Debug for cs_arc {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_arc {{ operands: {:?} }}", self.operands)
    }
}
pub mod arc_reg {
    #[doc = " ARC registers"]
    pub type Type = libc::c_uint;
    pub const ARC_REG_INVALID: Type = 0;
    pub const ARC_REG_BLINK: Type = 1;
    pub const ARC_REG_FP: Type = 2;
    pub const ARC_REG_GP: Type = 3;
    pub const ARC_REG_ILINK: Type = 4;
    pub const ARC_REG_SP: Type = 5;
    pub const ARC_REG_R0: Type = 6;
    pub const ARC_REG_R1: Type = 7;
    pub const ARC_REG_R2: Type = 8;
    pub const ARC_REG_R3: Type = 9;
    pub const ARC_REG_R4: Type = 10;
    pub const ARC_REG_R5: Type = 11;
    pub const ARC_REG_R6: Type = 12;
    pub const ARC_REG_R7: Type = 13;
    pub const ARC_REG_R8: Type = 14;
    pub const ARC_REG_R9: Type = 15;
    pub const ARC_REG_R10: Type = 16;
    pub const ARC_REG_R11: Type = 17;
    pub const ARC_REG_R12: Type = 18;
    pub const ARC_REG_R13: Type = 19;
    pub const ARC_REG_R14: Type = 20;
    pub const ARC_REG_R15: Type = 21;
    pub const ARC_REG_R16: Type = 22;
    pub const ARC_REG_R17: Type = 23;
    pub const ARC_REG_R18: Type = 24;
    pub const ARC_REG_R19: Type = 25;
    pub const ARC_REG_R20: Type = 26;
    pub const ARC_REG_R21: Type = 27;
    pub const ARC_REG_R22: Type = 28;
    pub const ARC_REG_R23: Type = 29;
    pub const ARC_REG_R24: Type = 30;
    pub const ARC_REG_R25: Type = 31;
    pub const ARC_REG_R30: Type = 32;
    pub const ARC_REG_R32: Type = 33;
    pub const ARC_REG_R33: Type = 34;
    pub const ARC_REG_R34: Type = 35;
    pub const ARC_REG_R35: Type = 36;
    pub const ARC_REG_R36: Type = 37;
    pub const ARC_REG_R37: Type = 38;
    pub const ARC_REG_R38: Type = 39;
    pub const ARC_REG_R39: Type = 40;
    pub const ARC_REG_R40: Type = 41;
    pub const ARC_REG_R41: Type = 42;
    pub const ARC_REG_R42: Type = 43;
    pub const ARC_REG_R43: Type = 44;
    pub const ARC_REG_R44: Type = 45;
    pub const ARC_REG_R45: Type = 46;
    pub const ARC_REG_R46: Type = 47;
    pub const ARC_REG_R47: Type = 48;
    pub const ARC_REG_R48: Type = 49;
    pub const ARC_REG_R49: Type = 50;
    pub const ARC_REG_R50: Type = 51;
    pub const ARC_REG_R51: Type = 52;
    pub const ARC_REG_R52: Type = 53;
    pub const ARC_REG_R53: Type = 54;
    pub const ARC_REG_R54: Type = 55;
    pub const ARC_REG_R55: Type = 56;
    pub const ARC_REG_R56: Type = 57;
    pub const ARC_REG_R57: Type = 58;
    pub const ARC_REG_R58: Type = 59;
    pub const ARC_REG_R59: Type = 60;
    pub const ARC_REG_R60: Type = 61;
    pub const ARC_REG_R61: Type = 62;
    pub const ARC_REG_R62: Type = 63;
    pub const ARC_REG_R63: Type = 64;
    pub const ARC_REG_STATUS32: Type = 65;
    pub const ARC_REG_ENDING: Type = 66;
}
#[repr(u32)]
#[doc = " ARC instruction"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum arc_insn {
    ARC_INS_INVALID = 0,
    ARC_INS_h = 1,
    ARC_INS_PBR = 2,
    ARC_INS_ERROR_FLS = 3,
    ARC_INS_ERROR_FFS = 4,
    ARC_INS_PLDFI = 5,
    ARC_INS_STB_FAR = 6,
    ARC_INS_STH_FAR = 7,
    ARC_INS_ST_FAR = 8,
    ARC_INS_ADC = 9,
    ARC_INS_ADC_F = 10,
    ARC_INS_ADD_S = 11,
    ARC_INS_ADD = 12,
    ARC_INS_ADD_F = 13,
    ARC_INS_AND = 14,
    ARC_INS_AND_F = 15,
    ARC_INS_ASL_S = 16,
    ARC_INS_ASL = 17,
    ARC_INS_ASL_F = 18,
    ARC_INS_ASR_S = 19,
    ARC_INS_ASR = 20,
    ARC_INS_ASR_F = 21,
    ARC_INS_BCLR_S = 22,
    ARC_INS_BEQ_S = 23,
    ARC_INS_BGE_S = 24,
    ARC_INS_BGT_S = 25,
    ARC_INS_BHI_S = 26,
    ARC_INS_BHS_S = 27,
    ARC_INS_BL = 28,
    ARC_INS_BLE_S = 29,
    ARC_INS_BLO_S = 30,
    ARC_INS_BLS_S = 31,
    ARC_INS_BLT_S = 32,
    ARC_INS_BL_S = 33,
    ARC_INS_BMSK_S = 34,
    ARC_INS_BNE_S = 35,
    ARC_INS_B = 36,
    ARC_INS_BREQ_S = 37,
    ARC_INS_BRNE_S = 38,
    ARC_INS_BR = 39,
    ARC_INS_BSET_S = 40,
    ARC_INS_BTST_S = 41,
    ARC_INS_B_S = 42,
    ARC_INS_CMP_S = 43,
    ARC_INS_CMP = 44,
    ARC_INS_LD_S = 45,
    ARC_INS_MOV_S = 46,
    ARC_INS_EI_S = 47,
    ARC_INS_ENTER_S = 48,
    ARC_INS_FFS_F = 49,
    ARC_INS_FFS = 50,
    ARC_INS_FLS_F = 51,
    ARC_INS_FLS = 52,
    ARC_INS_ABS_S = 53,
    ARC_INS_ADD1_S = 54,
    ARC_INS_ADD2_S = 55,
    ARC_INS_ADD3_S = 56,
    ARC_INS_AND_S = 57,
    ARC_INS_BIC_S = 58,
    ARC_INS_BRK_S = 59,
    ARC_INS_EXTB_S = 60,
    ARC_INS_EXTH_S = 61,
    ARC_INS_JEQ_S = 62,
    ARC_INS_JL_S = 63,
    ARC_INS_JL_S_D = 64,
    ARC_INS_JNE_S = 65,
    ARC_INS_J_S = 66,
    ARC_INS_J_S_D = 67,
    ARC_INS_LSR_S = 68,
    ARC_INS_MPYUW_S = 69,
    ARC_INS_MPYW_S = 70,
    ARC_INS_MPY_S = 71,
    ARC_INS_NEG_S = 72,
    ARC_INS_NOP_S = 73,
    ARC_INS_NOT_S = 74,
    ARC_INS_OR_S = 75,
    ARC_INS_SEXB_S = 76,
    ARC_INS_SEXH_S = 77,
    ARC_INS_SUB_S = 78,
    ARC_INS_SUB_S_NE = 79,
    ARC_INS_SWI_S = 80,
    ARC_INS_TRAP_S = 81,
    ARC_INS_TST_S = 82,
    ARC_INS_UNIMP_S = 83,
    ARC_INS_XOR_S = 84,
    ARC_INS_LDB_S = 85,
    ARC_INS_LDH_S = 86,
    ARC_INS_J = 87,
    ARC_INS_JL = 88,
    ARC_INS_JLI_S = 89,
    ARC_INS_LDB_AB = 90,
    ARC_INS_LDB_AW = 91,
    ARC_INS_LDB_DI_AB = 92,
    ARC_INS_LDB_DI_AW = 93,
    ARC_INS_LDB_DI = 94,
    ARC_INS_LDB_X_AB = 95,
    ARC_INS_LDB_X_AW = 96,
    ARC_INS_LDB_X_DI_AB = 97,
    ARC_INS_LDB_X_DI_AW = 98,
    ARC_INS_LDB_X_DI = 99,
    ARC_INS_LDB_X = 100,
    ARC_INS_LDB = 101,
    ARC_INS_LDH_AB = 102,
    ARC_INS_LDH_AW = 103,
    ARC_INS_LDH_DI_AB = 104,
    ARC_INS_LDH_DI_AW = 105,
    ARC_INS_LDH_DI = 106,
    ARC_INS_LDH_S_X = 107,
    ARC_INS_LDH_X_AB = 108,
    ARC_INS_LDH_X_AW = 109,
    ARC_INS_LDH_X_DI_AB = 110,
    ARC_INS_LDH_X_DI_AW = 111,
    ARC_INS_LDH_X_DI = 112,
    ARC_INS_LDH_X = 113,
    ARC_INS_LDH = 114,
    ARC_INS_LDI_S = 115,
    ARC_INS_LD_AB = 116,
    ARC_INS_LD_AW = 117,
    ARC_INS_LD_DI_AB = 118,
    ARC_INS_LD_DI_AW = 119,
    ARC_INS_LD_DI = 120,
    ARC_INS_LD_S_AS = 121,
    ARC_INS_LD = 122,
    ARC_INS_LEAVE_S = 123,
    ARC_INS_LR = 124,
    ARC_INS_LSR = 125,
    ARC_INS_LSR_F = 126,
    ARC_INS_MAX = 127,
    ARC_INS_MAX_F = 128,
    ARC_INS_MIN = 129,
    ARC_INS_MIN_F = 130,
    ARC_INS_MOV_S_NE = 131,
    ARC_INS_MOV = 132,
    ARC_INS_MOV_F = 133,
    ARC_INS_MPYMU = 134,
    ARC_INS_MPYMU_F = 135,
    ARC_INS_MPYM = 136,
    ARC_INS_MPYM_F = 137,
    ARC_INS_MPY = 138,
    ARC_INS_MPY_F = 139,
    ARC_INS_NORMH_F = 140,
    ARC_INS_NORMH = 141,
    ARC_INS_NORM_F = 142,
    ARC_INS_NORM = 143,
    ARC_INS_OR = 144,
    ARC_INS_OR_F = 145,
    ARC_INS_POP_S = 146,
    ARC_INS_PUSH_S = 147,
    ARC_INS_ROR = 148,
    ARC_INS_ROR_F = 149,
    ARC_INS_RSUB = 150,
    ARC_INS_RSUB_F = 151,
    ARC_INS_SBC = 152,
    ARC_INS_SBC_F = 153,
    ARC_INS_SETEQ = 154,
    ARC_INS_SETEQ_F = 155,
    ARC_INS_SEXB_F = 156,
    ARC_INS_SEXB = 157,
    ARC_INS_SEXH_F = 158,
    ARC_INS_SEXH = 159,
    ARC_INS_STB_S = 160,
    ARC_INS_ST_S = 161,
    ARC_INS_STB_AB = 162,
    ARC_INS_STB_AW = 163,
    ARC_INS_STB_DI_AB = 164,
    ARC_INS_STB_DI_AW = 165,
    ARC_INS_STB_DI = 166,
    ARC_INS_STB = 167,
    ARC_INS_STH_AB = 168,
    ARC_INS_STH_AW = 169,
    ARC_INS_STH_DI_AB = 170,
    ARC_INS_STH_DI_AW = 171,
    ARC_INS_STH_DI = 172,
    ARC_INS_STH_S = 173,
    ARC_INS_STH = 174,
    ARC_INS_ST_AB = 175,
    ARC_INS_ST_AW = 176,
    ARC_INS_ST_DI_AB = 177,
    ARC_INS_ST_DI_AW = 178,
    ARC_INS_ST_DI = 179,
    ARC_INS_ST = 180,
    ARC_INS_SUB1 = 181,
    ARC_INS_SUB1_F = 182,
    ARC_INS_SUB2 = 183,
    ARC_INS_SUB2_F = 184,
    ARC_INS_SUB3 = 185,
    ARC_INS_SUB3_F = 186,
    ARC_INS_SUB = 187,
    ARC_INS_SUB_F = 188,
    ARC_INS_XOR = 189,
    ARC_INS_XOR_F = 190,
}
pub mod arc_insn_group {
    pub type Type = libc::c_uint;
    #[doc = "< = CS_GRP_INVALID"]
    pub const ARC_GRP_INVALID: Type = 0;
    #[doc = "< = CS_GRP_JUMP"]
    pub const ARC_GRP_JUMP: Type = 1;
    #[doc = "< = CS_GRP_CALL"]
    pub const ARC_GRP_CALL: Type = 2;
    #[doc = "< = CS_GRP_RET"]
    pub const ARC_GRP_RET: Type = 3;
    #[doc = "< = CS_GRP_BRANCH_RELATIVE"]
    pub const ARC_GRP_BRANCH_RELATIVE: Type = 4;
    pub const ARC_GRP_ENDING: Type = 5;
}
#[doc = " NOTE: All information in cs_detail is only available when CS_OPT_DETAIL = CS_OPT_ON\n Initialized as memset(., 0, offsetof(cs_detail, ARCH)+sizeof(cs_ARCH))\n by ARCH_getInstruction in arch/ARCH/ARCHDisassembler.c\n if cs_detail changes, in particular if a field is added after the union,\n then update arch/ARCH/ARCHDisassembler.c accordingly"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_detail {
    pub regs_read: [u16; 20usize],
    #[doc = "< number of implicit registers read by this insn"]
    pub regs_read_count: u8,
    pub regs_write: [u16; 47usize],
    #[doc = "< number of implicit registers modified by this insn"]
    pub regs_write_count: u8,
    #[doc = "< list of group this instruction belong to"]
    pub groups: [u8; 16usize],
    #[doc = "< number of groups this insn belongs to"]
    pub groups_count: u8,
    #[doc = "< Instruction has writeback operands."]
    pub writeback: bool,
    pub __bindgen_anon_1: cs_detail__bindgen_ty_1,
}
#[doc = " Architecture-specific instruction info"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_detail__bindgen_ty_1 {
    #[doc = "< X86 architecture, including 16-bit, 32-bit & 64-bit mode"]
    pub x86: cs_x86,
    #[doc = "< AArch6464 architecture (aka ARM64)"]
    pub aarch64: cs_aarch64,
    #[doc = "< SystemZ architecture (aka SysZ)"]
    pub systemz: cs_systemz,
    #[doc = "< ARM architecture (including Thumb/Thumb2)"]
    pub arm: cs_arm,
    #[doc = "< M68K architecture"]
    pub m68k: cs_m68k,
    #[doc = "< MIPS architecture"]
    pub mips: cs_mips,
    #[doc = "< PowerPC architecture"]
    pub ppc: cs_ppc,
    #[doc = "< Sparc architecture"]
    pub sparc: cs_sparc,
    #[doc = "< XCore architecture"]
    pub xcore: cs_xcore,
    #[doc = "< TMS320C64x architecture"]
    pub tms320c64x: cs_tms320c64x,
    #[doc = "< M680X architecture"]
    pub m680x: cs_m680x,
    #[doc = "< Ethereum architecture"]
    pub evm: cs_evm,
    #[doc = "< MOS65XX architecture (including MOS6502)"]
    pub mos65xx: cs_mos65xx,
    #[doc = "< Web Assembly architecture"]
    pub wasm: cs_wasm,
    #[doc = "< Berkeley Packet Filter architecture (including eBPF)"]
    pub bpf: cs_bpf,
    #[doc = "< RISCV architecture"]
    pub riscv: cs_riscv,
    #[doc = "< SH architecture"]
    pub sh: cs_sh,
    #[doc = "< TriCore architecture"]
    pub tricore: cs_tricore,
    #[doc = "< Alpha architecture"]
    pub alpha: cs_alpha,
    #[doc = "< HPPA architecture"]
    pub hppa: cs_hppa,
    #[doc = "< LoongArch architecture"]
    pub loongarch: cs_loongarch,
    #[doc = "< Xtensa architecture"]
    pub xtensa: cs_xtensa,
    #[doc = "< ARC architecture"]
    pub arc: cs_arc,
}
impl ::core::fmt::Debug for cs_detail__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "cs_detail__bindgen_ty_1 {{ union }}")
    }
}
impl ::core::fmt::Debug for cs_detail {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "cs_detail {{ regs_read: {:?}, regs_write: [...], groups: {:?}, writeback: {:?}, __bindgen_anon_1: {:?} }}" , self . regs_read , self . groups , self . writeback , self . __bindgen_anon_1)
    }
}
#[doc = " Detail information of disassembled instruction"]
#[repr(C)]
pub struct cs_insn {
    #[doc = " Instruction ID (basically a numeric ID for the instruction mnemonic)\n Find the instruction id in the '[ARCH]_insn' enum in the header file\n of corresponding architecture, such as 'arm_insn' in arm.h for ARM,\n 'x86_insn' in x86.h for X86, etc...\n This information is available even when CS_OPT_DETAIL = CS_OPT_OFF\n NOTE: in Skipdata mode, \"data\" instruction has 0 for this id field."]
    pub id: libc::c_uint,
    #[doc = " If this instruction is an alias instruction, this member is set with\n the alias ID.\n Otherwise to <ARCH>_INS_INVALID.\n -- Only supported by auto-sync archs --"]
    pub alias_id: u64,
    #[doc = " Address (EIP) of this instruction\n This information is available even when CS_OPT_DETAIL = CS_OPT_OFF"]
    pub address: u64,
    #[doc = " Size of this instruction\n This information is available even when CS_OPT_DETAIL = CS_OPT_OFF"]
    pub size: u16,
    #[doc = " Machine bytes of this instruction, with number of bytes indicated by @size above\n This information is available even when CS_OPT_DETAIL = CS_OPT_OFF"]
    pub bytes: [u8; 24usize],
    #[doc = " Ascii text of instruction mnemonic\n This information is available even when CS_OPT_DETAIL = CS_OPT_OFF"]
    pub mnemonic: [libc::c_char; 32usize],
    #[doc = " Ascii text of instruction operands\n This information is available even when CS_OPT_DETAIL = CS_OPT_OFF"]
    pub op_str: [libc::c_char; 160usize],
    #[doc = " True: This instruction is an alias.\n False: Otherwise.\n -- Only supported by auto-sync archs --"]
    pub is_alias: bool,
    #[doc = " True: The operands are the ones of the alias instructions.\n False: The detail operands are from the real instruction."]
    pub usesAliasDetails: bool,
    #[doc = " Pointer to cs_detail.\n NOTE: detail pointer is only valid when both requirements below are met:\n (1) CS_OP_DETAIL = CS_OPT_ON\n (2) Engine is not in Skipdata mode (CS_OP_SKIPDATA option set to CS_OPT_ON)\n\n NOTE 2: when in Skipdata mode, or when detail mode is OFF, even if this pointer\n     is not NULL, its content is still irrelevant."]
    pub detail: *mut cs_detail,
}
impl ::core::fmt::Debug for cs_insn {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "cs_insn {{ id: {:?}, bytes: {:?}, mnemonic: [...], op_str: [...], is_alias: {:?}, usesAliasDetails: {:?}, detail: {:?} }}" , self . id , self . bytes , self . is_alias , self . usesAliasDetails , self . detail)
    }
}
pub mod cs_err {
    #[doc = " All type of errors encountered by Capstone API.\n These are values returned by cs_errno()"]
    pub type Type = libc::c_uint;
    #[doc = "< No error: everything was fine"]
    pub const CS_ERR_OK: Type = 0;
    #[doc = "< Out-Of-Memory error: cs_open(), cs_disasm(), cs_disasm_iter()"]
    pub const CS_ERR_MEM: Type = 1;
    #[doc = "< Unsupported architecture: cs_open()"]
    pub const CS_ERR_ARCH: Type = 2;
    #[doc = "< Invalid handle: cs_op_count(), cs_op_index()"]
    pub const CS_ERR_HANDLE: Type = 3;
    #[doc = "< Invalid csh argument: cs_close(), cs_errno(), cs_option()"]
    pub const CS_ERR_CSH: Type = 4;
    #[doc = "< Invalid/unsupported mode: cs_open()"]
    pub const CS_ERR_MODE: Type = 5;
    #[doc = "< Invalid/unsupported option: cs_option()"]
    pub const CS_ERR_OPTION: Type = 6;
    #[doc = "< Information is unavailable because detail option is OFF"]
    pub const CS_ERR_DETAIL: Type = 7;
    #[doc = "< Dynamic memory management uninitialized (see CS_OPT_MEM)"]
    pub const CS_ERR_MEMSETUP: Type = 8;
    #[doc = "< Unsupported version (bindings)"]
    pub const CS_ERR_VERSION: Type = 9;
    #[doc = "< Access irrelevant data in \"diet\" engine"]
    pub const CS_ERR_DIET: Type = 10;
    #[doc = "< Access irrelevant data for \"data\" instruction in SKIPDATA mode"]
    pub const CS_ERR_SKIPDATA: Type = 11;
    #[doc = "< X86 AT&T syntax is unsupported (opt-out at compile time)"]
    pub const CS_ERR_X86_ATT: Type = 12;
    #[doc = "< X86 Intel syntax is unsupported (opt-out at compile time)"]
    pub const CS_ERR_X86_INTEL: Type = 13;
    #[doc = "< X86 Masm syntax is unsupported (opt-out at compile time)"]
    pub const CS_ERR_X86_MASM: Type = 14;
}
extern "C" {
    #[doc = "Return combined API version & major and minor version numbers.\n\n@major: major number of API version\n@minor: minor number of API version\n\n@return hexical number as (major << 8 | minor), which encodes both\nmajor & minor versions.\nNOTE: This returned value can be compared with version number made\nwith macro CS_MAKE_VERSION\n\nFor example, second API version would return 1 in @major, and 1 in @minor\nThe return value would be 0x0101\n\nNOTE: if you only care about returned value, but not major and minor values,\nset both @major & @minor arguments to NULL."]
    pub fn cs_version(major: *mut libc::c_int, minor: *mut libc::c_int) -> libc::c_uint;
}
extern "C" {
    pub fn cs_arch_register_arm();
}
extern "C" {
    pub fn cs_arch_register_aarch64();
}
extern "C" {
    pub fn cs_arch_register_mips();
}
extern "C" {
    pub fn cs_arch_register_x86();
}
extern "C" {
    pub fn cs_arch_register_powerpc();
}
extern "C" {
    pub fn cs_arch_register_sparc();
}
extern "C" {
    pub fn cs_arch_register_systemz();
}
extern "C" {
    pub fn cs_arch_register_xcore();
}
extern "C" {
    pub fn cs_arch_register_m68k();
}
extern "C" {
    pub fn cs_arch_register_tms320c64x();
}
extern "C" {
    pub fn cs_arch_register_m680x();
}
extern "C" {
    pub fn cs_arch_register_evm();
}
extern "C" {
    pub fn cs_arch_register_mos65xx();
}
extern "C" {
    pub fn cs_arch_register_wasm();
}
extern "C" {
    pub fn cs_arch_register_bpf();
}
extern "C" {
    pub fn cs_arch_register_riscv();
}
extern "C" {
    pub fn cs_arch_register_sh();
}
extern "C" {
    pub fn cs_arch_register_tricore();
}
extern "C" {
    pub fn cs_arch_register_alpha();
}
extern "C" {
    pub fn cs_arch_register_loongarch();
}
extern "C" {
    pub fn cs_arch_register_arc();
}
extern "C" {
    #[doc = "This API can be used to either ask for archs supported by this library,\nor check to see if the library was compile with 'diet' option (or called\nin 'diet' mode).\n\nTo check if a particular arch is supported by this library, set @query to\narch mode (CS_ARCH_* value).\nTo verify if this library supports all the archs, use CS_ARCH_ALL.\n\nTo check if this library is in 'diet' mode, set @query to CS_SUPPORT_DIET.\n\n@return True if this library supports the given arch, or in 'diet' mode."]
    pub fn cs_support(query: libc::c_int) -> bool;
}
extern "C" {
    #[doc = "Initialize CS handle: this must be done before any usage of CS.\n\n@arch: architecture type (CS_ARCH_*)\n@mode: hardware mode. This is combined of CS_MODE_*\n@handle: pointer to handle, which will be updated at return time\n\n@return CS_ERR_OK on success, or other value on failure (refer to cs_err enum\nfor detailed error)."]
    pub fn cs_open(arch: cs_arch, mode: cs_mode, handle: *mut csh) -> cs_err::Type;
}
extern "C" {
    #[doc = "Close CS handle: MUST do to release the handle when it is not used anymore.\nNOTE: this must be only called when there is no longer usage of Capstone,\nnot even access to cs_insn array. The reason is the this API releases some\ncached memory, thus access to any Capstone API after cs_close() might crash\nyour application.\n\nIn fact,this API invalidate @handle by ZERO out its value (i.e *handle = 0).\n\n@handle: pointer to a handle returned by cs_open()\n\n@return CS_ERR_OK on success, or other value on failure (refer to cs_err enum\nfor detailed error)."]
    pub fn cs_close(handle: *mut csh) -> cs_err::Type;
}
extern "C" {
    #[doc = "Set option for disassembling engine at runtime\n\n@handle: handle returned by cs_open()\n@type: type of option to be set\n@value: option value corresponding with @type\n\n@return: CS_ERR_OK on success, or other value on failure.\nRefer to cs_err enum for detailed error.\n\nNOTE: in the case of CS_OPT_MEM, handle's value can be anything,\nso that cs_option(handle, CS_OPT_MEM, value) can (i.e must) be called\neven before cs_open()"]
    pub fn cs_option(handle: csh, type_: cs_opt_type, value: usize) -> cs_err::Type;
}
extern "C" {
    #[doc = "Report the last error number when some API function fail.\nLike glibc's errno, cs_errno might not retain its old value once accessed.\n\n@handle: handle returned by cs_open()\n\n@return: error code of cs_err enum type (CS_ERR_*, see above)"]
    pub fn cs_errno(handle: csh) -> cs_err::Type;
}
extern "C" {
    #[doc = "Return a string describing given error code.\n\n@code: error code (see CS_ERR_* above)\n\n@return: returns a pointer to a string that describes the error code\npassed in the argument @code"]
    pub fn cs_strerror(code: cs_err::Type) -> *const libc::c_char;
}
extern "C" {
    #[doc = "Disassemble binary code, given the code buffer, size, address and number\nof instructions to be decoded.\nThis API dynamically allocate memory to contain disassembled instruction.\nResulting instructions will be put into @*insn\n\nNOTE 1: this API will automatically determine memory needed to contain\noutput disassembled instructions in @insn.\n\nNOTE 2: caller must free the allocated memory itself to avoid memory leaking.\n\nNOTE 3: for system with scarce memory to be dynamically allocated such as\nOS kernel or firmware, the API cs_disasm_iter() might be a better choice than\ncs_disasm(). The reason is that with cs_disasm(), based on limited available\nmemory, we have to calculate in advance how many instructions to be disassembled,\nwhich complicates things. This is especially troublesome for the case @count=0,\nwhen cs_disasm() runs uncontrollably (until either end of input buffer, or\nwhen it encounters an invalid instruction).\n\n@handle: handle returned by cs_open()\n@code: buffer containing raw binary code to be disassembled.\n@code_size: size of the above code buffer.\n@address: address of the first instruction in given raw code buffer.\n@insn: array of instructions filled in by this API.\nNOTE: @insn will be allocated by this function, and should be freed\nwith cs_free() API.\n@count: number of instructions to be disassembled, or 0 to get all of them\n\n@return: the number of successfully disassembled instructions,\nor 0 if this function failed to disassemble the given code\n\nOn failure, call cs_errno() for error code."]
    pub fn cs_disasm(
        handle: csh,
        code: *const u8,
        code_size: usize,
        address: u64,
        count: usize,
        insn: *mut *mut cs_insn,
    ) -> usize;
}
extern "C" {
    #[doc = "Free memory allocated by cs_malloc() or cs_disasm() (argument @insn)\n\n@insn: pointer returned by @insn argument in cs_disasm() or cs_malloc()\n@count: number of cs_insn structures returned by cs_disasm(), or 1\nto free memory allocated by cs_malloc()."]
    pub fn cs_free(insn: *mut cs_insn, count: usize);
}
extern "C" {
    #[doc = "Allocate memory for 1 instruction to be used by cs_disasm_iter().\n\n@handle: handle returned by cs_open()\n\nNOTE: when no longer in use, you can reclaim the memory allocated for\nthis instruction with cs_free(insn, 1)"]
    pub fn cs_malloc(handle: csh) -> *mut cs_insn;
}
extern "C" {
    #[doc = "Fast API to disassemble binary code, given the code buffer, size, address\nand number of instructions to be decoded.\nThis API puts the resulting instruction into a given cache in @insn.\nSee tests/test_iter.c for sample code demonstrating this API.\n\nNOTE 1: this API will update @code, @size & @address to point to the next\ninstruction in the input buffer. Therefore, it is convenient to use\ncs_disasm_iter() inside a loop to quickly iterate all the instructions.\nWhile decoding one instruction at a time can also be achieved with\ncs_disasm(count=1), some benchmarks shown that cs_disasm_iter() can be 30%\nfaster on random input.\n\nNOTE 2: the cache in @insn can be created with cs_malloc() API.\n\nNOTE 3: for system with scarce memory to be dynamically allocated such as\nOS kernel or firmware, this API is recommended over cs_disasm(), which\nallocates memory based on the number of instructions to be disassembled.\nThe reason is that with cs_disasm(), based on limited available memory,\nwe have to calculate in advance how many instructions to be disassembled,\nwhich complicates things. This is especially troublesome for the case\n@count=0, when cs_disasm() runs uncontrollably (until either end of input\nbuffer, or when it encounters an invalid instruction).\n\n@handle: handle returned by cs_open()\n@code: buffer containing raw binary code to be disassembled\n@size: size of above code\n@address: address of the first insn in given raw code buffer\n@insn: pointer to instruction to be filled in by this API.\n\n@return: true if this API successfully decode 1 instruction,\nor false otherwise.\n\nOn failure, call cs_errno() for error code."]
    pub fn cs_disasm_iter(
        handle: csh,
        code: *mut *const u8,
        size: *mut usize,
        address: *mut u64,
        insn: *mut cs_insn,
    ) -> bool;
}
extern "C" {
    #[doc = "Return friendly name of register in a string.\nFind the instruction id from header file of corresponding architecture (arm.h for ARM,\nx86.h for X86, ...)\n\nWARN: when in 'diet' mode, this API is irrelevant because engine does not\nstore register name.\n\n@handle: handle returned by cs_open()\n@reg_id: register id\n\n@return: string name of the register, or NULL if @reg_id is invalid."]
    pub fn cs_reg_name(handle: csh, reg_id: libc::c_uint) -> *const libc::c_char;
}
extern "C" {
    #[doc = "Return friendly name of an instruction in a string.\nFind the instruction id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)\n\nWARN: when in 'diet' mode, this API is irrelevant because the engine does not\nstore instruction name.\n\n@handle: handle returned by cs_open()\n@insn_id: instruction id\n\n@return: string name of the instruction, or NULL if @insn_id is invalid."]
    pub fn cs_insn_name(handle: csh, insn_id: libc::c_uint) -> *const libc::c_char;
}
extern "C" {
    #[doc = "Return friendly name of a group id (that an instruction can belong to)\nFind the group id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)\n\nWARN: when in 'diet' mode, this API is irrelevant because the engine does not\nstore group name.\n\n@handle: handle returned by cs_open()\n@group_id: group id\n\n@return: string name of the group, or NULL if @group_id is invalid."]
    pub fn cs_group_name(handle: csh, group_id: libc::c_uint) -> *const libc::c_char;
}
extern "C" {
    #[doc = "Check if a disassembled instruction belong to a particular group.\nFind the group id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)\nInternally, this simply verifies if @group_id matches any member of insn->groups array.\n\nNOTE: this API is only valid when detail option is ON (which is OFF by default).\n\nWARN: when in 'diet' mode, this API is irrelevant because the engine does not\nupdate @groups array.\n\n@handle: handle returned by cs_open()\n@insn: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()\n@group_id: group that you want to check if this instruction belong to.\n\n@return: true if this instruction indeed belongs to the given group, or false otherwise."]
    pub fn cs_insn_group(handle: csh, insn: *const cs_insn, group_id: libc::c_uint) -> bool;
}
extern "C" {
    #[doc = "Check if a disassembled instruction IMPLICITLY used a particular register.\nFind the register id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)\nInternally, this simply verifies if @reg_id matches any member of insn->regs_read array.\n\nNOTE: this API is only valid when detail option is ON (which is OFF by default)\n\nWARN: when in 'diet' mode, this API is irrelevant because the engine does not\nupdate @regs_read array.\n\n@insn: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()\n@reg_id: register that you want to check if this instruction used it.\n\n@return: true if this instruction indeed implicitly used the given register, or false otherwise."]
    pub fn cs_reg_read(handle: csh, insn: *const cs_insn, reg_id: libc::c_uint) -> bool;
}
extern "C" {
    #[doc = "Check if a disassembled instruction IMPLICITLY modified a particular register.\nFind the register id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)\nInternally, this simply verifies if @reg_id matches any member of insn->regs_write array.\n\nNOTE: this API is only valid when detail option is ON (which is OFF by default)\n\nWARN: when in 'diet' mode, this API is irrelevant because the engine does not\nupdate @regs_write array.\n\n@insn: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()\n@reg_id: register that you want to check if this instruction modified it.\n\n@return: true if this instruction indeed implicitly modified the given register, or false otherwise."]
    pub fn cs_reg_write(handle: csh, insn: *const cs_insn, reg_id: libc::c_uint) -> bool;
}
extern "C" {
    #[doc = "Count the number of operands of a given type.\nFind the operand type in header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)\n\nNOTE: this API is only valid when detail option is ON (which is OFF by default)\n\n@handle: handle returned by cs_open()\n@insn: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()\n@op_type: Operand type to be found.\n\n@return: number of operands of given type @op_type in instruction @insn,\nor -1 on failure."]
    pub fn cs_op_count(handle: csh, insn: *const cs_insn, op_type: libc::c_uint) -> libc::c_int;
}
extern "C" {
    #[doc = "Retrieve the position of operand of given type in <arch>.operands[] array.\nLater, the operand can be accessed using the returned position.\nFind the operand type in header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)\n\nNOTE: this API is only valid when detail option is ON (which is OFF by default)\n\n@handle: handle returned by cs_open()\n@insn: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()\n@op_type: Operand type to be found.\n@position: position of the operand to be found. This must be in the range\n[1, cs_op_count(handle, insn, op_type)]\n\n@return: index of operand of given type @op_type in <arch>.operands[] array\nin instruction @insn, or -1 on failure."]
    pub fn cs_op_index(
        handle: csh,
        insn: *const cs_insn,
        op_type: libc::c_uint,
        position: libc::c_uint,
    ) -> libc::c_int;
}
#[doc = " Type of array to keep the list of registers"]
pub type cs_regs = [u16; 64usize];
extern "C" {
    #[doc = "Retrieve all the registers accessed by an instruction, either explicitly or\nimplicitly.\n\nWARN: when in 'diet' mode, this API is irrelevant because engine does not\nstore registers.\n\n@handle: handle returned by cs_open()\n@insn: disassembled instruction structure returned from cs_disasm() or cs_disasm_iter()\n@regs_read: on return, this array contains all registers read by instruction.\n@regs_read_count: number of registers kept inside @regs_read array.\n@regs_write: on return, this array contains all registers written by instruction.\n@regs_write_count: number of registers kept inside @regs_write array.\n\n@return CS_ERR_OK on success, or other value on failure (refer to cs_err enum\nfor detailed error)."]
    pub fn cs_regs_access(
        handle: csh,
        insn: *const cs_insn,
        regs_read: *mut cs_regs,
        regs_read_count: *mut u8,
        regs_write: *mut cs_regs,
        regs_write_count: *mut u8,
    ) -> cs_err::Type;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: libc::c_uint,
    pub fp_offset: libc::c_uint,
    pub overflow_arg_area: *mut libc::c_void,
    pub reg_save_area: *mut libc::c_void,
}
